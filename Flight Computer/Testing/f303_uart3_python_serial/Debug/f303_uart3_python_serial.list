
f303_uart3_python_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c80  08003c80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c80  08003c80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c80  08003c80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000070  08003cf8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08003cf8  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b0  00000000  00000000  0002877a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd19  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008596  00000000  00000000  0004a7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c07f1  00000000  00000000  00052d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db8  00000000  00000000  001135bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ad0 	.word	0x08003ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003ad0 	.word	0x08003ad0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0e8      	sub	sp, #416	; 0x1a0
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fba1 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f929 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f9e7 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 f985 	bl	80005b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80002a6:	f000 f9b3 	bl	8000610 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float altitudes[100];
  uint32_t counter = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_Status_GPIO_Port, LED_Status_Pin);
 80002b0:	2108      	movs	r1, #8
 80002b2:	481c      	ldr	r0, [pc, #112]	; (8000324 <main+0x94>)
 80002b4:	f000 fea4 	bl	8001000 <HAL_GPIO_TogglePin>
	  if (counter == sizeof(altitudes) - 1)
 80002b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80002bc:	f240 128f 	movw	r2, #399	; 0x18f
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d102      	bne.n	80002ca <main+0x3a>
	  		  counter = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	  float pressure, temperature;
	  get_pressure(&pressure);
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f830 	bl	8000334 <get_pressure>
	  get_temperature(&temperature);
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f89a 	bl	8000410 <get_temperature>
//	  altitudes[counter++] = pressure;

	  // debug
	  sprintf((char *)msg, "pressure = %lu\ttemperature = %d\n", (uint32_t) pressure, (int16_t) temperature);
 80002dc:	f107 0308 	add.w	r3, r7, #8
 80002e0:	edd3 7a00 	vldr	s15, [r3]
 80002e4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	edd3 7a00 	vldr	s15, [r3]
 80002ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002f2:	ee17 3a90 	vmov	r3, s15
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	ee17 2a10 	vmov	r2, s14
 80002fc:	490a      	ldr	r1, [pc, #40]	; (8000328 <main+0x98>)
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <main+0x9c>)
 8000300:	f002 ff2a 	bl	8003158 <siprintf>
	  HAL_UART_Transmit(&huart2, msg, strlen((char const *)msg), 5000);
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <main+0x9c>)
 8000306:	f7ff ff6b 	bl	80001e0 <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	b29a      	uxth	r2, r3
 800030e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000312:	4906      	ldr	r1, [pc, #24]	; (800032c <main+0x9c>)
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <main+0xa0>)
 8000316:	f002 fa45 	bl	80027a4 <HAL_UART_Transmit>


	  HAL_Delay(1000);
 800031a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031e:	f000 fbc3 	bl	8000aa8 <HAL_Delay>
  {
 8000322:	e7c5      	b.n	80002b0 <main+0x20>
 8000324:	48000800 	.word	0x48000800
 8000328:	08003ae8 	.word	0x08003ae8
 800032c:	20000094 	.word	0x20000094
 8000330:	2000050c 	.word	0x2000050c

08000334 <get_pressure>:
  }
  /* USER CODE END 3 */
}


void get_pressure(float *pressure) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	; 0x30
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	// first need to transmit a '0\n'
	// so that the script knows to send altitude value
	uint8_t startMessage[] = "0\n";
 800033c:	4a31      	ldr	r2, [pc, #196]	; (8000404 <get_pressure+0xd0>)
 800033e:	f107 031c 	add.w	r3, r7, #28
 8000342:	6812      	ldr	r2, [r2, #0]
 8000344:	4611      	mov	r1, r2
 8000346:	8019      	strh	r1, [r3, #0]
 8000348:	3302      	adds	r3, #2
 800034a:	0c12      	lsrs	r2, r2, #16
 800034c:	701a      	strb	r2, [r3, #0]
	#ifdef DEBUG_MODE
	  sprintf((char *)msg, "---------- ENTERED get_pressure ----------\nstartMessage = \n");
	  HAL_UART_Transmit(&huart3, msg, strlen((char const *)msg), 100);
	#endif

	uint32_t timeout = 1000;
 800034e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000352:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(&huart3, startMessage, sizeof(startMessage), timeout);
 8000354:	f107 011c 	add.w	r1, r7, #28
 8000358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035a:	2203      	movs	r2, #3
 800035c:	482a      	ldr	r0, [pc, #168]	; (8000408 <get_pressure+0xd4>)
 800035e:	f002 fa21 	bl	80027a4 <HAL_UART_Transmit>

	// now receive input from script
	uint16_t max_loop_count = 10;
 8000362:	230a      	movs	r3, #10
 8000364:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t loop_count = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint8_t rxBuf[10]; // buffer of 10 chars
	uint8_t rxCurrent; // current receive char
	uint8_t rxIndex = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	int done = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
	while (loop_count < max_loop_count && !done) {
 8000374:	e03b      	b.n	80003ee <get_pressure+0xba>
		HAL_UART_Receive(&huart3, (uint8_t*) &rxCurrent, 1, timeout);
 8000376:	f107 010f 	add.w	r1, r7, #15
 800037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800037c:	2201      	movs	r2, #1
 800037e:	4822      	ldr	r0, [pc, #136]	; (8000408 <get_pressure+0xd4>)
 8000380:	f002 faa4 	bl	80028cc <HAL_UART_Receive>
		if (rxCurrent != '\n' && rxIndex < sizeof(rxBuf)) {
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d00f      	beq.n	80003aa <get_pressure+0x76>
 800038a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800038e:	2b09      	cmp	r3, #9
 8000390:	d80b      	bhi.n	80003aa <get_pressure+0x76>
			rxBuf[rxIndex++] = rxCurrent;
 8000392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800039c:	7bfa      	ldrb	r2, [r7, #15]
 800039e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80003a2:	440b      	add	r3, r1
 80003a4:	f803 2c20 	strb.w	r2, [r3, #-32]
 80003a8:	e01a      	b.n	80003e0 <get_pressure+0xac>
		} else {
			// convert to uint32_t as data_raw_pressure
			data_raw_pressure = (uint32_t) (atoi((char *) rxBuf));
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fe9b 	bl	80030ea <atoi>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <get_pressure+0xd8>)
 80003ba:	601a      	str	r2, [r3, #0]
			*pressure = (float) data_raw_pressure;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <get_pressure+0xd8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	ee07 3a90 	vmov	s15, r3
 80003c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	edc3 7a00 	vstr	s15, [r3]
			memset(rxBuf, 0, sizeof(rxBuf));
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	220a      	movs	r2, #10
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 feb6 	bl	8003148 <memset>
			done = 1;
 80003dc:	2301      	movs	r3, #1
 80003de:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		__HAL_UART_CLEAR_FLAG(&huart3, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <get_pressure+0xd4>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	220f      	movs	r2, #15
 80003e6:	621a      	str	r2, [r3, #32]
		loop_count++;
 80003e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80003ea:	3301      	adds	r3, #1
 80003ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (loop_count < max_loop_count && !done) {
 80003ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d202      	bcs.n	80003fc <get_pressure+0xc8>
 80003f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0bc      	beq.n	8000376 <get_pressure+0x42>
	}
#ifdef DEBUG_MODE
	sprintf((char *)msg, "in pressure = %lu\n", (uint32_t) data_raw_pressure);
	HAL_UART_Transmit(&huart2, msg, strlen((char const *)msg), 5000);
#endif
}
 80003fc:	bf00      	nop
 80003fe:	3730      	adds	r7, #48	; 0x30
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08003b0c 	.word	0x08003b0c
 8000408:	20000488 	.word	0x20000488
 800040c:	2000008c 	.word	0x2000008c

08000410 <get_temperature>:
 * separately to emulate FC V2 code as closely as possible.
 *
 * The only changes are to the start message (use 1 instead of 0) and the
 * variable that the result gets stored to.
 */
void get_temperature(float *temperature) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b08c      	sub	sp, #48	; 0x30
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	// first need to transmit a '1\n'
	// so that the script knows to send a temperature value
	uint8_t startMessage[] = "1\n";
 8000418:	4a32      	ldr	r2, [pc, #200]	; (80004e4 <get_temperature+0xd4>)
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	4611      	mov	r1, r2
 8000422:	8019      	strh	r1, [r3, #0]
 8000424:	3302      	adds	r3, #2
 8000426:	0c12      	lsrs	r2, r2, #16
 8000428:	701a      	strb	r2, [r3, #0]
	#ifdef DEBUG_MODE
	  sprintf((char *)msg, "---------- ENTERED get_temperature ----------\nstartMessage = \n");
	  HAL_UART_Transmit(&huart3, msg, strlen((char const *)msg), 100);
	#endif

	uint32_t timeout = 1000;
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(&huart3, startMessage, sizeof(startMessage), timeout);
 8000430:	f107 011c 	add.w	r1, r7, #28
 8000434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000436:	2203      	movs	r2, #3
 8000438:	482b      	ldr	r0, [pc, #172]	; (80004e8 <get_temperature+0xd8>)
 800043a:	f002 f9b3 	bl	80027a4 <HAL_UART_Transmit>

	// now receive input from script
	uint16_t max_loop_count = 10;
 800043e:	230a      	movs	r3, #10
 8000440:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t loop_count = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint8_t rxBuf[10]; // buffer of 10 chars
	uint8_t rxCurrent; // current receive char
	uint8_t rxIndex = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	int done = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (loop_count < max_loop_count && !done) {
 8000450:	e03c      	b.n	80004cc <get_temperature+0xbc>
		HAL_UART_Receive(&huart3, (uint8_t*) &rxCurrent, 1, timeout);
 8000452:	f107 010f 	add.w	r1, r7, #15
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	2201      	movs	r2, #1
 800045a:	4823      	ldr	r0, [pc, #140]	; (80004e8 <get_temperature+0xd8>)
 800045c:	f002 fa36 	bl	80028cc <HAL_UART_Receive>
		if (rxCurrent != '\n' && rxIndex < sizeof(rxBuf)) {
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	2b0a      	cmp	r3, #10
 8000464:	d00f      	beq.n	8000486 <get_temperature+0x76>
 8000466:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800046a:	2b09      	cmp	r3, #9
 800046c:	d80b      	bhi.n	8000486 <get_temperature+0x76>
			rxBuf[rxIndex++] = rxCurrent;
 800046e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8000478:	7bfa      	ldrb	r2, [r7, #15]
 800047a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800047e:	440b      	add	r3, r1
 8000480:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000484:	e01b      	b.n	80004be <get_temperature+0xae>
		} else {
			// convert to uint32_t as data_raw_pressure
			data_raw_temperature = (int16_t) (atoi((char *) rxBuf));
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fe2d 	bl	80030ea <atoi>
 8000490:	4603      	mov	r3, r0
 8000492:	b21a      	sxth	r2, r3
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <get_temperature+0xdc>)
 8000496:	801a      	strh	r2, [r3, #0]
			//*temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
//			*temperature = (float) (data_raw_temperature / 100.0f);
			*temperature = (float) data_raw_temperature;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <get_temperature+0xdc>)
 800049a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800049e:	ee07 3a90 	vmov	s15, r3
 80004a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	edc3 7a00 	vstr	s15, [r3]
			memset(rxBuf, 0, sizeof(rxBuf));
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	220a      	movs	r2, #10
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fe47 	bl	8003148 <memset>
			done = 1;
 80004ba:	2301      	movs	r3, #1
 80004bc:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		__HAL_UART_CLEAR_FLAG(&huart3, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <get_temperature+0xd8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	220f      	movs	r2, #15
 80004c4:	621a      	str	r2, [r3, #32]
		loop_count++;
 80004c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80004c8:	3301      	adds	r3, #1
 80004ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (loop_count < max_loop_count && !done) {
 80004cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80004ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d202      	bcs.n	80004da <get_temperature+0xca>
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0bb      	beq.n	8000452 <get_temperature+0x42>
	}
#ifdef DEBUG_MODE
	sprintf((char *)msg, "in temperature = %d\n", (int16_t) data_raw_pressure);
	HAL_UART_Transmit(&huart2, msg, strlen((char const *)msg), 5000);
#endif
}
 80004da:	bf00      	nop
 80004dc:	3730      	adds	r7, #48	; 0x30
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	08003b10 	.word	0x08003b10
 80004e8:	20000488 	.word	0x20000488
 80004ec:	20000090 	.word	0x20000090

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a6      	sub	sp, #152	; 0x98
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004fa:	2228      	movs	r2, #40	; 0x28
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fe22 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2258      	movs	r2, #88	; 0x58
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fe14 	bl	8003148 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2310      	movs	r3, #16
 800052a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800053c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fd70 	bl	8001034 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800055a:	f000 f903 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fc70 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000586:	f000 f8ed 	bl	8000764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800058a:	2306      	movs	r3, #6
 800058c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe97 	bl	80022cc <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005a4:	f000 f8de 	bl	8000764 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3798      	adds	r7, #152	; 0x98
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_USART2_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x58>)
 80005f4:	f002 f888 	bl	8002708 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f8b1 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000050c 	.word	0x2000050c
 800060c:	40004400 	.word	0x40004400

08000610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART3_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART3_UART_Init+0x58>)
 800061c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART3_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART3_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART3_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART3_UART_Init+0x58>)
 8000654:	f002 f858 	bl	8002708 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f881 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000488 	.word	0x20000488
 800066c:	40004800 	.word	0x40004800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0xe8>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <MX_GPIO_Init+0xe8>)
 800068c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0xe8>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2108      	movs	r1, #8
 80006ea:	481c      	ldr	r0, [pc, #112]	; (800075c <MX_GPIO_Init+0xec>)
 80006ec:	f000 fc70 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fc6a 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_GPIO_Init+0xf0>)
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0xec>)
 8000712:	f000 fad3 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 8000716:	2308      	movs	r3, #8
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_GPIO_Init+0xec>)
 800072e:	f000 fac5 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000732:	2320      	movs	r3, #32
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fab6 	bl	8000cbc <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800
 8000760:	10210000 	.word	0x10210000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a6:	2007      	movs	r0, #7
 80007a8:	f000 fa54 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <HAL_UART_MspInit+0xdc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d129      	bne.n	800082e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <HAL_UART_MspInit+0xe0>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <HAL_UART_MspInit+0xe0>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <HAL_UART_MspInit+0xe0>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <HAL_UART_MspInit+0xe0>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <HAL_UART_MspInit+0xe0>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <HAL_UART_MspInit+0xe0>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080a:	230c      	movs	r3, #12
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081a:	2307      	movs	r3, #7
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 fa48 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800082c:	e02d      	b.n	800088a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a1a      	ldr	r2, [pc, #104]	; (800089c <HAL_UART_MspInit+0xe4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d128      	bne.n	800088a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_UART_MspInit+0xe0>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <HAL_UART_MspInit+0xe0>)
 800083e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000842:	61d3      	str	r3, [r2, #28]
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_UART_MspInit+0xe0>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_UART_MspInit+0xe0>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <HAL_UART_MspInit+0xe0>)
 8000856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800085a:	6153      	str	r3, [r2, #20]
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_UART_MspInit+0xe0>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000868:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800087a:	2307      	movs	r3, #7
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <HAL_UART_MspInit+0xe8>)
 8000886:	f000 fa19 	bl	8000cbc <HAL_GPIO_Init>
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004400 	.word	0x40004400
 8000898:	40021000 	.word	0x40021000
 800089c:	40004800 	.word	0x40004800
 80008a0:	48000400 	.word	0x48000400

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8ba 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f002 fbe4 	bl	80030f4 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20010000 	.word	0x20010000
 8000958:	00000400 	.word	0x00000400
 800095c:	2000047c 	.word	0x2000047c
 8000960:	200005a8 	.word	0x200005a8

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 fba3 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ba:	f7ff fc69 	bl	8000290 <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009cc:	08003c88 	.word	0x08003c88
  ldr r2, =_sbss
 80009d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009d4:	200005a4 	.word	0x200005a4

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x28>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f931 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f808 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff feba 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x54>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f93b 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d80a      	bhi.n	8000a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f911 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000590 	.word	0x20000590

08000a90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000590 	.word	0x20000590

08000aa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff ffee 	bl	8000a90 <HAL_GetTick>
 8000ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d005      	beq.n	8000ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_Delay+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ace:	bf00      	nop
 8000ad0:	f7ff ffde 	bl	8000a90 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8f7      	bhi.n	8000ad0 <HAL_Delay+0x28>
  {
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff47 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff5c 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffb0 	bl	8000c10 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e160      	b.n	8000f8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8152 	beq.w	8000f88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d00b      	beq.n	8000d04 <HAL_GPIO_Init+0x48>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	2b11      	cmp	r3, #17
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	f003 0201 	and.w	r2, r3, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0xea>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80ac 	beq.w	8000f88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a5d      	ldr	r2, [pc, #372]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a59      	ldr	r2, [pc, #356]	; (8000fb0 <HAL_GPIO_Init+0x2f4>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e72:	d025      	beq.n	8000ec0 <HAL_GPIO_Init+0x204>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x2f8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d01f      	beq.n	8000ebc <HAL_GPIO_Init+0x200>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x2fc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d019      	beq.n	8000eb8 <HAL_GPIO_Init+0x1fc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x300>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d013      	beq.n	8000eb4 <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00d      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x308>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d007      	beq.n	8000eac <HAL_GPIO_Init+0x1f0>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	e00c      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	e00a      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000eac:	2305      	movs	r3, #5
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed2:	4937      	ldr	r1, [pc, #220]	; (8000fb0 <HAL_GPIO_Init+0x2f4>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f04:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_GPIO_Init+0x310>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f47f ae97 	bne.w	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	48001000 	.word	0x48001000
 8000fc4:	48001400 	.word	0x48001400
 8000fc8:	48001800 	.word	0x48001800
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43d9      	mvns	r1, r3
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	400b      	ands	r3, r1
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800103a:	af00      	add	r7, sp, #0
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	f000 bf01 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8160 	beq.w	800131e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105e:	4bae      	ldr	r3, [pc, #696]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b04      	cmp	r3, #4
 8001068:	d00c      	beq.n	8001084 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106a:	4bab      	ldr	r3, [pc, #684]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d159      	bne.n	800112a <HAL_RCC_OscConfig+0xf6>
 8001076:	4ba8      	ldr	r3, [pc, #672]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001082:	d152      	bne.n	800112a <HAL_RCC_OscConfig+0xf6>
 8001084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001088:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001098:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d102      	bne.n	80010b6 <HAL_RCC_OscConfig+0x82>
 80010b0:	4b99      	ldr	r3, [pc, #612]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0xae>
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010de:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010ea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f002 021f 	and.w	r2, r2, #31
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8102 	beq.w	800131c <HAL_RCC_OscConfig+0x2e8>
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80fc 	bne.w	800131c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	f000 be93 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d106      	bne.n	8001144 <HAL_RCC_OscConfig+0x110>
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a77      	ldr	r2, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e030      	b.n	80011a6 <HAL_RCC_OscConfig+0x172>
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x134>
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01e      	b.n	80011a6 <HAL_RCC_OscConfig+0x172>
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x15a>
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800117a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e00b      	b.n	80011a6 <HAL_RCC_OscConfig+0x172>
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a61      	ldr	r2, [pc, #388]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a5e      	ldr	r2, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d059      	beq.n	8001264 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc6e 	bl	8000a90 <HAL_GetTick>
 80011b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fc69 	bl	8000a90 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 be40 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
 80011d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x1ce>
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x1fa>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800121e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001232:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001236:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001242:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f042 0220 	orr.w	r2, r2, #32
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f002 021f 	and.w	r2, r2, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ab      	beq.n	80011ba <HAL_RCC_OscConfig+0x186>
 8001262:	e05c      	b.n	800131e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc14 	bl	8000a90 <HAL_GetTick>
 8001268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126e:	f7ff fc0f 	bl	8000a90 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d902      	bls.n	8001284 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	f000 bde6 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001288:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001298:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_OscConfig+0x282>
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x2ae>
 80012b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_RCC_OscConfig+0x2e4>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012e6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012ea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ab      	bne.n	800126e <HAL_RCC_OscConfig+0x23a>
 8001316:	e002      	b.n	800131e <HAL_RCC_OscConfig+0x2ea>
 8001318:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8170 	beq.w	800160e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800132e:	4bd0      	ldr	r3, [pc, #832]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133a:	4bcd      	ldr	r3, [pc, #820]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d16d      	bne.n	8001422 <HAL_RCC_OscConfig+0x3ee>
 8001346:	4bca      	ldr	r3, [pc, #808]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800134e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001352:	d166      	bne.n	8001422 <HAL_RCC_OscConfig+0x3ee>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001366:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x350>
 800137e:	4bbc      	ldr	r3, [pc, #752]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	e013      	b.n	80013ac <HAL_RCC_OscConfig+0x378>
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800139c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013a8:	4bb1      	ldr	r3, [pc, #708]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2202      	movs	r2, #2
 80013ae:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013b2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013b6:	fa92 f2a2 	rbit	r2, r2
 80013ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013c2:	fab2 f282 	clz	r2, r2
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	f042 0220 	orr.w	r2, r2, #32
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f002 021f 	and.w	r2, r2, #31
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_RCC_OscConfig+0x3ba>
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d002      	beq.n	80013ee <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f000 bd31 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	21f8      	movs	r1, #248	; 0xf8
 80013fe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001406:	fa91 f1a1 	rbit	r1, r1
 800140a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800140e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001412:	fab1 f181 	clz	r1, r1
 8001416:	b2c9      	uxtb	r1, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	4995      	ldr	r1, [pc, #596]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001420:	e0f5      	b.n	800160e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8085 	beq.w	8001538 <HAL_RCC_OscConfig+0x504>
 800142e:	2301      	movs	r3, #1
 8001430:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001440:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800144e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	2301      	movs	r3, #1
 8001458:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb19 	bl	8000a90 <HAL_GetTick>
 800145e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fb14 	bl	8000a90 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d902      	bls.n	800147a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	f000 bceb 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800148c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <HAL_RCC_OscConfig+0x476>
 80014a4:	4b72      	ldr	r3, [pc, #456]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	e013      	b.n	80014d2 <HAL_RCC_OscConfig+0x49e>
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014ce:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	2202      	movs	r2, #2
 80014d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014dc:	fa92 f2a2 	rbit	r2, r2
 80014e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014e8:	fab2 f282 	clz	r2, r2
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f002 021f 	and.w	r2, r2, #31
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0af      	beq.n	8001464 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	21f8      	movs	r1, #248	; 0xf8
 8001514:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800151c:	fa91 f1a1 	rbit	r1, r1
 8001520:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001524:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001528:	fab1 f181 	clz	r1, r1
 800152c:	b2c9      	uxtb	r1, r1
 800152e:	408b      	lsls	r3, r1
 8001530:	494f      	ldr	r1, [pc, #316]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e06a      	b.n	800160e <HAL_RCC_OscConfig+0x5da>
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800154a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001558:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	461a      	mov	r2, r3
 8001560:	2300      	movs	r3, #0
 8001562:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fa94 	bl	8000a90 <HAL_GetTick>
 8001568:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fa8f 	bl	8000a90 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d902      	bls.n	8001584 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	f000 bc66 	b.w	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001596:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_OscConfig+0x580>
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e013      	b.n	80015dc <HAL_RCC_OscConfig+0x5a8>
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x63c>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	2202      	movs	r2, #2
 80015de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015e6:	fa92 f2a2 	rbit	r2, r2
 80015ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80015ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015f2:	fab2 f282 	clz	r2, r2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f002 021f 	and.w	r2, r2, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1af      	bne.n	800156e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80da 	beq.w	80017d2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d069      	beq.n	80016fc <HAL_RCC_OscConfig+0x6c8>
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800163a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x640>)
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	461a      	mov	r2, r3
 800164e:	2301      	movs	r3, #1
 8001650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fa1d 	bl	8000a90 <HAL_GetTick>
 8001656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e00d      	b.n	8001678 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fa18 	bl	8000a90 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d905      	bls.n	8001678 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e3ef      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001670:	40021000 	.word	0x40021000
 8001674:	10908120 	.word	0x10908120
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016bc:	4ba4      	ldr	r3, [pc, #656]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016c4:	2102      	movs	r1, #2
 80016c6:	6019      	str	r1, [r3, #0]
 80016c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f1a3 	rbit	r1, r3
 80016d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016d6:	6019      	str	r1, [r3, #0]
  return result;
 80016d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0b0      	beq.n	800165c <HAL_RCC_OscConfig+0x628>
 80016fa:	e06a      	b.n	80017d2 <HAL_RCC_OscConfig+0x79e>
 80016fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001712:	601a      	str	r2, [r3, #0]
  return result;
 8001714:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001718:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x920>)
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	461a      	mov	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff f9af 	bl	8000a90 <HAL_GetTick>
 8001732:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001736:	e009      	b.n	800174c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff f9aa 	bl	8000a90 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e381      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 800174c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001792:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800179c:	2102      	movs	r1, #2
 800179e:	6019      	str	r1, [r3, #0]
 80017a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f1a3 	rbit	r1, r3
 80017aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017ae:	6019      	str	r1, [r3, #0]
  return result;
 80017b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1b2      	bne.n	8001738 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8157 	beq.w	8001a90 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	61d3      	str	r3, [r2, #28]
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001814:	2301      	movs	r3, #1
 8001816:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <HAL_RCC_OscConfig+0x924>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x924>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4b      	ldr	r2, [pc, #300]	; (8001958 <HAL_RCC_OscConfig+0x924>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f92d 	bl	8000a90 <HAL_GetTick>
 8001836:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	e009      	b.n	8001850 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7ff f928 	bl	8000a90 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e2ff      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x924>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x840>
 8001866:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a39      	ldr	r2, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e02f      	b.n	80018d4 <HAL_RCC_OscConfig+0x8a0>
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x864>
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0x8a0>
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x888>
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x8a0>
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff f8d7 	bl	8000a90 <HAL_GetTick>
 80018e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff f8d2 	bl	8000a90 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e2a7      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001900:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001934:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	095b      	lsrs	r3, r3, #5
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x928>
 800194a:	4b01      	ldr	r3, [pc, #4]	; (8001950 <HAL_RCC_OscConfig+0x91c>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	e013      	b.n	8001978 <HAL_RCC_OscConfig+0x944>
 8001950:	40021000 	.word	0x40021000
 8001954:	10908120 	.word	0x10908120
 8001958:	40007000 	.word	0x40007000
 800195c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4bc0      	ldr	r3, [pc, #768]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800197c:	2102      	movs	r1, #2
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fa92 f1a2 	rbit	r1, r2
 800198a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800198e:	6011      	str	r1, [r2, #0]
  return result;
 8001990:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d09a      	beq.n	80018e8 <HAL_RCC_OscConfig+0x8b4>
 80019b2:	e063      	b.n	8001a7c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f86c 	bl	8000a90 <HAL_GetTick>
 80019b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f867 	bl	8000a90 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e23c      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 80019d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_OscConfig+0x9f2>
 8001a20:	4b95      	ldr	r3, [pc, #596]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	e00d      	b.n	8001a42 <HAL_RCC_OscConfig+0xa0e>
 8001a26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a46:	2102      	movs	r1, #2
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fa92 f1a2 	rbit	r1, r2
 8001a54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a58:	6011      	str	r1, [r2, #0]
  return result;
 8001a5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1a0      	bne.n	80019be <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 81d9 	beq.w	8001e4e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f000 81a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 811e 	bne.w	8001cf2 <HAL_RCC_OscConfig+0xcbe>
 8001ab6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ad4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe ffd0 	bl	8000a90 <HAL_GetTick>
 8001af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe ffcb 	bl	8000a90 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1a2      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001b0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b22:	601a      	str	r2, [r3, #0]
  return result;
 8001b24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0xb10>
 8001b3e:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb48>
 8001b44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b84:	6011      	str	r1, [r2, #0]
 8001b86:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fa92 f1a2 	rbit	r1, r2
 8001b90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b94:	6011      	str	r1, [r2, #0]
  return result;
 8001b96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f042 0220 	orr.w	r2, r2, #32
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 021f 	and.w	r2, r2, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d19e      	bne.n	8001af6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a19      	ldr	r1, [r3, #32]
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	4925      	ldr	r1, [pc, #148]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c00:	601a      	str	r2, [r3, #0]
  return result;
 8001c02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7fe ff37 	bl	8000a90 <HAL_GetTick>
 8001c22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c26:	e009      	b.n	8001c3c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7fe ff32 	bl	8000a90 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e109      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001c3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c54:	601a      	str	r2, [r3, #0]
  return result;
 8001c56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0xc48>
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <HAL_RCC_OscConfig+0xc44>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e01e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xc80>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0xe28>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cbc:	6011      	str	r1, [r2, #0]
 8001cbe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fa92 f1a2 	rbit	r1, r2
 8001cc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ccc:	6011      	str	r1, [r2, #0]
  return result;
 8001cce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d09b      	beq.n	8001c28 <HAL_RCC_OscConfig+0xbf4>
 8001cf0:	e0ad      	b.n	8001e4e <HAL_RCC_OscConfig+0xe1a>
 8001cf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d0a:	601a      	str	r2, [r3, #0]
  return result;
 8001d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe feb2 	bl	8000a90 <HAL_GetTick>
 8001d2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fead 	bl	8000a90 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e084      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	601a      	str	r2, [r3, #0]
  return result;
 8001d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_OscConfig+0xd4c>
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_OscConfig+0xe28>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd84>
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0xe28>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f107 0214 	add.w	r2, r7, #20
 8001dbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc0:	6011      	str	r1, [r2, #0]
 8001dc2:	f107 0214 	add.w	r2, r7, #20
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fa92 f1a2 	rbit	r1, r2
 8001dcc:	f107 0210 	add.w	r2, r7, #16
 8001dd0:	6011      	str	r1, [r2, #0]
  return result;
 8001dd2:	f107 0210 	add.w	r2, r7, #16
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d19e      	bne.n	8001d32 <HAL_RCC_OscConfig+0xcfe>
 8001df4:	e02b      	b.n	8001e4e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e025      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0xe28>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_OscConfig+0xe28>)
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e18:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d111      	bne.n	8001e4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d108      	bne.n	8001e4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09e      	sub	sp, #120	; 0x78
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e162      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	498b      	ldr	r1, [pc, #556]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e14a      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	497f      	ldr	r1, [pc, #508]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80dc 	beq.w	800208c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d13c      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xf6>
 8001edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xa6>
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_RCC_ClockConfig+0xc6>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	667b      	str	r3, [r7, #100]	; 0x64
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	663b      	str	r3, [r7, #96]	; 0x60
 8001f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d17b      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0f3      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d13c      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x178>
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x128>
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
 8001f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f002 021f 	and.w	r2, r2, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13a      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b2      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_ClockConfig+0x1a0>
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e00d      	b.n	800201c <HAL_RCC_ClockConfig+0x1bc>
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	61ba      	str	r2, [r7, #24]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	617a      	str	r2, [r7, #20]
  return result;
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e079      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	491a      	ldr	r1, [pc, #104]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7fe fd18 	bl	8000a90 <HAL_GetTick>
 8002060:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7fe fd14 	bl	8000a90 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e061      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d214      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4906      	ldr	r1, [pc, #24]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e040      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	491a      	ldr	r1, [pc, #104]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002102:	f000 f829 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002106:	4601      	mov	r1, r0
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	22f0      	movs	r2, #240	; 0xf0
 8002112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	60fa      	str	r2, [r7, #12]
  return result;
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	40d3      	lsrs	r3, r2
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x2ec>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x2f0>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x2f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fc66 	bl	8000a08 <HAL_InitTick>
  
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3778      	adds	r7, #120	; 0x78
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	08003b14 	.word	0x08003b14
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e03f      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	e03f      	b.n	800220e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002194:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002198:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	607a      	str	r2, [r7, #4]
  return result;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	220f      	movs	r2, #15
 80021bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	60fa      	str	r2, [r7, #12]
  return result;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e007      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	623b      	str	r3, [r7, #32]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	6a3b      	ldr	r3, [r7, #32]
}
 8002210:	4618      	mov	r0, r3
 8002212:	372c      	adds	r7, #44	; 0x2c
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	08003b2c 	.word	0x08003b2c
 8002228:	08003b3c 	.word	0x08003b3c

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800224a:	f7ff ffef 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224e:	4601      	mov	r1, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002258:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800225c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	603a      	str	r2, [r7, #0]
  return result;
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	40d3      	lsrs	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08003b24 	.word	0x08003b24

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800228e:	f7ff ffcd 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002292:	4601      	mov	r1, r0
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800229c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	fa92 f2a2 	rbit	r2, r2
 80022a8:	603a      	str	r2, [r7, #0]
  return result;
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	40d3      	lsrs	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08003b24 	.word	0x08003b24

080022cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b092      	sub	sp, #72	; 0x48
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80d4 	beq.w	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b4e      	ldr	r3, [pc, #312]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10e      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	61d3      	str	r3, [r2, #28]
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b45      	ldr	r3, [pc, #276]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a41      	ldr	r2, [pc, #260]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe fbad 	bl	8000a90 <HAL_GetTick>
 8002336:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe fba9 	bl	8000a90 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1d6      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8084 	beq.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002374:	429a      	cmp	r2, r3
 8002376:	d07c      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	461a      	mov	r2, r3
 80023a2:	2301      	movs	r3, #1
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	2300      	movs	r3, #0
 80023c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04b      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fb59 	bl	8000a90 <HAL_GetTick>
 80023de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe fb55 	bl	8000a90 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e180      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023f8:	2302      	movs	r3, #2
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	2302      	movs	r3, #2
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	61fb      	str	r3, [r7, #28]
  return result;
 8002410:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d108      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002426:	4b01      	ldr	r3, [pc, #4]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	e00d      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	10908100 	.word	0x10908100
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	4ba0      	ldr	r3, [pc, #640]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2202      	movs	r2, #2
 800244a:	613a      	str	r2, [r7, #16]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	fa92 f2a2 	rbit	r2, r2
 8002452:	60fa      	str	r2, [r7, #12]
  return result;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f002 021f 	and.w	r2, r2, #31
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0b7      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002472:	4b95      	ldr	r3, [pc, #596]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4992      	ldr	r1, [pc, #584]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002484:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a8d      	ldr	r2, [pc, #564]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024a4:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f023 0203 	bic.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4985      	ldr	r1, [pc, #532]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c2:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	497e      	ldr	r1, [pc, #504]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e0:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4976      	ldr	r1, [pc, #472]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f023 0210 	bic.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	496f      	ldr	r1, [pc, #444]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	4967      	ldr	r1, [pc, #412]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f023 0220 	bic.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4960      	ldr	r1, [pc, #384]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002558:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	4958      	ldr	r1, [pc, #352]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002576:	4b54      	ldr	r3, [pc, #336]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4951      	ldr	r1, [pc, #324]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4949      	ldr	r1, [pc, #292]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b2:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4942      	ldr	r1, [pc, #264]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025d0:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	493a      	ldr	r1, [pc, #232]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	4933      	ldr	r1, [pc, #204]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	492b      	ldr	r1, [pc, #172]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4924      	ldr	r1, [pc, #144]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	491c      	ldr	r1, [pc, #112]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	4915      	ldr	r1, [pc, #84]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	490d      	ldr	r1, [pc, #52]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	4906      	ldr	r1, [pc, #24]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026c0:	4b01      	ldr	r3, [pc, #4]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	e002      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	490b      	ldr	r1, [pc, #44]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	4904      	ldr	r1, [pc, #16]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3748      	adds	r7, #72	; 0x48
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e040      	b.n	800279c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe f844 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f992 	bl	8002a70 <UART_SetConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fb5c 	bl	8002e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fbe3 	bl	8002f60 <UART_CheckIdleState>
 800279a:	4603      	mov	r3, r0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 8082 	bne.w	80028c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_Transmit+0x26>
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07a      	b.n	80028c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Transmit+0x38>
 80027d8:	2302      	movs	r3, #2
 80027da:	e073      	b.n	80028c4 <HAL_UART_Transmit+0x120>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2221      	movs	r2, #33	; 0x21
 80027f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe f94d 	bl	8000a90 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002810:	d108      	bne.n	8002824 <HAL_UART_Transmit+0x80>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e003      	b.n	800282c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002834:	e02d      	b.n	8002892 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fbd6 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e039      	b.n	80028c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10b      	bne.n	800286e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002862:	b292      	uxth	r2, r2
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	3302      	adds	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e008      	b.n	8002880 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b292      	uxth	r2, r2
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1cb      	bne.n	8002836 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fba2 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e005      	b.n	80028c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	f040 80bf 	bne.w	8002a64 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_Receive+0x26>
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0b7      	b.n	8002a66 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Receive+0x38>
 8002900:	2302      	movs	r3, #2
 8002902:	e0b0      	b.n	8002a66 <HAL_UART_Receive+0x19a>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2222      	movs	r2, #34	; 0x22
 8002918:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002920:	f7fe f8b6 	bl	8000a90 <HAL_GetTick>
 8002924:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d10e      	bne.n	800295e <HAL_UART_Receive+0x92>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_UART_Receive+0x88>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800294e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002952:	e02d      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	22ff      	movs	r2, #255	; 0xff
 8002958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800295c:	e028      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_UART_Receive+0xb6>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <HAL_UART_Receive+0xac>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002976:	e01b      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	227f      	movs	r2, #127	; 0x7f
 800297c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002980:	e016      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800298a:	d10d      	bne.n	80029a8 <HAL_UART_Receive+0xdc>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_UART_Receive+0xd2>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	227f      	movs	r2, #127	; 0x7f
 8002998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800299c:	e008      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Receive+0xe4>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80029b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Receive+0x108>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80029e4:	e033      	b.n	8002a4e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2120      	movs	r1, #32
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fafe 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e032      	b.n	8002a66 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	8a7b      	ldrh	r3, [r7, #18]
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e00d      	b.n	8002a3c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8a7b      	ldrh	r3, [r7, #18]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1c5      	bne.n	80029e6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4bab      	ldr	r3, [pc, #684]	; (8002d48 <UART_SetConfig+0x2d8>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6979      	ldr	r1, [r7, #20]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a99      	ldr	r2, [pc, #612]	; (8002d4c <UART_SetConfig+0x2dc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d120      	bne.n	8002b2e <UART_SetConfig+0xbe>
 8002aec:	4b98      	ldr	r3, [pc, #608]	; (8002d50 <UART_SetConfig+0x2e0>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d817      	bhi.n	8002b28 <UART_SetConfig+0xb8>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <UART_SetConfig+0x90>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b1d 	.word	0x08002b1d
 8002b08:	08002b23 	.word	0x08002b23
 8002b0c:	08002b17 	.word	0x08002b17
 8002b10:	2301      	movs	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	e0b5      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b16:	2302      	movs	r3, #2
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e0b2      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e0af      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b22:	2308      	movs	r3, #8
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e0ac      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	e0a9      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a88      	ldr	r2, [pc, #544]	; (8002d54 <UART_SetConfig+0x2e4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d124      	bne.n	8002b82 <UART_SetConfig+0x112>
 8002b38:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <UART_SetConfig+0x2e0>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b44:	d011      	beq.n	8002b6a <UART_SetConfig+0xfa>
 8002b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b4a:	d817      	bhi.n	8002b7c <UART_SetConfig+0x10c>
 8002b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b50:	d011      	beq.n	8002b76 <UART_SetConfig+0x106>
 8002b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b56:	d811      	bhi.n	8002b7c <UART_SetConfig+0x10c>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <UART_SetConfig+0xf4>
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b60:	d006      	beq.n	8002b70 <UART_SetConfig+0x100>
 8002b62:	e00b      	b.n	8002b7c <UART_SetConfig+0x10c>
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e08b      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e088      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b70:	2304      	movs	r3, #4
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e085      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b76:	2308      	movs	r3, #8
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e082      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e07f      	b.n	8002c82 <UART_SetConfig+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a74      	ldr	r2, [pc, #464]	; (8002d58 <UART_SetConfig+0x2e8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d124      	bne.n	8002bd6 <UART_SetConfig+0x166>
 8002b8c:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <UART_SetConfig+0x2e0>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b98:	d011      	beq.n	8002bbe <UART_SetConfig+0x14e>
 8002b9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b9e:	d817      	bhi.n	8002bd0 <UART_SetConfig+0x160>
 8002ba0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ba4:	d011      	beq.n	8002bca <UART_SetConfig+0x15a>
 8002ba6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002baa:	d811      	bhi.n	8002bd0 <UART_SetConfig+0x160>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <UART_SetConfig+0x148>
 8002bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb4:	d006      	beq.n	8002bc4 <UART_SetConfig+0x154>
 8002bb6:	e00b      	b.n	8002bd0 <UART_SetConfig+0x160>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e061      	b.n	8002c82 <UART_SetConfig+0x212>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e05e      	b.n	8002c82 <UART_SetConfig+0x212>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e05b      	b.n	8002c82 <UART_SetConfig+0x212>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e058      	b.n	8002c82 <UART_SetConfig+0x212>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e055      	b.n	8002c82 <UART_SetConfig+0x212>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <UART_SetConfig+0x2ec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d124      	bne.n	8002c2a <UART_SetConfig+0x1ba>
 8002be0:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <UART_SetConfig+0x2e0>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bec:	d011      	beq.n	8002c12 <UART_SetConfig+0x1a2>
 8002bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bf2:	d817      	bhi.n	8002c24 <UART_SetConfig+0x1b4>
 8002bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf8:	d011      	beq.n	8002c1e <UART_SetConfig+0x1ae>
 8002bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bfe:	d811      	bhi.n	8002c24 <UART_SetConfig+0x1b4>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <UART_SetConfig+0x19c>
 8002c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c08:	d006      	beq.n	8002c18 <UART_SetConfig+0x1a8>
 8002c0a:	e00b      	b.n	8002c24 <UART_SetConfig+0x1b4>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e037      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c12:	2302      	movs	r3, #2
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e034      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e031      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e02e      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c24:	2310      	movs	r3, #16
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e02b      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <UART_SetConfig+0x2f0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d124      	bne.n	8002c7e <UART_SetConfig+0x20e>
 8002c34:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <UART_SetConfig+0x2e0>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c40:	d011      	beq.n	8002c66 <UART_SetConfig+0x1f6>
 8002c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c46:	d817      	bhi.n	8002c78 <UART_SetConfig+0x208>
 8002c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c4c:	d011      	beq.n	8002c72 <UART_SetConfig+0x202>
 8002c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c52:	d811      	bhi.n	8002c78 <UART_SetConfig+0x208>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <UART_SetConfig+0x1f0>
 8002c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5c:	d006      	beq.n	8002c6c <UART_SetConfig+0x1fc>
 8002c5e:	e00b      	b.n	8002c78 <UART_SetConfig+0x208>
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e00d      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c66:	2302      	movs	r3, #2
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e00a      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e007      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c72:	2308      	movs	r3, #8
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e004      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e001      	b.n	8002c82 <UART_SetConfig+0x212>
 8002c7e:	2310      	movs	r3, #16
 8002c80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	d16d      	bne.n	8002d68 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d827      	bhi.n	8002ce2 <UART_SetConfig+0x272>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <UART_SetConfig+0x228>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002cbd 	.word	0x08002cbd
 8002c9c:	08002cc5 	.word	0x08002cc5
 8002ca0:	08002ccd 	.word	0x08002ccd
 8002ca4:	08002ce3 	.word	0x08002ce3
 8002ca8:	08002cd3 	.word	0x08002cd3
 8002cac:	08002ce3 	.word	0x08002ce3
 8002cb0:	08002ce3 	.word	0x08002ce3
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002cdb 	.word	0x08002cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f7ff fac2 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	61b8      	str	r0, [r7, #24]
        break;
 8002cc2:	e013      	b.n	8002cec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc4:	f7ff fae0 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	61b8      	str	r0, [r7, #24]
        break;
 8002cca:	e00f      	b.n	8002cec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <UART_SetConfig+0x2f4>)
 8002cce:	61bb      	str	r3, [r7, #24]
        break;
 8002cd0:	e00c      	b.n	8002cec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7ff fa41 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002cd6:	61b8      	str	r0, [r7, #24]
        break;
 8002cd8:	e008      	b.n	8002cec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cde:	61bb      	str	r3, [r7, #24]
        break;
 8002ce0:	e004      	b.n	8002cec <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8002cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8086 	beq.w	8002e00 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	005a      	lsls	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	d916      	bls.n	8002d40 <UART_SetConfig+0x2d0>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d212      	bcs.n	8002d40 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f023 030f 	bic.w	r3, r3, #15
 8002d22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	89fa      	ldrh	r2, [r7, #14]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e05f      	b.n	8002e00 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77bb      	strb	r3, [r7, #30]
 8002d44:	e05c      	b.n	8002e00 <UART_SetConfig+0x390>
 8002d46:	bf00      	nop
 8002d48:	efff69f3 	.word	0xefff69f3
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40004400 	.word	0x40004400
 8002d58:	40004800 	.word	0x40004800
 8002d5c:	40004c00 	.word	0x40004c00
 8002d60:	40005000 	.word	0x40005000
 8002d64:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d827      	bhi.n	8002dbe <UART_SetConfig+0x34e>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <UART_SetConfig+0x304>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08002da1 	.word	0x08002da1
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002dbf 	.word	0x08002dbf
 8002d84:	08002daf 	.word	0x08002daf
 8002d88:	08002dbf 	.word	0x08002dbf
 8002d8c:	08002dbf 	.word	0x08002dbf
 8002d90:	08002dbf 	.word	0x08002dbf
 8002d94:	08002db7 	.word	0x08002db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7ff fa54 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	61b8      	str	r0, [r7, #24]
        break;
 8002d9e:	e013      	b.n	8002dc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7ff fa72 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8002da4:	61b8      	str	r0, [r7, #24]
        break;
 8002da6:	e00f      	b.n	8002dc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <UART_SetConfig+0x3a8>)
 8002daa:	61bb      	str	r3, [r7, #24]
        break;
 8002dac:	e00c      	b.n	8002dc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7ff f9d3 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002db2:	61b8      	str	r0, [r7, #24]
        break;
 8002db4:	e008      	b.n	8002dc8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dba:	61bb      	str	r3, [r7, #24]
        break;
 8002dbc:	e004      	b.n	8002dc8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002dc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	085a      	lsrs	r2, r3, #1
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	d908      	bls.n	8002dfc <UART_SetConfig+0x38c>
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d204      	bcs.n	8002dfc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e001      	b.n	8002e00 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	007a1200 	.word	0x007a1200

08002e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01a      	beq.n	8002f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1a:	d10a      	bne.n	8002f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  }
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f70:	f7fd fd8e 	bl	8000a90 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d10e      	bne.n	8002fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f82d 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e023      	b.n	8002fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d10e      	bne.n	8002fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f817 	bl	8002ff2 <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e00d      	b.n	8002fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003002:	e05e      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d05a      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fd fd40 	bl	8000a90 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <UART_WaitOnFlagUntilTimeout+0x30>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11b      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e043      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02c      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	d124      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e00f      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d091      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <atoi>:
 80030ea:	220a      	movs	r2, #10
 80030ec:	2100      	movs	r1, #0
 80030ee:	f000 b8d7 	b.w	80032a0 <strtol>
	...

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4d0d      	ldr	r5, [pc, #52]	; (8003138 <__libc_init_array+0x38>)
 8003104:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	2600      	movs	r6, #0
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	4d0b      	ldr	r5, [pc, #44]	; (8003140 <__libc_init_array+0x40>)
 8003112:	4c0c      	ldr	r4, [pc, #48]	; (8003144 <__libc_init_array+0x44>)
 8003114:	f000 fcdc 	bl	8003ad0 <_init>
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	2600      	movs	r6, #0
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08003c80 	.word	0x08003c80
 800313c:	08003c80 	.word	0x08003c80
 8003140:	08003c80 	.word	0x08003c80
 8003144:	08003c84 	.word	0x08003c84

08003148 <memset>:
 8003148:	4402      	add	r2, r0
 800314a:	4603      	mov	r3, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <siprintf>:
 8003158:	b40e      	push	{r1, r2, r3}
 800315a:	b500      	push	{lr}
 800315c:	b09c      	sub	sp, #112	; 0x70
 800315e:	ab1d      	add	r3, sp, #116	; 0x74
 8003160:	9002      	str	r0, [sp, #8]
 8003162:	9006      	str	r0, [sp, #24]
 8003164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003168:	4809      	ldr	r0, [pc, #36]	; (8003190 <siprintf+0x38>)
 800316a:	9107      	str	r1, [sp, #28]
 800316c:	9104      	str	r1, [sp, #16]
 800316e:	4909      	ldr	r1, [pc, #36]	; (8003194 <siprintf+0x3c>)
 8003170:	f853 2b04 	ldr.w	r2, [r3], #4
 8003174:	9105      	str	r1, [sp, #20]
 8003176:	6800      	ldr	r0, [r0, #0]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	a902      	add	r1, sp, #8
 800317c:	f000 f8f6 	bl	800336c <_svfiprintf_r>
 8003180:	9b02      	ldr	r3, [sp, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	b01c      	add	sp, #112	; 0x70
 8003188:	f85d eb04 	ldr.w	lr, [sp], #4
 800318c:	b003      	add	sp, #12
 800318e:	4770      	bx	lr
 8003190:	2000000c 	.word	0x2000000c
 8003194:	ffff0208 	.word	0xffff0208

08003198 <_strtol_l.isra.0>:
 8003198:	2b01      	cmp	r3, #1
 800319a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800319e:	d001      	beq.n	80031a4 <_strtol_l.isra.0+0xc>
 80031a0:	2b24      	cmp	r3, #36	; 0x24
 80031a2:	d906      	bls.n	80031b2 <_strtol_l.isra.0+0x1a>
 80031a4:	f7ff ffa6 	bl	80030f4 <__errno>
 80031a8:	2316      	movs	r3, #22
 80031aa:	6003      	str	r3, [r0, #0]
 80031ac:	2000      	movs	r0, #0
 80031ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b2:	4f3a      	ldr	r7, [pc, #232]	; (800329c <_strtol_l.isra.0+0x104>)
 80031b4:	468e      	mov	lr, r1
 80031b6:	4676      	mov	r6, lr
 80031b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80031bc:	5de5      	ldrb	r5, [r4, r7]
 80031be:	f015 0508 	ands.w	r5, r5, #8
 80031c2:	d1f8      	bne.n	80031b6 <_strtol_l.isra.0+0x1e>
 80031c4:	2c2d      	cmp	r4, #45	; 0x2d
 80031c6:	d134      	bne.n	8003232 <_strtol_l.isra.0+0x9a>
 80031c8:	f89e 4000 	ldrb.w	r4, [lr]
 80031cc:	f04f 0801 	mov.w	r8, #1
 80031d0:	f106 0e02 	add.w	lr, r6, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05c      	beq.n	8003292 <_strtol_l.isra.0+0xfa>
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d10c      	bne.n	80031f6 <_strtol_l.isra.0+0x5e>
 80031dc:	2c30      	cmp	r4, #48	; 0x30
 80031de:	d10a      	bne.n	80031f6 <_strtol_l.isra.0+0x5e>
 80031e0:	f89e 4000 	ldrb.w	r4, [lr]
 80031e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80031e8:	2c58      	cmp	r4, #88	; 0x58
 80031ea:	d14d      	bne.n	8003288 <_strtol_l.isra.0+0xf0>
 80031ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80031f0:	2310      	movs	r3, #16
 80031f2:	f10e 0e02 	add.w	lr, lr, #2
 80031f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80031fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80031fe:	2600      	movs	r6, #0
 8003200:	fbbc f9f3 	udiv	r9, ip, r3
 8003204:	4635      	mov	r5, r6
 8003206:	fb03 ca19 	mls	sl, r3, r9, ip
 800320a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800320e:	2f09      	cmp	r7, #9
 8003210:	d818      	bhi.n	8003244 <_strtol_l.isra.0+0xac>
 8003212:	463c      	mov	r4, r7
 8003214:	42a3      	cmp	r3, r4
 8003216:	dd24      	ble.n	8003262 <_strtol_l.isra.0+0xca>
 8003218:	2e00      	cmp	r6, #0
 800321a:	db1f      	blt.n	800325c <_strtol_l.isra.0+0xc4>
 800321c:	45a9      	cmp	r9, r5
 800321e:	d31d      	bcc.n	800325c <_strtol_l.isra.0+0xc4>
 8003220:	d101      	bne.n	8003226 <_strtol_l.isra.0+0x8e>
 8003222:	45a2      	cmp	sl, r4
 8003224:	db1a      	blt.n	800325c <_strtol_l.isra.0+0xc4>
 8003226:	fb05 4503 	mla	r5, r5, r3, r4
 800322a:	2601      	movs	r6, #1
 800322c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003230:	e7eb      	b.n	800320a <_strtol_l.isra.0+0x72>
 8003232:	2c2b      	cmp	r4, #43	; 0x2b
 8003234:	bf08      	it	eq
 8003236:	f89e 4000 	ldrbeq.w	r4, [lr]
 800323a:	46a8      	mov	r8, r5
 800323c:	bf08      	it	eq
 800323e:	f106 0e02 	addeq.w	lr, r6, #2
 8003242:	e7c7      	b.n	80031d4 <_strtol_l.isra.0+0x3c>
 8003244:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003248:	2f19      	cmp	r7, #25
 800324a:	d801      	bhi.n	8003250 <_strtol_l.isra.0+0xb8>
 800324c:	3c37      	subs	r4, #55	; 0x37
 800324e:	e7e1      	b.n	8003214 <_strtol_l.isra.0+0x7c>
 8003250:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003254:	2f19      	cmp	r7, #25
 8003256:	d804      	bhi.n	8003262 <_strtol_l.isra.0+0xca>
 8003258:	3c57      	subs	r4, #87	; 0x57
 800325a:	e7db      	b.n	8003214 <_strtol_l.isra.0+0x7c>
 800325c:	f04f 36ff 	mov.w	r6, #4294967295
 8003260:	e7e4      	b.n	800322c <_strtol_l.isra.0+0x94>
 8003262:	2e00      	cmp	r6, #0
 8003264:	da05      	bge.n	8003272 <_strtol_l.isra.0+0xda>
 8003266:	2322      	movs	r3, #34	; 0x22
 8003268:	6003      	str	r3, [r0, #0]
 800326a:	4665      	mov	r5, ip
 800326c:	b942      	cbnz	r2, 8003280 <_strtol_l.isra.0+0xe8>
 800326e:	4628      	mov	r0, r5
 8003270:	e79d      	b.n	80031ae <_strtol_l.isra.0+0x16>
 8003272:	f1b8 0f00 	cmp.w	r8, #0
 8003276:	d000      	beq.n	800327a <_strtol_l.isra.0+0xe2>
 8003278:	426d      	negs	r5, r5
 800327a:	2a00      	cmp	r2, #0
 800327c:	d0f7      	beq.n	800326e <_strtol_l.isra.0+0xd6>
 800327e:	b10e      	cbz	r6, 8003284 <_strtol_l.isra.0+0xec>
 8003280:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	e7f2      	b.n	800326e <_strtol_l.isra.0+0xd6>
 8003288:	2430      	movs	r4, #48	; 0x30
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1b3      	bne.n	80031f6 <_strtol_l.isra.0+0x5e>
 800328e:	2308      	movs	r3, #8
 8003290:	e7b1      	b.n	80031f6 <_strtol_l.isra.0+0x5e>
 8003292:	2c30      	cmp	r4, #48	; 0x30
 8003294:	d0a4      	beq.n	80031e0 <_strtol_l.isra.0+0x48>
 8003296:	230a      	movs	r3, #10
 8003298:	e7ad      	b.n	80031f6 <_strtol_l.isra.0+0x5e>
 800329a:	bf00      	nop
 800329c:	08003b4d 	.word	0x08003b4d

080032a0 <strtol>:
 80032a0:	4613      	mov	r3, r2
 80032a2:	460a      	mov	r2, r1
 80032a4:	4601      	mov	r1, r0
 80032a6:	4802      	ldr	r0, [pc, #8]	; (80032b0 <strtol+0x10>)
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	f7ff bf75 	b.w	8003198 <_strtol_l.isra.0>
 80032ae:	bf00      	nop
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <__ssputs_r>:
 80032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	688e      	ldr	r6, [r1, #8]
 80032ba:	429e      	cmp	r6, r3
 80032bc:	4682      	mov	sl, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	4690      	mov	r8, r2
 80032c2:	461f      	mov	r7, r3
 80032c4:	d838      	bhi.n	8003338 <__ssputs_r+0x84>
 80032c6:	898a      	ldrh	r2, [r1, #12]
 80032c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032cc:	d032      	beq.n	8003334 <__ssputs_r+0x80>
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	6909      	ldr	r1, [r1, #16]
 80032d2:	eba5 0901 	sub.w	r9, r5, r1
 80032d6:	6965      	ldr	r5, [r4, #20]
 80032d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e0:	3301      	adds	r3, #1
 80032e2:	444b      	add	r3, r9
 80032e4:	106d      	asrs	r5, r5, #1
 80032e6:	429d      	cmp	r5, r3
 80032e8:	bf38      	it	cc
 80032ea:	461d      	movcc	r5, r3
 80032ec:	0553      	lsls	r3, r2, #21
 80032ee:	d531      	bpl.n	8003354 <__ssputs_r+0xa0>
 80032f0:	4629      	mov	r1, r5
 80032f2:	f000 fb47 	bl	8003984 <_malloc_r>
 80032f6:	4606      	mov	r6, r0
 80032f8:	b950      	cbnz	r0, 8003310 <__ssputs_r+0x5c>
 80032fa:	230c      	movs	r3, #12
 80032fc:	f8ca 3000 	str.w	r3, [sl]
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	6921      	ldr	r1, [r4, #16]
 8003312:	464a      	mov	r2, r9
 8003314:	f000 fabe 	bl	8003894 <memcpy>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	6126      	str	r6, [r4, #16]
 8003326:	6165      	str	r5, [r4, #20]
 8003328:	444e      	add	r6, r9
 800332a:	eba5 0509 	sub.w	r5, r5, r9
 800332e:	6026      	str	r6, [r4, #0]
 8003330:	60a5      	str	r5, [r4, #8]
 8003332:	463e      	mov	r6, r7
 8003334:	42be      	cmp	r6, r7
 8003336:	d900      	bls.n	800333a <__ssputs_r+0x86>
 8003338:	463e      	mov	r6, r7
 800333a:	4632      	mov	r2, r6
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	4641      	mov	r1, r8
 8003340:	f000 fab6 	bl	80038b0 <memmove>
 8003344:	68a3      	ldr	r3, [r4, #8]
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	1b9b      	subs	r3, r3, r6
 800334a:	4432      	add	r2, r6
 800334c:	60a3      	str	r3, [r4, #8]
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	2000      	movs	r0, #0
 8003352:	e7db      	b.n	800330c <__ssputs_r+0x58>
 8003354:	462a      	mov	r2, r5
 8003356:	f000 fb6f 	bl	8003a38 <_realloc_r>
 800335a:	4606      	mov	r6, r0
 800335c:	2800      	cmp	r0, #0
 800335e:	d1e1      	bne.n	8003324 <__ssputs_r+0x70>
 8003360:	6921      	ldr	r1, [r4, #16]
 8003362:	4650      	mov	r0, sl
 8003364:	f000 fabe 	bl	80038e4 <_free_r>
 8003368:	e7c7      	b.n	80032fa <__ssputs_r+0x46>
	...

0800336c <_svfiprintf_r>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	4698      	mov	r8, r3
 8003372:	898b      	ldrh	r3, [r1, #12]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	b09d      	sub	sp, #116	; 0x74
 8003378:	4607      	mov	r7, r0
 800337a:	460d      	mov	r5, r1
 800337c:	4614      	mov	r4, r2
 800337e:	d50e      	bpl.n	800339e <_svfiprintf_r+0x32>
 8003380:	690b      	ldr	r3, [r1, #16]
 8003382:	b963      	cbnz	r3, 800339e <_svfiprintf_r+0x32>
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	f000 fafd 	bl	8003984 <_malloc_r>
 800338a:	6028      	str	r0, [r5, #0]
 800338c:	6128      	str	r0, [r5, #16]
 800338e:	b920      	cbnz	r0, 800339a <_svfiprintf_r+0x2e>
 8003390:	230c      	movs	r3, #12
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e0d1      	b.n	800353e <_svfiprintf_r+0x1d2>
 800339a:	2340      	movs	r3, #64	; 0x40
 800339c:	616b      	str	r3, [r5, #20]
 800339e:	2300      	movs	r3, #0
 80033a0:	9309      	str	r3, [sp, #36]	; 0x24
 80033a2:	2320      	movs	r3, #32
 80033a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ac:	2330      	movs	r3, #48	; 0x30
 80033ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003558 <_svfiprintf_r+0x1ec>
 80033b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b6:	f04f 0901 	mov.w	r9, #1
 80033ba:	4623      	mov	r3, r4
 80033bc:	469a      	mov	sl, r3
 80033be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c2:	b10a      	cbz	r2, 80033c8 <_svfiprintf_r+0x5c>
 80033c4:	2a25      	cmp	r2, #37	; 0x25
 80033c6:	d1f9      	bne.n	80033bc <_svfiprintf_r+0x50>
 80033c8:	ebba 0b04 	subs.w	fp, sl, r4
 80033cc:	d00b      	beq.n	80033e6 <_svfiprintf_r+0x7a>
 80033ce:	465b      	mov	r3, fp
 80033d0:	4622      	mov	r2, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ff6d 	bl	80032b4 <__ssputs_r>
 80033da:	3001      	adds	r0, #1
 80033dc:	f000 80aa 	beq.w	8003534 <_svfiprintf_r+0x1c8>
 80033e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033e2:	445a      	add	r2, fp
 80033e4:	9209      	str	r2, [sp, #36]	; 0x24
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a2 	beq.w	8003534 <_svfiprintf_r+0x1c8>
 80033f0:	2300      	movs	r3, #0
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033fa:	f10a 0a01 	add.w	sl, sl, #1
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	9307      	str	r3, [sp, #28]
 8003402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003406:	931a      	str	r3, [sp, #104]	; 0x68
 8003408:	4654      	mov	r4, sl
 800340a:	2205      	movs	r2, #5
 800340c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003410:	4851      	ldr	r0, [pc, #324]	; (8003558 <_svfiprintf_r+0x1ec>)
 8003412:	f7fc feed 	bl	80001f0 <memchr>
 8003416:	9a04      	ldr	r2, [sp, #16]
 8003418:	b9d8      	cbnz	r0, 8003452 <_svfiprintf_r+0xe6>
 800341a:	06d0      	lsls	r0, r2, #27
 800341c:	bf44      	itt	mi
 800341e:	2320      	movmi	r3, #32
 8003420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003424:	0711      	lsls	r1, r2, #28
 8003426:	bf44      	itt	mi
 8003428:	232b      	movmi	r3, #43	; 0x2b
 800342a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342e:	f89a 3000 	ldrb.w	r3, [sl]
 8003432:	2b2a      	cmp	r3, #42	; 0x2a
 8003434:	d015      	beq.n	8003462 <_svfiprintf_r+0xf6>
 8003436:	9a07      	ldr	r2, [sp, #28]
 8003438:	4654      	mov	r4, sl
 800343a:	2000      	movs	r0, #0
 800343c:	f04f 0c0a 	mov.w	ip, #10
 8003440:	4621      	mov	r1, r4
 8003442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003446:	3b30      	subs	r3, #48	; 0x30
 8003448:	2b09      	cmp	r3, #9
 800344a:	d94e      	bls.n	80034ea <_svfiprintf_r+0x17e>
 800344c:	b1b0      	cbz	r0, 800347c <_svfiprintf_r+0x110>
 800344e:	9207      	str	r2, [sp, #28]
 8003450:	e014      	b.n	800347c <_svfiprintf_r+0x110>
 8003452:	eba0 0308 	sub.w	r3, r0, r8
 8003456:	fa09 f303 	lsl.w	r3, r9, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	46a2      	mov	sl, r4
 8003460:	e7d2      	b.n	8003408 <_svfiprintf_r+0x9c>
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	1d19      	adds	r1, r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	9103      	str	r1, [sp, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfbb      	ittet	lt
 800346e:	425b      	neglt	r3, r3
 8003470:	f042 0202 	orrlt.w	r2, r2, #2
 8003474:	9307      	strge	r3, [sp, #28]
 8003476:	9307      	strlt	r3, [sp, #28]
 8003478:	bfb8      	it	lt
 800347a:	9204      	strlt	r2, [sp, #16]
 800347c:	7823      	ldrb	r3, [r4, #0]
 800347e:	2b2e      	cmp	r3, #46	; 0x2e
 8003480:	d10c      	bne.n	800349c <_svfiprintf_r+0x130>
 8003482:	7863      	ldrb	r3, [r4, #1]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d135      	bne.n	80034f4 <_svfiprintf_r+0x188>
 8003488:	9b03      	ldr	r3, [sp, #12]
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	9203      	str	r2, [sp, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	bfb8      	it	lt
 8003494:	f04f 33ff 	movlt.w	r3, #4294967295
 8003498:	3402      	adds	r4, #2
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003568 <_svfiprintf_r+0x1fc>
 80034a0:	7821      	ldrb	r1, [r4, #0]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4650      	mov	r0, sl
 80034a6:	f7fc fea3 	bl	80001f0 <memchr>
 80034aa:	b140      	cbz	r0, 80034be <_svfiprintf_r+0x152>
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	eba0 000a 	sub.w	r0, r0, sl
 80034b2:	fa03 f000 	lsl.w	r0, r3, r0
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	4303      	orrs	r3, r0
 80034ba:	3401      	adds	r4, #1
 80034bc:	9304      	str	r3, [sp, #16]
 80034be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c2:	4826      	ldr	r0, [pc, #152]	; (800355c <_svfiprintf_r+0x1f0>)
 80034c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c8:	2206      	movs	r2, #6
 80034ca:	f7fc fe91 	bl	80001f0 <memchr>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d038      	beq.n	8003544 <_svfiprintf_r+0x1d8>
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <_svfiprintf_r+0x1f4>)
 80034d4:	bb1b      	cbnz	r3, 800351e <_svfiprintf_r+0x1b2>
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	3307      	adds	r3, #7
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	3308      	adds	r3, #8
 80034e0:	9303      	str	r3, [sp, #12]
 80034e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e4:	4433      	add	r3, r6
 80034e6:	9309      	str	r3, [sp, #36]	; 0x24
 80034e8:	e767      	b.n	80033ba <_svfiprintf_r+0x4e>
 80034ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ee:	460c      	mov	r4, r1
 80034f0:	2001      	movs	r0, #1
 80034f2:	e7a5      	b.n	8003440 <_svfiprintf_r+0xd4>
 80034f4:	2300      	movs	r3, #0
 80034f6:	3401      	adds	r4, #1
 80034f8:	9305      	str	r3, [sp, #20]
 80034fa:	4619      	mov	r1, r3
 80034fc:	f04f 0c0a 	mov.w	ip, #10
 8003500:	4620      	mov	r0, r4
 8003502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003506:	3a30      	subs	r2, #48	; 0x30
 8003508:	2a09      	cmp	r2, #9
 800350a:	d903      	bls.n	8003514 <_svfiprintf_r+0x1a8>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0c5      	beq.n	800349c <_svfiprintf_r+0x130>
 8003510:	9105      	str	r1, [sp, #20]
 8003512:	e7c3      	b.n	800349c <_svfiprintf_r+0x130>
 8003514:	fb0c 2101 	mla	r1, ip, r1, r2
 8003518:	4604      	mov	r4, r0
 800351a:	2301      	movs	r3, #1
 800351c:	e7f0      	b.n	8003500 <_svfiprintf_r+0x194>
 800351e:	ab03      	add	r3, sp, #12
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	462a      	mov	r2, r5
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <_svfiprintf_r+0x1f8>)
 8003526:	a904      	add	r1, sp, #16
 8003528:	4638      	mov	r0, r7
 800352a:	f3af 8000 	nop.w
 800352e:	1c42      	adds	r2, r0, #1
 8003530:	4606      	mov	r6, r0
 8003532:	d1d6      	bne.n	80034e2 <_svfiprintf_r+0x176>
 8003534:	89ab      	ldrh	r3, [r5, #12]
 8003536:	065b      	lsls	r3, r3, #25
 8003538:	f53f af2c 	bmi.w	8003394 <_svfiprintf_r+0x28>
 800353c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800353e:	b01d      	add	sp, #116	; 0x74
 8003540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	462a      	mov	r2, r5
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_svfiprintf_r+0x1f8>)
 800354c:	a904      	add	r1, sp, #16
 800354e:	4638      	mov	r0, r7
 8003550:	f000 f87a 	bl	8003648 <_printf_i>
 8003554:	e7eb      	b.n	800352e <_svfiprintf_r+0x1c2>
 8003556:	bf00      	nop
 8003558:	08003c4d 	.word	0x08003c4d
 800355c:	08003c57 	.word	0x08003c57
 8003560:	00000000 	.word	0x00000000
 8003564:	080032b5 	.word	0x080032b5
 8003568:	08003c53 	.word	0x08003c53

0800356c <_printf_common>:
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4616      	mov	r6, r2
 8003572:	4699      	mov	r9, r3
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800357c:	4293      	cmp	r3, r2
 800357e:	bfb8      	it	lt
 8003580:	4613      	movlt	r3, r2
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003588:	4607      	mov	r7, r0
 800358a:	460c      	mov	r4, r1
 800358c:	b10a      	cbz	r2, 8003592 <_printf_common+0x26>
 800358e:	3301      	adds	r3, #1
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	0699      	lsls	r1, r3, #26
 8003596:	bf42      	ittt	mi
 8003598:	6833      	ldrmi	r3, [r6, #0]
 800359a:	3302      	addmi	r3, #2
 800359c:	6033      	strmi	r3, [r6, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	f015 0506 	ands.w	r5, r5, #6
 80035a4:	d106      	bne.n	80035b4 <_printf_common+0x48>
 80035a6:	f104 0a19 	add.w	sl, r4, #25
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	6832      	ldr	r2, [r6, #0]
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	42ab      	cmp	r3, r5
 80035b2:	dc26      	bgt.n	8003602 <_printf_common+0x96>
 80035b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b8:	1e13      	subs	r3, r2, #0
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	bf18      	it	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	0692      	lsls	r2, r2, #26
 80035c2:	d42b      	bmi.n	800361c <_printf_common+0xb0>
 80035c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c8:	4649      	mov	r1, r9
 80035ca:	4638      	mov	r0, r7
 80035cc:	47c0      	blx	r8
 80035ce:	3001      	adds	r0, #1
 80035d0:	d01e      	beq.n	8003610 <_printf_common+0xa4>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	68e5      	ldr	r5, [r4, #12]
 80035d6:	6832      	ldr	r2, [r6, #0]
 80035d8:	f003 0306 	and.w	r3, r3, #6
 80035dc:	2b04      	cmp	r3, #4
 80035de:	bf08      	it	eq
 80035e0:	1aad      	subeq	r5, r5, r2
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	bf0c      	ite	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	2500      	movne	r5, #0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	bfc4      	itt	gt
 80035f2:	1a9b      	subgt	r3, r3, r2
 80035f4:	18ed      	addgt	r5, r5, r3
 80035f6:	2600      	movs	r6, #0
 80035f8:	341a      	adds	r4, #26
 80035fa:	42b5      	cmp	r5, r6
 80035fc:	d11a      	bne.n	8003634 <_printf_common+0xc8>
 80035fe:	2000      	movs	r0, #0
 8003600:	e008      	b.n	8003614 <_printf_common+0xa8>
 8003602:	2301      	movs	r3, #1
 8003604:	4652      	mov	r2, sl
 8003606:	4649      	mov	r1, r9
 8003608:	4638      	mov	r0, r7
 800360a:	47c0      	blx	r8
 800360c:	3001      	adds	r0, #1
 800360e:	d103      	bne.n	8003618 <_printf_common+0xac>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	3501      	adds	r5, #1
 800361a:	e7c6      	b.n	80035aa <_printf_common+0x3e>
 800361c:	18e1      	adds	r1, r4, r3
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	2030      	movs	r0, #48	; 0x30
 8003622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003626:	4422      	add	r2, r4
 8003628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800362c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003630:	3302      	adds	r3, #2
 8003632:	e7c7      	b.n	80035c4 <_printf_common+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	4622      	mov	r2, r4
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d0e6      	beq.n	8003610 <_printf_common+0xa4>
 8003642:	3601      	adds	r6, #1
 8003644:	e7d9      	b.n	80035fa <_printf_common+0x8e>
	...

08003648 <_printf_i>:
 8003648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	460c      	mov	r4, r1
 800364e:	4691      	mov	r9, r2
 8003650:	7e27      	ldrb	r7, [r4, #24]
 8003652:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003654:	2f78      	cmp	r7, #120	; 0x78
 8003656:	4680      	mov	r8, r0
 8003658:	469a      	mov	sl, r3
 800365a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800365e:	d807      	bhi.n	8003670 <_printf_i+0x28>
 8003660:	2f62      	cmp	r7, #98	; 0x62
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x32>
 8003664:	2f00      	cmp	r7, #0
 8003666:	f000 80d8 	beq.w	800381a <_printf_i+0x1d2>
 800366a:	2f58      	cmp	r7, #88	; 0x58
 800366c:	f000 80a3 	beq.w	80037b6 <_printf_i+0x16e>
 8003670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003678:	e03a      	b.n	80036f0 <_printf_i+0xa8>
 800367a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800367e:	2b15      	cmp	r3, #21
 8003680:	d8f6      	bhi.n	8003670 <_printf_i+0x28>
 8003682:	a001      	add	r0, pc, #4	; (adr r0, 8003688 <_printf_i+0x40>)
 8003684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036f5 	.word	0x080036f5
 8003690:	08003671 	.word	0x08003671
 8003694:	08003671 	.word	0x08003671
 8003698:	08003671 	.word	0x08003671
 800369c:	08003671 	.word	0x08003671
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003671 	.word	0x08003671
 80036a8:	08003671 	.word	0x08003671
 80036ac:	08003671 	.word	0x08003671
 80036b0:	08003671 	.word	0x08003671
 80036b4:	08003801 	.word	0x08003801
 80036b8:	08003725 	.word	0x08003725
 80036bc:	080037e3 	.word	0x080037e3
 80036c0:	08003671 	.word	0x08003671
 80036c4:	08003671 	.word	0x08003671
 80036c8:	08003823 	.word	0x08003823
 80036cc:	08003671 	.word	0x08003671
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003671 	.word	0x08003671
 80036d8:	08003671 	.word	0x08003671
 80036dc:	080037eb 	.word	0x080037eb
 80036e0:	680b      	ldr	r3, [r1, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	600a      	str	r2, [r1, #0]
 80036e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0a3      	b.n	800383c <_printf_i+0x1f4>
 80036f4:	6825      	ldr	r5, [r4, #0]
 80036f6:	6808      	ldr	r0, [r1, #0]
 80036f8:	062e      	lsls	r6, r5, #24
 80036fa:	f100 0304 	add.w	r3, r0, #4
 80036fe:	d50a      	bpl.n	8003716 <_printf_i+0xce>
 8003700:	6805      	ldr	r5, [r0, #0]
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	2d00      	cmp	r5, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xc8>
 8003708:	232d      	movs	r3, #45	; 0x2d
 800370a:	426d      	negs	r5, r5
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003710:	485e      	ldr	r0, [pc, #376]	; (800388c <_printf_i+0x244>)
 8003712:	230a      	movs	r3, #10
 8003714:	e019      	b.n	800374a <_printf_i+0x102>
 8003716:	f015 0f40 	tst.w	r5, #64	; 0x40
 800371a:	6805      	ldr	r5, [r0, #0]
 800371c:	600b      	str	r3, [r1, #0]
 800371e:	bf18      	it	ne
 8003720:	b22d      	sxthne	r5, r5
 8003722:	e7ef      	b.n	8003704 <_printf_i+0xbc>
 8003724:	680b      	ldr	r3, [r1, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	1d18      	adds	r0, r3, #4
 800372a:	6008      	str	r0, [r1, #0]
 800372c:	0628      	lsls	r0, r5, #24
 800372e:	d501      	bpl.n	8003734 <_printf_i+0xec>
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	e002      	b.n	800373a <_printf_i+0xf2>
 8003734:	0669      	lsls	r1, r5, #25
 8003736:	d5fb      	bpl.n	8003730 <_printf_i+0xe8>
 8003738:	881d      	ldrh	r5, [r3, #0]
 800373a:	4854      	ldr	r0, [pc, #336]	; (800388c <_printf_i+0x244>)
 800373c:	2f6f      	cmp	r7, #111	; 0x6f
 800373e:	bf0c      	ite	eq
 8003740:	2308      	moveq	r3, #8
 8003742:	230a      	movne	r3, #10
 8003744:	2100      	movs	r1, #0
 8003746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800374a:	6866      	ldr	r6, [r4, #4]
 800374c:	60a6      	str	r6, [r4, #8]
 800374e:	2e00      	cmp	r6, #0
 8003750:	bfa2      	ittt	ge
 8003752:	6821      	ldrge	r1, [r4, #0]
 8003754:	f021 0104 	bicge.w	r1, r1, #4
 8003758:	6021      	strge	r1, [r4, #0]
 800375a:	b90d      	cbnz	r5, 8003760 <_printf_i+0x118>
 800375c:	2e00      	cmp	r6, #0
 800375e:	d04d      	beq.n	80037fc <_printf_i+0x1b4>
 8003760:	4616      	mov	r6, r2
 8003762:	fbb5 f1f3 	udiv	r1, r5, r3
 8003766:	fb03 5711 	mls	r7, r3, r1, r5
 800376a:	5dc7      	ldrb	r7, [r0, r7]
 800376c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003770:	462f      	mov	r7, r5
 8003772:	42bb      	cmp	r3, r7
 8003774:	460d      	mov	r5, r1
 8003776:	d9f4      	bls.n	8003762 <_printf_i+0x11a>
 8003778:	2b08      	cmp	r3, #8
 800377a:	d10b      	bne.n	8003794 <_printf_i+0x14c>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	07df      	lsls	r7, r3, #31
 8003780:	d508      	bpl.n	8003794 <_printf_i+0x14c>
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	6861      	ldr	r1, [r4, #4]
 8003786:	4299      	cmp	r1, r3
 8003788:	bfde      	ittt	le
 800378a:	2330      	movle	r3, #48	; 0x30
 800378c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003794:	1b92      	subs	r2, r2, r6
 8003796:	6122      	str	r2, [r4, #16]
 8003798:	f8cd a000 	str.w	sl, [sp]
 800379c:	464b      	mov	r3, r9
 800379e:	aa03      	add	r2, sp, #12
 80037a0:	4621      	mov	r1, r4
 80037a2:	4640      	mov	r0, r8
 80037a4:	f7ff fee2 	bl	800356c <_printf_common>
 80037a8:	3001      	adds	r0, #1
 80037aa:	d14c      	bne.n	8003846 <_printf_i+0x1fe>
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	b004      	add	sp, #16
 80037b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b6:	4835      	ldr	r0, [pc, #212]	; (800388c <_printf_i+0x244>)
 80037b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	680e      	ldr	r6, [r1, #0]
 80037c0:	061f      	lsls	r7, r3, #24
 80037c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80037c6:	600e      	str	r6, [r1, #0]
 80037c8:	d514      	bpl.n	80037f4 <_printf_i+0x1ac>
 80037ca:	07d9      	lsls	r1, r3, #31
 80037cc:	bf44      	itt	mi
 80037ce:	f043 0320 	orrmi.w	r3, r3, #32
 80037d2:	6023      	strmi	r3, [r4, #0]
 80037d4:	b91d      	cbnz	r5, 80037de <_printf_i+0x196>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f023 0320 	bic.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	2310      	movs	r3, #16
 80037e0:	e7b0      	b.n	8003744 <_printf_i+0xfc>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f043 0320 	orr.w	r3, r3, #32
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	2378      	movs	r3, #120	; 0x78
 80037ec:	4828      	ldr	r0, [pc, #160]	; (8003890 <_printf_i+0x248>)
 80037ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037f2:	e7e3      	b.n	80037bc <_printf_i+0x174>
 80037f4:	065e      	lsls	r6, r3, #25
 80037f6:	bf48      	it	mi
 80037f8:	b2ad      	uxthmi	r5, r5
 80037fa:	e7e6      	b.n	80037ca <_printf_i+0x182>
 80037fc:	4616      	mov	r6, r2
 80037fe:	e7bb      	b.n	8003778 <_printf_i+0x130>
 8003800:	680b      	ldr	r3, [r1, #0]
 8003802:	6826      	ldr	r6, [r4, #0]
 8003804:	6960      	ldr	r0, [r4, #20]
 8003806:	1d1d      	adds	r5, r3, #4
 8003808:	600d      	str	r5, [r1, #0]
 800380a:	0635      	lsls	r5, r6, #24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	d501      	bpl.n	8003814 <_printf_i+0x1cc>
 8003810:	6018      	str	r0, [r3, #0]
 8003812:	e002      	b.n	800381a <_printf_i+0x1d2>
 8003814:	0671      	lsls	r1, r6, #25
 8003816:	d5fb      	bpl.n	8003810 <_printf_i+0x1c8>
 8003818:	8018      	strh	r0, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	4616      	mov	r6, r2
 8003820:	e7ba      	b.n	8003798 <_printf_i+0x150>
 8003822:	680b      	ldr	r3, [r1, #0]
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	600a      	str	r2, [r1, #0]
 8003828:	681e      	ldr	r6, [r3, #0]
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	2100      	movs	r1, #0
 800382e:	4630      	mov	r0, r6
 8003830:	f7fc fcde 	bl	80001f0 <memchr>
 8003834:	b108      	cbz	r0, 800383a <_printf_i+0x1f2>
 8003836:	1b80      	subs	r0, r0, r6
 8003838:	6060      	str	r0, [r4, #4]
 800383a:	6863      	ldr	r3, [r4, #4]
 800383c:	6123      	str	r3, [r4, #16]
 800383e:	2300      	movs	r3, #0
 8003840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003844:	e7a8      	b.n	8003798 <_printf_i+0x150>
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	4632      	mov	r2, r6
 800384a:	4649      	mov	r1, r9
 800384c:	4640      	mov	r0, r8
 800384e:	47d0      	blx	sl
 8003850:	3001      	adds	r0, #1
 8003852:	d0ab      	beq.n	80037ac <_printf_i+0x164>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	d413      	bmi.n	8003882 <_printf_i+0x23a>
 800385a:	68e0      	ldr	r0, [r4, #12]
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	4298      	cmp	r0, r3
 8003860:	bfb8      	it	lt
 8003862:	4618      	movlt	r0, r3
 8003864:	e7a4      	b.n	80037b0 <_printf_i+0x168>
 8003866:	2301      	movs	r3, #1
 8003868:	4632      	mov	r2, r6
 800386a:	4649      	mov	r1, r9
 800386c:	4640      	mov	r0, r8
 800386e:	47d0      	blx	sl
 8003870:	3001      	adds	r0, #1
 8003872:	d09b      	beq.n	80037ac <_printf_i+0x164>
 8003874:	3501      	adds	r5, #1
 8003876:	68e3      	ldr	r3, [r4, #12]
 8003878:	9903      	ldr	r1, [sp, #12]
 800387a:	1a5b      	subs	r3, r3, r1
 800387c:	42ab      	cmp	r3, r5
 800387e:	dcf2      	bgt.n	8003866 <_printf_i+0x21e>
 8003880:	e7eb      	b.n	800385a <_printf_i+0x212>
 8003882:	2500      	movs	r5, #0
 8003884:	f104 0619 	add.w	r6, r4, #25
 8003888:	e7f5      	b.n	8003876 <_printf_i+0x22e>
 800388a:	bf00      	nop
 800388c:	08003c5e 	.word	0x08003c5e
 8003890:	08003c6f 	.word	0x08003c6f

08003894 <memcpy>:
 8003894:	440a      	add	r2, r1
 8003896:	4291      	cmp	r1, r2
 8003898:	f100 33ff 	add.w	r3, r0, #4294967295
 800389c:	d100      	bne.n	80038a0 <memcpy+0xc>
 800389e:	4770      	bx	lr
 80038a0:	b510      	push	{r4, lr}
 80038a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038aa:	4291      	cmp	r1, r2
 80038ac:	d1f9      	bne.n	80038a2 <memcpy+0xe>
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <memmove>:
 80038b0:	4288      	cmp	r0, r1
 80038b2:	b510      	push	{r4, lr}
 80038b4:	eb01 0402 	add.w	r4, r1, r2
 80038b8:	d902      	bls.n	80038c0 <memmove+0x10>
 80038ba:	4284      	cmp	r4, r0
 80038bc:	4623      	mov	r3, r4
 80038be:	d807      	bhi.n	80038d0 <memmove+0x20>
 80038c0:	1e43      	subs	r3, r0, #1
 80038c2:	42a1      	cmp	r1, r4
 80038c4:	d008      	beq.n	80038d8 <memmove+0x28>
 80038c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ce:	e7f8      	b.n	80038c2 <memmove+0x12>
 80038d0:	4402      	add	r2, r0
 80038d2:	4601      	mov	r1, r0
 80038d4:	428a      	cmp	r2, r1
 80038d6:	d100      	bne.n	80038da <memmove+0x2a>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038e2:	e7f7      	b.n	80038d4 <memmove+0x24>

080038e4 <_free_r>:
 80038e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038e6:	2900      	cmp	r1, #0
 80038e8:	d048      	beq.n	800397c <_free_r+0x98>
 80038ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ee:	9001      	str	r0, [sp, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f1a1 0404 	sub.w	r4, r1, #4
 80038f6:	bfb8      	it	lt
 80038f8:	18e4      	addlt	r4, r4, r3
 80038fa:	f000 f8d3 	bl	8003aa4 <__malloc_lock>
 80038fe:	4a20      	ldr	r2, [pc, #128]	; (8003980 <_free_r+0x9c>)
 8003900:	9801      	ldr	r0, [sp, #4]
 8003902:	6813      	ldr	r3, [r2, #0]
 8003904:	4615      	mov	r5, r2
 8003906:	b933      	cbnz	r3, 8003916 <_free_r+0x32>
 8003908:	6063      	str	r3, [r4, #4]
 800390a:	6014      	str	r4, [r2, #0]
 800390c:	b003      	add	sp, #12
 800390e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003912:	f000 b8cd 	b.w	8003ab0 <__malloc_unlock>
 8003916:	42a3      	cmp	r3, r4
 8003918:	d90b      	bls.n	8003932 <_free_r+0x4e>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	1862      	adds	r2, r4, r1
 800391e:	4293      	cmp	r3, r2
 8003920:	bf04      	itt	eq
 8003922:	681a      	ldreq	r2, [r3, #0]
 8003924:	685b      	ldreq	r3, [r3, #4]
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	bf04      	itt	eq
 800392a:	1852      	addeq	r2, r2, r1
 800392c:	6022      	streq	r2, [r4, #0]
 800392e:	602c      	str	r4, [r5, #0]
 8003930:	e7ec      	b.n	800390c <_free_r+0x28>
 8003932:	461a      	mov	r2, r3
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b10b      	cbz	r3, 800393c <_free_r+0x58>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d9fa      	bls.n	8003932 <_free_r+0x4e>
 800393c:	6811      	ldr	r1, [r2, #0]
 800393e:	1855      	adds	r5, r2, r1
 8003940:	42a5      	cmp	r5, r4
 8003942:	d10b      	bne.n	800395c <_free_r+0x78>
 8003944:	6824      	ldr	r4, [r4, #0]
 8003946:	4421      	add	r1, r4
 8003948:	1854      	adds	r4, r2, r1
 800394a:	42a3      	cmp	r3, r4
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	d1dd      	bne.n	800390c <_free_r+0x28>
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	6053      	str	r3, [r2, #4]
 8003956:	4421      	add	r1, r4
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	e7d7      	b.n	800390c <_free_r+0x28>
 800395c:	d902      	bls.n	8003964 <_free_r+0x80>
 800395e:	230c      	movs	r3, #12
 8003960:	6003      	str	r3, [r0, #0]
 8003962:	e7d3      	b.n	800390c <_free_r+0x28>
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	1961      	adds	r1, r4, r5
 8003968:	428b      	cmp	r3, r1
 800396a:	bf04      	itt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	bf04      	itt	eq
 8003974:	1949      	addeq	r1, r1, r5
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6054      	str	r4, [r2, #4]
 800397a:	e7c7      	b.n	800390c <_free_r+0x28>
 800397c:	b003      	add	sp, #12
 800397e:	bd30      	pop	{r4, r5, pc}
 8003980:	20000480 	.word	0x20000480

08003984 <_malloc_r>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	1ccd      	adds	r5, r1, #3
 8003988:	f025 0503 	bic.w	r5, r5, #3
 800398c:	3508      	adds	r5, #8
 800398e:	2d0c      	cmp	r5, #12
 8003990:	bf38      	it	cc
 8003992:	250c      	movcc	r5, #12
 8003994:	2d00      	cmp	r5, #0
 8003996:	4606      	mov	r6, r0
 8003998:	db01      	blt.n	800399e <_malloc_r+0x1a>
 800399a:	42a9      	cmp	r1, r5
 800399c:	d903      	bls.n	80039a6 <_malloc_r+0x22>
 800399e:	230c      	movs	r3, #12
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	2000      	movs	r0, #0
 80039a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a6:	f000 f87d 	bl	8003aa4 <__malloc_lock>
 80039aa:	4921      	ldr	r1, [pc, #132]	; (8003a30 <_malloc_r+0xac>)
 80039ac:	680a      	ldr	r2, [r1, #0]
 80039ae:	4614      	mov	r4, r2
 80039b0:	b99c      	cbnz	r4, 80039da <_malloc_r+0x56>
 80039b2:	4f20      	ldr	r7, [pc, #128]	; (8003a34 <_malloc_r+0xb0>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b923      	cbnz	r3, 80039c2 <_malloc_r+0x3e>
 80039b8:	4621      	mov	r1, r4
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f862 	bl	8003a84 <_sbrk_r>
 80039c0:	6038      	str	r0, [r7, #0]
 80039c2:	4629      	mov	r1, r5
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 f85d 	bl	8003a84 <_sbrk_r>
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	d123      	bne.n	8003a16 <_malloc_r+0x92>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f86c 	bl	8003ab0 <__malloc_unlock>
 80039d8:	e7e3      	b.n	80039a2 <_malloc_r+0x1e>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	1b5b      	subs	r3, r3, r5
 80039de:	d417      	bmi.n	8003a10 <_malloc_r+0x8c>
 80039e0:	2b0b      	cmp	r3, #11
 80039e2:	d903      	bls.n	80039ec <_malloc_r+0x68>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	441c      	add	r4, r3
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	e004      	b.n	80039f6 <_malloc_r+0x72>
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	42a2      	cmp	r2, r4
 80039f0:	bf0c      	ite	eq
 80039f2:	600b      	streq	r3, [r1, #0]
 80039f4:	6053      	strne	r3, [r2, #4]
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f85a 	bl	8003ab0 <__malloc_unlock>
 80039fc:	f104 000b 	add.w	r0, r4, #11
 8003a00:	1d23      	adds	r3, r4, #4
 8003a02:	f020 0007 	bic.w	r0, r0, #7
 8003a06:	1ac2      	subs	r2, r0, r3
 8003a08:	d0cc      	beq.n	80039a4 <_malloc_r+0x20>
 8003a0a:	1a1b      	subs	r3, r3, r0
 8003a0c:	50a3      	str	r3, [r4, r2]
 8003a0e:	e7c9      	b.n	80039a4 <_malloc_r+0x20>
 8003a10:	4622      	mov	r2, r4
 8003a12:	6864      	ldr	r4, [r4, #4]
 8003a14:	e7cc      	b.n	80039b0 <_malloc_r+0x2c>
 8003a16:	1cc4      	adds	r4, r0, #3
 8003a18:	f024 0403 	bic.w	r4, r4, #3
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d0e3      	beq.n	80039e8 <_malloc_r+0x64>
 8003a20:	1a21      	subs	r1, r4, r0
 8003a22:	4630      	mov	r0, r6
 8003a24:	f000 f82e 	bl	8003a84 <_sbrk_r>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d1dd      	bne.n	80039e8 <_malloc_r+0x64>
 8003a2c:	e7cf      	b.n	80039ce <_malloc_r+0x4a>
 8003a2e:	bf00      	nop
 8003a30:	20000480 	.word	0x20000480
 8003a34:	20000484 	.word	0x20000484

08003a38 <_realloc_r>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	4607      	mov	r7, r0
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	460e      	mov	r6, r1
 8003a40:	b921      	cbnz	r1, 8003a4c <_realloc_r+0x14>
 8003a42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a46:	4611      	mov	r1, r2
 8003a48:	f7ff bf9c 	b.w	8003984 <_malloc_r>
 8003a4c:	b922      	cbnz	r2, 8003a58 <_realloc_r+0x20>
 8003a4e:	f7ff ff49 	bl	80038e4 <_free_r>
 8003a52:	4625      	mov	r5, r4
 8003a54:	4628      	mov	r0, r5
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a58:	f000 f830 	bl	8003abc <_malloc_usable_size_r>
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d20f      	bcs.n	8003a80 <_realloc_r+0x48>
 8003a60:	4621      	mov	r1, r4
 8003a62:	4638      	mov	r0, r7
 8003a64:	f7ff ff8e 	bl	8003984 <_malloc_r>
 8003a68:	4605      	mov	r5, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d0f2      	beq.n	8003a54 <_realloc_r+0x1c>
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4622      	mov	r2, r4
 8003a72:	f7ff ff0f 	bl	8003894 <memcpy>
 8003a76:	4631      	mov	r1, r6
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f7ff ff33 	bl	80038e4 <_free_r>
 8003a7e:	e7e9      	b.n	8003a54 <_realloc_r+0x1c>
 8003a80:	4635      	mov	r5, r6
 8003a82:	e7e7      	b.n	8003a54 <_realloc_r+0x1c>

08003a84 <_sbrk_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d06      	ldr	r5, [pc, #24]	; (8003aa0 <_sbrk_r+0x1c>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	f7fc ff32 	bl	80008f8 <_sbrk>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d102      	bne.n	8003a9e <_sbrk_r+0x1a>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	b103      	cbz	r3, 8003a9e <_sbrk_r+0x1a>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	20000594 	.word	0x20000594

08003aa4 <__malloc_lock>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__malloc_lock+0x8>)
 8003aa6:	f000 b811 	b.w	8003acc <__retarget_lock_acquire_recursive>
 8003aaa:	bf00      	nop
 8003aac:	2000059c 	.word	0x2000059c

08003ab0 <__malloc_unlock>:
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <__malloc_unlock+0x8>)
 8003ab2:	f000 b80c 	b.w	8003ace <__retarget_lock_release_recursive>
 8003ab6:	bf00      	nop
 8003ab8:	2000059c 	.word	0x2000059c

08003abc <_malloc_usable_size_r>:
 8003abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac0:	1f18      	subs	r0, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfbc      	itt	lt
 8003ac6:	580b      	ldrlt	r3, [r1, r0]
 8003ac8:	18c0      	addlt	r0, r0, r3
 8003aca:	4770      	bx	lr

08003acc <__retarget_lock_acquire_recursive>:
 8003acc:	4770      	bx	lr

08003ace <__retarget_lock_release_recursive>:
 8003ace:	4770      	bx	lr

08003ad0 <_init>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr

08003adc <_fini>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr
