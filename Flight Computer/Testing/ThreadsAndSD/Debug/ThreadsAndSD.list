
ThreadsAndSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b67c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bba4  0800bba4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bba4  0800bba4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bba4  0800bba4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba8  0800bba8  0001bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800bbac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b0  2000008c  0800bc38  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000263c  0800bc38  0002263c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213b1  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ff1  00000000  00000000  0004146d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001920  00000000  00000000  00045460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  00046d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005d6c  00000000  00000000  000484f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017f7e  00000000  00000000  0004e264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d81c5  00000000  00000000  000661e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e3a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  0013e424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b804 	.word	0x0800b804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800b804 	.word	0x0800b804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <myprintf+0x44>)
 80002a8:	f00a fec2 	bl	800b030 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <myprintf+0x48>)
 80002c2:	f003 f9df 	bl	8003684 <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200000a8 	.word	0x200000a8
 80002d8:	20002064 	.word	0x20002064

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fc3c 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f834 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f8fe 	bl	80004e8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80002ec:	f000 f88e 	bl	800040c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80002f0:	f000 f8ca 	bl	8000488 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80002f4:	f003 fd96 	bl	8003e24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002f8:	f007 fa92 	bl	8007820 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sdMutex */
  sdMutexHandle = osMutexNew(&sdMutex_attributes);
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <main+0x54>)
 80002fe:	f007 fbcf 	bl	8007aa0 <osMutexNew>
 8000302:	4602      	mov	r2, r0
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x58>)
 8000306:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SD_read */
  SD_readHandle = osThreadNew(StartDefaultTask, NULL, &SD_read_attributes);
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <main+0x5c>)
 800030a:	2100      	movs	r1, #0
 800030c:	480b      	ldr	r0, [pc, #44]	; (800033c <main+0x60>)
 800030e:	f007 faef 	bl	80078f0 <osThreadNew>
 8000312:	4602      	mov	r2, r0
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <main+0x64>)
 8000316:	601a      	str	r2, [r3, #0]

  /* creation of other_thread */
  other_threadHandle = osThreadNew(StartTask02, NULL, &other_thread_attributes);
 8000318:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <main+0x68>)
 800031a:	2100      	movs	r1, #0
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <main+0x6c>)
 800031e:	f007 fae7 	bl	80078f0 <osThreadNew>
 8000322:	4602      	mov	r2, r0
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <main+0x70>)
 8000326:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000328:	f007 faae 	bl	8007888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800032c:	e7fe      	b.n	800032c <main+0x50>
 800032e:	bf00      	nop
 8000330:	0800baa8 	.word	0x0800baa8
 8000334:	20002060 	.word	0x20002060
 8000338:	0800ba60 	.word	0x0800ba60
 800033c:	080005e1 	.word	0x080005e1
 8000340:	20001ba4 	.word	0x20001ba4
 8000344:	0800ba84 	.word	0x0800ba84
 8000348:	080007f1 	.word	0x080007f1
 800034c:	20001b3c 	.word	0x20001b3c

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b0a6      	sub	sp, #152	; 0x98
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f00a fe31 	bl	800afc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2258      	movs	r2, #88	; 0x58
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f00a fe23 	bl	800afc6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2310      	movs	r3, #16
 800038a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fe8e 	bl	80010d0 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ba:	f000 fa33 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fd8e 	bl	8001efc <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 fa1d 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 ffe9 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000400:	f000 fa10 	bl	8000824 <Error_Handler>
  }
}
 8000404:	bf00      	nop
 8000406:	3798      	adds	r7, #152	; 0x98
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_SPI2_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_SPI2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_SPI2_Init+0x74>)
 8000418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800041c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_SPI2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <MX_SPI2_Init+0x74>)
 8000426:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800042a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_SPI2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <MX_SPI2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_SPI2_Init+0x74>)
 800043a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800043e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_SPI2_Init+0x74>)
 8000442:	2230      	movs	r2, #48	; 0x30
 8000444:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_SPI2_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_SPI2_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_SPI2_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_SPI2_Init+0x74>)
 800045a:	2207      	movs	r2, #7
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_SPI2_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_SPI2_Init+0x74>)
 8000466:	2208      	movs	r2, #8
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_SPI2_Init+0x74>)
 800046c:	f002 f9cc 	bl	8002808 <HAL_SPI_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f9d5 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20001b40 	.word	0x20001b40
 8000484:	40003800 	.word	0x40003800

08000488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <MX_USART2_UART_Init+0x5c>)
 8000490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 8000494:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_USART2_UART_Init+0x58>)
 80004cc:	f003 f88c 	bl	80035e8 <HAL_UART_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004d6:	f000 f9a5 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20002064 	.word	0x20002064
 80004e4:	40004400 	.word	0x40004400

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_GPIO_Init+0xe8>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a2d      	ldr	r2, [pc, #180]	; (80005d0 <MX_GPIO_Init+0xe8>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_GPIO_Init+0xe8>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <MX_GPIO_Init+0xe8>)
 800054c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_GPIO_Init+0xe8>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f000 fd9b 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2102      	movs	r1, #2
 800056e:	4819      	ldr	r0, [pc, #100]	; (80005d4 <MX_GPIO_Init+0xec>)
 8000570:	f000 fd96 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_GPIO_Init+0xf0>)
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_GPIO_Init+0xf4>)
 800058a:	f000 fbff 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058e:	2320      	movs	r3, #32
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fbf0 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xec>)
 80005c4:	f000 fbe2 	bl	8000d8c <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000400 	.word	0x48000400
 80005d8:	10210000 	.word	0x10210000
 80005dc:	48000800 	.word	0x48000800

080005e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005ec:	4871      	ldr	r0, [pc, #452]	; (80007b4 <StartDefaultTask+0x1d4>)
 80005ee:	f7ff fe4f 	bl	8000290 <myprintf>

	osDelay(2000); //a short delay is important to let the SD card settle
 80005f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f6:	f007 fa25 	bl	8007a44 <osDelay>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80005fa:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80005fe:	2201      	movs	r2, #1
 8000600:	496d      	ldr	r1, [pc, #436]	; (80007b8 <StartDefaultTask+0x1d8>)
 8000602:	4618      	mov	r0, r3
 8000604:	f006 f82c 	bl	8006660 <f_mount>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	if (fres != FR_OK) {
 800060e:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000612:	2b00      	cmp	r3, #0
 8000614:	d009      	beq.n	800062a <StartDefaultTask+0x4a>
		myprintf("f_mount error (%i)\r\n", fres);
 8000616:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800061a:	4619      	mov	r1, r3
 800061c:	4867      	ldr	r0, [pc, #412]	; (80007bc <StartDefaultTask+0x1dc>)
 800061e:	f7ff fe37 	bl	8000290 <myprintf>
		for (;;) {
			osDelay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f007 fa0e 	bl	8007a44 <osDelay>
 8000628:	e7fb      	b.n	8000622 <StartDefaultTask+0x42>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800062a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800062e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000632:	4619      	mov	r1, r3
 8000634:	4860      	ldr	r0, [pc, #384]	; (80007b8 <StartDefaultTask+0x1d8>)
 8000636:	f006 ff35 	bl	80074a4 <f_getfree>
 800063a:	4603      	mov	r3, r0
 800063c:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	if (fres != FR_OK) {
 8000640:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000644:	2b00      	cmp	r3, #0
 8000646:	d009      	beq.n	800065c <StartDefaultTask+0x7c>
		myprintf("f_getfree error (%i)\r\n", fres);
 8000648:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800064c:	4619      	mov	r1, r3
 800064e:	485c      	ldr	r0, [pc, #368]	; (80007c0 <StartDefaultTask+0x1e0>)
 8000650:	f7ff fe1e 	bl	8000290 <myprintf>
		for (;;) {
			osDelay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f007 f9f5 	bl	8007a44 <osDelay>
 800065a:	e7fb      	b.n	8000654 <StartDefaultTask+0x74>
		}
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800065c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000666:	3b02      	subs	r3, #2
 8000668:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	free_sectors = free_clusters * getFreeFs->csize;
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000684:	461a      	mov	r2, r3
 8000686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	fb03 f302 	mul.w	r3, r3, r2
 8000690:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

	myprintf(
 8000694:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000698:	0859      	lsrs	r1, r3, #1
 800069a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800069e:	085b      	lsrs	r3, r3, #1
 80006a0:	461a      	mov	r2, r3
 80006a2:	4848      	ldr	r0, [pc, #288]	; (80007c4 <StartDefaultTask+0x1e4>)
 80006a4:	f7ff fdf4 	bl	8000290 <myprintf>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 80006a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ac:	2201      	movs	r2, #1
 80006ae:	4946      	ldr	r1, [pc, #280]	; (80007c8 <StartDefaultTask+0x1e8>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f83d 	bl	8006730 <f_open>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	if (fres != FR_OK) {
 80006bc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d006      	beq.n	80006d2 <StartDefaultTask+0xf2>
		myprintf("f_open error (%i)\r\n");
 80006c4:	4841      	ldr	r0, [pc, #260]	; (80007cc <StartDefaultTask+0x1ec>)
 80006c6:	f7ff fde3 	bl	8000290 <myprintf>
		for (;;) {
			osDelay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f007 f9ba 	bl	8007a44 <osDelay>
 80006d0:	e7fb      	b.n	80006ca <StartDefaultTask+0xea>
		}
	}
	myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006d2:	483f      	ldr	r0, [pc, #252]	; (80007d0 <StartDefaultTask+0x1f0>)
 80006d4:	f7ff fddc 	bl	8000290 <myprintf>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR *rres = f_gets((TCHAR*) readBuf, 30, &fil);
 80006d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	211e      	movs	r1, #30
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 ffb1 	bl	800764a <f_gets>
 80006e8:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498
	if (rres != 0) {
 80006ec:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d006      	beq.n	8000702 <StartDefaultTask+0x122>
		myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4836      	ldr	r0, [pc, #216]	; (80007d4 <StartDefaultTask+0x1f4>)
 80006fc:	f7ff fdc8 	bl	8000290 <myprintf>
 8000700:	e005      	b.n	800070e <StartDefaultTask+0x12e>
	} else {
		myprintf("f_gets error (%i)\r\n", fres);
 8000702:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000706:	4619      	mov	r1, r3
 8000708:	4833      	ldr	r0, [pc, #204]	; (80007d8 <StartDefaultTask+0x1f8>)
 800070a:	f7ff fdc1 	bl	8000290 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 800070e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fe96 	bl	8007444 <f_close>

	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "write.txt",
 8000718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071c:	221a      	movs	r2, #26
 800071e:	492f      	ldr	r1, [pc, #188]	; (80007dc <StartDefaultTask+0x1fc>)
 8000720:	4618      	mov	r0, r3
 8000722:	f006 f805 	bl	8006730 <f_open>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
			FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	if (fres == FR_OK) {
 800072c:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <StartDefaultTask+0x15c>
		myprintf("I was able to open 'write.txt' for writing\r\n");
 8000734:	482a      	ldr	r0, [pc, #168]	; (80007e0 <StartDefaultTask+0x200>)
 8000736:	f7ff fdab 	bl	8000290 <myprintf>
 800073a:	e005      	b.n	8000748 <StartDefaultTask+0x168>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
 800073c:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000740:	4619      	mov	r1, r3
 8000742:	4822      	ldr	r0, [pc, #136]	; (80007cc <StartDefaultTask+0x1ec>)
 8000744:	f7ff fda4 	bl	8000290 <myprintf>
	}

	//Copy in a string
	strncpy((char*) readBuf, "a new file is made!", 19);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <StartDefaultTask+0x204>)
 800074e:	461c      	mov	r4, r3
 8000750:	4615      	mov	r5, r2
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	682b      	ldr	r3, [r5, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	8022      	strh	r2, [r4, #0]
 800075c:	3402      	adds	r4, #2
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	7023      	strb	r3, [r4, #0]
	UINT bytesWrote;
	fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	f107 0110 	add.w	r1, r7, #16
 800076a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800076e:	2213      	movs	r2, #19
 8000770:	f006 fba8 	bl	8006ec4 <f_write>
 8000774:	4603      	mov	r3, r0
 8000776:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	if (fres == FR_OK) {
 800077a:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d107      	bne.n	8000792 <StartDefaultTask+0x1b2>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	4817      	ldr	r0, [pc, #92]	; (80007e8 <StartDefaultTask+0x208>)
 800078c:	f7ff fd80 	bl	8000290 <myprintf>
 8000790:	e002      	b.n	8000798 <StartDefaultTask+0x1b8>
	} else {
		myprintf("f_write error (%i)\r\n");
 8000792:	4816      	ldr	r0, [pc, #88]	; (80007ec <StartDefaultTask+0x20c>)
 8000794:	f7ff fd7c 	bl	8000290 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000798:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800079c:	4618      	mov	r0, r3
 800079e:	f006 fe51 	bl	8007444 <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	4904      	ldr	r1, [pc, #16]	; (80007b8 <StartDefaultTask+0x1d8>)
 80007a6:	2000      	movs	r0, #0
 80007a8:	f005 ff5a 	bl	8006660 <f_mount>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f007 f949 	bl	8007a44 <osDelay>
 80007b2:	e7fb      	b.n	80007ac <StartDefaultTask+0x1cc>
 80007b4:	0800b83c 	.word	0x0800b83c
 80007b8:	0800b85c 	.word	0x0800b85c
 80007bc:	0800b860 	.word	0x0800b860
 80007c0:	0800b878 	.word	0x0800b878
 80007c4:	0800b890 	.word	0x0800b890
 80007c8:	0800b8d8 	.word	0x0800b8d8
 80007cc:	0800b8e4 	.word	0x0800b8e4
 80007d0:	0800b8f8 	.word	0x0800b8f8
 80007d4:	0800b928 	.word	0x0800b928
 80007d8:	0800b954 	.word	0x0800b954
 80007dc:	0800b968 	.word	0x0800b968
 80007e0:	0800b974 	.word	0x0800b974
 80007e4:	0800b9a4 	.word	0x0800b9a4
 80007e8:	0800b9b8 	.word	0x0800b9b8
 80007ec:	0800b9dc 	.word	0x0800b9dc

080007f0 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f007 f923 	bl	8007a44 <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartTask02+0x8>

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f9b9 	bl	8000b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40001000 	.word	0x40001000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x6>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_MspInit+0x4c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_MspInit+0x4c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_MspInit+0x4c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fa65 	bl	8000d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_SPI_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d128      	bne.n	80008f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e0:	2305      	movs	r3, #5
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_SPI_MspInit+0x84>)
 80008ec:	f000 fa4e 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000400 	.word	0x48000400

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x7c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d128      	bne.n	8000978 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x80>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_UART_MspInit+0x80>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x80>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0x80>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_UART_MspInit+0x80>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_UART_MspInit+0x80>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f000 fa0a 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	2036      	movs	r0, #54	; 0x36
 800099e:	f000 f9cb 	bl	8000d38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a2:	2036      	movs	r0, #54	; 0x36
 80009a4:	f000 f9e4 	bl	8000d70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xa0>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_InitTick+0xa0>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	61d3      	str	r3, [r2, #28]
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xa0>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fccc 	bl	8002368 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009d0:	f001 fc86 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_InitTick+0xa4>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_InitTick+0xa8>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <HAL_InitTick+0xac>)
 80009ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_InitTick+0xa8>)
 80009f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_InitTick+0xa8>)
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_InitTick+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a0a:	f002 fb17 	bl	800303c <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_InitTick+0xa8>)
 8000a16:	f002 fb73 	bl	8003100 <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20002138 	.word	0x20002138
 8000a34:	40001000 	.word	0x40001000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM6_DAC_IRQHandler+0x10>)
 8000a6a:	f002 fbb9 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20002138 	.word	0x20002138

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f00a fa58 	bl	800af5c <__errno>
 8000aac:	4602      	mov	r2, r0
 8000aae:	230c      	movs	r3, #12
 8000ab0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20010000 	.word	0x20010000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200001a8 	.word	0x200001a8
 8000ae0:	20002640 	.word	0x20002640

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f00a fa17 	bl	800af68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fbcf 	bl	80002dc <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000b4c:	0800bbac 	.word	0x0800bbac
  ldr r2, =_sbss
 8000b50:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000b54:	2000263c 	.word	0x2000263c

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f8d8 	bl	8000d22 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ff08 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe58 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20002184 	.word	0x20002184

08000bb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20002184 	.word	0x20002184

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff4c 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4a:	f7ff ff61 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f7ff ffb1 	bl	8000cbc <NVIC_EncodePriority>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff80 	bl	8000c68 <__NVIC_SetPriority>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff54 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e160      	b.n	800105e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8152 	beq.w	8001058 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d00b      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	2b11      	cmp	r3, #17
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b12      	cmp	r3, #18
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0xea>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80ac 	beq.w	8001058 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b5e      	ldr	r3, [pc, #376]	; (800107c <HAL_GPIO_Init+0x2f0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a5d      	ldr	r2, [pc, #372]	; (800107c <HAL_GPIO_Init+0x2f0>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_GPIO_Init+0x2f0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a59      	ldr	r2, [pc, #356]	; (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f42:	d025      	beq.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d01f      	beq.n	8000f8c <HAL_GPIO_Init+0x200>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d019      	beq.n	8000f88 <HAL_GPIO_Init+0x1fc>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4d      	ldr	r2, [pc, #308]	; (800108c <HAL_GPIO_Init+0x300>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d013      	beq.n	8000f84 <HAL_GPIO_Init+0x1f8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00d      	beq.n	8000f80 <HAL_GPIO_Init+0x1f4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4b      	ldr	r2, [pc, #300]	; (8001094 <HAL_GPIO_Init+0x308>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x1f0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f74:	2306      	movs	r3, #6
 8000f76:	e00c      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f78:	2307      	movs	r3, #7
 8000f7a:	e00a      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e008      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x206>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa2:	4937      	ldr	r1, [pc, #220]	; (8001080 <HAL_GPIO_Init+0x2f4>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <HAL_GPIO_Init+0x310>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd4:	4a31      	ldr	r2, [pc, #196]	; (800109c <HAL_GPIO_Init+0x310>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_GPIO_Init+0x310>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_GPIO_Init+0x310>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_GPIO_Init+0x310>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_GPIO_Init+0x310>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_GPIO_Init+0x310>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <HAL_GPIO_Init+0x310>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f ae97 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	48001400 	.word	0x48001400
 8001098:	48001800 	.word	0x48001800
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f000 bf01 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8160 	beq.w	80013ba <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010fa:	4bae      	ldr	r3, [pc, #696]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b04      	cmp	r3, #4
 8001104:	d00c      	beq.n	8001120 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001106:	4bab      	ldr	r3, [pc, #684]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b08      	cmp	r3, #8
 8001110:	d159      	bne.n	80011c6 <HAL_RCC_OscConfig+0xf6>
 8001112:	4ba8      	ldr	r3, [pc, #672]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d152      	bne.n	80011c6 <HAL_RCC_OscConfig+0xf6>
 8001120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001124:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001134:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <HAL_RCC_OscConfig+0x82>
 800114c:	4b99      	ldr	r3, [pc, #612]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0xae>
 8001152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001156:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800116e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800117a:	4b8e      	ldr	r3, [pc, #568]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001182:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001186:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800118a:	fa92 f2a2 	rbit	r2, r2
 800118e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001192:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8102 	beq.w	80013b8 <HAL_RCC_OscConfig+0x2e8>
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80fc 	bne.w	80013b8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f000 be93 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x110>
 80011d2:	4b78      	ldr	r3, [pc, #480]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e030      	b.n	8001242 <HAL_RCC_OscConfig+0x172>
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x134>
 80011ea:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a71      	ldr	r2, [pc, #452]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6e      	ldr	r2, [pc, #440]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80011fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01e      	b.n	8001242 <HAL_RCC_OscConfig+0x172>
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x15a>
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a67      	ldr	r2, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x172>
 800122a:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a61      	ldr	r2, [pc, #388]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800123c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d059      	beq.n	8001300 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fcb0 	bl	8000bb0 <HAL_GetTick>
 8001250:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fcab 	bl	8000bb0 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d902      	bls.n	800126c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	f000 be40 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001270:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001280:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x1ce>
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x1fa>
 800129e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012d6:	fa92 f2a2 	rbit	r2, r2
 80012da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f002 021f 	and.w	r2, r2, #31
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0ab      	beq.n	8001256 <HAL_RCC_OscConfig+0x186>
 80012fe:	e05c      	b.n	80013ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fc56 	bl	8000bb0 <HAL_GetTick>
 8001304:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130a:	f7ff fc51 	bl	8000bb0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d902      	bls.n	8001320 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	f000 bde6 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001324:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800132c:	fa93 f3a3 	rbit	r3, r3
 8001330:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001334:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x282>
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x2ae>
 8001352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001356:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800136e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_RCC_OscConfig+0x2e4>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001382:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001386:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800138a:	fa92 f2a2 	rbit	r2, r2
 800138e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001392:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f002 021f 	and.w	r2, r2, #31
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ab      	bne.n	800130a <HAL_RCC_OscConfig+0x23a>
 80013b2:	e002      	b.n	80013ba <HAL_RCC_OscConfig+0x2ea>
 80013b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8170 	beq.w	80016aa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ca:	4bd0      	ldr	r3, [pc, #832]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013d6:	4bcd      	ldr	r3, [pc, #820]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d16d      	bne.n	80014be <HAL_RCC_OscConfig+0x3ee>
 80013e2:	4bca      	ldr	r3, [pc, #808]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ee:	d166      	bne.n	80014be <HAL_RCC_OscConfig+0x3ee>
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001402:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	095b      	lsrs	r3, r3, #5
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d102      	bne.n	8001420 <HAL_RCC_OscConfig+0x350>
 800141a:	4bbc      	ldr	r3, [pc, #752]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	e013      	b.n	8001448 <HAL_RCC_OscConfig+0x378>
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001438:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001444:	4bb1      	ldr	r3, [pc, #708]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2202      	movs	r2, #2
 800144a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800144e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001452:	fa92 f2a2 	rbit	r2, r2
 8001456:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800145a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800145e:	fab2 f282 	clz	r2, r2
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	f042 0220 	orr.w	r2, r2, #32
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	f002 021f 	and.w	r2, r2, #31
 800146e:	2101      	movs	r1, #1
 8001470:	fa01 f202 	lsl.w	r2, r1, r2
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_RCC_OscConfig+0x3ba>
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d002      	beq.n	800148a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f000 bd31 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	21f8      	movs	r1, #248	; 0xf8
 800149a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80014a2:	fa91 f1a1 	rbit	r1, r1
 80014a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014ae:	fab1 f181 	clz	r1, r1
 80014b2:	b2c9      	uxtb	r1, r1
 80014b4:	408b      	lsls	r3, r1
 80014b6:	4995      	ldr	r1, [pc, #596]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	e0f5      	b.n	80016aa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8085 	beq.w	80015d4 <HAL_RCC_OscConfig+0x504>
 80014ca:	2301      	movs	r3, #1
 80014cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	2301      	movs	r3, #1
 80014f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb5b 	bl	8000bb0 <HAL_GetTick>
 80014fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fb56 	bl	8000bb0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d902      	bls.n	8001516 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	f000 bceb 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001528:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x476>
 8001540:	4b72      	ldr	r3, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e013      	b.n	800156e <HAL_RCC_OscConfig+0x49e>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800155e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800156a:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001574:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001578:	fa92 f2a2 	rbit	r2, r2
 800157c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001580:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f002 021f 	and.w	r2, r2, #31
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0af      	beq.n	8001500 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	21f8      	movs	r1, #248	; 0xf8
 80015b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80015b8:	fa91 f1a1 	rbit	r1, r1
 80015bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015c4:	fab1 f181 	clz	r1, r1
 80015c8:	b2c9      	uxtb	r1, r1
 80015ca:	408b      	lsls	r3, r1
 80015cc:	494f      	ldr	r1, [pc, #316]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
 80015d2:	e06a      	b.n	80016aa <HAL_RCC_OscConfig+0x5da>
 80015d4:	2301      	movs	r3, #1
 80015d6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	2300      	movs	r3, #0
 80015fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fad6 	bl	8000bb0 <HAL_GetTick>
 8001604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fad1 	bl	8000bb0 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d902      	bls.n	8001620 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	f000 bc66 	b.w	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001632:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x580>
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e013      	b.n	8001678 <HAL_RCC_OscConfig+0x5a8>
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001668:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_OscConfig+0x63c>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	2202      	movs	r2, #2
 800167a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800167e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001682:	fa92 f2a2 	rbit	r2, r2
 8001686:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800168a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1af      	bne.n	800160a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80da 	beq.w	800186e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d069      	beq.n	8001798 <HAL_RCC_OscConfig+0x6c8>
 80016c4:	2301      	movs	r3, #1
 80016c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x640>)
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa5f 	bl	8000bb0 <HAL_GetTick>
 80016f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e00d      	b.n	8001714 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fa5a 	bl	8000bb0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d905      	bls.n	8001714 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e3ef      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 800170c:	40021000 	.word	0x40021000
 8001710:	10908120 	.word	0x10908120
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001756:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001758:	4ba4      	ldr	r3, [pc, #656]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001760:	2102      	movs	r1, #2
 8001762:	6019      	str	r1, [r3, #0]
 8001764:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f1a3 	rbit	r1, r3
 800176e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001772:	6019      	str	r1, [r3, #0]
  return result;
 8001774:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0b0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x628>
 8001796:	e06a      	b.n	800186e <HAL_RCC_OscConfig+0x79e>
 8001798:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017ae:	601a      	str	r2, [r3, #0]
  return result;
 80017b0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <HAL_RCC_OscConfig+0x920>)
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f9f1 	bl	8000bb0 <HAL_GetTick>
 80017ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e009      	b.n	80017e8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff f9ec 	bl	8000bb0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e381      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 80017e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001804:	2202      	movs	r2, #2
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800181c:	2202      	movs	r2, #2
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800182e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4b6e      	ldr	r3, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001838:	2102      	movs	r1, #2
 800183a:	6019      	str	r1, [r3, #0]
 800183c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f1a3 	rbit	r1, r3
 8001846:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800184a:	6019      	str	r1, [r3, #0]
  return result;
 800184c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1b2      	bne.n	80017d4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8157 	beq.w	8001b2c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	61d3      	str	r3, [r2, #28]
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_RCC_OscConfig+0x924>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x924>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a4b      	ldr	r2, [pc, #300]	; (80019f4 <HAL_RCC_OscConfig+0x924>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f96f 	bl	8000bb0 <HAL_GetTick>
 80018d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	e009      	b.n	80018ec <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff f96a 	bl	8000bb0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e2ff      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_OscConfig+0x924>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ef      	beq.n	80018d8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x840>
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a39      	ldr	r2, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	e02f      	b.n	8001970 <HAL_RCC_OscConfig+0x8a0>
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x864>
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a33      	ldr	r2, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0x8a0>
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x888>
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a27      	ldr	r2, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x8a0>
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06a      	beq.n	8001a50 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff f919 	bl	8000bb0 <HAL_GetTick>
 800197e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f914 	bl	8000bb0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e2a7      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 800199c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019a0:	2202      	movs	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019ca:	601a      	str	r2, [r3, #0]
  return result;
 80019cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x928>
 80019e6:	4b01      	ldr	r3, [pc, #4]	; (80019ec <HAL_RCC_OscConfig+0x91c>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x944>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	10908120 	.word	0x10908120
 80019f4:	40007000 	.word	0x40007000
 80019f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4bc0      	ldr	r3, [pc, #768]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a18:	2102      	movs	r1, #2
 8001a1a:	6011      	str	r1, [r2, #0]
 8001a1c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fa92 f1a2 	rbit	r1, r2
 8001a26:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a2a:	6011      	str	r1, [r2, #0]
  return result;
 8001a2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d09a      	beq.n	8001984 <HAL_RCC_OscConfig+0x8b4>
 8001a4e:	e063      	b.n	8001b18 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f8ae 	bl	8000bb0 <HAL_GetTick>
 8001a54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff f8a9 	bl	8000bb0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e23c      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001a72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a76:	2202      	movs	r2, #2
 8001a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8e:	2202      	movs	r2, #2
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aa0:	601a      	str	r2, [r3, #0]
  return result;
 8001aa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x9f2>
 8001abc:	4b95      	ldr	r3, [pc, #596]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	e00d      	b.n	8001ade <HAL_RCC_OscConfig+0xa0e>
 8001ac2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	6011      	str	r1, [r2, #0]
 8001ae6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	fa92 f1a2 	rbit	r1, r2
 8001af0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001af4:	6011      	str	r1, [r2, #0]
  return result;
 8001af6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1a0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b18:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 81d9 	beq.w	8001eea <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f000 81a6 	beq.w	8001e92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	f040 811e 	bne.w	8001d8e <HAL_RCC_OscConfig+0xcbe>
 8001b52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff f812 	bl	8000bb0 <HAL_GetTick>
 8001b8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff f80d 	bl	8000bb0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1a2      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001ba6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0xb10>
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb48>
 8001be0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fa92 f1a2 	rbit	r1, r2
 8001c2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c30:	6011      	str	r1, [r2, #0]
  return result;
 8001c32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d19e      	bne.n	8001b92 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f023 020f 	bic.w	r2, r3, #15
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	492c      	ldr	r1, [pc, #176]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a19      	ldr	r1, [r3, #32]
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	4925      	ldr	r1, [pc, #148]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ca2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe ff79 	bl	8000bb0 <HAL_GetTick>
 8001cbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc2:	e009      	b.n	8001cd8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ff74 	bl	8000bb0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e109      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf0:	601a      	str	r2, [r3, #0]
  return result;
 8001cf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0xc48>
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <HAL_RCC_OscConfig+0xc44>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e01e      	b.n	8001d50 <HAL_RCC_OscConfig+0xc80>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0xe28>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d58:	6011      	str	r1, [r2, #0]
 8001d5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fa92 f1a2 	rbit	r1, r2
 8001d64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d68:	6011      	str	r1, [r2, #0]
  return result;
 8001d6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d09b      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xbf4>
 8001d8c:	e0ad      	b.n	8001eea <HAL_RCC_OscConfig+0xe1a>
 8001d8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da6:	601a      	str	r2, [r3, #0]
  return result;
 8001da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fef4 	bl	8000bb0 <HAL_GetTick>
 8001dc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe feef 	bl	8000bb0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e084      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfa:	601a      	str	r2, [r3, #0]
  return result;
 8001dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0xd4c>
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_RCC_OscConfig+0xe28>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e01b      	b.n	8001e54 <HAL_RCC_OscConfig+0xd84>
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f107 0318 	add.w	r3, r7, #24
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0xe28>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f107 0214 	add.w	r2, r7, #20
 8001e58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	f107 0214 	add.w	r2, r7, #20
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fa92 f1a2 	rbit	r1, r2
 8001e68:	f107 0210 	add.w	r2, r7, #16
 8001e6c:	6011      	str	r1, [r2, #0]
  return result;
 8001e6e:	f107 0210 	add.w	r2, r7, #16
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d19e      	bne.n	8001dce <HAL_RCC_OscConfig+0xcfe>
 8001e90:	e02b      	b.n	8001eea <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e025      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_RCC_OscConfig+0xe28>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_OscConfig+0xe28>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001eb4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d111      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ec2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d108      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b09e      	sub	sp, #120	; 0x78
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e162      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	498b      	ldr	r1, [pc, #556]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e14a      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	497f      	ldr	r1, [pc, #508]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80dc 	beq.w	8002128 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d13c      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xf6>
 8001f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xa6>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	e00f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0xc6>
 8001fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d17b      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0f3      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d13c      	bne.n	8002074 <HAL_RCC_ClockConfig+0x178>
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_RCC_ClockConfig+0x128>
 800201e:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e00f      	b.n	8002044 <HAL_RCC_ClockConfig+0x148>
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
 8002032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
 8002038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002048:	63ba      	str	r2, [r7, #56]	; 0x38
 800204a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800204c:	fa92 f2a2 	rbit	r2, r2
 8002050:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f042 0220 	orr.w	r2, r2, #32
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f002 021f 	and.w	r2, r2, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d13a      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b2      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
 8002074:	2302      	movs	r3, #2
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_RCC_ClockConfig+0x1a0>
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e00d      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1bc>
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2202      	movs	r2, #2
 80020ba:	61ba      	str	r2, [r7, #24]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	617a      	str	r2, [r7, #20]
  return result;
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e079      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	491a      	ldr	r1, [pc, #104]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fd5a 	bl	8000bb0 <HAL_GetTick>
 80020fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fd56 	bl	8000bb0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e061      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d214      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4906      	ldr	r1, [pc, #24]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e040      	b.n	80021da <HAL_RCC_ClockConfig+0x2de>
 8002158:	40022000 	.word	0x40022000
 800215c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_ClockConfig+0x2e8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	491a      	ldr	r1, [pc, #104]	; (80021e4 <HAL_RCC_ClockConfig+0x2e8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x2e8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4912      	ldr	r1, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x2e8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800219e:	f000 f829 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021a2:	4601      	mov	r1, r0
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_RCC_ClockConfig+0x2e8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ac:	22f0      	movs	r2, #240	; 0xf0
 80021ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	fa92 f2a2 	rbit	r2, r2
 80021b6:	60fa      	str	r2, [r7, #12]
  return result;
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	40d3      	lsrs	r3, r2
 80021c2:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x2ec>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <HAL_RCC_ClockConfig+0x2f0>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RCC_ClockConfig+0x2f4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fbd8 	bl	8000988 <HAL_InitTick>
  
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3778      	adds	r7, #120	; 0x78
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	0800bab8 	.word	0x0800bab8
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b08b      	sub	sp, #44	; 0x2c
 80021f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x30>
 800221e:	2b08      	cmp	r3, #8
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x36>
 8002222:	e03f      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002226:	623b      	str	r3, [r7, #32]
      break;
 8002228:	e03f      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002230:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002234:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	fa92 f2a2 	rbit	r2, r2
 800223c:	607a      	str	r2, [r7, #4]
  return result;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	40d3      	lsrs	r3, r2
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	220f      	movs	r2, #15
 8002258:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	60fa      	str	r2, [r7, #12]
  return result;
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	40d3      	lsrs	r3, r2
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	fbb2 f2f3 	udiv	r2, r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
 800228c:	e007      	b.n	800229e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fbb2 f2f3 	udiv	r2, r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	623b      	str	r3, [r7, #32]
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	372c      	adds	r7, #44	; 0x2c
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	0800bad0 	.word	0x0800bad0
 80022c4:	0800bae0 	.word	0x0800bae0

080022c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022e6:	f7ff ffef 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022ea:	4601      	mov	r1, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	603a      	str	r2, [r7, #0]
  return result;
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x40>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	0800bac8 	.word	0x0800bac8

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800232a:	f7ff ffcd 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 800232e:	4601      	mov	r1, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002338:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800233c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	603a      	str	r2, [r7, #0]
  return result;
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	40d3      	lsrs	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	0800bac8 	.word	0x0800bac8

08002368 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	220f      	movs	r2, #15
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_RCC_GetClockConfig+0x60>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0207 	and.w	r2, r3, #7
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40022000 	.word	0x40022000

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b092      	sub	sp, #72	; 0x48
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80d4 	beq.w	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10e      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	61d3      	str	r3, [r2, #28]
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe fbbd 	bl	8000bb0 <HAL_GetTick>
 8002436:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fbb9 	bl	8000bb0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1d6      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8084 	beq.w	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002474:	429a      	cmp	r2, r3
 8002476:	d07c      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	461a      	mov	r2, r3
 80024c6:	2300      	movs	r3, #0
 80024c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fb69 	bl	8000bb0 <HAL_GetTick>
 80024de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fb65 	bl	8000bb0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e180      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	61fb      	str	r3, [r7, #28]
  return result;
 8002510:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d108      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002526:	4b01      	ldr	r3, [pc, #4]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	e00d      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	10908100 	.word	0x10908100
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	2202      	movs	r2, #2
 800254a:	613a      	str	r2, [r7, #16]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	fa92 f2a2 	rbit	r2, r2
 8002552:	60fa      	str	r2, [r7, #12]
  return result;
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0b7      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002572:	4b95      	ldr	r3, [pc, #596]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4992      	ldr	r1, [pc, #584]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a8d      	ldr	r2, [pc, #564]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002596:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4985      	ldr	r1, [pc, #532]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	497e      	ldr	r1, [pc, #504]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e0:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4976      	ldr	r1, [pc, #472]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f023 0210 	bic.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	496f      	ldr	r1, [pc, #444]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	4967      	ldr	r1, [pc, #412]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f023 0220 	bic.w	r2, r3, #32
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4960      	ldr	r1, [pc, #384]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	4958      	ldr	r1, [pc, #352]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	4951      	ldr	r1, [pc, #324]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002684:	4313      	orrs	r3, r2
 8002686:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002694:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4949      	ldr	r1, [pc, #292]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4942      	ldr	r1, [pc, #264]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	493a      	ldr	r1, [pc, #232]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	4933      	ldr	r1, [pc, #204]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	492b      	ldr	r1, [pc, #172]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4924      	ldr	r1, [pc, #144]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	491c      	ldr	r1, [pc, #112]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	4915      	ldr	r1, [pc, #84]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	490d      	ldr	r1, [pc, #52]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	4906      	ldr	r1, [pc, #24]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	e002      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3748      	adds	r7, #72	; 0x48
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e09d      	b.n	8002956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282a:	d009      	beq.n	8002840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	e005      	b.n	8002840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe f80e 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002880:	d902      	bls.n	8002888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e002      	b.n	800288e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002896:	d007      	beq.n	80028a8 <HAL_SPI_Init+0xa0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	ea42 0103 	orr.w	r1, r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 0204 	and.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002924:	ea42 0103 	orr.w	r1, r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08a      	sub	sp, #40	; 0x28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800296c:	2301      	movs	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x26>
 8002980:	2302      	movs	r3, #2
 8002982:	e1fb      	b.n	8002d7c <HAL_SPI_TransmitReceive+0x41e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800298c:	f7fe f910 	bl	8000bb0 <HAL_GetTick>
 8002990:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002998:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029a8:	7efb      	ldrb	r3, [r7, #27]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d00e      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x6e>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b4:	d106      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x66>
 80029be:	7efb      	ldrb	r3, [r7, #27]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d003      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029ca:	e1cd      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_SPI_TransmitReceive+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_TransmitReceive+0x80>
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029e4:	e1c0      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d003      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2205      	movs	r2, #5
 80029f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a3c:	d802      	bhi.n	8002a44 <HAL_SPI_TransmitReceive+0xe6>
 8002a3e:	8a3b      	ldrh	r3, [r7, #16]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d908      	bls.n	8002a56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	e007      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d007      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a8c:	d97c      	bls.n	8002b88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x13e>
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d169      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	1c9a      	adds	r2, r3, #2
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac0:	e056      	b.n	8002b70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x1aa>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x1aa>
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d113      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d11c      	bne.n	8002b50 <HAL_SPI_TransmitReceive+0x1f2>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	1c9a      	adds	r2, r3, #2
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b50:	f7fe f82e 	bl	8000bb0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d807      	bhi.n	8002b70 <HAL_SPI_TransmitReceive+0x212>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d003      	beq.n	8002b70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b6e:	e0fb      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1a3      	bne.n	8002ac2 <HAL_SPI_TransmitReceive+0x164>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d19d      	bne.n	8002ac2 <HAL_SPI_TransmitReceive+0x164>
 8002b86:	e0df      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x23a>
 8002b90:	8a7b      	ldrh	r3, [r7, #18]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 80cb 	bne.w	8002d2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d912      	bls.n	8002bc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b02      	subs	r3, #2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bc6:	e0b2      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bee:	e09e      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d134      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x30a>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02f      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x30a>
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d12c      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d912      	bls.n	8002c3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b02      	subs	r3, #2
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c3c:	e012      	b.n	8002c64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d148      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x3aa>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d042      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d923      	bls.n	8002cd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b02      	subs	r3, #2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d81f      	bhi.n	8002d04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	e016      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f103 020c 	add.w	r2, r3, #12
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	7812      	ldrb	r2, [r2, #0]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d04:	2301      	movs	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d08:	f7fd ff52 	bl	8000bb0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d803      	bhi.n	8002d20 <HAL_SPI_TransmitReceive+0x3c2>
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x3c8>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d2c:	e01c      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f af5b 	bne.w	8002bf0 <HAL_SPI_TransmitReceive+0x292>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f47f af54 	bne.w	8002bf0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f92f 	bl	8002fb0 <SPI_EndRxTxTransaction>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	661a      	str	r2, [r3, #96]	; 0x60
 8002d64:	e000      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d94:	f7fd ff0c 	bl	8000bb0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002da4:	f7fd ff04 	bl	8000bb0 <HAL_GetTick>
 8002da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dba:	e054      	b.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d050      	beq.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dc4:	f7fd fef4 	bl	8000bb0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13d      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d111      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d004      	beq.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d107      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e20:	d10f      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e017      	b.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d19b      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ea2:	f7fd fe85 	bl	8000bb0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb2:	f7fd fe7d 	bl	8000bb0 <HAL_GetTick>
 8002eb6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00da      	lsls	r2, r3, #3
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	0d1b      	lsrs	r3, r3, #20
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ed0:	e05f      	b.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ed8:	d106      	bne.n	8002ee8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d050      	beq.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ef0:	f7fd fe5e 	bl	8000bb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d902      	bls.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13d      	bne.n	8002f82 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1e:	d111      	bne.n	8002f44 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d004      	beq.n	8002f34 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d107      	bne.n	8002f44 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d10f      	bne.n	8002f6e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e010      	b.n	8002fa4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d197      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000000 	.word	0x20000000

08002fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff ff63 	bl	8002e94 <SPI_WaitFifoStateUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e027      	b.n	8003034 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fec8 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e014      	b.n	8003034 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff ff3c 	bl	8002e94 <SPI_WaitFifoStateUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e000      	b.n	8003034 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e049      	b.n	80030e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f841 	bl	80030ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 f9f8 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d001      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04f      	b.n	80031b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01d      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d018      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00e      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_TIM_Base_Start_IT+0x76>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d115      	bne.n	80031a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_TIM_Base_Start_IT+0xdc>)
 800317e:	4013      	ands	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d015      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0xb4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d011      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	e008      	b.n	80031b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e000      	b.n	80031b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40013400 	.word	0x40013400
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40015000 	.word	0x40015000
 80031dc:	00010007 	.word	0x00010007

080031e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0202 	mvn.w	r2, #2
 800320c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f905 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8f7 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f908 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0204 	mvn.w	r2, #4
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8db 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f8cd 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8de 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b08      	cmp	r3, #8
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0208 	mvn.w	r2, #8
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8b1 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8a3 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8b4 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0210 	mvn.w	r2, #16
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f887 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f879 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f88a 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0201 	mvn.w	r2, #1
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fa4e 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f918 	bl	80035c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339e:	d10e      	bne.n	80033be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f90b 	bl	80035d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d10e      	bne.n	80033ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f838 	bl	800345a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d10e      	bne.n	8003416 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b20      	cmp	r3, #32
 8003404:	d107      	bne.n	8003416 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0220 	mvn.w	r2, #32
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8cb 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a42      	ldr	r2, [pc, #264]	; (800358c <TIM_Base_SetConfig+0x11c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d00f      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3f      	ldr	r2, [pc, #252]	; (8003590 <TIM_Base_SetConfig+0x120>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00b      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <TIM_Base_SetConfig+0x124>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <TIM_Base_SetConfig+0x128>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3c      	ldr	r2, [pc, #240]	; (800359c <TIM_Base_SetConfig+0x12c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a31      	ldr	r2, [pc, #196]	; (800358c <TIM_Base_SetConfig+0x11c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01f      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d01b      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <TIM_Base_SetConfig+0x120>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d017      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <TIM_Base_SetConfig+0x124>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <TIM_Base_SetConfig+0x128>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00f      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <TIM_Base_SetConfig+0x130>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <TIM_Base_SetConfig+0x134>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <TIM_Base_SetConfig+0x138>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_Base_SetConfig+0x9a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a25      	ldr	r2, [pc, #148]	; (800359c <TIM_Base_SetConfig+0x12c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <TIM_Base_SetConfig+0x11c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_Base_SetConfig+0x100>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <TIM_Base_SetConfig+0x128>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x100>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <TIM_Base_SetConfig+0x130>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x100>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <TIM_Base_SetConfig+0x134>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x100>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <TIM_Base_SetConfig+0x138>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x100>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <TIM_Base_SetConfig+0x12c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d103      	bne.n	8003578 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	615a      	str	r2, [r3, #20]
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800
 8003598:	40013400 	.word	0x40013400
 800359c:	40015000 	.word	0x40015000
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e040      	b.n	800367c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f97a 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8c0 	bl	80037ac <UART_SetConfig>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa88 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb0f 	bl	8003c98 <UART_CheckIdleState>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 8082 	bne.w	80037a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_UART_Transmit+0x26>
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e07a      	b.n	80037a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x38>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e073      	b.n	80037a4 <HAL_UART_Transmit+0x120>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2221      	movs	r2, #33	; 0x21
 80036d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036d2:	f7fd fa6d 	bl	8000bb0 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f0:	d108      	bne.n	8003704 <HAL_UART_Transmit+0x80>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e003      	b.n	800370c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003714:	e02d      	b.n	8003772 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fb02 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e039      	b.n	80037a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003742:	b292      	uxth	r2, r2
 8003744:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	3302      	adds	r3, #2
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	e008      	b.n	8003760 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b292      	uxth	r2, r2
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1cb      	bne.n	8003716 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 face 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e005      	b.n	80037a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4baa      	ldr	r3, [pc, #680]	; (8003a80 <UART_SetConfig+0x2d4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a98      	ldr	r2, [pc, #608]	; (8003a84 <UART_SetConfig+0x2d8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d121      	bne.n	800386c <UART_SetConfig+0xc0>
 8003828:	4b97      	ldr	r3, [pc, #604]	; (8003a88 <UART_SetConfig+0x2dc>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b03      	cmp	r3, #3
 8003832:	d817      	bhi.n	8003864 <UART_SetConfig+0xb8>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x90>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	0800384d 	.word	0x0800384d
 8003840:	08003859 	.word	0x08003859
 8003844:	0800385f 	.word	0x0800385f
 8003848:	08003853 	.word	0x08003853
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e0b2      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e0af      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003858:	2304      	movs	r3, #4
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e0ac      	b.n	80039b8 <UART_SetConfig+0x20c>
 800385e:	2308      	movs	r3, #8
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e0a9      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003864:	2310      	movs	r3, #16
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	bf00      	nop
 800386a:	e0a5      	b.n	80039b8 <UART_SetConfig+0x20c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a86      	ldr	r2, [pc, #536]	; (8003a8c <UART_SetConfig+0x2e0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d123      	bne.n	80038be <UART_SetConfig+0x112>
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <UART_SetConfig+0x2dc>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d012      	beq.n	80038aa <UART_SetConfig+0xfe>
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d802      	bhi.n	8003890 <UART_SetConfig+0xe4>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <UART_SetConfig+0xf2>
 800388e:	e012      	b.n	80038b6 <UART_SetConfig+0x10a>
 8003890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003894:	d00c      	beq.n	80038b0 <UART_SetConfig+0x104>
 8003896:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800389a:	d003      	beq.n	80038a4 <UART_SetConfig+0xf8>
 800389c:	e00b      	b.n	80038b6 <UART_SetConfig+0x10a>
 800389e:	2300      	movs	r3, #0
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e089      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e086      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038aa:	2304      	movs	r3, #4
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e083      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038b0:	2308      	movs	r3, #8
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e080      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038b6:	2310      	movs	r3, #16
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	bf00      	nop
 80038bc:	e07c      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	; (8003a90 <UART_SetConfig+0x2e4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d123      	bne.n	8003910 <UART_SetConfig+0x164>
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <UART_SetConfig+0x2dc>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d4:	d012      	beq.n	80038fc <UART_SetConfig+0x150>
 80038d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038da:	d802      	bhi.n	80038e2 <UART_SetConfig+0x136>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <UART_SetConfig+0x144>
 80038e0:	e012      	b.n	8003908 <UART_SetConfig+0x15c>
 80038e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038e6:	d00c      	beq.n	8003902 <UART_SetConfig+0x156>
 80038e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038ec:	d003      	beq.n	80038f6 <UART_SetConfig+0x14a>
 80038ee:	e00b      	b.n	8003908 <UART_SetConfig+0x15c>
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e060      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e05d      	b.n	80039b8 <UART_SetConfig+0x20c>
 80038fc:	2304      	movs	r3, #4
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e05a      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003902:	2308      	movs	r3, #8
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e057      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003908:	2310      	movs	r3, #16
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	bf00      	nop
 800390e:	e053      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5f      	ldr	r2, [pc, #380]	; (8003a94 <UART_SetConfig+0x2e8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d123      	bne.n	8003962 <UART_SetConfig+0x1b6>
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <UART_SetConfig+0x2dc>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d012      	beq.n	800394e <UART_SetConfig+0x1a2>
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392c:	d802      	bhi.n	8003934 <UART_SetConfig+0x188>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <UART_SetConfig+0x196>
 8003932:	e012      	b.n	800395a <UART_SetConfig+0x1ae>
 8003934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003938:	d00c      	beq.n	8003954 <UART_SetConfig+0x1a8>
 800393a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800393e:	d003      	beq.n	8003948 <UART_SetConfig+0x19c>
 8003940:	e00b      	b.n	800395a <UART_SetConfig+0x1ae>
 8003942:	2300      	movs	r3, #0
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e037      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003948:	2302      	movs	r3, #2
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e034      	b.n	80039b8 <UART_SetConfig+0x20c>
 800394e:	2304      	movs	r3, #4
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e031      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003954:	2308      	movs	r3, #8
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e02e      	b.n	80039b8 <UART_SetConfig+0x20c>
 800395a:	2310      	movs	r3, #16
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	bf00      	nop
 8003960:	e02a      	b.n	80039b8 <UART_SetConfig+0x20c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <UART_SetConfig+0x2ec>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d123      	bne.n	80039b4 <UART_SetConfig+0x208>
 800396c:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <UART_SetConfig+0x2dc>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003978:	d012      	beq.n	80039a0 <UART_SetConfig+0x1f4>
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d802      	bhi.n	8003986 <UART_SetConfig+0x1da>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <UART_SetConfig+0x1e8>
 8003984:	e012      	b.n	80039ac <UART_SetConfig+0x200>
 8003986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398a:	d00c      	beq.n	80039a6 <UART_SetConfig+0x1fa>
 800398c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003990:	d003      	beq.n	800399a <UART_SetConfig+0x1ee>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x200>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e00e      	b.n	80039b8 <UART_SetConfig+0x20c>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e00b      	b.n	80039b8 <UART_SetConfig+0x20c>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e008      	b.n	80039b8 <UART_SetConfig+0x20c>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e005      	b.n	80039b8 <UART_SetConfig+0x20c>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	bf00      	nop
 80039b2:	e001      	b.n	80039b8 <UART_SetConfig+0x20c>
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c0:	d16e      	bne.n	8003aa0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d828      	bhi.n	8003a1a <UART_SetConfig+0x26e>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x224>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fc74 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e013      	b.n	8003a24 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fc92 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8003a00:	61b8      	str	r0, [r7, #24]
        break;
 8003a02:	e00f      	b.n	8003a24 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <UART_SetConfig+0x2f0>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e00c      	b.n	8003a24 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fbf3 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8003a0e:	61b8      	str	r0, [r7, #24]
        break;
 8003a10:	e008      	b.n	8003a24 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e004      	b.n	8003a24 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77bb      	strb	r3, [r7, #30]
        break;
 8003a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8086 	beq.w	8003b38 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	005a      	lsls	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d916      	bls.n	8003a78 <UART_SetConfig+0x2cc>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d212      	bcs.n	8003a78 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f023 030f 	bic.w	r3, r3, #15
 8003a5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	89fb      	ldrh	r3, [r7, #14]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	89fa      	ldrh	r2, [r7, #14]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	e05f      	b.n	8003b38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	77bb      	strb	r3, [r7, #30]
 8003a7c:	e05c      	b.n	8003b38 <UART_SetConfig+0x38c>
 8003a7e:	bf00      	nop
 8003a80:	efff69f3 	.word	0xefff69f3
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40004400 	.word	0x40004400
 8003a90:	40004800 	.word	0x40004800
 8003a94:	40004c00 	.word	0x40004c00
 8003a98:	40005000 	.word	0x40005000
 8003a9c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d827      	bhi.n	8003af6 <UART_SetConfig+0x34a>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <UART_SetConfig+0x300>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003ae1 	.word	0x08003ae1
 8003ab8:	08003af7 	.word	0x08003af7
 8003abc:	08003ae7 	.word	0x08003ae7
 8003ac0:	08003af7 	.word	0x08003af7
 8003ac4:	08003af7 	.word	0x08003af7
 8003ac8:	08003af7 	.word	0x08003af7
 8003acc:	08003aef 	.word	0x08003aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f7fe fc06 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	61b8      	str	r0, [r7, #24]
        break;
 8003ad6:	e013      	b.n	8003b00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fc24 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 8003adc:	61b8      	str	r0, [r7, #24]
        break;
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <UART_SetConfig+0x3a4>)
 8003ae2:	61bb      	str	r3, [r7, #24]
        break;
 8003ae4:	e00c      	b.n	8003b00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae6:	f7fe fb85 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8003aea:	61b8      	str	r0, [r7, #24]
        break;
 8003aec:	e008      	b.n	8003b00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e004      	b.n	8003b00 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	77bb      	strb	r3, [r7, #30]
        break;
 8003afe:	bf00      	nop
    }

    if (pclk != 0U)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	085a      	lsrs	r2, r3, #1
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	441a      	add	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	d908      	bls.n	8003b34 <UART_SetConfig+0x388>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d204      	bcs.n	8003b34 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	e001      	b.n	8003b38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d10a      	bne.n	8003c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca8:	f7fc ff82 	bl	8000bb0 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10e      	bne.n	8003cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f82d 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e023      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10e      	bne.n	8003d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f817 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00d      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	e05e      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d05a      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fc ff34 	bl	8000bb0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11b      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e043      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02c      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d124      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d091      	beq.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <MX_FATFS_Init+0x18>)
 8003e2a:	4805      	ldr	r0, [pc, #20]	; (8003e40 <MX_FATFS_Init+0x1c>)
 8003e2c:	f003 fc96 	bl	800775c <FATFS_LinkDriver>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <MX_FATFS_Init+0x20>)
 8003e36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20002188 	.word	0x20002188
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	2000218c 	.word	0x2000218c

08003e48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f9d7 	bl	8004218 <USER_SPI_initialize>
 8003e6a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fab5 	bl	80043f0 <USER_SPI_status>
 8003e86:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003ea0:	7bf8      	ldrb	r0, [r7, #15]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	f000 fab8 	bl	800441c <USER_SPI_read>
 8003eac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003ec6:	7bf8      	ldrb	r0, [r7, #15]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	f000 fb0b 	bl	80044e8 <USER_SPI_write>
 8003ed2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	603a      	str	r2, [r7, #0]
 8003ee6:	71fb      	strb	r3, [r7, #7]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003eec:	79b9      	ldrb	r1, [r7, #6]
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fb74 	bl	80045e0 <USER_SPI_ioctl>
 8003ef8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003f0c:	f7fc fe50 	bl	8000bb0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <SPI_Timer_On+0x20>)
 8003f14:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <SPI_Timer_On+0x24>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200025f0 	.word	0x200025f0
 8003f28:	200025f4 	.word	0x200025f4

08003f2c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003f30:	f7fc fe3e 	bl	8000bb0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <SPI_Timer_Status+0x24>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <SPI_Timer_Status+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	bf34      	ite	cc
 8003f44:	2301      	movcc	r3, #1
 8003f46:	2300      	movcs	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200025f0 	.word	0x200025f0
 8003f54:	200025f4 	.word	0x200025f4

08003f58 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003f62:	f107 020f 	add.w	r2, r7, #15
 8003f66:	1df9      	adds	r1, r7, #7
 8003f68:	2332      	movs	r3, #50	; 0x32
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4804      	ldr	r0, [pc, #16]	; (8003f80 <xchg_spi+0x28>)
 8003f70:	f7fe fcf5 	bl	800295e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20001b40 	.word	0x20001b40

08003f84 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e00a      	b.n	8003faa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	18d4      	adds	r4, r2, r3
 8003f9a:	20ff      	movs	r0, #255	; 0xff
 8003f9c:	f7ff ffdc 	bl	8003f58 <xchg_spi>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3f0      	bcc.n	8003f94 <rcvr_spi_multi+0x10>
	}
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}

08003fba <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e009      	b.n	8003fde <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ffc0 	bl	8003f58 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3f1      	bcc.n	8003fca <xmit_spi_multi+0x10>
	}
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003ff6:	f7fc fddb 	bl	8000bb0 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004000:	20ff      	movs	r0, #255	; 0xff
 8004002:	f7ff ffa9 	bl	8003f58 <xchg_spi>
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2bff      	cmp	r3, #255	; 0xff
 800400e:	d007      	beq.n	8004020 <wait_ready+0x32>
 8004010:	f7fc fdce 	bl	8000bb0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d8ef      	bhi.n	8004000 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2bff      	cmp	r3, #255	; 0xff
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004038:	2201      	movs	r2, #1
 800403a:	2102      	movs	r1, #2
 800403c:	4803      	ldr	r0, [pc, #12]	; (800404c <despiselect+0x18>)
 800403e:	f7fd f82f 	bl	80010a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004042:	20ff      	movs	r0, #255	; 0xff
 8004044:	f7ff ff88 	bl	8003f58 <xchg_spi>

}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}
 800404c:	48000400 	.word	0x48000400

08004050 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004054:	2200      	movs	r2, #0
 8004056:	2102      	movs	r1, #2
 8004058:	4809      	ldr	r0, [pc, #36]	; (8004080 <spiselect+0x30>)
 800405a:	f7fd f821 	bl	80010a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800405e:	20ff      	movs	r0, #255	; 0xff
 8004060:	f7ff ff7a 	bl	8003f58 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004068:	f7ff ffc1 	bl	8003fee <wait_ready>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <spiselect+0x26>
 8004072:	2301      	movs	r3, #1
 8004074:	e002      	b.n	800407c <spiselect+0x2c>

	despiselect();
 8004076:	f7ff ffdd 	bl	8004034 <despiselect>
	return 0;	/* Timeout */
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	48000400 	.word	0x48000400

08004084 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800408e:	20c8      	movs	r0, #200	; 0xc8
 8004090:	f7ff ff38 	bl	8003f04 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004094:	20ff      	movs	r0, #255	; 0xff
 8004096:	f7ff ff5f 	bl	8003f58 <xchg_spi>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2bff      	cmp	r3, #255	; 0xff
 80040a2:	d104      	bne.n	80040ae <rcvr_datablock+0x2a>
 80040a4:	f7ff ff42 	bl	8003f2c <SPI_Timer_Status>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f2      	bne.n	8004094 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2bfe      	cmp	r3, #254	; 0xfe
 80040b2:	d001      	beq.n	80040b8 <rcvr_datablock+0x34>
 80040b4:	2300      	movs	r3, #0
 80040b6:	e00a      	b.n	80040ce <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff62 	bl	8003f84 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80040c0:	20ff      	movs	r0, #255	; 0xff
 80040c2:	f7ff ff49 	bl	8003f58 <xchg_spi>
 80040c6:	20ff      	movs	r0, #255	; 0xff
 80040c8:	f7ff ff46 	bl	8003f58 <xchg_spi>

	return 1;						/* Function succeeded */
 80040cc:	2301      	movs	r3, #1
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80040e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e6:	f7ff ff82 	bl	8003fee <wait_ready>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xmit_datablock+0x1e>
 80040f0:	2300      	movs	r3, #0
 80040f2:	e01e      	b.n	8004132 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff2e 	bl	8003f58 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	2bfd      	cmp	r3, #253	; 0xfd
 8004100:	d016      	beq.n	8004130 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff57 	bl	8003fba <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800410c:	20ff      	movs	r0, #255	; 0xff
 800410e:	f7ff ff23 	bl	8003f58 <xchg_spi>
 8004112:	20ff      	movs	r0, #255	; 0xff
 8004114:	f7ff ff20 	bl	8003f58 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004118:	20ff      	movs	r0, #255	; 0xff
 800411a:	f7ff ff1d 	bl	8003f58 <xchg_spi>
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2b05      	cmp	r3, #5
 800412a:	d001      	beq.n	8004130 <xmit_datablock+0x5a>
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <xmit_datablock+0x5c>
	}
	return 1;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	6039      	str	r1, [r7, #0]
 8004144:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da0e      	bge.n	800416c <send_cmd+0x32>
		cmd &= 0x7F;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004154:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004156:	2100      	movs	r1, #0
 8004158:	2037      	movs	r0, #55	; 0x37
 800415a:	f7ff ffee 	bl	800413a <send_cmd>
 800415e:	4603      	mov	r3, r0
 8004160:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004162:	7bbb      	ldrb	r3, [r7, #14]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d901      	bls.n	800416c <send_cmd+0x32>
 8004168:	7bbb      	ldrb	r3, [r7, #14]
 800416a:	e051      	b.n	8004210 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d008      	beq.n	8004184 <send_cmd+0x4a>
		despiselect();
 8004172:	f7ff ff5f 	bl	8004034 <despiselect>
		if (!spiselect()) return 0xFF;
 8004176:	f7ff ff6b 	bl	8004050 <spiselect>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <send_cmd+0x4a>
 8004180:	23ff      	movs	r3, #255	; 0xff
 8004182:	e045      	b.n	8004210 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fee3 	bl	8003f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	0e1b      	lsrs	r3, r3, #24
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fedd 	bl	8003f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fed7 	bl	8003f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fed1 	bl	8003f58 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fecc 	bl	8003f58 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <send_cmd+0x94>
 80041ca:	2395      	movs	r3, #149	; 0x95
 80041cc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <send_cmd+0x9e>
 80041d4:	2387      	movs	r3, #135	; 0x87
 80041d6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff febc 	bl	8003f58 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d102      	bne.n	80041ec <send_cmd+0xb2>
 80041e6:	20ff      	movs	r0, #255	; 0xff
 80041e8:	f7ff feb6 	bl	8003f58 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80041ec:	230a      	movs	r3, #10
 80041ee:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80041f0:	20ff      	movs	r0, #255	; 0xff
 80041f2:	f7ff feb1 	bl	8003f58 <xchg_spi>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80041fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da05      	bge.n	800420e <send_cmd+0xd4>
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3b01      	subs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800420e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <USER_SPI_initialize+0x14>
 8004228:	2301      	movs	r3, #1
 800422a:	e0d6      	b.n	80043da <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800422c:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <USER_SPI_initialize+0x2a>
 800423a:	4b6a      	ldr	r3, [pc, #424]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	e0cb      	b.n	80043da <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004242:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <USER_SPI_initialize+0x1d0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800424c:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <USER_SPI_initialize+0x1d0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004254:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004256:	230a      	movs	r3, #10
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e005      	b.n	8004268 <USER_SPI_initialize+0x50>
 800425c:	20ff      	movs	r0, #255	; 0xff
 800425e:	f7ff fe7b 	bl	8003f58 <xchg_spi>
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	3b01      	subs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f6      	bne.n	800425c <USER_SPI_initialize+0x44>

	ty = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004272:	2100      	movs	r1, #0
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff ff60 	bl	800413a <send_cmd>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	f040 808b 	bne.w	8004398 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004286:	f7ff fe3d 	bl	8003f04 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800428a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800428e:	2008      	movs	r0, #8
 8004290:	f7ff ff53 	bl	800413a <send_cmd>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d151      	bne.n	800433e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	e00d      	b.n	80042bc <USER_SPI_initialize+0xa4>
 80042a0:	7bfc      	ldrb	r4, [r7, #15]
 80042a2:	20ff      	movs	r0, #255	; 0xff
 80042a4:	f7ff fe58 	bl	8003f58 <xchg_spi>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	4423      	add	r3, r4
 80042b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	3301      	adds	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d9ee      	bls.n	80042a0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80042c2:	7abb      	ldrb	r3, [r7, #10]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d167      	bne.n	8004398 <USER_SPI_initialize+0x180>
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	2baa      	cmp	r3, #170	; 0xaa
 80042cc:	d164      	bne.n	8004398 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80042ce:	bf00      	nop
 80042d0:	f7ff fe2c 	bl	8003f2c <SPI_Timer_Status>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <USER_SPI_initialize+0xd2>
 80042da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80042de:	20a9      	movs	r0, #169	; 0xa9
 80042e0:	f7ff ff2b 	bl	800413a <send_cmd>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f2      	bne.n	80042d0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80042ea:	f7ff fe1f 	bl	8003f2c <SPI_Timer_Status>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d051      	beq.n	8004398 <USER_SPI_initialize+0x180>
 80042f4:	2100      	movs	r1, #0
 80042f6:	203a      	movs	r0, #58	; 0x3a
 80042f8:	f7ff ff1f 	bl	800413a <send_cmd>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d14a      	bne.n	8004398 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	e00d      	b.n	8004324 <USER_SPI_initialize+0x10c>
 8004308:	7bfc      	ldrb	r4, [r7, #15]
 800430a:	20ff      	movs	r0, #255	; 0xff
 800430c:	f7ff fe24 	bl	8003f58 <xchg_spi>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	4423      	add	r3, r4
 800431a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	3301      	adds	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d9ee      	bls.n	8004308 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800432a:	7a3b      	ldrb	r3, [r7, #8]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <USER_SPI_initialize+0x120>
 8004334:	230c      	movs	r3, #12
 8004336:	e000      	b.n	800433a <USER_SPI_initialize+0x122>
 8004338:	2304      	movs	r3, #4
 800433a:	737b      	strb	r3, [r7, #13]
 800433c:	e02c      	b.n	8004398 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800433e:	2100      	movs	r1, #0
 8004340:	20a9      	movs	r0, #169	; 0xa9
 8004342:	f7ff fefa 	bl	800413a <send_cmd>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d804      	bhi.n	8004356 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800434c:	2302      	movs	r3, #2
 800434e:	737b      	strb	r3, [r7, #13]
 8004350:	23a9      	movs	r3, #169	; 0xa9
 8004352:	73bb      	strb	r3, [r7, #14]
 8004354:	e003      	b.n	800435e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004356:	2301      	movs	r3, #1
 8004358:	737b      	strb	r3, [r7, #13]
 800435a:	2301      	movs	r3, #1
 800435c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800435e:	bf00      	nop
 8004360:	f7ff fde4 	bl	8003f2c <SPI_Timer_Status>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <USER_SPI_initialize+0x162>
 800436a:	7bbb      	ldrb	r3, [r7, #14]
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fee3 	bl	800413a <send_cmd>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f2      	bne.n	8004360 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800437a:	f7ff fdd7 	bl	8003f2c <SPI_Timer_Status>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <USER_SPI_initialize+0x17c>
 8004384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004388:	2010      	movs	r0, #16
 800438a:	f7ff fed6 	bl	800413a <send_cmd>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <USER_SPI_initialize+0x180>
				ty = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <USER_SPI_initialize+0x1d4>)
 800439a:	7b7b      	ldrb	r3, [r7, #13]
 800439c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800439e:	f7ff fe49 	bl	8004034 <despiselect>

	if (ty) {			/* OK */
 80043a2:	7b7b      	ldrb	r3, [r7, #13]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <USER_SPI_initialize+0x1d0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <USER_SPI_initialize+0x1d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0210 	orr.w	r2, r2, #16
 80043ba:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e002      	b.n	80043d4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <USER_SPI_initialize+0x1cc>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000020 	.word	0x20000020
 80043e8:	20001b40 	.word	0x20001b40
 80043ec:	200001ac 	.word	0x200001ac

080043f0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <USER_SPI_status+0x14>
 8004400:	2301      	movs	r3, #1
 8004402:	e002      	b.n	800440a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <USER_SPI_status+0x28>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000020 	.word	0x20000020

0800441c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <USER_SPI_read+0x1c>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <USER_SPI_read+0x20>
 8004438:	2304      	movs	r3, #4
 800443a:	e04d      	b.n	80044d8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <USER_SPI_read+0xc4>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <USER_SPI_read+0x32>
 800444a:	2303      	movs	r3, #3
 800444c:	e044      	b.n	80044d8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800444e:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <USER_SPI_read+0xc8>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <USER_SPI_read+0x44>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d111      	bne.n	800448a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	2011      	movs	r0, #17
 800446a:	f7ff fe66 	bl	800413a <send_cmd>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d129      	bne.n	80044c8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004478:	68b8      	ldr	r0, [r7, #8]
 800447a:	f7ff fe03 	bl	8004084 <rcvr_datablock>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d021      	beq.n	80044c8 <USER_SPI_read+0xac>
			count = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	e01e      	b.n	80044c8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	2012      	movs	r0, #18
 800448e:	f7ff fe54 	bl	800413a <send_cmd>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d117      	bne.n	80044c8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f7ff fdf1 	bl	8004084 <rcvr_datablock>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <USER_SPI_read+0xa2>
				buff += 512;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ed      	bne.n	8004498 <USER_SPI_read+0x7c>
 80044bc:	e000      	b.n	80044c0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80044be:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80044c0:	2100      	movs	r1, #0
 80044c2:	200c      	movs	r0, #12
 80044c4:	f7ff fe39 	bl	800413a <send_cmd>
		}
	}
	despiselect();
 80044c8:	f7ff fdb4 	bl	8004034 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000020 	.word	0x20000020
 80044e4:	200001ac 	.word	0x200001ac

080044e8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <USER_SPI_write+0x1c>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <USER_SPI_write+0x20>
 8004504:	2304      	movs	r3, #4
 8004506:	e063      	b.n	80045d0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <USER_SPI_write+0xf0>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <USER_SPI_write+0x32>
 8004516:	2303      	movs	r3, #3
 8004518:	e05a      	b.n	80045d0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <USER_SPI_write+0xf0>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <USER_SPI_write+0x44>
 8004528:	2302      	movs	r3, #2
 800452a:	e051      	b.n	80045d0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <USER_SPI_write+0xf4>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <USER_SPI_write+0x56>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	025b      	lsls	r3, r3, #9
 800453c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d110      	bne.n	8004566 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	2018      	movs	r0, #24
 8004548:	f7ff fdf7 	bl	800413a <send_cmd>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d136      	bne.n	80045c0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004552:	21fe      	movs	r1, #254	; 0xfe
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f7ff fdbe 	bl	80040d6 <xmit_datablock>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02f      	beq.n	80045c0 <USER_SPI_write+0xd8>
			count = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	e02c      	b.n	80045c0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <USER_SPI_write+0xf4>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	f003 0306 	and.w	r3, r3, #6
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <USER_SPI_write+0x92>
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	2097      	movs	r0, #151	; 0x97
 8004576:	f7ff fde0 	bl	800413a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	2019      	movs	r0, #25
 800457e:	f7ff fddc 	bl	800413a <send_cmd>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11b      	bne.n	80045c0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004588:	21fc      	movs	r1, #252	; 0xfc
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f7ff fda3 	bl	80040d6 <xmit_datablock>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <USER_SPI_write+0xc4>
				buff += 512;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800459c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ee      	bne.n	8004588 <USER_SPI_write+0xa0>
 80045aa:	e000      	b.n	80045ae <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80045ac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80045ae:	21fd      	movs	r1, #253	; 0xfd
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7ff fd90 	bl	80040d6 <xmit_datablock>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <USER_SPI_write+0xd8>
 80045bc:	2301      	movs	r3, #1
 80045be:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80045c0:	f7ff fd38 	bl	8004034 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000020 	.word	0x20000020
 80045dc:	200001ac 	.word	0x200001ac

080045e0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	603a      	str	r2, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
 80045ec:	460b      	mov	r3, r1
 80045ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <USER_SPI_ioctl+0x1a>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e15a      	b.n	80048b0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80045fa:	4baf      	ldr	r3, [pc, #700]	; (80048b8 <USER_SPI_ioctl+0x2d8>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <USER_SPI_ioctl+0x2c>
 8004608:	2303      	movs	r3, #3
 800460a:	e151      	b.n	80048b0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	2b04      	cmp	r3, #4
 8004616:	f200 8136 	bhi.w	8004886 <USER_SPI_ioctl+0x2a6>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <USER_SPI_ioctl+0x40>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004635 	.word	0x08004635
 8004624:	08004649 	.word	0x08004649
 8004628:	08004887 	.word	0x08004887
 800462c:	080046f5 	.word	0x080046f5
 8004630:	080047eb 	.word	0x080047eb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004634:	f7ff fd0c 	bl	8004050 <spiselect>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8127 	beq.w	800488e <USER_SPI_ioctl+0x2ae>
 8004640:	2300      	movs	r3, #0
 8004642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004646:	e122      	b.n	800488e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004648:	2100      	movs	r1, #0
 800464a:	2009      	movs	r0, #9
 800464c:	f7ff fd75 	bl	800413a <send_cmd>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 811d 	bne.w	8004892 <USER_SPI_ioctl+0x2b2>
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	2110      	movs	r1, #16
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fd10 	bl	8004084 <rcvr_datablock>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8113 	beq.w	8004892 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800466c:	7b3b      	ldrb	r3, [r7, #12]
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d111      	bne.n	800469a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004676:	7d7b      	ldrb	r3, [r7, #21]
 8004678:	461a      	mov	r2, r3
 800467a:	7d3b      	ldrb	r3, [r7, #20]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	4413      	add	r3, r2
 8004680:	461a      	mov	r2, r3
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800468a:	4413      	add	r3, r2
 800468c:	3301      	adds	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	029a      	lsls	r2, r3, #10
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e028      	b.n	80046ec <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800469a:	7c7b      	ldrb	r3, [r7, #17]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	7dbb      	ldrb	r3, [r7, #22]
 80046a4:	09db      	lsrs	r3, r3, #7
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	7d7b      	ldrb	r3, [r7, #21]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0306 	and.w	r3, r3, #6
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3302      	adds	r3, #2
 80046be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80046c2:	7d3b      	ldrb	r3, [r7, #20]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	7cbb      	ldrb	r3, [r7, #18]
 80046d2:	029b      	lsls	r3, r3, #10
 80046d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046d8:	4413      	add	r3, r2
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80046de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046e2:	3b09      	subs	r3, #9
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	409a      	lsls	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80046f2:	e0ce      	b.n	8004892 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80046f4:	4b71      	ldr	r3, [pc, #452]	; (80048bc <USER_SPI_ioctl+0x2dc>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d031      	beq.n	8004764 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004700:	2100      	movs	r1, #0
 8004702:	208d      	movs	r0, #141	; 0x8d
 8004704:	f7ff fd19 	bl	800413a <send_cmd>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 80c3 	bne.w	8004896 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004710:	20ff      	movs	r0, #255	; 0xff
 8004712:	f7ff fc21 	bl	8003f58 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	2110      	movs	r1, #16
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fcb1 	bl	8004084 <rcvr_datablock>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80b6 	beq.w	8004896 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800472a:	2330      	movs	r3, #48	; 0x30
 800472c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004730:	e007      	b.n	8004742 <USER_SPI_ioctl+0x162>
 8004732:	20ff      	movs	r0, #255	; 0xff
 8004734:	f7ff fc10 	bl	8003f58 <xchg_spi>
 8004738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800473c:	3b01      	subs	r3, #1
 800473e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004742:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f3      	bne.n	8004732 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800474a:	7dbb      	ldrb	r3, [r7, #22]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	2310      	movs	r3, #16
 8004754:	fa03 f202 	lsl.w	r2, r3, r2
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004762:	e098      	b.n	8004896 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004764:	2100      	movs	r1, #0
 8004766:	2009      	movs	r0, #9
 8004768:	f7ff fce7 	bl	800413a <send_cmd>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8091 	bne.w	8004896 <USER_SPI_ioctl+0x2b6>
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	2110      	movs	r1, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fc82 	bl	8004084 <rcvr_datablock>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8087 	beq.w	8004896 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004788:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <USER_SPI_ioctl+0x2dc>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004794:	7dbb      	ldrb	r3, [r7, #22]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800479c:	7dfa      	ldrb	r2, [r7, #23]
 800479e:	09d2      	lsrs	r2, r2, #7
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	4413      	add	r3, r2
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	7e7b      	ldrb	r3, [r7, #25]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e013      	b.n	80047e2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80047ba:	7dbb      	ldrb	r3, [r7, #22]
 80047bc:	109b      	asrs	r3, r3, #2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	3301      	adds	r3, #1
 80047c6:	7dfa      	ldrb	r2, [r7, #23]
 80047c8:	00d2      	lsls	r2, r2, #3
 80047ca:	f002 0218 	and.w	r2, r2, #24
 80047ce:	7df9      	ldrb	r1, [r7, #23]
 80047d0:	0949      	lsrs	r1, r1, #5
 80047d2:	b2c9      	uxtb	r1, r1
 80047d4:	440a      	add	r2, r1
 80047d6:	3201      	adds	r2, #1
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80047e8:	e055      	b.n	8004896 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80047ea:	4b34      	ldr	r3, [pc, #208]	; (80048bc <USER_SPI_ioctl+0x2dc>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f003 0306 	and.w	r3, r3, #6
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d051      	beq.n	800489a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80047f6:	f107 020c 	add.w	r2, r7, #12
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	210b      	movs	r1, #11
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff feee 	bl	80045e0 <USER_SPI_ioctl>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d149      	bne.n	800489e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800480a:	7b3b      	ldrb	r3, [r7, #12]
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <USER_SPI_ioctl+0x23e>
 8004814:	7dbb      	ldrb	r3, [r7, #22]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d041      	beq.n	80048a2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <USER_SPI_ioctl+0x2dc>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	025b      	lsls	r3, r3, #9
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	025b      	lsls	r3, r3, #9
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004848:	2020      	movs	r0, #32
 800484a:	f7ff fc76 	bl	800413a <send_cmd>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d128      	bne.n	80048a6 <USER_SPI_ioctl+0x2c6>
 8004854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004856:	2021      	movs	r0, #33	; 0x21
 8004858:	f7ff fc6f 	bl	800413a <send_cmd>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d121      	bne.n	80048a6 <USER_SPI_ioctl+0x2c6>
 8004862:	2100      	movs	r1, #0
 8004864:	2026      	movs	r0, #38	; 0x26
 8004866:	f7ff fc68 	bl	800413a <send_cmd>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11a      	bne.n	80048a6 <USER_SPI_ioctl+0x2c6>
 8004870:	f247 5030 	movw	r0, #30000	; 0x7530
 8004874:	f7ff fbbb 	bl	8003fee <wait_ready>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800487e:	2300      	movs	r3, #0
 8004880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004884:	e00f      	b.n	80048a6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004886:	2304      	movs	r3, #4
 8004888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800488c:	e00c      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		break;
 800488e:	bf00      	nop
 8004890:	e00a      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		break;
 8004892:	bf00      	nop
 8004894:	e008      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		break;
 8004896:	bf00      	nop
 8004898:	e006      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <USER_SPI_ioctl+0x2c8>
		break;
 80048a6:	bf00      	nop
	}

	despiselect();
 80048a8:	f7ff fbc4 	bl	8004034 <despiselect>

	return res;
 80048ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3730      	adds	r7, #48	; 0x30
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000020 	.word	0x20000020
 80048bc:	200001ac 	.word	0x200001ac

080048c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <disk_status+0x30>)
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	79fa      	ldrb	r2, [r7, #7]
 80048d8:	4905      	ldr	r1, [pc, #20]	; (80048f0 <disk_status+0x30>)
 80048da:	440a      	add	r2, r1
 80048dc:	7a12      	ldrb	r2, [r2, #8]
 80048de:	4610      	mov	r0, r2
 80048e0:	4798      	blx	r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200001d0 	.word	0x200001d0

080048f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	4a0d      	ldr	r2, [pc, #52]	; (800493c <disk_initialize+0x48>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d111      	bne.n	8004930 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	4a0b      	ldr	r2, [pc, #44]	; (800493c <disk_initialize+0x48>)
 8004910:	2101      	movs	r1, #1
 8004912:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <disk_initialize+0x48>)
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	79fa      	ldrb	r2, [r7, #7]
 8004922:	4906      	ldr	r1, [pc, #24]	; (800493c <disk_initialize+0x48>)
 8004924:	440a      	add	r2, r1
 8004926:	7a12      	ldrb	r2, [r2, #8]
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200001d0 	.word	0x200001d0

08004940 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <disk_read+0x3c>)
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	689c      	ldr	r4, [r3, #8]
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <disk_read+0x3c>)
 8004960:	4413      	add	r3, r2
 8004962:	7a18      	ldrb	r0, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	47a0      	blx	r4
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop
 800497c:	200001d0 	.word	0x200001d0

08004980 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <disk_write+0x3c>)
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68dc      	ldr	r4, [r3, #12]
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <disk_write+0x3c>)
 80049a0:	4413      	add	r3, r2
 80049a2:	7a18      	ldrb	r0, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	47a0      	blx	r4
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200001d0 	.word	0x200001d0

080049c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	603a      	str	r2, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
 80049cc:	460b      	mov	r3, r1
 80049ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <disk_ioctl+0x38>)
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	79fa      	ldrb	r2, [r7, #7]
 80049de:	4906      	ldr	r1, [pc, #24]	; (80049f8 <disk_ioctl+0x38>)
 80049e0:	440a      	add	r2, r1
 80049e2:	7a10      	ldrb	r0, [r2, #8]
 80049e4:	79b9      	ldrb	r1, [r7, #6]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4798      	blx	r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200001d0 	.word	0x200001d0

080049fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004a10:	e007      	b.n	8004a22 <mem_cpy+0x26>
		*d++ = *s++;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	1c53      	adds	r3, r2, #1
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	6179      	str	r1, [r7, #20]
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1e5a      	subs	r2, r3, #1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f2      	bne.n	8004a12 <mem_cpy+0x16>
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004a48:	e005      	b.n	8004a56 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	617a      	str	r2, [r7, #20]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1e5a      	subs	r2, r3, #1
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f4      	bne.n	8004a4a <mem_set+0x12>
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	; 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004a84:	bf00      	nop
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <mem_cmp+0x40>
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	61fa      	str	r2, [r7, #28]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	61ba      	str	r2, [r7, #24]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ec      	beq.n	8004a86 <mem_cmp+0x1a>
	return r;
 8004aac:	697b      	ldr	r3, [r7, #20]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ac4:	e002      	b.n	8004acc <chk_chr+0x12>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <chk_chr+0x26>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d1f2      	bne.n	8004ac6 <chk_chr+0xc>
	return *str;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f002 fe6e 	bl	80077e0 <ff_req_grant>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d011      	beq.n	8004b44 <unlock_fs+0x36>
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d00e      	beq.n	8004b44 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	2b0b      	cmp	r3, #11
 8004b2a:	d00b      	beq.n	8004b44 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2b09      	cmp	r3, #9
 8004b30:	d008      	beq.n	8004b44 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b0f      	cmp	r3, #15
 8004b36:	d005      	beq.n	8004b44 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f002 fe63 	bl	800780a <ff_rel_grant>
	}
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e038      	b.n	8004bd2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004b60:	4930      	ldr	r1, [pc, #192]	; (8004c24 <chk_lock+0xd8>)
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d029      	beq.n	8004bc8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004b74:	492b      	ldr	r1, [pc, #172]	; (8004c24 <chk_lock+0xd8>)
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d11e      	bne.n	8004bcc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004b8e:	4925      	ldr	r1, [pc, #148]	; (8004c24 <chk_lock+0xd8>)
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d110      	bne.n	8004bcc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004baa:	491e      	ldr	r1, [pc, #120]	; (8004c24 <chk_lock+0xd8>)
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3308      	adds	r3, #8
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d102      	bne.n	8004bcc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004bc6:	e007      	b.n	8004bd8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d9c3      	bls.n	8004b60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d109      	bne.n	8004bf2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <chk_lock+0x9e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d101      	bne.n	8004bee <chk_lock+0xa2>
 8004bea:	2300      	movs	r3, #0
 8004bec:	e013      	b.n	8004c16 <chk_lock+0xca>
 8004bee:	2312      	movs	r3, #18
 8004bf0:	e011      	b.n	8004c16 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <chk_lock+0xc4>
 8004bf8:	490a      	ldr	r1, [pc, #40]	; (8004c24 <chk_lock+0xd8>)
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	330a      	adds	r3, #10
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	d101      	bne.n	8004c14 <chk_lock+0xc8>
 8004c10:	2310      	movs	r3, #16
 8004c12:	e000      	b.n	8004c16 <chk_lock+0xca>
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	200001b8 	.word	0x200001b8

08004c28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	e002      	b.n	8004c3a <enq_lock+0x12>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d809      	bhi.n	8004c54 <enq_lock+0x2c>
 8004c40:	490a      	ldr	r1, [pc, #40]	; (8004c6c <enq_lock+0x44>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ef      	bne.n	8004c34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	200001b8 	.word	0x200001b8

08004c70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e02b      	b.n	8004cd8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004c80:	4956      	ldr	r1, [pc, #344]	; (8004ddc <inc_lock+0x16c>)
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d11b      	bne.n	8004cd2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004c9a:	4950      	ldr	r1, [pc, #320]	; (8004ddc <inc_lock+0x16c>)
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3304      	adds	r3, #4
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10d      	bne.n	8004cd2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004cb6:	4949      	ldr	r1, [pc, #292]	; (8004ddc <inc_lock+0x16c>)
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d006      	beq.n	8004ce0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d9d0      	bls.n	8004c80 <inc_lock+0x10>
 8004cde:	e000      	b.n	8004ce2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004ce0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d145      	bne.n	8004d74 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e002      	b.n	8004cf4 <inc_lock+0x84>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d809      	bhi.n	8004d0e <inc_lock+0x9e>
 8004cfa:	4938      	ldr	r1, [pc, #224]	; (8004ddc <inc_lock+0x16c>)
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ef      	bne.n	8004cee <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d101      	bne.n	8004d18 <inc_lock+0xa8>
 8004d14:	2300      	movs	r3, #0
 8004d16:	e05a      	b.n	8004dce <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004d1e:	482f      	ldr	r0, [pc, #188]	; (8004ddc <inc_lock+0x16c>)
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004d34:	4829      	ldr	r0, [pc, #164]	; (8004ddc <inc_lock+0x16c>)
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	3304      	adds	r3, #4
 8004d44:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004d4c:	4923      	ldr	r1, [pc, #140]	; (8004ddc <inc_lock+0x16c>)
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d60:	491e      	ldr	r1, [pc, #120]	; (8004ddc <inc_lock+0x16c>)
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	330a      	adds	r3, #10
 8004d70:	2200      	movs	r2, #0
 8004d72:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <inc_lock+0x124>
 8004d7a:	4918      	ldr	r1, [pc, #96]	; (8004ddc <inc_lock+0x16c>)
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	330a      	adds	r3, #10
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <inc_lock+0x124>
 8004d90:	2300      	movs	r3, #0
 8004d92:	e01c      	b.n	8004dce <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <inc_lock+0x142>
 8004d9a:	4910      	ldr	r1, [pc, #64]	; (8004ddc <inc_lock+0x16c>)
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	330a      	adds	r3, #10
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	b299      	uxth	r1, r3
 8004db0:	e001      	b.n	8004db6 <inc_lock+0x146>
 8004db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004db6:	4809      	ldr	r0, [pc, #36]	; (8004ddc <inc_lock+0x16c>)
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4403      	add	r3, r0
 8004dc4:	330a      	adds	r3, #10
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	200001b8 	.word	0x200001b8

08004de0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d82e      	bhi.n	8004e52 <dec_lock+0x72>
		n = Files[i].ctr;
 8004df4:	491b      	ldr	r1, [pc, #108]	; (8004e64 <dec_lock+0x84>)
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	330a      	adds	r3, #10
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d101      	bne.n	8004e14 <dec_lock+0x34>
 8004e10:	2300      	movs	r3, #0
 8004e12:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <dec_lock+0x40>
 8004e1a:	89fb      	ldrh	r3, [r7, #14]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e20:	4910      	ldr	r1, [pc, #64]	; (8004e64 <dec_lock+0x84>)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	330a      	adds	r3, #10
 8004e30:	89fa      	ldrh	r2, [r7, #14]
 8004e32:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <dec_lock+0x6c>
 8004e3a:	490a      	ldr	r1, [pc, #40]	; (8004e64 <dec_lock+0x84>)
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	737b      	strb	r3, [r7, #13]
 8004e50:	e001      	b.n	8004e56 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e52:	2302      	movs	r3, #2
 8004e54:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e56:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	200001b8 	.word	0x200001b8

08004e68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e016      	b.n	8004ea4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e76:	4910      	ldr	r1, [pc, #64]	; (8004eb8 <clear_lock+0x50>)
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d108      	bne.n	8004e9e <clear_lock+0x36>
 8004e8c:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <clear_lock+0x50>)
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d9e5      	bls.n	8004e76 <clear_lock+0xe>
	}
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200001b8 	.word	0x200001b8

08004ebc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d038      	beq.n	8004f44 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004ed8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	f7ff fd4b 	bl	8004980 <disk_write>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e026      	b.n	8004f44 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d218      	bcs.n	8004f44 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e010      	b.n	8004f3e <sync_window+0x82>
					wsect += fs->fsize;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	2301      	movs	r3, #1
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	f7ff fd24 	bl	8004980 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d8eb      	bhi.n	8004f1c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d01b      	beq.n	8004fa0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffa7 	bl	8004ebc <sync_window>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	2301      	movs	r3, #1
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	f7ff fcdc 	bl	8004940 <disk_read>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff82 	bl	8004ebc <sync_window>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 809b 	bne.w	80050fa <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	f040 8088 	bne.w	80050e0 <sync_fs+0x136>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	f040 8082 	bne.w	80050e0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fd27 	bl	8004a38 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2255      	movs	r2, #85	; 0x55
 8004fee:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	22aa      	movs	r2, #170	; 0xaa
 8004ff6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2252      	movs	r2, #82	; 0x52
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2252      	movs	r2, #82	; 0x52
 8005004:	705a      	strb	r2, [r3, #1]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2261      	movs	r2, #97	; 0x61
 800500a:	709a      	strb	r2, [r3, #2]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2241      	movs	r2, #65	; 0x41
 8005010:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2272      	movs	r2, #114	; 0x72
 8005016:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2272      	movs	r2, #114	; 0x72
 800501e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2241      	movs	r2, #65	; 0x41
 8005026:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2261      	movs	r2, #97	; 0x61
 800502e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005038:	b2da      	uxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005046:	b29b      	uxth	r3, r3
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	b29b      	uxth	r3, r3
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b2da      	uxtb	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800506a:	0e1b      	lsrs	r3, r3, #24
 800506c:	b2da      	uxtb	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800507a:	b2da      	uxtb	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005088:	b29b      	uxth	r3, r3
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	b29b      	uxth	r3, r3
 800508e:	b2da      	uxtb	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80050d2:	2301      	movs	r3, #1
 80050d4:	f7ff fc54 	bl	8004980 <disk_write>
			fs->fsi_flag = 0;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fc68 	bl	80049c0 <disk_ioctl>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <sync_fs+0x150>
			res = FR_DISK_ERR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3b02      	subs	r3, #2
 8005112:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800511a:	3b02      	subs	r3, #2
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d301      	bcc.n	8005126 <clust2sect+0x22>
 8005122:	2300      	movs	r3, #0
 8005124:	e00a      	b.n	800513c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800512c:	461a      	mov	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	fb03 f202 	mul.w	r2, r3, r2
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800513a:	4413      	add	r3, r2
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d905      	bls.n	8005164 <get_fat+0x1c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <get_fat+0x22>
		val = 1;	/* Internal error */
 8005164:	2301      	movs	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e0a0      	b.n	80052ac <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800516a:	f04f 33ff 	mov.w	r3, #4294967295
 800516e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005176:	2b02      	cmp	r3, #2
 8005178:	d044      	beq.n	8005204 <get_fat+0xbc>
 800517a:	2b03      	cmp	r3, #3
 800517c:	d063      	beq.n	8005246 <get_fat+0xfe>
 800517e:	2b01      	cmp	r3, #1
 8005180:	f040 808a 	bne.w	8005298 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	0a5b      	lsrs	r3, r3, #9
 800519c:	4413      	add	r3, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fed4 	bl	8004f4e <move_window>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d178      	bne.n	800529e <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	60fa      	str	r2, [r7, #12]
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	0a5b      	lsrs	r3, r3, #9
 80051c6:	4413      	add	r3, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff febf 	bl	8004f4e <move_window>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d165      	bne.n	80052a2 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	5cd3      	ldrb	r3, [r2, r3]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <get_fat+0xb2>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	e002      	b.n	8005200 <get_fat+0xb8>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005200:	617b      	str	r3, [r7, #20]
			break;
 8005202:	e053      	b.n	80052ac <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	4413      	add	r3, r2
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fe9b 	bl	8004f4e <move_window>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d143      	bne.n	80052a6 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b21a      	sxth	r2, r3
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b21b      	sxth	r3, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	b21b      	sxth	r3, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	617b      	str	r3, [r7, #20]
			break;
 8005244:	e032      	b.n	80052ac <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	4413      	add	r3, r2
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fe7a 	bl	8004f4e <move_window>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d124      	bne.n	80052aa <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4413      	add	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3303      	adds	r3, #3
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	061a      	lsls	r2, r3, #24
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3302      	adds	r3, #2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	4313      	orrs	r3, r2
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	3201      	adds	r2, #1
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	0212      	lsls	r2, r2, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005294:	617b      	str	r3, [r7, #20]
			break;
 8005296:	e009      	b.n	80052ac <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e006      	b.n	80052ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800529e:	bf00      	nop
 80052a0:	e004      	b.n	80052ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052aa:	bf00      	nop
		}
	}

	return val;
 80052ac:	697b      	ldr	r3, [r7, #20]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d905      	bls.n	80052d4 <put_fat+0x1e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <put_fat+0x24>
		res = FR_INT_ERR;
 80052d4:	2302      	movs	r3, #2
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e0f3      	b.n	80054c2 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d074      	beq.n	80053ce <put_fat+0x118>
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	f000 8099 	beq.w	800541c <put_fat+0x166>
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	f040 80df 	bne.w	80054ae <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	0a5b      	lsrs	r3, r3, #9
 8005308:	4413      	add	r3, r2
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fe1e 	bl	8004f4e <move_window>
 8005312:	4603      	mov	r3, r0
 8005314:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80cb 	bne.w	80054b4 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	617a      	str	r2, [r7, #20]
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <put_fat+0x9e>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b25b      	sxtb	r3, r3
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	b25a      	sxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	b25b      	sxtb	r3, r3
 800534c:	4313      	orrs	r3, r2
 800534e:	b25b      	sxtb	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e001      	b.n	8005358 <put_fat+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	0a5b      	lsrs	r3, r3, #9
 800536e:	4413      	add	r3, r2
 8005370:	4619      	mov	r1, r3
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fdeb 	bl	8004f4e <move_window>
 8005378:	4603      	mov	r3, r0
 800537a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800537c:	7ffb      	ldrb	r3, [r7, #31]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 809a 	bne.w	80054b8 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <put_fat+0xec>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00e      	b.n	80053c0 <put_fat+0x10a>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	b25a      	sxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80053cc:	e079      	b.n	80054c2 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	4413      	add	r3, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff fdb6 	bl	8004f4e <move_window>
 80053e2:	4603      	mov	r3, r0
 80053e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d167      	bne.n	80054bc <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	b29b      	uxth	r3, r3
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	b29a      	uxth	r2, r3
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	3301      	adds	r3, #1
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800541a:	e052      	b.n	80054c2 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	09db      	lsrs	r3, r3, #7
 8005426:	4413      	add	r3, r2
 8005428:	4619      	mov	r1, r3
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fd8f 	bl	8004f4e <move_window>
 8005430:	4603      	mov	r3, r0
 8005432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d142      	bne.n	80054c0 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	3303      	adds	r3, #3
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	061a      	lsls	r2, r3, #24
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3302      	adds	r3, #2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	4313      	orrs	r3, r2
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	3201      	adds	r2, #1
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	0212      	lsls	r2, r2, #8
 8005462:	4313      	orrs	r3, r2
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4313      	orrs	r3, r2
 8005472:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	b29b      	uxth	r3, r3
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	b29a      	uxth	r2, r3
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	3301      	adds	r3, #1
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	0c1a      	lsrs	r2, r3, #16
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	3302      	adds	r3, #2
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	0e1a      	lsrs	r2, r3, #24
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	3303      	adds	r3, #3
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80054ac:	e009      	b.n	80054c2 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e006      	b.n	80054c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 80054c0:	bf00      	nop
		}
	}

	return res;
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d905      	bls.n	80054e8 <remove_chain+0x1c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <remove_chain+0x22>
		res = FR_INT_ERR;
 80054e8:	2302      	movs	r3, #2
 80054ea:	73fb      	strb	r3, [r7, #15]
 80054ec:	e043      	b.n	8005576 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80054f2:	e036      	b.n	8005562 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fe26 	bl	8005148 <get_fat>
 80054fc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d035      	beq.n	8005570 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d102      	bne.n	8005510 <remove_chain+0x44>
 800550a:	2302      	movs	r3, #2
 800550c:	73fb      	strb	r3, [r7, #15]
 800550e:	e032      	b.n	8005576 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d102      	bne.n	800551e <remove_chain+0x52>
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	e02b      	b.n	8005576 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800551e:	2200      	movs	r2, #0
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fec7 	bl	80052b6 <put_fat>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d120      	bne.n	8005574 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d00f      	beq.n	800555e <remove_chain+0x92>
				fs->free_clust++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d3c2      	bcc.n	80054f4 <remove_chain+0x28>
 800556e:	e002      	b.n	8005576 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005574:	bf00      	nop
		}
	}

	return res;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10f      	bne.n	80055b0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005596:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <create_chain+0x2a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d31c      	bcc.n	80055e4 <create_chain+0x64>
 80055aa:	2301      	movs	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e019      	b.n	80055e4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fdc8 	bl	8005148 <get_fat>
 80055b8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d801      	bhi.n	80055c4 <create_chain+0x44>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e076      	b.n	80056b2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d101      	bne.n	80055d0 <create_chain+0x50>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	e070      	b.n	80056b2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d201      	bcs.n	80055e0 <create_chain+0x60>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	e068      	b.n	80056b2 <create_chain+0x132>
		scl = clst;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d307      	bcc.n	800560a <create_chain+0x8a>
			ncl = 2;
 80055fa:	2302      	movs	r3, #2
 80055fc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	429a      	cmp	r2, r3
 8005604:	d901      	bls.n	800560a <create_chain+0x8a>
 8005606:	2300      	movs	r3, #0
 8005608:	e053      	b.n	80056b2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fd9b 	bl	8005148 <get_fat>
 8005612:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d002      	beq.n	8005628 <create_chain+0xa8>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <create_chain+0xac>
			return cs;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	e042      	b.n	80056b2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d1d9      	bne.n	80055e8 <create_chain+0x68>
 8005634:	2300      	movs	r3, #0
 8005636:	e03c      	b.n	80056b2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005638:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800563a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800563e:	6979      	ldr	r1, [r7, #20]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fe38 	bl	80052b6 <put_fat>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <create_chain+0xe4>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fe2b 	bl	80052b6 <put_fat>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11a      	bne.n	80056a0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d018      	beq.n	80056b0 <create_chain+0x130>
			fs->free_clust--;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005684:	1e5a      	subs	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	b2da      	uxtb	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800569e:	e007      	b.n	80056b0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d102      	bne.n	80056ac <create_chain+0x12c>
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	e000      	b.n	80056ae <create_chain+0x12e>
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80056b0:	697b      	ldr	r3, [r7, #20]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80056ca:	3304      	adds	r3, #4
 80056cc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	0a5b      	lsrs	r3, r3, #9
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80056d8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80056dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	613a      	str	r2, [r7, #16]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <clmt_clust+0x3c>
 80056f2:	2300      	movs	r3, #0
 80056f4:	e010      	b.n	8005718 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d307      	bcc.n	800570e <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3304      	adds	r3, #4
 800570a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800570c:	e7e9      	b.n	80056e2 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800570e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	b29a      	uxth	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800573e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d007      	beq.n	8005756 <dir_sdi+0x32>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800574c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	429a      	cmp	r2, r3
 8005754:	d301      	bcc.n	800575a <dir_sdi+0x36>
		return FR_INT_ERR;
 8005756:	2302      	movs	r3, #2
 8005758:	e074      	b.n	8005844 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <dir_sdi+0x56>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800576a:	2b03      	cmp	r3, #3
 800576c:	d105      	bne.n	800577a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005774:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005778:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d111      	bne.n	80057a4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005786:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800578a:	461a      	mov	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	4293      	cmp	r3, r2
 8005790:	d301      	bcc.n	8005796 <dir_sdi+0x72>
			return FR_INT_ERR;
 8005792:	2302      	movs	r3, #2
 8005794:	e056      	b.n	8005844 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800579c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e032      	b.n	800580a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057aa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80057b2:	e01e      	b.n	80057f2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fcc3 	bl	8005148 <get_fat>
 80057c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d101      	bne.n	80057d0 <dir_sdi+0xac>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e039      	b.n	8005844 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d907      	bls.n	80057e6 <dir_sdi+0xc2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d301      	bcc.n	80057ea <dir_sdi+0xc6>
				return FR_INT_ERR;
 80057e6:	2302      	movs	r3, #2
 80057e8:	e02c      	b.n	8005844 <dir_sdi+0x120>
			idx -= ic;
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d2dc      	bcs.n	80057b4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005800:	6979      	ldr	r1, [r7, #20]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fc7e 	bl	8005104 <clust2sect>
 8005808:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <dir_sdi+0xf8>
 8005818:	2302      	movs	r3, #2
 800581a:	e013      	b.n	8005844 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	091a      	lsrs	r2, r3, #4
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	441a      	add	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005830:	461a      	mov	r2, r3
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	015b      	lsls	r3, r3, #5
 800583a:	441a      	add	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <dir_next+0x26>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <dir_next+0x2a>
		return FR_NO_FILE;
 8005872:	2304      	movs	r3, #4
 8005874:	e0dd      	b.n	8005a32 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 80c6 	bne.w	8005a0e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058a0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80058a4:	461a      	mov	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4293      	cmp	r3, r2
 80058aa:	f0c0 80b0 	bcc.w	8005a0e <dir_next+0x1c2>
				return FR_NO_FILE;
 80058ae:	2304      	movs	r3, #4
 80058b0:	e0bf      	b.n	8005a32 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80058bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80058c0:	3a01      	subs	r2, #1
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 80a2 	bne.w	8005a0e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7ff fc35 	bl	8005148 <get_fat>
 80058de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d801      	bhi.n	80058ea <dir_next+0x9e>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e0a3      	b.n	8005a32 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d101      	bne.n	80058f6 <dir_next+0xaa>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e09d      	b.n	8005a32 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	429a      	cmp	r2, r3
 8005904:	d374      	bcc.n	80059f0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <dir_next+0xc4>
 800590c:	2304      	movs	r3, #4
 800590e:	e090      	b.n	8005a32 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7ff fe2e 	bl	8005580 <create_chain>
 8005924:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <dir_next+0xe4>
 800592c:	2307      	movs	r3, #7
 800592e:	e080      	b.n	8005a32 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <dir_next+0xee>
 8005936:	2302      	movs	r3, #2
 8005938:	e07b      	b.n	8005a32 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d101      	bne.n	8005946 <dir_next+0xfa>
 8005942:	2301      	movs	r3, #1
 8005944:	e075      	b.n	8005a32 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fab5 	bl	8004ebc <sync_window>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <dir_next+0x110>
 8005958:	2301      	movs	r3, #1
 800595a:	e06a      	b.n	8005a32 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff f865 	bl	8004a38 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	4610      	mov	r0, r2
 800597e:	f7ff fbc1 	bl	8005104 <clust2sect>
 8005982:	4603      	mov	r3, r0
 8005984:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e01b      	b.n	80059c6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fa8b 	bl	8004ebc <sync_window>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <dir_next+0x164>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e040      	b.n	8005a32 <dir_next+0x1e6>
						dp->fs->winsect++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059b6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80059ba:	3201      	adds	r2, #1
 80059bc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3301      	adds	r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059d0:	461a      	mov	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d3da      	bcc.n	800598e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059de:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	1a8a      	subs	r2, r1, r2
 80059ec:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059fe:	6979      	ldr	r1, [r7, #20]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fb7f 	bl	8005104 <clust2sect>
 8005a06:	4602      	mov	r2, r0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	015b      	lsls	r3, r3, #5
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}

08005a3a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005a44:	2100      	movs	r1, #0
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fe6c 	bl	8005724 <dir_sdi>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d131      	bne.n	8005aba <dir_alloc+0x80>
		n = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7ff fa70 	bl	8004f4e <move_window>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11f      	bne.n	8005ab8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2be5      	cmp	r3, #229	; 0xe5
 8005a82:	d005      	beq.n	8005a90 <dir_alloc+0x56>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d102      	bne.n	8005aa4 <dir_alloc+0x6a>
 8005a9e:	e00c      	b.n	8005aba <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fed0 	bl	800584c <dir_next>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0d1      	beq.n	8005a5a <dir_alloc+0x20>
 8005ab6:	e000      	b.n	8005aba <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005ab8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d101      	bne.n	8005ac4 <dir_alloc+0x8a>
 8005ac0:	2307      	movs	r3, #7
 8005ac2:	73fb      	strb	r3, [r7, #15]
	return res;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	331b      	adds	r3, #27
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	b21a      	sxth	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	331a      	adds	r3, #26
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d10f      	bne.n	8005b1c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	3315      	adds	r3, #21
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	b21a      	sxth	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b21b      	sxth	r3, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

	return cl;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	331a      	adds	r3, #26
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	331b      	adds	r3, #27
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	0c1a      	lsrs	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3314      	adds	r3, #20
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3315      	adds	r3, #21
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fdce 	bl	8005724 <dir_sdi>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <dir_find+0x1e>
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	e03b      	b.n	8005c0e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f7ff f9d2 	bl	8004f4e <move_window>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d128      	bne.n	8005c06 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <dir_find+0x56>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	75fb      	strb	r3, [r7, #23]
 8005bcc:	e01e      	b.n	8005c0c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	330b      	adds	r3, #11
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <dir_find+0x7a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005be2:	220b      	movs	r2, #11
 8005be4:	4619      	mov	r1, r3
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f7fe ff40 	bl	8004a6c <mem_cmp>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fe29 	bl	800584c <dir_next>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0c8      	beq.n	8005b96 <dir_find+0x1e>
 8005c04:	e002      	b.n	8005c0c <dir_find+0x94>
		if (res != FR_OK) break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <dir_find+0x94>
			break;
 8005c0a:	bf00      	nop

	return res;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005c1e:	2101      	movs	r1, #1
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff0a 	bl	8005a3a <dir_alloc>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d126      	bne.n	8005c7e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff f985 	bl	8004f4e <move_window>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d117      	bne.n	8005c7e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c54:	2220      	movs	r2, #32
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe feed 	bl	8004a38 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c6a:	220b      	movs	r2, #11
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7fe fec5 	bl	80049fc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <create_name+0x18>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ca6:	d0f8      	beq.n	8005c9a <create_name+0x12>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b5c      	cmp	r3, #92	; 0x5c
 8005cae:	d0f4      	beq.n	8005c9a <create_name+0x12>
	sfn = dp->fn;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005cb6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005cb8:	220b      	movs	r2, #11
 8005cba:	2120      	movs	r1, #32
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f7fe febb 	bl	8004a38 <mem_set>
	si = i = b = 0; ni = 8;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	2308      	movs	r3, #8
 8005cd0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	617a      	str	r2, [r7, #20]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005ce0:	7fbb      	ldrb	r3, [r7, #30]
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d953      	bls.n	8005d8e <create_name+0x106>
 8005ce6:	7fbb      	ldrb	r3, [r7, #30]
 8005ce8:	2b2f      	cmp	r3, #47	; 0x2f
 8005cea:	d050      	beq.n	8005d8e <create_name+0x106>
 8005cec:	7fbb      	ldrb	r3, [r7, #30]
 8005cee:	2b5c      	cmp	r3, #92	; 0x5c
 8005cf0:	d04d      	beq.n	8005d8e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005cf2:	7fbb      	ldrb	r3, [r7, #30]
 8005cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf6:	d003      	beq.n	8005d00 <create_name+0x78>
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d30f      	bcc.n	8005d20 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d102      	bne.n	8005d0c <create_name+0x84>
 8005d06:	7fbb      	ldrb	r3, [r7, #30]
 8005d08:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0a:	d001      	beq.n	8005d10 <create_name+0x88>
 8005d0c:	2306      	movs	r3, #6
 8005d0e:	e073      	b.n	8005df8 <create_name+0x170>
			i = 8; ni = 11;
 8005d10:	2308      	movs	r3, #8
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	230b      	movs	r3, #11
 8005d16:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	77fb      	strb	r3, [r7, #31]
 8005d1e:	e035      	b.n	8005d8c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005d20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	da08      	bge.n	8005d3a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
 8005d2a:	f043 0303 	orr.w	r3, r3, #3
 8005d2e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005d30:	7fbb      	ldrb	r3, [r7, #30]
 8005d32:	3b80      	subs	r3, #128	; 0x80
 8005d34:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <create_name+0x178>)
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005d3a:	7fbb      	ldrb	r3, [r7, #30]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4831      	ldr	r0, [pc, #196]	; (8005e04 <create_name+0x17c>)
 8005d40:	f7fe febb 	bl	8004aba <chk_chr>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <create_name+0xc6>
				return FR_INVALID_NAME;
 8005d4a:	2306      	movs	r3, #6
 8005d4c:	e054      	b.n	8005df8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005d4e:	7fbb      	ldrb	r3, [r7, #30]
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d907      	bls.n	8005d64 <create_name+0xdc>
 8005d54:	7fbb      	ldrb	r3, [r7, #30]
 8005d56:	2b5a      	cmp	r3, #90	; 0x5a
 8005d58:	d804      	bhi.n	8005d64 <create_name+0xdc>
				b |= 2;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	f043 0302 	orr.w	r3, r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e00c      	b.n	8005d7e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005d64:	7fbb      	ldrb	r3, [r7, #30]
 8005d66:	2b60      	cmp	r3, #96	; 0x60
 8005d68:	d909      	bls.n	8005d7e <create_name+0xf6>
 8005d6a:	7fbb      	ldrb	r3, [r7, #30]
 8005d6c:	2b7a      	cmp	r3, #122	; 0x7a
 8005d6e:	d806      	bhi.n	8005d7e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005d70:	7ffb      	ldrb	r3, [r7, #31]
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	7fbb      	ldrb	r3, [r7, #30]
 8005d7a:	3b20      	subs	r3, #32
 8005d7c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	613a      	str	r2, [r7, #16]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4413      	add	r3, r2
 8005d88:	7fba      	ldrb	r2, [r7, #30]
 8005d8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005d8c:	e7a1      	b.n	8005cd2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	441a      	add	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005d98:	7fbb      	ldrb	r3, [r7, #30]
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d801      	bhi.n	8005da2 <create_name+0x11a>
 8005d9e:	2304      	movs	r3, #4
 8005da0:	e000      	b.n	8005da4 <create_name+0x11c>
 8005da2:	2300      	movs	r3, #0
 8005da4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <create_name+0x128>
 8005dac:	2306      	movs	r3, #6
 8005dae:	e023      	b.n	8005df8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2be5      	cmp	r3, #229	; 0xe5
 8005db6:	d102      	bne.n	8005dbe <create_name+0x136>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2205      	movs	r2, #5
 8005dbc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d102      	bne.n	8005dca <create_name+0x142>
 8005dc4:	7ffb      	ldrb	r3, [r7, #31]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005dca:	7ffb      	ldrb	r3, [r7, #31]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d103      	bne.n	8005ddc <create_name+0x154>
 8005dd4:	7fbb      	ldrb	r3, [r7, #30]
 8005dd6:	f043 0310 	orr.w	r3, r3, #16
 8005dda:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d103      	bne.n	8005dee <create_name+0x166>
 8005de6:	7fbb      	ldrb	r3, [r7, #30]
 8005de8:	f043 0308 	orr.w	r3, r3, #8
 8005dec:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	330b      	adds	r3, #11
 8005df2:	7fba      	ldrb	r2, [r7, #30]
 8005df4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005df6:	2300      	movs	r3, #0
#endif
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	0800baf0 	.word	0x0800baf0
 8005e04:	0800b9f4 	.word	0x0800b9f4

08005e08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b2f      	cmp	r3, #47	; 0x2f
 8005e18:	d003      	beq.n	8005e22 <follow_path+0x1a>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b5c      	cmp	r3, #92	; 0x5c
 8005e20:	d102      	bne.n	8005e28 <follow_path+0x20>
		path++;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b1f      	cmp	r3, #31
 8005e36:	d80a      	bhi.n	8005e4e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fc72 	bl	8005724 <dir_sdi>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005e4c:	e045      	b.n	8005eda <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff18 	bl	8005c88 <create_name>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d136      	bne.n	8005ed0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fe88 	bl	8005b78 <dir_find>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e72:	7adb      	ldrb	r3, [r3, #11]
 8005e74:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d128      	bne.n	8005ed4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d123      	bne.n	8005ed4 <follow_path+0xcc>
 8005e8c:	2305      	movs	r3, #5
 8005e8e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005e90:	e020      	b.n	8005ed4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11d      	bne.n	8005ed8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ea2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	330b      	adds	r3, #11
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005eb2:	2305      	movs	r3, #5
 8005eb4:	73fb      	strb	r3, [r7, #15]
 8005eb6:	e010      	b.n	8005eda <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fe04 	bl	8005ace <ld_clust>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ece:	e7be      	b.n	8005e4e <follow_path+0x46>
			if (res != FR_OK) break;
 8005ed0:	bf00      	nop
 8005ed2:	e002      	b.n	8005eda <follow_path+0xd2>
				break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ed8:	bf00      	nop
		}
	}

	return res;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d031      	beq.n	8005f5e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e002      	b.n	8005f08 <get_ldnumber+0x24>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	3301      	adds	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d903      	bls.n	8005f18 <get_ldnumber+0x34>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b3a      	cmp	r3, #58	; 0x3a
 8005f16:	d1f4      	bne.n	8005f02 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8005f1e:	d11c      	bne.n	8005f5a <get_ldnumber+0x76>
			tp = *path;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	60fa      	str	r2, [r7, #12]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	3b30      	subs	r3, #48	; 0x30
 8005f30:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b09      	cmp	r3, #9
 8005f36:	d80e      	bhi.n	8005f56 <get_ldnumber+0x72>
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d10a      	bne.n	8005f56 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <get_ldnumber+0x72>
					vol = (int)i;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	e002      	b.n	8005f60 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f5e:	693b      	ldr	r3, [r7, #16]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe ffdf 	bl	8004f4e <move_window>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <check_fs+0x2e>
		return 3;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e04a      	b.n	8006030 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	b21a      	sxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005fae:	b21b      	sxth	r3, r3
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b21b      	sxth	r3, r3
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <check_fs+0xcc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d001      	beq.n	8005fbe <check_fs+0x52>
		return 2;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e038      	b.n	8006030 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3336      	adds	r3, #54	; 0x36
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	061a      	lsls	r2, r3, #24
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3336      	adds	r3, #54	; 0x36
 8005fcc:	3302      	adds	r3, #2
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	3236      	adds	r2, #54	; 0x36
 8005fd8:	3201      	adds	r2, #1
 8005fda:	7812      	ldrb	r2, [r2, #0]
 8005fdc:	0212      	lsls	r2, r2, #8
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <check_fs+0xd0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <check_fs+0x8a>
		return 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e01c      	b.n	8006030 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3352      	adds	r3, #82	; 0x52
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	061a      	lsls	r2, r3, #24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3352      	adds	r3, #82	; 0x52
 8006004:	3302      	adds	r3, #2
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	4313      	orrs	r3, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	3252      	adds	r2, #82	; 0x52
 8006010:	3201      	adds	r2, #1
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	0212      	lsls	r2, r2, #8
 8006016:	4313      	orrs	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800601e:	4313      	orrs	r3, r2
 8006020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <check_fs+0xd0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <check_fs+0xc2>
		return 0;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <check_fs+0xc4>

	return 1;
 800602e:	2301      	movs	r3, #1
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	ffffaa55 	.word	0xffffaa55
 800603c:	00544146 	.word	0x00544146

08006040 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b096      	sub	sp, #88	; 0x58
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006054:	68b8      	ldr	r0, [r7, #8]
 8006056:	f7ff ff45 	bl	8005ee4 <get_ldnumber>
 800605a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800605c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	da01      	bge.n	8006066 <find_volume+0x26>
 8006062:	230b      	movs	r3, #11
 8006064:	e2b2      	b.n	80065cc <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006066:	4aa2      	ldr	r2, [pc, #648]	; (80062f0 <find_volume+0x2b0>)
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <find_volume+0x3a>
 8006076:	230c      	movs	r3, #12
 8006078:	e2a8      	b.n	80065cc <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800607a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800607c:	f7fe fd38 	bl	8004af0 <lock_fs>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <find_volume+0x4a>
 8006086:	230f      	movs	r3, #15
 8006088:	e2a0      	b.n	80065cc <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01b      	beq.n	80060d2 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fc0d 	bl	80048c0 <disk_status>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10c      	bne.n	80060d2 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <find_volume+0x8e>
 80060be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80060ca:	230a      	movs	r3, #10
 80060cc:	e27e      	b.n	80065cc <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 80060ce:	2300      	movs	r3, #0
 80060d0:	e27c      	b.n	80065cc <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fc02 	bl	80048f4 <disk_initialize>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80060f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006102:	2303      	movs	r3, #3
 8006104:	e262      	b.n	80065cc <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <find_volume+0xdc>
 800610c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006118:	230a      	movs	r3, #10
 800611a:	e257      	b.n	80065cc <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006120:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006124:	f7ff ff22 	bl	8005f6c <check_fs>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800612e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006132:	2b01      	cmp	r3, #1
 8006134:	d155      	bne.n	80061e2 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006136:	2300      	movs	r3, #0
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
 800613a:	e029      	b.n	8006190 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800613c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800613e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006146:	4413      	add	r3, r2
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	3304      	adds	r3, #4
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <find_volume+0x13a>
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	330b      	adds	r3, #11
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	061a      	lsls	r2, r3, #24
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	330a      	adds	r3, #10
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	4313      	orrs	r3, r2
 8006166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006168:	3209      	adds	r2, #9
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	4313      	orrs	r3, r2
 8006170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006172:	3208      	adds	r2, #8
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	431a      	orrs	r2, r3
 8006178:	e000      	b.n	800617c <find_volume+0x13c>
 800617a:	2200      	movs	r2, #0
 800617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006184:	440b      	add	r3, r1
 8006186:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	3301      	adds	r3, #1
 800618e:	643b      	str	r3, [r7, #64]	; 0x40
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	2b03      	cmp	r3, #3
 8006194:	d9d2      	bls.n	800613c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006196:	2300      	movs	r3, #0
 8006198:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <find_volume+0x166>
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	3b01      	subs	r3, #1
 80061a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80061a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80061ae:	4413      	add	r3, r2
 80061b0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061b4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <find_volume+0x188>
 80061bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061c0:	f7ff fed4 	bl	8005f6c <check_fs>
 80061c4:	4603      	mov	r3, r0
 80061c6:	e000      	b.n	80061ca <find_volume+0x18a>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80061ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <find_volume+0x1a2>
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	3301      	adds	r3, #1
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d9e1      	bls.n	80061a6 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d101      	bne.n	80061ee <find_volume+0x1ae>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e1ee      	b.n	80065cc <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80061ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <find_volume+0x1ba>
 80061f6:	230d      	movs	r3, #13
 80061f8:	e1e8      	b.n	80065cc <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	7b1b      	ldrb	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	b21a      	sxth	r2, r3
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	7adb      	ldrb	r3, [r3, #11]
 8006206:	b21b      	sxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b21b      	sxth	r3, r3
 800620c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006210:	d001      	beq.n	8006216 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8006212:	230d      	movs	r3, #13
 8006214:	e1da      	b.n	80065cc <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	7ddb      	ldrb	r3, [r3, #23]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	b21a      	sxth	r2, r3
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	7d9b      	ldrb	r3, [r3, #22]
 8006222:	b21b      	sxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b21b      	sxth	r3, r3
 8006228:	b29b      	uxth	r3, r3
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d112      	bne.n	8006258 <find_volume+0x218>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006238:	061a      	lsls	r2, r3, #24
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	4313      	orrs	r3, r2
 8006244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006246:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800624a:	0212      	lsls	r2, r2, #8
 800624c:	4313      	orrs	r3, r2
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006254:	4313      	orrs	r3, r2
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800625c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	7c1a      	ldrb	r2, [r3, #16]
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006270:	2b01      	cmp	r3, #1
 8006272:	d006      	beq.n	8006282 <find_volume+0x242>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800627a:	2b02      	cmp	r3, #2
 800627c:	d001      	beq.n	8006282 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800627e:	230d      	movs	r3, #13
 8006280:	e1a4      	b.n	80065cc <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006288:	461a      	mov	r2, r3
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	7b5a      	ldrb	r2, [r3, #13]
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <find_volume+0x27c>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062ac:	461a      	mov	r2, r3
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 80062bc:	230d      	movs	r3, #13
 80062be:	e185      	b.n	80065cc <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	7c9b      	ldrb	r3, [r3, #18]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	b21a      	sxth	r2, r3
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	7c5b      	ldrb	r3, [r3, #17]
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b21b      	sxth	r3, r3
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 80062ea:	230d      	movs	r3, #13
 80062ec:	e16e      	b.n	80065cc <find_volume+0x58c>
 80062ee:	bf00      	nop
 80062f0:	200001b0 	.word	0x200001b0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	7d1b      	ldrb	r3, [r3, #20]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	b21a      	sxth	r2, r3
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	7cdb      	ldrb	r3, [r3, #19]
 8006300:	b21b      	sxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b21b      	sxth	r3, r3
 8006306:	b29b      	uxth	r3, r3
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800630a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630c:	2b00      	cmp	r3, #0
 800630e:	d112      	bne.n	8006336 <find_volume+0x2f6>
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006316:	061a      	lsls	r2, r3, #24
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	4313      	orrs	r3, r2
 8006322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006324:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006328:	0212      	lsls	r2, r2, #8
 800632a:	4313      	orrs	r3, r2
 800632c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006332:	4313      	orrs	r3, r2
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	7bdb      	ldrb	r3, [r3, #15]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	b21a      	sxth	r2, r3
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	7b9b      	ldrb	r3, [r3, #14]
 8006342:	b21b      	sxth	r3, r3
 8006344:	4313      	orrs	r3, r2
 8006346:	b21b      	sxth	r3, r3
 8006348:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800634a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <find_volume+0x314>
 8006350:	230d      	movs	r3, #13
 8006352:	e13b      	b.n	80065cc <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	4413      	add	r3, r2
 800635a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006360:	0912      	lsrs	r2, r2, #4
 8006362:	b292      	uxth	r2, r2
 8006364:	4413      	add	r3, r2
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	429a      	cmp	r2, r3
 800636e:	d201      	bcs.n	8006374 <find_volume+0x334>
 8006370:	230d      	movs	r3, #13
 8006372:	e12b      	b.n	80065cc <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006380:	fbb3 f3f2 	udiv	r3, r3, r2
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <find_volume+0x350>
 800638c:	230d      	movs	r3, #13
 800638e:	e11d      	b.n	80065cc <find_volume+0x58c>
	fmt = FS_FAT12;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	f640 72f5 	movw	r2, #4085	; 0xff5
 800639c:	4293      	cmp	r3, r2
 800639e:	d902      	bls.n	80063a6 <find_volume+0x366>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d902      	bls.n	80063b6 <find_volume+0x376>
 80063b0:	2303      	movs	r3, #3
 80063b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80063c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063cc:	441a      	add	r2, r3
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80063d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	441a      	add	r2, r3
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80063e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d121      	bne.n	800642c <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <find_volume+0x3b6>
 80063f2:	230d      	movs	r3, #13
 80063f4:	e0ea      	b.n	80065cc <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063fc:	061a      	lsls	r2, r3, #24
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	4313      	orrs	r3, r2
 8006408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800640e:	0212      	lsls	r2, r2, #8
 8006410:	4313      	orrs	r3, r2
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006418:	431a      	orrs	r2, r3
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	647b      	str	r3, [r7, #68]	; 0x44
 800642a:	e025      	b.n	8006478 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <find_volume+0x3fa>
 8006436:	230d      	movs	r3, #13
 8006438:	e0c8      	b.n	80065cc <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	441a      	add	r2, r3
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800644a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800644e:	2b02      	cmp	r3, #2
 8006450:	d104      	bne.n	800645c <find_volume+0x41c>
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	e00c      	b.n	8006476 <find_volume+0x436>
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	085a      	lsrs	r2, r3, #1
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800647e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006480:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	429a      	cmp	r2, r3
 8006488:	d201      	bcs.n	800648e <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800648a:	230d      	movs	r3, #13
 800648c:	e09e      	b.n	80065cc <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80064ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d177      	bne.n	80065a4 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b21a      	sxth	r2, r3
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d16a      	bne.n	80065a4 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 80064ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d0:	3301      	adds	r3, #1
 80064d2:	4619      	mov	r1, r3
 80064d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064d6:	f7fe fd3a 	bl	8004f4e <move_window>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d161      	bne.n	80065a4 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	b21a      	sxth	r2, r3
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80064f8:	b21b      	sxth	r3, r3
 80064fa:	4313      	orrs	r3, r2
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <find_volume+0x594>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d14f      	bne.n	80065a4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	78db      	ldrb	r3, [r3, #3]
 8006508:	061a      	lsls	r2, r3, #24
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	4313      	orrs	r3, r2
 8006512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006514:	7852      	ldrb	r2, [r2, #1]
 8006516:	0212      	lsls	r2, r2, #8
 8006518:	4313      	orrs	r3, r2
 800651a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <find_volume+0x598>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d13e      	bne.n	80065a4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800652c:	061a      	lsls	r2, r3, #24
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	4313      	orrs	r3, r2
 8006538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800653a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800653e:	0212      	lsls	r2, r2, #8
 8006540:	4313      	orrs	r3, r2
 8006542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006544:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006548:	4313      	orrs	r3, r2
 800654a:	4a24      	ldr	r2, [pc, #144]	; (80065dc <find_volume+0x59c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d129      	bne.n	80065a4 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006556:	061a      	lsls	r2, r3, #24
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	4313      	orrs	r3, r2
 8006562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006564:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006568:	0212      	lsls	r2, r2, #8
 800656a:	4313      	orrs	r3, r2
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006572:	431a      	orrs	r2, r3
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006580:	061a      	lsls	r2, r3, #24
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	4313      	orrs	r3, r2
 800658c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006592:	0212      	lsls	r2, r2, #8
 8006594:	4313      	orrs	r3, r2
 8006596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006598:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800659c:	431a      	orrs	r2, r3
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <find_volume+0x5a0>)
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <find_volume+0x5a0>)
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <find_volume+0x5a0>)
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80065c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065c6:	f7fe fc4f 	bl	8004e68 <clear_lock>
#endif

	return FR_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3758      	adds	r7, #88	; 0x58
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	ffffaa55 	.word	0xffffaa55
 80065d8:	41615252 	.word	0x41615252
 80065dc:	61417272 	.word	0x61417272
 80065e0:	200001b4 	.word	0x200001b4

080065e4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <validate+0x58>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01d      	beq.n	800663c <validate+0x58>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <validate+0x58>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006614:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800661e:	429a      	cmp	r2, r3
 8006620:	d10c      	bne.n	800663c <validate+0x58>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006628:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe f947 	bl	80048c0 <disk_status>
 8006632:	4603      	mov	r3, r0
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800663c:	2309      	movs	r3, #9
 800663e:	e00b      	b.n	8006658 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fa52 	bl	8004af0 <lock_fs>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <validate+0x72>
 8006652:	230f      	movs	r3, #15
 8006654:	e000      	b.n	8006658 <validate+0x74>

	return FR_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006672:	f107 0310 	add.w	r3, r7, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fc34 	bl	8005ee4 <get_ldnumber>
 800667c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	da01      	bge.n	8006688 <f_mount+0x28>
 8006684:	230b      	movs	r3, #11
 8006686:	e04c      	b.n	8006722 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006688:	4a28      	ldr	r2, [pc, #160]	; (800672c <f_mount+0xcc>)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8006698:	69b8      	ldr	r0, [r7, #24]
 800669a:	f7fe fbe5 	bl	8004e68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 f88f 	bl	80077c8 <ff_del_syncobj>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <f_mount+0x54>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e036      	b.n	8006722 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d011      	beq.n	80066e6 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f001 f850 	bl	800777c <ff_cre_syncobj>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <f_mount+0x86>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e01d      	b.n	8006722 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4910      	ldr	r1, [pc, #64]	; (800672c <f_mount+0xcc>)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <f_mount+0x9c>
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <f_mount+0xa0>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e010      	b.n	8006722 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006700:	f107 0108 	add.w	r1, r7, #8
 8006704:	f107 030c 	add.w	r3, r7, #12
 8006708:	2200      	movs	r2, #0
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fc98 	bl	8006040 <find_volume>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	7dfa      	ldrb	r2, [r7, #23]
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe f9f7 	bl	8004b0e <unlock_fs>
 8006720:	7dfb      	ldrb	r3, [r7, #23]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	200001b0 	.word	0x200001b0

08006730 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8006736:	af00      	add	r7, sp, #0
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	6018      	str	r0, [r3, #0]
 800673e:	f107 0308 	add.w	r3, r7, #8
 8006742:	6019      	str	r1, [r3, #0]
 8006744:	1dfb      	adds	r3, r7, #7
 8006746:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006748:	f107 030c 	add.w	r3, r7, #12
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <f_open+0x26>
 8006752:	2309      	movs	r3, #9
 8006754:	e1fc      	b.n	8006b50 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 8006756:	f107 030c 	add.w	r3, r7, #12
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006762:	1dfb      	adds	r3, r7, #7
 8006764:	1dfa      	adds	r2, r7, #7
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	f002 021f 	and.w	r2, r2, #31
 800676c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800676e:	1dfb      	adds	r3, r7, #7
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	f107 0320 	add.w	r3, r7, #32
 8006780:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fc5b 	bl	8006040 <find_volume>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006790:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 81cf 	bne.w	8006b38 <f_open+0x408>
		INIT_BUF(dj);
 800679a:	f107 0320 	add.w	r3, r7, #32
 800679e:	f107 0214 	add.w	r2, r7, #20
 80067a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80067a6:	f107 0308 	add.w	r3, r7, #8
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f107 0320 	add.w	r3, r7, #32
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fb28 	bl	8005e08 <follow_path>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80067be:	f107 0320 	add.w	r3, r7, #32
 80067c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067c6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067ca:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11a      	bne.n	8006808 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80067d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <f_open+0xb2>
				res = FR_INVALID_NAME;
 80067da:	2306      	movs	r3, #6
 80067dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80067e0:	e012      	b.n	8006808 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067e2:	1dfb      	adds	r3, r7, #7
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	f107 0320 	add.w	r3, r7, #32
 80067fa:	4611      	mov	r1, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe f9a5 	bl	8004b4c <chk_lock>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006808:	1dfb      	adds	r3, r7, #7
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 031c 	and.w	r3, r3, #28
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80cc 	beq.w	80069ae <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8006816:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01f      	beq.n	800685e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800681e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006822:	2b04      	cmp	r3, #4
 8006824:	d10e      	bne.n	8006844 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006826:	f7fe f9ff 	bl	8004c28 <enq_lock>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <f_open+0x10e>
 8006830:	f107 0320 	add.w	r3, r7, #32
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff f9ee 	bl	8005c16 <dir_register>
 800683a:	4603      	mov	r3, r0
 800683c:	e000      	b.n	8006840 <f_open+0x110>
 800683e:	2312      	movs	r3, #18
 8006840:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006844:	1dfb      	adds	r3, r7, #7
 8006846:	1dfa      	adds	r2, r7, #7
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	f042 0208 	orr.w	r2, r2, #8
 800684e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006850:	f107 0320 	add.w	r3, r7, #32
 8006854:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006858:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800685c:	e014      	b.n	8006888 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800685e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006862:	330b      	adds	r3, #11
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0311 	and.w	r3, r3, #17
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <f_open+0x146>
					res = FR_DENIED;
 800686e:	2307      	movs	r3, #7
 8006870:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006874:	e008      	b.n	8006888 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006876:	1dfb      	adds	r3, r7, #7
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <f_open+0x158>
						res = FR_EXIST;
 8006882:	2308      	movs	r3, #8
 8006884:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006888:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 80af 	bne.w	80069f0 <f_open+0x2c0>
 8006892:	1dfb      	adds	r3, r7, #7
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a8 	beq.w	80069f0 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 80068a0:	f7fd fad2 	bl	8003e48 <get_fattime>
 80068a4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80068a8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068ac:	330e      	adds	r3, #14
 80068ae:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	0a1b      	lsrs	r3, r3, #8
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068c4:	330f      	adds	r3, #15
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068ce:	0c1a      	lsrs	r2, r3, #16
 80068d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068d4:	3310      	adds	r3, #16
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80068de:	0e1a      	lsrs	r2, r3, #24
 80068e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068e4:	3311      	adds	r3, #17
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80068ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068ee:	330b      	adds	r3, #11
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80068f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80068f8:	331c      	adds	r3, #28
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006902:	331d      	adds	r3, #29
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800690c:	331e      	adds	r3, #30
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006916:	331f      	adds	r3, #31
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800691c:	f107 0320 	add.w	r3, r7, #32
 8006920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006924:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f8d0 	bl	8005ace <ld_clust>
 800692e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006932:	2100      	movs	r1, #0
 8006934:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006938:	f7ff f8f7 	bl	8005b2a <st_clust>
				dj.fs->wflag = 1;
 800693c:	f107 0320 	add.w	r3, r7, #32
 8006940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800694a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04e      	beq.n	80069f0 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8006952:	f107 0320 	add.w	r3, r7, #32
 8006956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800695a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800695e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006962:	f107 0320 	add.w	r3, r7, #32
 8006966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800696a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fdac 	bl	80054cc <remove_chain>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800697a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800697e:	2b00      	cmp	r3, #0
 8006980:	d136      	bne.n	80069f0 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006982:	f107 0320 	add.w	r3, r7, #32
 8006986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800698a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800698e:	3a01      	subs	r2, #1
 8006990:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8006994:	f107 0320 	add.w	r3, r7, #32
 8006998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800699c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fad4 	bl	8004f4e <move_window>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80069ac:	e020      	b.n	80069f0 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80069ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11c      	bne.n	80069f0 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80069b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80069ba:	330b      	adds	r3, #11
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <f_open+0x29e>
					res = FR_NO_FILE;
 80069c6:	2304      	movs	r3, #4
 80069c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80069cc:	e010      	b.n	80069f0 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80069ce:	1dfb      	adds	r3, r7, #7
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <f_open+0x2c0>
 80069da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80069de:	330b      	adds	r3, #11
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <f_open+0x2c0>
						res = FR_DENIED;
 80069ea:	2307      	movs	r3, #7
 80069ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80069f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d13d      	bne.n	8006a74 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8006a04:	1dfb      	adds	r3, r7, #7
 8006a06:	1dfa      	adds	r2, r7, #7
 8006a08:	7812      	ldrb	r2, [r2, #0]
 8006a0a:	f042 0220 	orr.w	r2, r2, #32
 8006a0e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006a10:	f107 0320 	add.w	r3, r7, #32
 8006a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a18:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8006a1c:	f107 030c 	add.w	r3, r7, #12
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006a26:	f107 030c 	add.w	r3, r7, #12
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006a30:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a34:	1dfb      	adds	r3, r7, #7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	f107 0320 	add.w	r3, r7, #32
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe f90e 	bl	8004c70 <inc_lock>
 8006a54:	4602      	mov	r2, r0
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <f_open+0x344>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006a74:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d15d      	bne.n	8006b38 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8006a7c:	f107 030c 	add.w	r3, r7, #12
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	1dfa      	adds	r2, r7, #7
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006a96:	f107 0320 	add.w	r3, r7, #32
 8006a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a9e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f813 	bl	8005ace <ld_clust>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006ab4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ab8:	331f      	adds	r3, #31
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	061a      	lsls	r2, r3, #24
 8006abe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ac2:	331e      	adds	r3, #30
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006ace:	321d      	adds	r2, #29
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	0212      	lsls	r2, r2, #8
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006ada:	321c      	adds	r2, #28
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8006af6:	f107 030c 	add.w	r3, r7, #12
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006b02:	f107 030c 	add.w	r3, r7, #12
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006b0e:	f107 0320 	add.w	r3, r7, #32
 8006b12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b2a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006b2e:	f107 030c 	add.w	r3, r7, #12
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006b38:	f107 0320 	add.w	r3, r7, #32
 8006b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b40:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd ffe1 	bl	8004b0e <unlock_fs>
 8006b4c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b08c      	sub	sp, #48	; 0x30
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fd36 	bl	80065e4 <validate>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006b7c:	7ffb      	ldrb	r3, [r7, #31]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <f_read+0x3c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b88:	7ffa      	ldrb	r2, [r7, #31]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fd ffbe 	bl	8004b0e <unlock_fs>
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
 8006b94:	e192      	b.n	8006ebc <f_read+0x362>
	if (fp->err)								/* Check error */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fd ffad 	bl	8004b0e <unlock_fs>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006bba:	e17f      	b.n	8006ebc <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d108      	bne.n	8006bdc <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bd0:	2107      	movs	r1, #7
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fd ff9b 	bl	8004b0e <unlock_fs>
 8006bd8:	2307      	movs	r3, #7
 8006bda:	e16f      	b.n	8006ebc <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	f240 8157 	bls.w	8006ea4 <f_read+0x34a>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006bfa:	e153      	b.n	8006ea4 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 811c 	bne.w	8006e44 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c1c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4013      	ands	r3, r2
 8006c26:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d147      	bne.n	8006cbe <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c40:	e018      	b.n	8006c74 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7fe fd30 	bl	80056ba <clmt_clust>
 8006c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c5c:	e00a      	b.n	8006c74 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe fa6b 	bl	8005148 <get_fat>
 8006c72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d80c      	bhi.n	8006c94 <f_read+0x13a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c88:	2102      	movs	r1, #2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd ff3f 	bl	8004b0e <unlock_fs>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e113      	b.n	8006ebc <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d10c      	bne.n	8006cb6 <f_read+0x15c>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd ff2e 	bl	8004b0e <unlock_fs>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e102      	b.n	8006ebc <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	f7fe fa19 	bl	8005104 <clust2sect>
 8006cd2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10c      	bne.n	8006cf4 <f_read+0x19a>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd ff0f 	bl	8004b0e <unlock_fs>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0e3      	b.n	8006ebc <f_read+0x362>
			sect += csect;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0a5b      	lsrs	r3, r3, #9
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d04d      	beq.n	8006da4 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006d08:	7dfa      	ldrb	r2, [r7, #23]
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	4413      	add	r3, r2
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006d14:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d908      	bls.n	8006d2e <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006d26:	461a      	mov	r2, r3
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d34:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	6a39      	ldr	r1, [r7, #32]
 8006d3e:	f7fd fdff 	bl	8004940 <disk_read>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00c      	beq.n	8006d62 <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fd fed8 	bl	8004b0e <unlock_fs>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0ac      	b.n	8006ebc <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d015      	beq.n	8006d9c <f_read+0x242>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d90d      	bls.n	8006d9c <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	025b      	lsls	r3, r3, #9
 8006d8c:	6a3a      	ldr	r2, [r7, #32]
 8006d8e:	4413      	add	r3, r2
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fe30 	bl	80049fc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	025b      	lsls	r3, r3, #9
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006da2:	e069      	b.n	8006e78 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d045      	beq.n	8006e3c <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d024      	beq.n	8006e08 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dc4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f7fd fdd5 	bl	8004980 <disk_write>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dea:	2101      	movs	r1, #1
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fd fe8e 	bl	8004b0e <unlock_fs>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e062      	b.n	8006ebc <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e0e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	2301      	movs	r3, #1
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	f7fd fd92 	bl	8004940 <disk_read>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fd fe6b 	bl	8004b0e <unlock_fs>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e03f      	b.n	8006ebc <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d901      	bls.n	8006e60 <f_read+0x306>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e70:	4619      	mov	r1, r3
 8006e72:	6a38      	ldr	r0, [r7, #32]
 8006e74:	f7fd fdc2 	bl	80049fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	4413      	add	r3, r2
 8006e7e:	623b      	str	r3, [r7, #32]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	441a      	add	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	441a      	add	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f47f aea8 	bne.w	8006bfc <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd fe2a 	bl	8004b0e <unlock_fs>
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3730      	adds	r7, #48	; 0x30
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff fb81 	bl	80065e4 <validate>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <f_write+0x3c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ef2:	7dfa      	ldrb	r2, [r7, #23]
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd fe09 	bl	8004b0e <unlock_fs>
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	e1d4      	b.n	80072aa <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fd fdf8 	bl	8004b0e <unlock_fs>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006f24:	e1c1      	b.n	80072aa <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d108      	bne.n	8006f46 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f3a:	2107      	movs	r1, #7
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd fde6 	bl	8004b0e <unlock_fs>
 8006f42:	2307      	movs	r3, #7
 8006f44:	e1b1      	b.n	80072aa <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f080 8182 	bcs.w	8007260 <f_write+0x39c>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006f60:	e17e      	b.n	8007260 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 813e 	bne.w	80071ee <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f78:	0a5b      	lsrs	r3, r3, #9
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006f8e:	7dbb      	ldrb	r3, [r7, #22]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d15f      	bne.n	8007054 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d121      	bne.n	8006ff0 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fae3 	bl	8005580 <create_chain>
 8006fba:	6278      	str	r0, [r7, #36]	; 0x24
 8006fbc:	e018      	b.n	8006ff0 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fe fb72 	bl	80056ba <clmt_clust>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fd8:	e00a      	b.n	8006ff0 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7fe fac9 	bl	8005580 <create_chain>
 8006fee:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8139 	beq.w	800726a <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10c      	bne.n	8007018 <f_write+0x154>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd fd7d 	bl	8004b0e <unlock_fs>
 8007014:	2302      	movs	r3, #2
 8007016:	e148      	b.n	80072aa <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d10c      	bne.n	800703a <f_write+0x176>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800702e:	2101      	movs	r1, #1
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd fd6c 	bl	8004b0e <unlock_fs>
 8007036:	2301      	movs	r3, #1
 8007038:	e137      	b.n	80072aa <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <f_write+0x190>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d024      	beq.n	80070ac <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007068:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007074:	2301      	movs	r3, #1
 8007076:	f7fd fc83 	bl	8004980 <disk_write>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00c      	beq.n	800709a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f7fd fd3c 	bl	8004b0e <unlock_fs>
 8007096:	2301      	movs	r3, #1
 8007098:	e107      	b.n	80072aa <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80070a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe f822 	bl	8005104 <clust2sect>
 80070c0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10c      	bne.n	80070e2 <f_write+0x21e>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070d6:	2102      	movs	r1, #2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd fd18 	bl	8004b0e <unlock_fs>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0e3      	b.n	80072aa <f_write+0x3e6>
			sect += csect;
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0a5b      	lsrs	r3, r3, #9
 80070ee:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04f      	beq.n	8007196 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80070f6:	7dba      	ldrb	r2, [r7, #22]
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007102:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007106:	4293      	cmp	r3, r2
 8007108:	d908      	bls.n	800711c <f_write+0x258>
					cc = fp->fs->csize - csect;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007110:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007114:	461a      	mov	r2, r3
 8007116:	7dbb      	ldrb	r3, [r7, #22]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007122:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	69b9      	ldr	r1, [r7, #24]
 800712c:	f7fd fc28 	bl	8004980 <disk_write>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00c      	beq.n	8007150 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007144:	2101      	movs	r1, #1
 8007146:	4618      	mov	r0, r3
 8007148:	f7fd fce1 	bl	8004b0e <unlock_fs>
 800714c:	2301      	movs	r3, #1
 800714e:	e0ac      	b.n	80072aa <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	429a      	cmp	r2, r3
 800715e:	d916      	bls.n	800718e <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	025b      	lsls	r3, r3, #9
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4413      	add	r3, r2
 8007172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007176:	4619      	mov	r1, r3
 8007178:	f7fd fc40 	bl	80049fc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	025b      	lsls	r3, r3, #9
 8007192:	623b      	str	r3, [r7, #32]
				continue;
 8007194:	e04e      	b.n	8007234 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d021      	beq.n	80071e6 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d219      	bcs.n	80071e6 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071b8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	2301      	movs	r3, #1
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	f7fd fbbd 	bl	8004940 <disk_read>
 80071c6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00c      	beq.n	80071e6 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071da:	2101      	movs	r1, #1
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fc96 	bl	8004b0e <unlock_fs>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e061      	b.n	80072aa <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80071f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80071fc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d901      	bls.n	800720a <f_write+0x346>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	6a3a      	ldr	r2, [r7, #32]
 800721a:	69b9      	ldr	r1, [r7, #24]
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd fbed 	bl	80049fc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	4413      	add	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	441a      	add	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	441a      	add	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f47f ae7d 	bne.w	8006f62 <f_write+0x9e>
 8007268:	e000      	b.n	800726c <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800726a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007278:	429a      	cmp	r2, r3
 800727a:	d905      	bls.n	8007288 <f_write+0x3c4>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800728e:	f043 0320 	orr.w	r3, r3, #32
 8007292:	b2da      	uxtb	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fd fc33 	bl	8004b0e <unlock_fs>
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff f992 	bl	80065e4 <validate>
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f040 80af 	bne.w	800742a <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a7 	beq.w	800742a <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072f0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80072fc:	2301      	movs	r3, #1
 80072fe:	f7fd fb3f 	bl	8004980 <disk_write>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800730e:	2101      	movs	r1, #1
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fbfc 	bl	8004b0e <unlock_fs>
 8007316:	2301      	movs	r3, #1
 8007318:	e090      	b.n	800743c <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007324:	b2da      	uxtb	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f7fd fe07 	bl	8004f4e <move_window>
 8007340:	4603      	mov	r3, r0
 8007342:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d16f      	bne.n	800742a <f_sync+0x178>
				dir = fp->dir_ptr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007350:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	330b      	adds	r3, #11
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	330b      	adds	r3, #11
 800735c:	f042 0220 	orr.w	r2, r2, #32
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	331c      	adds	r3, #28
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007378:	b29b      	uxth	r3, r3
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	b29a      	uxth	r2, r3
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	331d      	adds	r3, #29
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800738c:	0c1a      	lsrs	r2, r3, #16
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	331e      	adds	r3, #30
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800739c:	0e1a      	lsrs	r2, r3, #24
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	331f      	adds	r3, #31
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073ac:	4619      	mov	r1, r3
 80073ae:	6938      	ldr	r0, [r7, #16]
 80073b0:	f7fe fbbb 	bl	8005b2a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80073b4:	f7fc fd48 	bl	8003e48 <get_fattime>
 80073b8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3316      	adds	r3, #22
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	3317      	adds	r3, #23
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	0c1a      	lsrs	r2, r3, #16
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	3318      	adds	r3, #24
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	0e1a      	lsrs	r2, r3, #24
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	3319      	adds	r3, #25
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	3312      	adds	r3, #18
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	3313      	adds	r3, #19
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007402:	f023 0320 	bic.w	r3, r3, #32
 8007406:	b2da      	uxtb	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd fdc2 	bl	8004faa <sync_fs>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007430:	7dfa      	ldrb	r2, [r7, #23]
 8007432:	4611      	mov	r1, r2
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd fb6a 	bl	8004b0e <unlock_fs>
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff30 	bl	80072b2 <f_sync>
 8007452:	4603      	mov	r3, r0
 8007454:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11e      	bne.n	800749a <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff f8c1 	bl	80065e4 <validate>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d116      	bne.n	800749a <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007472:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800747a:	4618      	mov	r0, r3
 800747c:	f7fd fcb0 	bl	8004de0 <dec_lock>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007492:	2100      	movs	r1, #0
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f7fd fb3a 	bl	8004b0e <unlock_fs>
#endif
		}
	}
	return res;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	; 0x38
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	2200      	movs	r2, #0
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7fe fdc1 	bl	8006040 <find_volume>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80074ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 80af 	bne.w	8007632 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80074e0:	3b02      	subs	r3, #2
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d805      	bhi.n	80074f2 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e09f      	b.n	8007632 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074f8:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80074fe:	7efb      	ldrb	r3, [r7, #27]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d125      	bne.n	8007550 <f_getfree+0xac>
				clst = 2;
 8007504:	2302      	movs	r3, #2
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800750a:	69f8      	ldr	r0, [r7, #28]
 800750c:	f7fd fe1c 	bl	8005148 <get_fat>
 8007510:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d103      	bne.n	8007522 <f_getfree+0x7e>
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007520:	e077      	b.n	8007612 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d103      	bne.n	8007530 <f_getfree+0x8c>
 8007528:	2302      	movs	r3, #2
 800752a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800752e:	e070      	b.n	8007612 <f_getfree+0x16e>
					if (stat == 0) n++;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <f_getfree+0x98>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	3301      	adds	r3, #1
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	3301      	adds	r3, #1
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754a:	429a      	cmp	r2, r3
 800754c:	d3dc      	bcc.n	8007508 <f_getfree+0x64>
 800754e:	e060      	b.n	8007612 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
 8007564:	2300      	movs	r3, #0
 8007566:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	d112      	bne.n	8007594 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	62ba      	str	r2, [r7, #40]	; 0x28
 8007574:	4619      	mov	r1, r3
 8007576:	69f8      	ldr	r0, [r7, #28]
 8007578:	f7fd fce9 	bl	8004f4e <move_window>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8007582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007586:	2b00      	cmp	r3, #0
 8007588:	d142      	bne.n	8007610 <f_getfree+0x16c>
						p = fs->win.d8;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800758e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8007594:	7efb      	ldrb	r3, [r7, #27]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d115      	bne.n	80075c6 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	3301      	adds	r3, #1
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	b21a      	sxth	r2, r3
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b21b      	sxth	r3, r3
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b21b      	sxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <f_getfree+0x114>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3301      	adds	r3, #1
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	3302      	adds	r3, #2
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	3b02      	subs	r3, #2
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	e01d      	b.n	8007602 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	3303      	adds	r3, #3
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	061a      	lsls	r2, r3, #24
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	3302      	adds	r3, #2
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	4313      	orrs	r3, r2
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	3201      	adds	r2, #1
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	0212      	lsls	r2, r2, #8
 80075e0:	4313      	orrs	r3, r2
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	7812      	ldrb	r2, [r2, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <f_getfree+0x152>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	3301      	adds	r3, #1
 80075f4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	3304      	adds	r3, #4
 80075fa:	623b      	str	r3, [r7, #32]
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	3b04      	subs	r3, #4
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	3b01      	subs	r3, #1
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1ac      	bne.n	8007568 <f_getfree+0xc4>
 800760e:	e000      	b.n	8007612 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8007610:	bf00      	nop
			}
			fs->free_clust = n;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007630:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007636:	4619      	mov	r1, r3
 8007638:	69f8      	ldr	r0, [r7, #28]
 800763a:	f7fd fa68 	bl	8004b0e <unlock_fs>
 800763e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007642:	4618      	mov	r0, r3
 8007644:	3738      	adds	r7, #56	; 0x38
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b088      	sub	sp, #32
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800765e:	e01b      	b.n	8007698 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007660:	f107 0310 	add.w	r3, r7, #16
 8007664:	f107 0114 	add.w	r1, r7, #20
 8007668:	2201      	movs	r2, #1
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff fa75 	bl	8006b5a <f_read>
		if (rc != 1) break;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d116      	bne.n	80076a4 <f_gets+0x5a>
		c = s[0];
 8007676:	7d3b      	ldrb	r3, [r7, #20]
 8007678:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	2b0d      	cmp	r3, #13
 800767e:	d100      	bne.n	8007682 <f_gets+0x38>
 8007680:	e00a      	b.n	8007698 <f_gets+0x4e>
		*p++ = c;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	61ba      	str	r2, [r7, #24]
 8007688:	7dfa      	ldrb	r2, [r7, #23]
 800768a:	701a      	strb	r2, [r3, #0]
		n++;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	3301      	adds	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	2b0a      	cmp	r3, #10
 8007696:	d007      	beq.n	80076a8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3b01      	subs	r3, #1
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	dbde      	blt.n	8007660 <f_gets+0x16>
 80076a2:	e002      	b.n	80076aa <f_gets+0x60>
		if (rc != 1) break;
 80076a4:	bf00      	nop
 80076a6:	e000      	b.n	80076aa <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80076a8:	bf00      	nop
	}
	*p = 0;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <f_gets+0x70>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	e000      	b.n	80076bc <f_gets+0x72>
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80076da:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 80076dc:	7a5b      	ldrb	r3, [r3, #9]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d831      	bhi.n	8007748 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80076e4:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 80076e6:	7a5b      	ldrb	r3, [r3, #9]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80076f2:	4b19      	ldr	r3, [pc, #100]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 80076f4:	7a5b      	ldrb	r3, [r3, #9]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4a17      	ldr	r2, [pc, #92]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 8007704:	7a5b      	ldrb	r3, [r3, #9]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 800770c:	4413      	add	r3, r2
 800770e:	79fa      	ldrb	r2, [r7, #7]
 8007710:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 8007714:	7a5b      	ldrb	r3, [r3, #9]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	b2d1      	uxtb	r1, r2
 800771c:	4a0e      	ldr	r2, [pc, #56]	; (8007758 <FATFS_LinkDriverEx+0x94>)
 800771e:	7251      	strb	r1, [r2, #9]
 8007720:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007722:	7dbb      	ldrb	r3, [r7, #22]
 8007724:	3330      	adds	r3, #48	; 0x30
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	3301      	adds	r3, #1
 8007730:	223a      	movs	r2, #58	; 0x3a
 8007732:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3302      	adds	r3, #2
 8007738:	222f      	movs	r2, #47	; 0x2f
 800773a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3303      	adds	r3, #3
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	200001d0 	.word	0x200001d0

0800775c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007766:	2200      	movs	r2, #0
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff ffaa 	bl	80076c4 <FATFS_LinkDriverEx>
 8007770:	4603      	mov	r3, r0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b089      	sub	sp, #36	; 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <ff_cre_syncobj+0x48>)
 800778a:	f107 040c 	add.w	r4, r7, #12
 800778e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  *sobj = osSemaphoreNew(1, 0, osSemaphore(SEM));
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	461a      	mov	r2, r3
 800779a:	2100      	movs	r1, #0
 800779c:	2001      	movs	r0, #1
 800779e:	f000 fa19 	bl	8007bd4 <osSemaphoreNew>
 80077a2:	4602      	mov	r2, r0
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	61fb      	str	r3, [r7, #28]
  
  return ret;
 80077b8:	69fb      	ldr	r3, [r7, #28]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3724      	adds	r7, #36	; 0x24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd90      	pop	{r4, r7, pc}
 80077c2:	bf00      	nop
 80077c4:	0800ba38 	.word	0x0800ba38

080077c8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fb5b 	bl	8007e8c <osSemaphoreDelete>
  return 1;
 80077d6:	2301      	movs	r3, #1
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80077ec:	f241 3188 	movw	r1, #5000	; 0x1388
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa8d 	bl	8007d10 <osSemaphoreAcquire>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <ff_req_grant+0x20>
  {
    ret = 1;
 80077fc:	2301      	movs	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8007800:	68fb      	ldr	r3, [r7, #12]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fae2 	bl	8007ddc <osSemaphoreRelease>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007826:	f3ef 8305 	mrs	r3, IPSR
 800782a:	60bb      	str	r3, [r7, #8]
  return(result);
 800782c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	607b      	str	r3, [r7, #4]
  return(result);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <osKernelInitialize+0x32>
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <osKernelInitialize+0x64>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d109      	bne.n	800785a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007846:	f3ef 8311 	mrs	r3, BASEPRI
 800784a:	603b      	str	r3, [r7, #0]
  return(result);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007852:	f06f 0305 	mvn.w	r3, #5
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e00c      	b.n	8007874 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <osKernelInitialize+0x64>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007862:	4b08      	ldr	r3, [pc, #32]	; (8007884 <osKernelInitialize+0x64>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e002      	b.n	8007874 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800786e:	f04f 33ff 	mov.w	r3, #4294967295
 8007872:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000022c 	.word	0x2000022c

08007888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60bb      	str	r3, [r7, #8]
  return(result);
 8007894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789a:	f3ef 8310 	mrs	r3, PRIMASK
 800789e:	607b      	str	r3, [r7, #4]
  return(result);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <osKernelStart+0x32>
 80078a6:	4b11      	ldr	r3, [pc, #68]	; (80078ec <osKernelStart+0x64>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d109      	bne.n	80078c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ae:	f3ef 8311 	mrs	r3, BASEPRI
 80078b2:	603b      	str	r3, [r7, #0]
  return(result);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078ba:	f06f 0305 	mvn.w	r3, #5
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e00e      	b.n	80078e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80078c2:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <osKernelStart+0x64>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80078ca:	4b08      	ldr	r3, [pc, #32]	; (80078ec <osKernelStart+0x64>)
 80078cc:	2202      	movs	r2, #2
 80078ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80078d0:	f001 fdfa 	bl	80094c8 <vTaskStartScheduler>
      stat = osOK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e002      	b.n	80078e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078e0:	68fb      	ldr	r3, [r7, #12]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	2000022c 	.word	0x2000022c

080078f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b092      	sub	sp, #72	; 0x48
 80078f4:	af04      	add	r7, sp, #16
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007900:	f3ef 8305 	mrs	r3, IPSR
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8094 	bne.w	8007a36 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	623b      	str	r3, [r7, #32]
  return(result);
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808d 	bne.w	8007a36 <osThreadNew+0x146>
 800791c:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <osThreadNew+0x150>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d106      	bne.n	8007932 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007924:	f3ef 8311 	mrs	r3, BASEPRI
 8007928:	61fb      	str	r3, [r7, #28]
  return(result);
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8082 	bne.w	8007a36 <osThreadNew+0x146>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d07e      	beq.n	8007a36 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007938:	2380      	movs	r3, #128	; 0x80
 800793a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800793c:	2318      	movs	r3, #24
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007940:	2300      	movs	r3, #0
 8007942:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007944:	f107 031b 	add.w	r3, r7, #27
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d045      	beq.n	80079e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <osThreadNew+0x74>
        name = attr->name;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <osThreadNew+0x9a>
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b38      	cmp	r3, #56	; 0x38
 800797c:	d805      	bhi.n	800798a <osThreadNew+0x9a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <osThreadNew+0x9e>
        return (NULL);
 800798a:	2300      	movs	r3, #0
 800798c:	e054      	b.n	8007a38 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <osThreadNew+0xd4>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b5b      	cmp	r3, #91	; 0x5b
 80079ac:	d90a      	bls.n	80079c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <osThreadNew+0xd4>
        mem = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c2:	e010      	b.n	80079e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10c      	bne.n	80079e6 <osThreadNew+0xf6>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d108      	bne.n	80079e6 <osThreadNew+0xf6>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <osThreadNew+0xf6>
          mem = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e0:	e001      	b.n	80079e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d110      	bne.n	8007a0e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f001 fb98 	bl	8009138 <xTaskCreateStatic>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e013      	b.n	8007a36 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d110      	bne.n	8007a36 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 fbdf 	bl	80091ea <xTaskCreate>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d001      	beq.n	8007a36 <osThreadNew+0x146>
          hTask = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3738      	adds	r7, #56	; 0x38
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000022c 	.word	0x2000022c

08007a44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4c:	f3ef 8305 	mrs	r3, IPSR
 8007a50:	613b      	str	r3, [r7, #16]
  return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10f      	bne.n	8007a78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a58:	f3ef 8310 	mrs	r3, PRIMASK
 8007a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <osDelay+0x34>
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <osDelay+0x58>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d109      	bne.n	8007a80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <osDelay+0x3c>
    stat = osErrorISR;
 8007a78:	f06f 0305 	mvn.w	r3, #5
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	e007      	b.n	8007a90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fce8 	bl	8009460 <vTaskDelay>
    }
  }

  return (stat);
 8007a90:	697b      	ldr	r3, [r7, #20]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	2000022c 	.word	0x2000022c

08007aa0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	; 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aac:	f3ef 8305 	mrs	r3, IPSR
 8007ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8085 	bne.w	8007bc4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aba:	f3ef 8310 	mrs	r3, PRIMASK
 8007abe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d17e      	bne.n	8007bc4 <osMutexNew+0x124>
 8007ac6:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <osMutexNew+0x130>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d105      	bne.n	8007ada <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ace:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d174      	bne.n	8007bc4 <osMutexNew+0x124>
    if (attr != NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	623b      	str	r3, [r7, #32]
 8007ae6:	e001      	b.n	8007aec <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <osMutexNew+0x5c>
      rmtx = 1U;
 8007af6:	2301      	movs	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e001      	b.n	8007b00 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d15c      	bne.n	8007bc4 <osMutexNew+0x124>
      mem = -1;
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d015      	beq.n	8007b42 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d006      	beq.n	8007b2c <osMutexNew+0x8c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b4f      	cmp	r3, #79	; 0x4f
 8007b24:	d902      	bls.n	8007b2c <osMutexNew+0x8c>
          mem = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	e00c      	b.n	8007b46 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d108      	bne.n	8007b46 <osMutexNew+0xa6>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <osMutexNew+0xa6>
            mem = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	e001      	b.n	8007b46 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d112      	bne.n	8007b72 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4619      	mov	r1, r3
 8007b58:	2004      	movs	r0, #4
 8007b5a:	f000 fc21 	bl	80083a0 <xQueueCreateMutexStatic>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b60:	e016      	b.n	8007b90 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4619      	mov	r1, r3
 8007b68:	2001      	movs	r0, #1
 8007b6a:	f000 fc19 	bl	80083a0 <xQueueCreateMutexStatic>
 8007b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b70:	e00e      	b.n	8007b90 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007b7e:	2004      	movs	r0, #4
 8007b80:	f000 fbf6 	bl	8008370 <xQueueCreateMutex>
 8007b84:	6278      	str	r0, [r7, #36]	; 0x24
 8007b86:	e003      	b.n	8007b90 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007b88:	2001      	movs	r0, #1
 8007b8a:	f000 fbf1 	bl	8008370 <xQueueCreateMutex>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <osMutexNew+0x110>
        if (attr != NULL) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <osMutexNew+0x104>
          name = attr->name;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e001      	b.n	8007ba8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bac:	f001 fa3e 	bl	800902c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d006      	beq.n	8007bc4 <osMutexNew+0x124>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000022c 	.word	0x2000022c

08007bd4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08c      	sub	sp, #48	; 0x30
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007be4:	f3ef 8305 	mrs	r3, IPSR
 8007be8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 8088 	bne.w	8007d02 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf6:	617b      	str	r3, [r7, #20]
  return(result);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 8081 	bne.w	8007d02 <osSemaphoreNew+0x12e>
 8007c00:	4b42      	ldr	r3, [pc, #264]	; (8007d0c <osSemaphoreNew+0x138>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d105      	bne.n	8007c14 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c08:	f3ef 8311 	mrs	r3, BASEPRI
 8007c0c:	613b      	str	r3, [r7, #16]
  return(result);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d176      	bne.n	8007d02 <osSemaphoreNew+0x12e>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d073      	beq.n	8007d02 <osSemaphoreNew+0x12e>
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d86f      	bhi.n	8007d02 <osSemaphoreNew+0x12e>
    mem = -1;
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295
 8007c26:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d015      	beq.n	8007c5a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d006      	beq.n	8007c44 <osSemaphoreNew+0x70>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b4f      	cmp	r3, #79	; 0x4f
 8007c3c:	d902      	bls.n	8007c44 <osSemaphoreNew+0x70>
        mem = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	623b      	str	r3, [r7, #32]
 8007c42:	e00c      	b.n	8007c5e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d108      	bne.n	8007c5e <osSemaphoreNew+0x8a>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <osSemaphoreNew+0x8a>
          mem = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	623b      	str	r3, [r7, #32]
 8007c58:	e001      	b.n	8007c5e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d04d      	beq.n	8007d02 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d129      	bne.n	8007cc0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d10b      	bne.n	8007c8a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	2303      	movs	r3, #3
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	2001      	movs	r0, #1
 8007c82:	f000 fa89 	bl	8008198 <xQueueGenericCreateStatic>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24
 8007c88:	e005      	b.n	8007c96 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	2001      	movs	r0, #1
 8007c90:	f000 faf4 	bl	800827c <xQueueGenericCreate>
 8007c94:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d022      	beq.n	8007ce2 <osSemaphoreNew+0x10e>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01f      	beq.n	8007ce2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007caa:	f000 fbfb 	bl	80084a4 <xQueueGenericSend>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d016      	beq.n	8007ce2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8007cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cb6:	f001 f86e 	bl	8008d96 <vQueueDelete>
            hSemaphore = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	e010      	b.n	8007ce2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d108      	bne.n	8007cd8 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fb81 	bl	80083d6 <xQueueCreateCountingSemaphoreStatic>
 8007cd4:	6278      	str	r0, [r7, #36]	; 0x24
 8007cd6:	e004      	b.n	8007ce2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fbb0 	bl	8008440 <xQueueCreateCountingSemaphore>
 8007ce0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <osSemaphoreNew+0x122>
          name = attr->name;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	e001      	b.n	8007cfa <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007cfa:	69f9      	ldr	r1, [r7, #28]
 8007cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cfe:	f001 f995 	bl	800902c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3728      	adds	r7, #40	; 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	2000022c 	.word	0x2000022c

08007d10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007d28:	f06f 0303 	mvn.w	r3, #3
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	e04b      	b.n	8007dc8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d30:	f3ef 8305 	mrs	r3, IPSR
 8007d34:	617b      	str	r3, [r7, #20]
  return(result);
 8007d36:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10f      	bne.n	8007d5c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d40:	613b      	str	r3, [r7, #16]
  return(result);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d109      	bne.n	8007d5c <osSemaphoreAcquire+0x4c>
 8007d48:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <osSemaphoreAcquire+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d128      	bne.n	8007da2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d50:	f3ef 8311 	mrs	r3, BASEPRI
 8007d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d022      	beq.n	8007da2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007d62:	f06f 0303 	mvn.w	r3, #3
 8007d66:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007d68:	e02d      	b.n	8007dc6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	461a      	mov	r2, r3
 8007d74:	2100      	movs	r1, #0
 8007d76:	69b8      	ldr	r0, [r7, #24]
 8007d78:	f000 ff90 	bl	8008c9c <xQueueReceiveFromISR>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d003      	beq.n	8007d8a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007d82:	f06f 0302 	mvn.w	r3, #2
 8007d86:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007d88:	e01d      	b.n	8007dc6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01a      	beq.n	8007dc6 <osSemaphoreAcquire+0xb6>
 8007d90:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <osSemaphoreAcquire+0xc8>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007da0:	e011      	b.n	8007dc6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	69b8      	ldr	r0, [r7, #24]
 8007da6:	f000 fe71 	bl	8008a8c <xQueueSemaphoreTake>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d00b      	beq.n	8007dc8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007db6:	f06f 0301 	mvn.w	r3, #1
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	e004      	b.n	8007dc8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007dbe:	f06f 0302 	mvn.w	r3, #2
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e000      	b.n	8007dc8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007dc6:	bf00      	nop
      }
    }
  }

  return (stat);
 8007dc8:	69fb      	ldr	r3, [r7, #28]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000022c 	.word	0x2000022c
 8007dd8:	e000ed04 	.word	0xe000ed04

08007ddc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007df2:	f06f 0303 	mvn.w	r3, #3
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	e03e      	b.n	8007e78 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dfa:	f3ef 8305 	mrs	r3, IPSR
 8007dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8007e00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	613b      	str	r3, [r7, #16]
  return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <osSemaphoreRelease+0x4a>
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <osSemaphoreRelease+0xa8>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d120      	bne.n	8007e5c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01a      	beq.n	8007e5c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	4619      	mov	r1, r3
 8007e30:	69b8      	ldr	r0, [r7, #24]
 8007e32:	f000 fcc5 	bl	80087c0 <xQueueGiveFromISR>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d003      	beq.n	8007e44 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007e3c:	f06f 0302 	mvn.w	r3, #2
 8007e40:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e42:	e018      	b.n	8007e76 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <osSemaphoreRelease+0x9a>
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <osSemaphoreRelease+0xac>)
 8007e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e5a:	e00c      	b.n	8007e76 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2100      	movs	r1, #0
 8007e62:	69b8      	ldr	r0, [r7, #24]
 8007e64:	f000 fb1e 	bl	80084a4 <xQueueGenericSend>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d004      	beq.n	8007e78 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007e6e:	f06f 0302 	mvn.w	r3, #2
 8007e72:	61fb      	str	r3, [r7, #28]
 8007e74:	e000      	b.n	8007e78 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e76:	bf00      	nop
    }
  }

  return (stat);
 8007e78:	69fb      	ldr	r3, [r7, #28]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3720      	adds	r7, #32
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	2000022c 	.word	0x2000022c
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e98:	f3ef 8305 	mrs	r3, IPSR
 8007e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10f      	bne.n	8007ec4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <osSemaphoreDelete+0x38>
 8007eb0:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <osSemaphoreDelete+0x68>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d109      	bne.n	8007ecc <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8007ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007ec4:	f06f 0305 	mvn.w	r3, #5
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	e00e      	b.n	8007eea <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007ed2:	f06f 0303 	mvn.w	r3, #3
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e007      	b.n	8007eea <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007eda:	69b8      	ldr	r0, [r7, #24]
 8007edc:	f001 f8ce 	bl	800907c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007ee4:	69b8      	ldr	r0, [r7, #24]
 8007ee6:	f000 ff56 	bl	8008d96 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007eea:	69fb      	ldr	r3, [r7, #28]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	2000022c 	.word	0x2000022c

08007ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4a07      	ldr	r2, [pc, #28]	; (8007f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <vApplicationGetIdleTaskMemory+0x30>)
 8007f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2280      	movs	r2, #128	; 0x80
 8007f14:	601a      	str	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000230 	.word	0x20000230
 8007f28:	2000028c 	.word	0x2000028c

08007f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a07      	ldr	r2, [pc, #28]	; (8007f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4a06      	ldr	r2, [pc, #24]	; (8007f5c <vApplicationGetTimerTaskMemory+0x30>)
 8007f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f4a:	601a      	str	r2, [r3, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	2000048c 	.word	0x2000048c
 8007f5c:	200004e8 	.word	0x200004e8

08007f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 0208 	add.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f103 0208 	add.w	r2, r3, #8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f103 0208 	add.w	r2, r3, #8
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d103      	bne.n	8008022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e00c      	b.n	800803c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3308      	adds	r3, #8
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e002      	b.n	8008030 <vListInsert+0x2e>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	429a      	cmp	r2, r3
 800803a:	d2f6      	bcs.n	800802a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]
}
 8008068:	bf00      	nop
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6892      	ldr	r2, [r2, #8]
 800808a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6852      	ldr	r2, [r2, #4]
 8008094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d103      	bne.n	80080a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	1e5a      	subs	r2, r3, #1
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	60bb      	str	r3, [r7, #8]
 80080ee:	e7fe      	b.n	80080ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80080f0:	f002 fc44 	bl	800a97c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	68f9      	ldr	r1, [r7, #12]
 80080fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	441a      	add	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	3b01      	subs	r3, #1
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	441a      	add	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	22ff      	movs	r2, #255	; 0xff
 8008134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d114      	bne.n	8008170 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01a      	beq.n	8008184 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3310      	adds	r3, #16
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fc3e 	bl	80099d4 <xTaskRemoveFromEventList>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d012      	beq.n	8008184 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <xQueueGenericReset+0xcc>)
 8008160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	e009      	b.n	8008184 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3310      	adds	r3, #16
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fef3 	bl	8007f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3324      	adds	r3, #36	; 0x24
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff feee 	bl	8007f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008184:	f002 fc28 	bl	800a9d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008188:	2301      	movs	r3, #1
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08e      	sub	sp, #56	; 0x38
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d109      	bne.n	80081c0 <xQueueGenericCreateStatic+0x28>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081be:	e7fe      	b.n	80081be <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <xQueueGenericCreateStatic+0x42>
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
 80081d8:	e7fe      	b.n	80081d8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <xQueueGenericCreateStatic+0x4e>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <xQueueGenericCreateStatic+0x52>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <xQueueGenericCreateStatic+0x54>
 80081ea:	2300      	movs	r3, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <xQueueGenericCreateStatic+0x6c>
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	623b      	str	r3, [r7, #32]
 8008202:	e7fe      	b.n	8008202 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <xQueueGenericCreateStatic+0x78>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <xQueueGenericCreateStatic+0x7c>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <xQueueGenericCreateStatic+0x7e>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <xQueueGenericCreateStatic+0x96>
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	e7fe      	b.n	800822c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800822e:	2350      	movs	r3, #80	; 0x50
 8008230:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b50      	cmp	r3, #80	; 0x50
 8008236:	d009      	beq.n	800824c <xQueueGenericCreateStatic+0xb4>
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	61bb      	str	r3, [r7, #24]
 800824a:	e7fe      	b.n	800824a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800825e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f842 	bl	80082f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008274:	4618      	mov	r0, r3
 8008276:	3730      	adds	r7, #48	; 0x30
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <xQueueGenericCreate+0x28>
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	e7fe      	b.n	80082a2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	e004      	b.n	80082ba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3350      	adds	r3, #80	; 0x50
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 fc76 	bl	800abb0 <pvPortMalloc>
 80082c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	3350      	adds	r3, #80	; 0x50
 80082d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	4613      	mov	r3, r2
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f805 	bl	80082f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80082ec:	69bb      	ldr	r3, [r7, #24]
	}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e002      	b.n	8008318 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008324:	2101      	movs	r1, #1
 8008326:	69b8      	ldr	r0, [r7, #24]
 8008328:	f7ff fece 	bl	80080c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00e      	beq.n	8008368 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800835c:	2300      	movs	r3, #0
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f89e 	bl	80084a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800837a:	2301      	movs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	461a      	mov	r2, r3
 8008386:	6939      	ldr	r1, [r7, #16]
 8008388:	6978      	ldr	r0, [r7, #20]
 800838a:	f7ff ff77 	bl	800827c <xQueueGenericCreate>
 800838e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff ffd3 	bl	800833c <prvInitialiseMutex>

		return pxNewQueue;
 8008396:	68fb      	ldr	r3, [r7, #12]
	}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80083ac:	2301      	movs	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2200      	movs	r2, #0
 80083bc:	6939      	ldr	r1, [r7, #16]
 80083be:	6978      	ldr	r0, [r7, #20]
 80083c0:	f7ff feea 	bl	8008198 <xQueueGenericCreateStatic>
 80083c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff ffb8 	bl	800833c <prvInitialiseMutex>

		return pxNewQueue;
 80083cc:	68fb      	ldr	r3, [r7, #12]
	}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b08a      	sub	sp, #40	; 0x28
 80083da:	af02      	add	r7, sp, #8
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <xQueueCreateCountingSemaphoreStatic+0x26>
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	e7fe      	b.n	80083fa <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d909      	bls.n	8008418 <xQueueCreateCountingSemaphoreStatic+0x42>
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e7fe      	b.n	8008416 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008418:	2302      	movs	r3, #2
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	2100      	movs	r1, #0
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff feb8 	bl	8008198 <xQueueGenericCreateStatic>
 8008428:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008436:	69fb      	ldr	r3, [r7, #28]
	}
 8008438:	4618      	mov	r0, r3
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <xQueueCreateCountingSemaphore+0x24>
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	e7fe      	b.n	8008462 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d909      	bls.n	8008480 <xQueueCreateCountingSemaphore+0x40>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e7fe      	b.n	800847e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008480:	2202      	movs	r2, #2
 8008482:	2100      	movs	r1, #0
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff fef9 	bl	800827c <xQueueGenericCreate>
 800848a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008498:	697b      	ldr	r3, [r7, #20]
	}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084b2:	2300      	movs	r3, #0
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <xQueueGenericSend+0x30>
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084d2:	e7fe      	b.n	80084d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <xQueueGenericSend+0x3e>
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <xQueueGenericSend+0x42>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <xQueueGenericSend+0x44>
 80084e6:	2300      	movs	r3, #0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <xQueueGenericSend+0x5c>
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
 80084fe:	e7fe      	b.n	80084fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b02      	cmp	r3, #2
 8008504:	d103      	bne.n	800850e <xQueueGenericSend+0x6a>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <xQueueGenericSend+0x6e>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGenericSend+0x70>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <xQueueGenericSend+0x88>
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	e7fe      	b.n	800852a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800852c:	f001 fc0e 	bl	8009d4c <xTaskGetSchedulerState>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <xQueueGenericSend+0x98>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <xQueueGenericSend+0x9c>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <xQueueGenericSend+0x9e>
 8008540:	2300      	movs	r3, #0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <xQueueGenericSend+0xb6>
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	e7fe      	b.n	8008558 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800855a:	f002 fa0f 	bl	800a97c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	429a      	cmp	r2, r3
 8008568:	d302      	bcc.n	8008570 <xQueueGenericSend+0xcc>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d129      	bne.n	80085c4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008576:	f000 fc48 	bl	8008e0a <prvCopyDataToQueue>
 800857a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	3324      	adds	r3, #36	; 0x24
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fa23 	bl	80099d4 <xTaskRemoveFromEventList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d013      	beq.n	80085bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008594:	4b3f      	ldr	r3, [pc, #252]	; (8008694 <xQueueGenericSend+0x1f0>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	e00a      	b.n	80085bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085ac:	4b39      	ldr	r3, [pc, #228]	; (8008694 <xQueueGenericSend+0x1f0>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085bc:	f002 fa0c 	bl	800a9d8 <vPortExitCritical>
				return pdPASS;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e063      	b.n	800868c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085ca:	f002 fa05 	bl	800a9d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e05c      	b.n	800868c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d106      	bne.n	80085e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085d8:	f107 0314 	add.w	r3, r7, #20
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fa5b 	bl	8009a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085e6:	f002 f9f7 	bl	800a9d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085ea:	f000 ffd1 	bl	8009590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ee:	f002 f9c5 	bl	800a97c <vPortEnterCritical>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085f8:	b25b      	sxtb	r3, r3
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d103      	bne.n	8008608 <xQueueGenericSend+0x164>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800860e:	b25b      	sxtb	r3, r3
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d103      	bne.n	800861e <xQueueGenericSend+0x17a>
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800861e:	f002 f9db 	bl	800a9d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008622:	1d3a      	adds	r2, r7, #4
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fa4a 	bl	8009ac4 <xTaskCheckForTimeOut>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d124      	bne.n	8008680 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008638:	f000 fcdf 	bl	8008ffa <prvIsQueueFull>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d018      	beq.n	8008674 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	3310      	adds	r3, #16
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f001 f974 	bl	8009938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008652:	f000 fc6a 	bl	8008f2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008656:	f000 ffa9 	bl	80095ac <xTaskResumeAll>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f af7c 	bne.w	800855a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008662:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <xQueueGenericSend+0x1f0>)
 8008664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	e772      	b.n	800855a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008676:	f000 fc58 	bl	8008f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800867a:	f000 ff97 	bl	80095ac <xTaskResumeAll>
 800867e:	e76c      	b.n	800855a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008682:	f000 fc52 	bl	8008f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008686:	f000 ff91 	bl	80095ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800868a:	2300      	movs	r3, #0
		}
	}
}
 800868c:	4618      	mov	r0, r3
 800868e:	3738      	adds	r7, #56	; 0x38
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08e      	sub	sp, #56	; 0x38
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <xQueueGenericSendFromISR+0x2c>
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
 80086c2:	e7fe      	b.n	80086c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <xQueueGenericSendFromISR+0x3a>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <xQueueGenericSendFromISR+0x3e>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <xQueueGenericSendFromISR+0x40>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d109      	bne.n	80086f0 <xQueueGenericSendFromISR+0x58>
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	623b      	str	r3, [r7, #32]
 80086ee:	e7fe      	b.n	80086ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSendFromISR+0x66>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <xQueueGenericSendFromISR+0x6a>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <xQueueGenericSendFromISR+0x6c>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d109      	bne.n	800871c <xQueueGenericSendFromISR+0x84>
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e7fe      	b.n	800871a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800871c:	f002 fa0a 	bl	800ab34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008720:	f3ef 8211 	mrs	r2, BASEPRI
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	61ba      	str	r2, [r7, #24]
 8008736:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008738:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008744:	429a      	cmp	r2, r3
 8008746:	d302      	bcc.n	800874e <xQueueGenericSendFromISR+0xb6>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d12c      	bne.n	80087a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800875e:	f000 fb54 	bl	8008e0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008762:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876a:	d112      	bne.n	8008792 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d016      	beq.n	80087a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	3324      	adds	r3, #36	; 0x24
 8008778:	4618      	mov	r0, r3
 800877a:	f001 f92b 	bl	80099d4 <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e007      	b.n	80087a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008796:	3301      	adds	r3, #1
 8008798:	b2db      	uxtb	r3, r3
 800879a:	b25a      	sxtb	r2, r3
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087a2:	2301      	movs	r3, #1
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80087a6:	e001      	b.n	80087ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3738      	adds	r7, #56	; 0x38
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08e      	sub	sp, #56	; 0x38
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d109      	bne.n	80087e8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	e7fe      	b.n	80087e6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <xQueueGiveFromISR+0x44>
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e7fe      	b.n	8008802 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <xQueueGiveFromISR+0x54>
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <xQueueGiveFromISR+0x58>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <xQueueGiveFromISR+0x5a>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <xQueueGiveFromISR+0x72>
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	e7fe      	b.n	8008830 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008832:	f002 f97f 	bl	800ab34 <vPortValidateInterruptPriority>
	__asm volatile
 8008836:	f3ef 8211 	mrs	r2, BASEPRI
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	617a      	str	r2, [r7, #20]
 800884c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800884e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800885e:	429a      	cmp	r2, r3
 8008860:	d22b      	bcs.n	80088ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d112      	bne.n	80088a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	3324      	adds	r3, #36	; 0x24
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f8a2 	bl	80099d4 <xTaskRemoveFromEventList>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00e      	beq.n	80088b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e007      	b.n	80088b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a8:	3301      	adds	r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	b25a      	sxtb	r2, r3
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088b4:	2301      	movs	r3, #1
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
 80088b8:	e001      	b.n	80088be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3738      	adds	r7, #56	; 0x38
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <xQueueReceive+0x2e>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	623b      	str	r3, [r7, #32]
 8008900:	e7fe      	b.n	8008900 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <xQueueReceive+0x3c>
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <xQueueReceive+0x40>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <xQueueReceive+0x42>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <xQueueReceive+0x5a>
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	e7fe      	b.n	800892c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800892e:	f001 fa0d 	bl	8009d4c <xTaskGetSchedulerState>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <xQueueReceive+0x6a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <xQueueReceive+0x6e>
 800893e:	2301      	movs	r3, #1
 8008940:	e000      	b.n	8008944 <xQueueReceive+0x70>
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <xQueueReceive+0x88>
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	61bb      	str	r3, [r7, #24]
 800895a:	e7fe      	b.n	800895a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800895c:	f002 f80e 	bl	800a97c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01f      	beq.n	80089ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008970:	f000 fab5 	bl	8008ede <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	1e5a      	subs	r2, r3, #1
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00f      	beq.n	80089a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	3310      	adds	r3, #16
 8008988:	4618      	mov	r0, r3
 800898a:	f001 f823 	bl	80099d4 <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d007      	beq.n	80089a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008994:	4b3c      	ldr	r3, [pc, #240]	; (8008a88 <xQueueReceive+0x1b4>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089a4:	f002 f818 	bl	800a9d8 <vPortExitCritical>
				return pdPASS;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e069      	b.n	8008a80 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d103      	bne.n	80089ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089b2:	f002 f811 	bl	800a9d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089b6:	2300      	movs	r3, #0
 80089b8:	e062      	b.n	8008a80 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089c0:	f107 0310 	add.w	r3, r7, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 f867 	bl	8009a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ce:	f002 f803 	bl	800a9d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089d2:	f000 fddd 	bl	8009590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089d6:	f001 ffd1 	bl	800a97c <vPortEnterCritical>
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e0:	b25b      	sxtb	r3, r3
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d103      	bne.n	80089f0 <xQueueReceive+0x11c>
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f6:	b25b      	sxtb	r3, r3
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d103      	bne.n	8008a06 <xQueueReceive+0x132>
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a06:	f001 ffe7 	bl	800a9d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a0a:	1d3a      	adds	r2, r7, #4
 8008a0c:	f107 0310 	add.w	r3, r7, #16
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 f856 	bl	8009ac4 <xTaskCheckForTimeOut>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d123      	bne.n	8008a66 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a20:	f000 fad5 	bl	8008fce <prvIsQueueEmpty>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d017      	beq.n	8008a5a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	3324      	adds	r3, #36	; 0x24
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	4611      	mov	r1, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 ff80 	bl	8009938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3a:	f000 fa76 	bl	8008f2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a3e:	f000 fdb5 	bl	80095ac <xTaskResumeAll>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d189      	bne.n	800895c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <xQueueReceive+0x1b4>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	e780      	b.n	800895c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5c:	f000 fa65 	bl	8008f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a60:	f000 fda4 	bl	80095ac <xTaskResumeAll>
 8008a64:	e77a      	b.n	800895c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a68:	f000 fa5f 	bl	8008f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a6c:	f000 fd9e 	bl	80095ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a72:	f000 faac 	bl	8008fce <prvIsQueueEmpty>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f43f af6f 	beq.w	800895c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3730      	adds	r7, #48	; 0x30
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <xQueueSemaphoreTake+0x30>
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	623b      	str	r3, [r7, #32]
 8008aba:	e7fe      	b.n	8008aba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <xQueueSemaphoreTake+0x4c>
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ad8:	f001 f938 	bl	8009d4c <xTaskGetSchedulerState>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d102      	bne.n	8008ae8 <xQueueSemaphoreTake+0x5c>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <xQueueSemaphoreTake+0x60>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <xQueueSemaphoreTake+0x62>
 8008aec:	2300      	movs	r3, #0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <xQueueSemaphoreTake+0x7a>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	61bb      	str	r3, [r7, #24]
 8008b04:	e7fe      	b.n	8008b04 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b06:	f001 ff39 	bl	800a97c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d024      	beq.n	8008b60 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	1e5a      	subs	r2, r3, #1
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008b26:	f001 fa8d 	bl	800a044 <pvTaskIncrementMutexHeldCount>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00f      	beq.n	8008b58 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 ff49 	bl	80099d4 <xTaskRemoveFromEventList>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b48:	4b53      	ldr	r3, [pc, #332]	; (8008c98 <xQueueSemaphoreTake+0x20c>)
 8008b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b58:	f001 ff3e 	bl	800a9d8 <vPortExitCritical>
				return pdPASS;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e096      	b.n	8008c8e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d110      	bne.n	8008b88 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <xQueueSemaphoreTake+0xf4>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e7fe      	b.n	8008b7e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b80:	f001 ff2a 	bl	800a9d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e082      	b.n	8008c8e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 ff80 	bl	8009a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b9c:	f001 ff1c 	bl	800a9d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ba0:	f000 fcf6 	bl	8009590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba4:	f001 feea 	bl	800a97c <vPortEnterCritical>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb4:	d103      	bne.n	8008bbe <xQueueSemaphoreTake+0x132>
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc4:	b25b      	sxtb	r3, r3
 8008bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bca:	d103      	bne.n	8008bd4 <xQueueSemaphoreTake+0x148>
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd4:	f001 ff00 	bl	800a9d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bd8:	463a      	mov	r2, r7
 8008bda:	f107 030c 	add.w	r3, r7, #12
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 ff6f 	bl	8009ac4 <xTaskCheckForTimeOut>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d132      	bne.n	8008c52 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bee:	f000 f9ee 	bl	8008fce <prvIsQueueEmpty>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d026      	beq.n	8008c46 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d109      	bne.n	8008c14 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008c00:	f001 febc 	bl	800a97c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 f8bd 	bl	8009d88 <xTaskPriorityInherit>
 8008c0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c10:	f001 fee2 	bl	800a9d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 fe8b 	bl	8009938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c24:	f000 f981 	bl	8008f2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c28:	f000 fcc0 	bl	80095ac <xTaskResumeAll>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f47f af69 	bne.w	8008b06 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008c34:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <xQueueSemaphoreTake+0x20c>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	e75f      	b.n	8008b06 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c48:	f000 f96f 	bl	8008f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c4c:	f000 fcae 	bl	80095ac <xTaskResumeAll>
 8008c50:	e759      	b.n	8008b06 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c54:	f000 f969 	bl	8008f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c58:	f000 fca8 	bl	80095ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c5e:	f000 f9b6 	bl	8008fce <prvIsQueueEmpty>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f43f af4e 	beq.w	8008b06 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008c70:	f001 fe84 	bl	800a97c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c76:	f000 f8b0 	bl	8008dda <prvGetDisinheritPriorityAfterTimeout>
 8008c7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f95a 	bl	8009f3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c88:	f001 fea6 	bl	800a9d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3738      	adds	r7, #56	; 0x38
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08e      	sub	sp, #56	; 0x38
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <xQueueReceiveFromISR+0x2a>
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	623b      	str	r3, [r7, #32]
 8008cc4:	e7fe      	b.n	8008cc4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d103      	bne.n	8008cd4 <xQueueReceiveFromISR+0x38>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <xQueueReceiveFromISR+0x3c>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <xQueueReceiveFromISR+0x3e>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <xQueueReceiveFromISR+0x56>
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	e7fe      	b.n	8008cf0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cf2:	f001 ff1f 	bl	800ab34 <vPortValidateInterruptPriority>
	__asm volatile
 8008cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	61ba      	str	r2, [r7, #24]
 8008d0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d02f      	beq.n	8008d7e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2c:	f000 f8d7 	bl	8008ede <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d112      	bne.n	8008d68 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d016      	beq.n	8008d78 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fe40 	bl	80099d4 <xTaskRemoveFromEventList>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e007      	b.n	8008d78 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	b25a      	sxtb	r2, r3
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7c:	e001      	b.n	8008d82 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3738      	adds	r7, #56	; 0x38
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <vQueueDelete+0x26>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60bb      	str	r3, [r7, #8]
 8008dba:	e7fe      	b.n	8008dba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f95d 	bl	800907c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f001 ffb1 	bl	800ad34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008dda:	b480      	push	{r7}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d006      	beq.n	8008df8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	e001      	b.n	8008dfc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
	}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10d      	bne.n	8008e44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d14d      	bne.n	8008ecc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 f815 	bl	8009e64 <xTaskPriorityDisinherit>
 8008e3a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	e043      	b.n	8008ecc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d119      	bne.n	8008e7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6898      	ldr	r0, [r3, #8]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	461a      	mov	r2, r3
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	f002 f8ab 	bl	800afb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	441a      	add	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d32b      	bcc.n	8008ecc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	609a      	str	r2, [r3, #8]
 8008e7c:	e026      	b.n	8008ecc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68d8      	ldr	r0, [r3, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	461a      	mov	r2, r3
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	f002 f891 	bl	800afb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	425b      	negs	r3, r3
 8008e98:	441a      	add	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d207      	bcs.n	8008eba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	425b      	negs	r3, r3
 8008eb4:	441a      	add	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d105      	bne.n	8008ecc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ed4:	697b      	ldr	r3, [r7, #20]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d018      	beq.n	8008f22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	441a      	add	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d303      	bcc.n	8008f12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68d9      	ldr	r1, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6838      	ldr	r0, [r7, #0]
 8008f1e:	f002 f847 	bl	800afb0 <memcpy>
	}
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f32:	f001 fd23 	bl	800a97c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f3e:	e011      	b.n	8008f64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d012      	beq.n	8008f6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3324      	adds	r3, #36	; 0x24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fd41 	bl	80099d4 <xTaskRemoveFromEventList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f58:	f000 fe14 	bl	8009b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dce9      	bgt.n	8008f40 <prvUnlockQueue+0x16>
 8008f6c:	e000      	b.n	8008f70 <prvUnlockQueue+0x46>
					break;
 8008f6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	22ff      	movs	r2, #255	; 0xff
 8008f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f78:	f001 fd2e 	bl	800a9d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f7c:	f001 fcfe 	bl	800a97c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f88:	e011      	b.n	8008fae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d012      	beq.n	8008fb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3310      	adds	r3, #16
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fd1c 	bl	80099d4 <xTaskRemoveFromEventList>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fa2:	f000 fdef 	bl	8009b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dce9      	bgt.n	8008f8a <prvUnlockQueue+0x60>
 8008fb6:	e000      	b.n	8008fba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fc2:	f001 fd09 	bl	800a9d8 <vPortExitCritical>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fd6:	f001 fcd1 	bl	800a97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e001      	b.n	8008fec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fec:	f001 fcf4 	bl	800a9d8 <vPortExitCritical>

	return xReturn;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009002:	f001 fcbb 	bl	800a97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	429a      	cmp	r2, r3
 8009010:	d102      	bne.n	8009018 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009012:	2301      	movs	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	e001      	b.n	800901c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f001 fcdc 	bl	800a9d8 <vPortExitCritical>

	return xReturn;
 8009020:	68fb      	ldr	r3, [r7, #12]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e014      	b.n	8009066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800903c:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <vQueueAddToRegistry+0x4c>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009048:	490b      	ldr	r1, [pc, #44]	; (8009078 <vQueueAddToRegistry+0x4c>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009052:	4a09      	ldr	r2, [pc, #36]	; (8009078 <vQueueAddToRegistry+0x4c>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4413      	add	r3, r2
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800905e:	e005      	b.n	800906c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b07      	cmp	r3, #7
 800906a:	d9e7      	bls.n	800903c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200025f8 	.word	0x200025f8

0800907c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e016      	b.n	80090b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800908a:	4a10      	ldr	r2, [pc, #64]	; (80090cc <vQueueUnregisterQueue+0x50>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	4413      	add	r3, r2
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d10b      	bne.n	80090b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800909a:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <vQueueUnregisterQueue+0x50>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2100      	movs	r1, #0
 80090a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80090a4:	4a09      	ldr	r2, [pc, #36]	; (80090cc <vQueueUnregisterQueue+0x50>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4413      	add	r3, r2
 80090ac:	2200      	movs	r2, #0
 80090ae:	605a      	str	r2, [r3, #4]
				break;
 80090b0:	e005      	b.n	80090be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b07      	cmp	r3, #7
 80090bc:	d9e5      	bls.n	800908a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80090be:	bf00      	nop
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	200025f8 	.word	0x200025f8

080090d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090e0:	f001 fc4c 	bl	800a97c <vPortEnterCritical>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d103      	bne.n	80090fa <vQueueWaitForMessageRestricted+0x2a>
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009100:	b25b      	sxtb	r3, r3
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d103      	bne.n	8009110 <vQueueWaitForMessageRestricted+0x40>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009110:	f001 fc62 	bl	800a9d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3324      	adds	r3, #36	; 0x24
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fc2b 	bl	8009980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f7ff fefd 	bl	8008f2a <prvUnlockQueue>
	}
 8009130:	bf00      	nop
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	; 0x38
 800913c:	af04      	add	r7, sp, #16
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <xTaskCreateStatic+0x28>
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	623b      	str	r3, [r7, #32]
 800915e:	e7fe      	b.n	800915e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <xTaskCreateStatic+0x42>
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e7fe      	b.n	8009178 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800917a:	235c      	movs	r3, #92	; 0x5c
 800917c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b5c      	cmp	r3, #92	; 0x5c
 8009182:	d009      	beq.n	8009198 <xTaskCreateStatic+0x60>
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	e7fe      	b.n	8009196 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01e      	beq.n	80091dc <xTaskCreateStatic+0xa4>
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091b6:	2300      	movs	r3, #0
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	f107 0314 	add.w	r3, r7, #20
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f850 	bl	8009274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091d6:	f000 f8d3 	bl	8009380 <prvAddNewTaskToReadyList>
 80091da:	e001      	b.n	80091e0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
	}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3728      	adds	r7, #40	; 0x28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b08c      	sub	sp, #48	; 0x30
 80091ee:	af04      	add	r7, sp, #16
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 fcd6 	bl	800abb0 <pvPortMalloc>
 8009204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800920c:	205c      	movs	r0, #92	; 0x5c
 800920e:	f001 fccf 	bl	800abb0 <pvPortMalloc>
 8009212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
 8009220:	e005      	b.n	800922e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009222:	6978      	ldr	r0, [r7, #20]
 8009224:	f001 fd86 	bl	800ad34 <vPortFree>
 8009228:	e001      	b.n	800922e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	2300      	movs	r3, #0
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f80e 	bl	8009274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009258:	69f8      	ldr	r0, [r7, #28]
 800925a:	f000 f891 	bl	8009380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800925e:	2301      	movs	r3, #1
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	e002      	b.n	800926a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009264:	f04f 33ff 	mov.w	r3, #4294967295
 8009268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800926a:	69bb      	ldr	r3, [r7, #24]
	}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	461a      	mov	r2, r3
 800928c:	21a5      	movs	r1, #165	; 0xa5
 800928e:	f001 fe9a 	bl	800afc6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800929c:	3b01      	subs	r3, #1
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <prvInitialiseNewTask+0x56>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e7fe      	b.n	80092c8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	e012      	b.n	80092f6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	7819      	ldrb	r1, [r3, #0]
 80092d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	3334      	adds	r3, #52	; 0x34
 80092e0:	460a      	mov	r2, r1
 80092e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	3301      	adds	r3, #1
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	2b0f      	cmp	r3, #15
 80092fa:	d9e9      	bls.n	80092d0 <prvInitialiseNewTask+0x5c>
 80092fc:	e000      	b.n	8009300 <prvInitialiseNewTask+0x8c>
		{
			break;
 80092fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	2b37      	cmp	r3, #55	; 0x37
 800930c:	d901      	bls.n	8009312 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800930e:	2337      	movs	r3, #55	; 0x37
 8009310:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009316:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	2200      	movs	r2, #0
 8009322:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe fe39 	bl	8007fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	3318      	adds	r3, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fe34 	bl	8007fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800933c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	69b8      	ldr	r0, [r7, #24]
 8009362:	f001 f9e1 	bl	800a728 <pxPortInitialiseStack>
 8009366:	4602      	mov	r2, r0
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009378:	bf00      	nop
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009388:	f001 faf8 	bl	800a97c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800938c:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <prvAddNewTaskToReadyList+0xc4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3301      	adds	r3, #1
 8009392:	4a2c      	ldr	r2, [pc, #176]	; (8009444 <prvAddNewTaskToReadyList+0xc4>)
 8009394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009396:	4b2c      	ldr	r3, [pc, #176]	; (8009448 <prvAddNewTaskToReadyList+0xc8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800939e:	4a2a      	ldr	r2, [pc, #168]	; (8009448 <prvAddNewTaskToReadyList+0xc8>)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093a4:	4b27      	ldr	r3, [pc, #156]	; (8009444 <prvAddNewTaskToReadyList+0xc4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d110      	bne.n	80093ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093ac:	f000 fc0e 	bl	8009bcc <prvInitialiseTaskLists>
 80093b0:	e00d      	b.n	80093ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093b2:	4b26      	ldr	r3, [pc, #152]	; (800944c <prvAddNewTaskToReadyList+0xcc>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ba:	4b23      	ldr	r3, [pc, #140]	; (8009448 <prvAddNewTaskToReadyList+0xc8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d802      	bhi.n	80093ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093c8:	4a1f      	ldr	r2, [pc, #124]	; (8009448 <prvAddNewTaskToReadyList+0xc8>)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093ce:	4b20      	ldr	r3, [pc, #128]	; (8009450 <prvAddNewTaskToReadyList+0xd0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a1e      	ldr	r2, [pc, #120]	; (8009450 <prvAddNewTaskToReadyList+0xd0>)
 80093d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093d8:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <prvAddNewTaskToReadyList+0xd0>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e4:	4b1b      	ldr	r3, [pc, #108]	; (8009454 <prvAddNewTaskToReadyList+0xd4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d903      	bls.n	80093f4 <prvAddNewTaskToReadyList+0x74>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	4a18      	ldr	r2, [pc, #96]	; (8009454 <prvAddNewTaskToReadyList+0xd4>)
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <prvAddNewTaskToReadyList+0xd8>)
 8009402:	441a      	add	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7fe fdd5 	bl	8007fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009410:	f001 fae2 	bl	800a9d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <prvAddNewTaskToReadyList+0xcc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00e      	beq.n	800943a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <prvAddNewTaskToReadyList+0xc8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	429a      	cmp	r2, r3
 8009428:	d207      	bcs.n	800943a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <prvAddNewTaskToReadyList+0xdc>)
 800942c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000dbc 	.word	0x20000dbc
 8009448:	200008e8 	.word	0x200008e8
 800944c:	20000dc8 	.word	0x20000dc8
 8009450:	20000dd8 	.word	0x20000dd8
 8009454:	20000dc4 	.word	0x20000dc4
 8009458:	200008ec 	.word	0x200008ec
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d016      	beq.n	80094a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009472:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <vTaskDelay+0x60>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <vTaskDelay+0x2e>
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	e7fe      	b.n	800948c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800948e:	f000 f87f 	bl	8009590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fde9 	bl	800a06c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800949a:	f000 f887 	bl	80095ac <xTaskResumeAll>
 800949e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d107      	bne.n	80094b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <vTaskDelay+0x64>)
 80094a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000de4 	.word	0x20000de4
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	; 0x28
 80094cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094d6:	463a      	mov	r2, r7
 80094d8:	1d39      	adds	r1, r7, #4
 80094da:	f107 0308 	add.w	r3, r7, #8
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fd0a 	bl	8007ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	9202      	str	r2, [sp, #8]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	2300      	movs	r3, #0
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	2300      	movs	r3, #0
 80094f4:	460a      	mov	r2, r1
 80094f6:	4920      	ldr	r1, [pc, #128]	; (8009578 <vTaskStartScheduler+0xb0>)
 80094f8:	4820      	ldr	r0, [pc, #128]	; (800957c <vTaskStartScheduler+0xb4>)
 80094fa:	f7ff fe1d 	bl	8009138 <xTaskCreateStatic>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b1f      	ldr	r3, [pc, #124]	; (8009580 <vTaskStartScheduler+0xb8>)
 8009502:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009504:	4b1e      	ldr	r3, [pc, #120]	; (8009580 <vTaskStartScheduler+0xb8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800950c:	2301      	movs	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	e001      	b.n	8009516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d102      	bne.n	8009522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800951c:	f000 fdfa 	bl	800a114 <xTimerCreateTimerTask>
 8009520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d115      	bne.n	8009554 <vTaskStartScheduler+0x8c>
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <vTaskStartScheduler+0xbc>)
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <vTaskStartScheduler+0xc0>)
 8009544:	2201      	movs	r2, #1
 8009546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009548:	4b10      	ldr	r3, [pc, #64]	; (800958c <vTaskStartScheduler+0xc4>)
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800954e:	f001 f977 	bl	800a840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009552:	e00d      	b.n	8009570 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955a:	d109      	bne.n	8009570 <vTaskStartScheduler+0xa8>
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	e7fe      	b.n	800956e <vTaskStartScheduler+0xa6>
}
 8009570:	bf00      	nop
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	0800ba48 	.word	0x0800ba48
 800957c:	08009b9d 	.word	0x08009b9d
 8009580:	20000de0 	.word	0x20000de0
 8009584:	20000ddc 	.word	0x20000ddc
 8009588:	20000dc8 	.word	0x20000dc8
 800958c:	20000dc0 	.word	0x20000dc0

08009590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009594:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <vTaskSuspendAll+0x18>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3301      	adds	r3, #1
 800959a:	4a03      	ldr	r2, [pc, #12]	; (80095a8 <vTaskSuspendAll+0x18>)
 800959c:	6013      	str	r3, [r2, #0]
}
 800959e:	bf00      	nop
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000de4 	.word	0x20000de4

080095ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095ba:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <xTaskResumeAll+0x114>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <xTaskResumeAll+0x2a>
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	e7fe      	b.n	80095d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095d6:	f001 f9d1 	bl	800a97c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095da:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <xTaskResumeAll+0x114>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4a37      	ldr	r2, [pc, #220]	; (80096c0 <xTaskResumeAll+0x114>)
 80095e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095e4:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <xTaskResumeAll+0x114>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d162      	bne.n	80096b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095ec:	4b35      	ldr	r3, [pc, #212]	; (80096c4 <xTaskResumeAll+0x118>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d05e      	beq.n	80096b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095f4:	e02f      	b.n	8009656 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80095f6:	4b34      	ldr	r3, [pc, #208]	; (80096c8 <xTaskResumeAll+0x11c>)
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3318      	adds	r3, #24
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe fd36 	bl	8008074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3304      	adds	r3, #4
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fd31 	bl	8008074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <xTaskResumeAll+0x120>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	429a      	cmp	r2, r3
 800961c:	d903      	bls.n	8009626 <xTaskResumeAll+0x7a>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	4a2a      	ldr	r2, [pc, #168]	; (80096cc <xTaskResumeAll+0x120>)
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <xTaskResumeAll+0x124>)
 8009634:	441a      	add	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fe fcbc 	bl	8007fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <xTaskResumeAll+0x128>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	429a      	cmp	r2, r3
 800964e:	d302      	bcc.n	8009656 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009650:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009652:	2201      	movs	r2, #1
 8009654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009656:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <xTaskResumeAll+0x11c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1cb      	bne.n	80095f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009664:	f000 fb4c 	bl	8009d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <xTaskResumeAll+0x130>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009674:	f000 f846 	bl	8009704 <xTaskIncrementTick>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009680:	2201      	movs	r2, #1
 8009682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3b01      	subs	r3, #1
 8009688:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1f1      	bne.n	8009674 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <xTaskResumeAll+0x130>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d009      	beq.n	80096b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800969e:	2301      	movs	r3, #1
 80096a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096a2:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <xTaskResumeAll+0x134>)
 80096a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f001 f991 	bl	800a9d8 <vPortExitCritical>

	return xAlreadyYielded;
 80096b6:	68bb      	ldr	r3, [r7, #8]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000de4 	.word	0x20000de4
 80096c4:	20000dbc 	.word	0x20000dbc
 80096c8:	20000d7c 	.word	0x20000d7c
 80096cc:	20000dc4 	.word	0x20000dc4
 80096d0:	200008ec 	.word	0x200008ec
 80096d4:	200008e8 	.word	0x200008e8
 80096d8:	20000dd0 	.word	0x20000dd0
 80096dc:	20000dcc 	.word	0x20000dcc
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <xTaskGetTickCount+0x1c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096f0:	687b      	ldr	r3, [r7, #4]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000dc0 	.word	0x20000dc0

08009704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800970e:	4b51      	ldr	r3, [pc, #324]	; (8009854 <xTaskIncrementTick+0x150>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 808d 	bne.w	8009832 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009718:	4b4f      	ldr	r3, [pc, #316]	; (8009858 <xTaskIncrementTick+0x154>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3301      	adds	r3, #1
 800971e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009720:	4a4d      	ldr	r2, [pc, #308]	; (8009858 <xTaskIncrementTick+0x154>)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d11f      	bne.n	800976c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800972c:	4b4b      	ldr	r3, [pc, #300]	; (800985c <xTaskIncrementTick+0x158>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d009      	beq.n	800974a <xTaskIncrementTick+0x46>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	e7fe      	b.n	8009748 <xTaskIncrementTick+0x44>
 800974a:	4b44      	ldr	r3, [pc, #272]	; (800985c <xTaskIncrementTick+0x158>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	4b43      	ldr	r3, [pc, #268]	; (8009860 <xTaskIncrementTick+0x15c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a41      	ldr	r2, [pc, #260]	; (800985c <xTaskIncrementTick+0x158>)
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4a41      	ldr	r2, [pc, #260]	; (8009860 <xTaskIncrementTick+0x15c>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	4b41      	ldr	r3, [pc, #260]	; (8009864 <xTaskIncrementTick+0x160>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	4a3f      	ldr	r2, [pc, #252]	; (8009864 <xTaskIncrementTick+0x160>)
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	f000 faca 	bl	8009d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <xTaskIncrementTick+0x164>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	429a      	cmp	r2, r3
 8009774:	d34e      	bcc.n	8009814 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009776:	4b39      	ldr	r3, [pc, #228]	; (800985c <xTaskIncrementTick+0x158>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <xTaskIncrementTick+0x80>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <xTaskIncrementTick+0x82>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978a:	4b37      	ldr	r3, [pc, #220]	; (8009868 <xTaskIncrementTick+0x164>)
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	601a      	str	r2, [r3, #0]
					break;
 8009792:	e03f      	b.n	8009814 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009794:	4b31      	ldr	r3, [pc, #196]	; (800985c <xTaskIncrementTick+0x158>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d203      	bcs.n	80097b4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097ac:	4a2e      	ldr	r2, [pc, #184]	; (8009868 <xTaskIncrementTick+0x164>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6013      	str	r3, [r2, #0]
						break;
 80097b2:	e02f      	b.n	8009814 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fc5b 	bl	8008074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3318      	adds	r3, #24
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fc52 	bl	8008074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	4b25      	ldr	r3, [pc, #148]	; (800986c <xTaskIncrementTick+0x168>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d903      	bls.n	80097e4 <xTaskIncrementTick+0xe0>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	4a22      	ldr	r2, [pc, #136]	; (800986c <xTaskIncrementTick+0x168>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a1f      	ldr	r2, [pc, #124]	; (8009870 <xTaskIncrementTick+0x16c>)
 80097f2:	441a      	add	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fe fbdd 	bl	8007fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	4b1b      	ldr	r3, [pc, #108]	; (8009874 <xTaskIncrementTick+0x170>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	429a      	cmp	r2, r3
 800980c:	d3b3      	bcc.n	8009776 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800980e:	2301      	movs	r3, #1
 8009810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009812:	e7b0      	b.n	8009776 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009814:	4b17      	ldr	r3, [pc, #92]	; (8009874 <xTaskIncrementTick+0x170>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4915      	ldr	r1, [pc, #84]	; (8009870 <xTaskIncrementTick+0x16c>)
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d907      	bls.n	800983c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e004      	b.n	800983c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009832:	4b11      	ldr	r3, [pc, #68]	; (8009878 <xTaskIncrementTick+0x174>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3301      	adds	r3, #1
 8009838:	4a0f      	ldr	r2, [pc, #60]	; (8009878 <xTaskIncrementTick+0x174>)
 800983a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <xTaskIncrementTick+0x178>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009848:	697b      	ldr	r3, [r7, #20]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000de4 	.word	0x20000de4
 8009858:	20000dc0 	.word	0x20000dc0
 800985c:	20000d74 	.word	0x20000d74
 8009860:	20000d78 	.word	0x20000d78
 8009864:	20000dd4 	.word	0x20000dd4
 8009868:	20000ddc 	.word	0x20000ddc
 800986c:	20000dc4 	.word	0x20000dc4
 8009870:	200008ec 	.word	0x200008ec
 8009874:	200008e8 	.word	0x200008e8
 8009878:	20000dcc 	.word	0x20000dcc
 800987c:	20000dd0 	.word	0x20000dd0

08009880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009886:	4b27      	ldr	r3, [pc, #156]	; (8009924 <vTaskSwitchContext+0xa4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800988e:	4b26      	ldr	r3, [pc, #152]	; (8009928 <vTaskSwitchContext+0xa8>)
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009894:	e040      	b.n	8009918 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <vTaskSwitchContext+0xa8>)
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800989c:	4b23      	ldr	r3, [pc, #140]	; (800992c <vTaskSwitchContext+0xac>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	e00f      	b.n	80098c4 <vTaskSwitchContext+0x44>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <vTaskSwitchContext+0x3e>
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e7fe      	b.n	80098bc <vTaskSwitchContext+0x3c>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	491a      	ldr	r1, [pc, #104]	; (8009930 <vTaskSwitchContext+0xb0>)
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0e5      	beq.n	80098a4 <vTaskSwitchContext+0x24>
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4a13      	ldr	r2, [pc, #76]	; (8009930 <vTaskSwitchContext+0xb0>)
 80098e4:	4413      	add	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3308      	adds	r3, #8
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d104      	bne.n	8009908 <vTaskSwitchContext+0x88>
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	605a      	str	r2, [r3, #4]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <vTaskSwitchContext+0xb4>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	4a06      	ldr	r2, [pc, #24]	; (800992c <vTaskSwitchContext+0xac>)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6013      	str	r3, [r2, #0]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	20000de4 	.word	0x20000de4
 8009928:	20000dd0 	.word	0x20000dd0
 800992c:	20000dc4 	.word	0x20000dc4
 8009930:	200008ec 	.word	0x200008ec
 8009934:	200008e8 	.word	0x200008e8

08009938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d109      	bne.n	800995c <vTaskPlaceOnEventList+0x24>
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e7fe      	b.n	800995a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <vTaskPlaceOnEventList+0x44>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3318      	adds	r3, #24
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fe fb4c 	bl	8008002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800996a:	2101      	movs	r1, #1
 800996c:	6838      	ldr	r0, [r7, #0]
 800996e:	f000 fb7d 	bl	800a06c <prvAddCurrentTaskToDelayedList>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200008e8 	.word	0x200008e8

08009980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d109      	bne.n	80099a6 <vTaskPlaceOnEventListRestricted+0x26>
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	e7fe      	b.n	80099a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a6:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3318      	adds	r3, #24
 80099ac:	4619      	mov	r1, r3
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7fe fb03 	bl	8007fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295
 80099be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	68b8      	ldr	r0, [r7, #8]
 80099c4:	f000 fb52 	bl	800a06c <prvAddCurrentTaskToDelayedList>
	}
 80099c8:	bf00      	nop
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200008e8 	.word	0x200008e8

080099d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <xTaskRemoveFromEventList+0x2a>
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	e7fe      	b.n	80099fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3318      	adds	r3, #24
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fb36 	bl	8008074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <xTaskRemoveFromEventList+0xac>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d11d      	bne.n	8009a4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fb2d 	bl	8008074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1e:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <xTaskRemoveFromEventList+0xb0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d903      	bls.n	8009a2e <xTaskRemoveFromEventList+0x5a>
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	4a16      	ldr	r2, [pc, #88]	; (8009a84 <xTaskRemoveFromEventList+0xb0>)
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4a13      	ldr	r2, [pc, #76]	; (8009a88 <xTaskRemoveFromEventList+0xb4>)
 8009a3c:	441a      	add	r2, r3
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f7fe fab8 	bl	8007fba <vListInsertEnd>
 8009a4a:	e005      	b.n	8009a58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	3318      	adds	r3, #24
 8009a50:	4619      	mov	r1, r3
 8009a52:	480e      	ldr	r0, [pc, #56]	; (8009a8c <xTaskRemoveFromEventList+0xb8>)
 8009a54:	f7fe fab1 	bl	8007fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <xTaskRemoveFromEventList+0xbc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d905      	bls.n	8009a72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a66:	2301      	movs	r3, #1
 8009a68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <xTaskRemoveFromEventList+0xc0>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e001      	b.n	8009a76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000de4 	.word	0x20000de4
 8009a84:	20000dc4 	.word	0x20000dc4
 8009a88:	200008ec 	.word	0x200008ec
 8009a8c:	20000d7c 	.word	0x20000d7c
 8009a90:	200008e8 	.word	0x200008e8
 8009a94:	20000dd0 	.word	0x20000dd0

08009a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <vTaskInternalSetTimeOutState+0x24>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <vTaskInternalSetTimeOutState+0x28>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	605a      	str	r2, [r3, #4]
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000dd4 	.word	0x20000dd4
 8009ac0:	20000dc0 	.word	0x20000dc0

08009ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d109      	bne.n	8009ae8 <xTaskCheckForTimeOut+0x24>
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e7fe      	b.n	8009ae6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <xTaskCheckForTimeOut+0x3e>
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	e7fe      	b.n	8009b00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009b02:	f000 ff3b 	bl	800a97c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <xTaskCheckForTimeOut+0xb8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d102      	bne.n	8009b26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	e023      	b.n	8009b6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <xTaskCheckForTimeOut+0xbc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d007      	beq.n	8009b42 <xTaskCheckForTimeOut+0x7e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d302      	bcc.n	8009b42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	e015      	b.n	8009b6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d20b      	bcs.n	8009b64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff ff9d 	bl	8009a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e004      	b.n	8009b6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b6e:	f000 ff33 	bl	800a9d8 <vPortExitCritical>

	return xReturn;
 8009b72:	69fb      	ldr	r3, [r7, #28]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000dc0 	.word	0x20000dc0
 8009b80:	20000dd4 	.word	0x20000dd4

08009b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b88:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <vTaskMissedYield+0x14>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	20000dd0 	.word	0x20000dd0

08009b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ba4:	f000 f852 	bl	8009c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <prvIdleTask+0x28>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d9f9      	bls.n	8009ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <prvIdleTask+0x2c>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bc0:	e7f0      	b.n	8009ba4 <prvIdleTask+0x8>
 8009bc2:	bf00      	nop
 8009bc4:	200008ec 	.word	0x200008ec
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	607b      	str	r3, [r7, #4]
 8009bd6:	e00c      	b.n	8009bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4a12      	ldr	r2, [pc, #72]	; (8009c2c <prvInitialiseTaskLists+0x60>)
 8009be4:	4413      	add	r3, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe f9ba 	bl	8007f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b37      	cmp	r3, #55	; 0x37
 8009bf6:	d9ef      	bls.n	8009bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bf8:	480d      	ldr	r0, [pc, #52]	; (8009c30 <prvInitialiseTaskLists+0x64>)
 8009bfa:	f7fe f9b1 	bl	8007f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bfe:	480d      	ldr	r0, [pc, #52]	; (8009c34 <prvInitialiseTaskLists+0x68>)
 8009c00:	f7fe f9ae 	bl	8007f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c04:	480c      	ldr	r0, [pc, #48]	; (8009c38 <prvInitialiseTaskLists+0x6c>)
 8009c06:	f7fe f9ab 	bl	8007f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c0a:	480c      	ldr	r0, [pc, #48]	; (8009c3c <prvInitialiseTaskLists+0x70>)
 8009c0c:	f7fe f9a8 	bl	8007f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c10:	480b      	ldr	r0, [pc, #44]	; (8009c40 <prvInitialiseTaskLists+0x74>)
 8009c12:	f7fe f9a5 	bl	8007f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c16:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <prvInitialiseTaskLists+0x78>)
 8009c18:	4a05      	ldr	r2, [pc, #20]	; (8009c30 <prvInitialiseTaskLists+0x64>)
 8009c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <prvInitialiseTaskLists+0x7c>)
 8009c1e:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <prvInitialiseTaskLists+0x68>)
 8009c20:	601a      	str	r2, [r3, #0]
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	200008ec 	.word	0x200008ec
 8009c30:	20000d4c 	.word	0x20000d4c
 8009c34:	20000d60 	.word	0x20000d60
 8009c38:	20000d7c 	.word	0x20000d7c
 8009c3c:	20000d90 	.word	0x20000d90
 8009c40:	20000da8 	.word	0x20000da8
 8009c44:	20000d74 	.word	0x20000d74
 8009c48:	20000d78 	.word	0x20000d78

08009c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c52:	e019      	b.n	8009c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c54:	f000 fe92 	bl	800a97c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <prvCheckTasksWaitingTermination+0x4c>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fa05 	bl	8008074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <prvCheckTasksWaitingTermination+0x50>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <prvCheckTasksWaitingTermination+0x50>)
 8009c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <prvCheckTasksWaitingTermination+0x54>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <prvCheckTasksWaitingTermination+0x54>)
 8009c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c7e:	f000 feab 	bl	800a9d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f80e 	bl	8009ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <prvCheckTasksWaitingTermination+0x54>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e1      	bne.n	8009c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20000d90 	.word	0x20000d90
 8009c9c:	20000dbc 	.word	0x20000dbc
 8009ca0:	20000da4 	.word	0x20000da4

08009ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d108      	bne.n	8009cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 f83a 	bl	800ad34 <vPortFree>
				vPortFree( pxTCB );
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 f837 	bl	800ad34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cc6:	e017      	b.n	8009cf8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d103      	bne.n	8009cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 f82e 	bl	800ad34 <vPortFree>
	}
 8009cd8:	e00e      	b.n	8009cf8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d009      	beq.n	8009cf8 <prvDeleteTCB+0x54>
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e7fe      	b.n	8009cf6 <prvDeleteTCB+0x52>
	}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <prvResetNextTaskUnblockTime+0x44>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <prvResetNextTaskUnblockTime+0x14>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <prvResetNextTaskUnblockTime+0x16>
 8009d14:	2300      	movs	r3, #0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvResetNextTaskUnblockTime+0x48>)
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d22:	e008      	b.n	8009d36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d24:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <prvResetNextTaskUnblockTime+0x44>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	4a05      	ldr	r2, [pc, #20]	; (8009d48 <prvResetNextTaskUnblockTime+0x48>)
 8009d34:	6013      	str	r3, [r2, #0]
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000d74 	.word	0x20000d74
 8009d48:	20000ddc 	.word	0x20000ddc

08009d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d52:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <xTaskGetSchedulerState+0x34>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	607b      	str	r3, [r7, #4]
 8009d5e:	e008      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d60:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <xTaskGetSchedulerState+0x38>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	e001      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d72:	687b      	ldr	r3, [r7, #4]
	}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20000dc8 	.word	0x20000dc8
 8009d84:	20000de4 	.word	0x20000de4

08009d88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d056      	beq.n	8009e4c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <xTaskPriorityInherit+0xd0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d246      	bcs.n	8009e3a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db06      	blt.n	8009dc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db4:	4b28      	ldr	r3, [pc, #160]	; (8009e58 <xTaskPriorityInherit+0xd0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6959      	ldr	r1, [r3, #20]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4a22      	ldr	r2, [pc, #136]	; (8009e5c <xTaskPriorityInherit+0xd4>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d101      	bne.n	8009dde <xTaskPriorityInherit+0x56>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xTaskPriorityInherit+0x58>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d022      	beq.n	8009e2a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe f943 	bl	8008074 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dee:	4b1a      	ldr	r3, [pc, #104]	; (8009e58 <xTaskPriorityInherit+0xd0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfc:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <xTaskPriorityInherit+0xd8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d903      	bls.n	8009e0c <xTaskPriorityInherit+0x84>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <xTaskPriorityInherit+0xd8>)
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <xTaskPriorityInherit+0xd4>)
 8009e1a:	441a      	add	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe f8c9 	bl	8007fba <vListInsertEnd>
 8009e28:	e004      	b.n	8009e34 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <xTaskPriorityInherit+0xd0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e008      	b.n	8009e4c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e3e:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <xTaskPriorityInherit+0xd0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d201      	bcs.n	8009e4c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
	}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200008e8 	.word	0x200008e8
 8009e5c:	200008ec 	.word	0x200008ec
 8009e60:	20000dc4 	.word	0x20000dc4

08009e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d054      	beq.n	8009f24 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e7a:	4b2d      	ldr	r3, [pc, #180]	; (8009f30 <xTaskPriorityDisinherit+0xcc>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d009      	beq.n	8009e98 <xTaskPriorityDisinherit+0x34>
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	e7fe      	b.n	8009e96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <xTaskPriorityDisinherit+0x50>
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	e7fe      	b.n	8009eb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb8:	1e5a      	subs	r2, r3, #1
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d02c      	beq.n	8009f24 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d128      	bne.n	8009f24 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe f8cc 	bl	8008074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <xTaskPriorityDisinherit+0xd0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d903      	bls.n	8009f04 <xTaskPriorityDisinherit+0xa0>
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	4a0c      	ldr	r2, [pc, #48]	; (8009f34 <xTaskPriorityDisinherit+0xd0>)
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4a09      	ldr	r2, [pc, #36]	; (8009f38 <xTaskPriorityDisinherit+0xd4>)
 8009f12:	441a      	add	r2, r3
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	f7fe f84d 	bl	8007fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f20:	2301      	movs	r3, #1
 8009f22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f24:	697b      	ldr	r3, [r7, #20]
	}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	200008e8 	.word	0x200008e8
 8009f34:	20000dc4 	.word	0x20000dc4
 8009f38:	200008ec 	.word	0x200008ec

08009f3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d06d      	beq.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	e7fe      	b.n	8009f6e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d902      	bls.n	8009f80 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	e002      	b.n	8009f86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d04f      	beq.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d14a      	bne.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d109      	bne.n	8009fb8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	e7fe      	b.n	8009fb6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	db04      	blt.n	8009fd6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	6959      	ldr	r1, [r3, #20]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4a15      	ldr	r2, [pc, #84]	; (800a03c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009fe6:	4413      	add	r3, r2
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	d101      	bne.n	8009ff0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009fec:	2301      	movs	r3, #1
 8009fee:	e000      	b.n	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d01c      	beq.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe f83a 	bl	8008074 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a004:	4b0e      	ldr	r3, [pc, #56]	; (800a040 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d903      	bls.n	800a014 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	4a0b      	ldr	r2, [pc, #44]	; (800a040 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4a06      	ldr	r2, [pc, #24]	; (800a03c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a022:	441a      	add	r2, r3
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	3304      	adds	r3, #4
 800a028:	4619      	mov	r1, r3
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7fd ffc5 	bl	8007fba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a030:	bf00      	nop
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	200008e8 	.word	0x200008e8
 800a03c:	200008ec 	.word	0x200008ec
 800a040:	20000dc4 	.word	0x20000dc4

0800a044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a048:	4b07      	ldr	r3, [pc, #28]	; (800a068 <pvTaskIncrementMutexHeldCount+0x24>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a050:	4b05      	ldr	r3, [pc, #20]	; (800a068 <pvTaskIncrementMutexHeldCount+0x24>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a056:	3201      	adds	r2, #1
 800a058:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <pvTaskIncrementMutexHeldCount+0x24>)
 800a05c:	681b      	ldr	r3, [r3, #0]
	}
 800a05e:	4618      	mov	r0, r3
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	200008e8 	.word	0x200008e8

0800a06c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a076:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07c:	4b20      	ldr	r3, [pc, #128]	; (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd fff6 	bl	8008074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d10a      	bne.n	800a0a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a096:	4b1a      	ldr	r3, [pc, #104]	; (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4819      	ldr	r0, [pc, #100]	; (800a104 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0a0:	f7fd ff8b 	bl	8007fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0a4:	e026      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ae:	4b14      	ldr	r3, [pc, #80]	; (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d209      	bcs.n	800a0d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fd ff99 	bl	8008002 <vListInsert>
}
 800a0d0:	e010      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d2:	4b0e      	ldr	r3, [pc, #56]	; (800a10c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fd ff8f 	bl	8008002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d202      	bcs.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0ee:	4a08      	ldr	r2, [pc, #32]	; (800a110 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	6013      	str	r3, [r2, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20000dc0 	.word	0x20000dc0
 800a100:	200008e8 	.word	0x200008e8
 800a104:	20000da8 	.word	0x20000da8
 800a108:	20000d78 	.word	0x20000d78
 800a10c:	20000d74 	.word	0x20000d74
 800a110:	20000ddc 	.word	0x20000ddc

0800a114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a11e:	f000 fac3 	bl	800a6a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <xTimerCreateTimerTask+0x80>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d021      	beq.n	800a16e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a132:	1d3a      	adds	r2, r7, #4
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	f107 030c 	add.w	r3, r7, #12
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd fef5 	bl	8007f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	2302      	movs	r3, #2
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	460a      	mov	r2, r1
 800a154:	4910      	ldr	r1, [pc, #64]	; (800a198 <xTimerCreateTimerTask+0x84>)
 800a156:	4811      	ldr	r0, [pc, #68]	; (800a19c <xTimerCreateTimerTask+0x88>)
 800a158:	f7fe ffee 	bl	8009138 <xTaskCreateStatic>
 800a15c:	4602      	mov	r2, r0
 800a15e:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <xTimerCreateTimerTask+0x8c>)
 800a160:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a162:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <xTimerCreateTimerTask+0x8c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a16a:	2301      	movs	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d109      	bne.n	800a188 <xTimerCreateTimerTask+0x74>
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	613b      	str	r3, [r7, #16]
 800a186:	e7fe      	b.n	800a186 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a188:	697b      	ldr	r3, [r7, #20]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000e18 	.word	0x20000e18
 800a198:	0800ba50 	.word	0x0800ba50
 800a19c:	0800a2bd 	.word	0x0800a2bd
 800a1a0:	20000e1c 	.word	0x20000e1c

0800a1a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <xTimerGenericCommand+0x2c>
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	623b      	str	r3, [r7, #32]
 800a1ce:	e7fe      	b.n	800a1ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1d0:	4b19      	ldr	r3, [pc, #100]	; (800a238 <xTimerGenericCommand+0x94>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d02a      	beq.n	800a22e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b05      	cmp	r3, #5
 800a1e8:	dc18      	bgt.n	800a21c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1ea:	f7ff fdaf 	bl	8009d4c <xTaskGetSchedulerState>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d109      	bne.n	800a208 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1f4:	4b10      	ldr	r3, [pc, #64]	; (800a238 <xTimerGenericCommand+0x94>)
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	f107 0110 	add.w	r1, r7, #16
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a200:	f7fe f950 	bl	80084a4 <xQueueGenericSend>
 800a204:	6278      	str	r0, [r7, #36]	; 0x24
 800a206:	e012      	b.n	800a22e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a208:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <xTimerGenericCommand+0x94>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	f107 0110 	add.w	r1, r7, #16
 800a210:	2300      	movs	r3, #0
 800a212:	2200      	movs	r2, #0
 800a214:	f7fe f946 	bl	80084a4 <xQueueGenericSend>
 800a218:	6278      	str	r0, [r7, #36]	; 0x24
 800a21a:	e008      	b.n	800a22e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <xTimerGenericCommand+0x94>)
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	f107 0110 	add.w	r1, r7, #16
 800a224:	2300      	movs	r3, #0
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	f7fe fa36 	bl	8008698 <xQueueGenericSendFromISR>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a230:	4618      	mov	r0, r3
 800a232:	3728      	adds	r7, #40	; 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000e18 	.word	0x20000e18

0800a23c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af02      	add	r7, sp, #8
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a246:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <prvProcessExpiredTimer+0x7c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	3304      	adds	r3, #4
 800a254:	4618      	mov	r0, r3
 800a256:	f7fd ff0d 	bl	8008074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d121      	bne.n	800a2a6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	18d1      	adds	r1, r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	6978      	ldr	r0, [r7, #20]
 800a270:	f000 f8c8 	bl	800a404 <prvInsertTimerInActiveList>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d015      	beq.n	800a2a6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a27a:	2300      	movs	r3, #0
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	2300      	movs	r3, #0
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	2100      	movs	r1, #0
 800a284:	6978      	ldr	r0, [r7, #20]
 800a286:	f7ff ff8d 	bl	800a1a4 <xTimerGenericCommand>
 800a28a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d109      	bne.n	800a2a6 <prvProcessExpiredTimer+0x6a>
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e7fe      	b.n	800a2a4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	6978      	ldr	r0, [r7, #20]
 800a2ac:	4798      	blx	r3
}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000e10 	.word	0x20000e10

0800a2bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 f857 	bl	800a37c <prvGetNextExpireTime>
 800a2ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f803 	bl	800a2e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2da:	f000 f8d5 	bl	800a488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2de:	e7f1      	b.n	800a2c4 <prvTimerTask+0x8>

0800a2e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2ea:	f7ff f951 	bl	8009590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 f866 	bl	800a3c4 <prvSampleTimeNow>
 800a2f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d130      	bne.n	800a362 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <prvProcessTimerOrBlockTask+0x3c>
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d806      	bhi.n	800a31c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a30e:	f7ff f94d 	bl	80095ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ff91 	bl	800a23c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a31a:	e024      	b.n	800a366 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d008      	beq.n	800a334 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a322:	4b13      	ldr	r3, [pc, #76]	; (800a370 <prvProcessTimerOrBlockTask+0x90>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bf0c      	ite	eq
 800a32c:	2301      	moveq	r3, #1
 800a32e:	2300      	movne	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <prvProcessTimerOrBlockTask+0x94>)
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	4619      	mov	r1, r3
 800a342:	f7fe fec5 	bl	80090d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a346:	f7ff f931 	bl	80095ac <xTaskResumeAll>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a350:	4b09      	ldr	r3, [pc, #36]	; (800a378 <prvProcessTimerOrBlockTask+0x98>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	f3bf 8f6f 	isb	sy
}
 800a360:	e001      	b.n	800a366 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a362:	f7ff f923 	bl	80095ac <xTaskResumeAll>
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20000e14 	.word	0x20000e14
 800a374:	20000e18 	.word	0x20000e18
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <prvGetNextExpireTime+0x44>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bf0c      	ite	eq
 800a38e:	2301      	moveq	r3, #1
 800a390:	2300      	movne	r3, #0
 800a392:	b2db      	uxtb	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d105      	bne.n	800a3ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <prvGetNextExpireTime+0x44>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e001      	b.n	800a3b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	20000e10 	.word	0x20000e10

0800a3c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3cc:	f7ff f98a 	bl	80096e4 <xTaskGetTickCount>
 800a3d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <prvSampleTimeNow+0x3c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d205      	bcs.n	800a3e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3dc:	f000 f904 	bl	800a5e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	e002      	b.n	800a3ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3ee:	4a04      	ldr	r2, [pc, #16]	; (800a400 <prvSampleTimeNow+0x3c>)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000e20 	.word	0x20000e20

0800a404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d812      	bhi.n	800a450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	429a      	cmp	r2, r3
 800a436:	d302      	bcc.n	800a43e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a438:	2301      	movs	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e01b      	b.n	800a476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a43e:	4b10      	ldr	r3, [pc, #64]	; (800a480 <prvInsertTimerInActiveList+0x7c>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3304      	adds	r3, #4
 800a446:	4619      	mov	r1, r3
 800a448:	4610      	mov	r0, r2
 800a44a:	f7fd fdda 	bl	8008002 <vListInsert>
 800a44e:	e012      	b.n	800a476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d206      	bcs.n	800a466 <prvInsertTimerInActiveList+0x62>
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e007      	b.n	800a476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <prvInsertTimerInActiveList+0x80>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7fd fdc6 	bl	8008002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a476:	697b      	ldr	r3, [r7, #20]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000e14 	.word	0x20000e14
 800a484:	20000e10 	.word	0x20000e10

0800a488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	; 0x38
 800a48c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a48e:	e099      	b.n	800a5c4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	da17      	bge.n	800a4c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a496:	1d3b      	adds	r3, r7, #4
 800a498:	3304      	adds	r3, #4
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d109      	bne.n	800a4b6 <prvProcessReceivedCommands+0x2e>
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	e7fe      	b.n	800a4b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4bc:	6850      	ldr	r0, [r2, #4]
 800a4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4c0:	6892      	ldr	r2, [r2, #8]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db7a      	blt.n	800a5c2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fd fdc9 	bl	8008074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff ff6d 	bl	800a3c4 <prvSampleTimeNow>
 800a4ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b09      	cmp	r3, #9
 800a4f0:	d868      	bhi.n	800a5c4 <prvProcessReceivedCommands+0x13c>
 800a4f2:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <prvProcessReceivedCommands+0x70>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a521 	.word	0x0800a521
 800a504:	0800a5c5 	.word	0x0800a5c5
 800a508:	0800a57b 	.word	0x0800a57b
 800a50c:	0800a5b1 	.word	0x0800a5b1
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a521 	.word	0x0800a521
 800a518:	0800a5c5 	.word	0x0800a5c5
 800a51c:	0800a57b 	.word	0x0800a57b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	18d1      	adds	r1, r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52e:	f7ff ff69 	bl	800a404 <prvInsertTimerInActiveList>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d045      	beq.n	800a5c4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d13d      	bne.n	800a5c4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	441a      	add	r2, r3
 800a550:	2300      	movs	r3, #0
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	2300      	movs	r3, #0
 800a556:	2100      	movs	r1, #0
 800a558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55a:	f7ff fe23 	bl	800a1a4 <xTimerGenericCommand>
 800a55e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d12e      	bne.n	800a5c4 <prvProcessReceivedCommands+0x13c>
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	e7fe      	b.n	800a578 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d109      	bne.n	800a59c <prvProcessReceivedCommands+0x114>
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	617b      	str	r3, [r7, #20]
 800a59a:	e7fe      	b.n	800a59a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	699a      	ldr	r2, [r3, #24]
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	18d1      	adds	r1, r2, r3
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5aa:	f7ff ff2b 	bl	800a404 <prvInsertTimerInActiveList>
					break;
 800a5ae:	e009      	b.n	800a5c4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d104      	bne.n	800a5c4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5bc:	f000 fbba 	bl	800ad34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5c0:	e000      	b.n	800a5c4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a5c2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5c4:	4b07      	ldr	r3, [pc, #28]	; (800a5e4 <prvProcessReceivedCommands+0x15c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	1d39      	adds	r1, r7, #4
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe f981 	bl	80088d4 <xQueueReceive>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f47f af5b 	bne.w	800a490 <prvProcessReceivedCommands+0x8>
	}
}
 800a5da:	bf00      	nop
 800a5dc:	3730      	adds	r7, #48	; 0x30
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000e18 	.word	0x20000e18

0800a5e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ee:	e044      	b.n	800a67a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5f0:	4b2b      	ldr	r3, [pc, #172]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5fa:	4b29      	ldr	r3, [pc, #164]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fd33 	bl	8008074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d12d      	bne.n	800a67a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d90e      	bls.n	800a64e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a63c:	4b18      	ldr	r3, [pc, #96]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fd fcdb 	bl	8008002 <vListInsert>
 800a64c:	e015      	b.n	800a67a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a64e:	2300      	movs	r3, #0
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	2100      	movs	r1, #0
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff fda3 	bl	800a1a4 <xTimerGenericCommand>
 800a65e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d109      	bne.n	800a67a <prvSwitchTimerLists+0x92>
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	e7fe      	b.n	800a678 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a67a:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1b5      	bne.n	800a5f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a68a:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <prvSwitchTimerLists+0xbc>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a04      	ldr	r2, [pc, #16]	; (800a6a0 <prvSwitchTimerLists+0xb8>)
 800a690:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a692:	4a04      	ldr	r2, [pc, #16]	; (800a6a4 <prvSwitchTimerLists+0xbc>)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	6013      	str	r3, [r2, #0]
}
 800a698:	bf00      	nop
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000e10 	.word	0x20000e10
 800a6a4:	20000e14 	.word	0x20000e14

0800a6a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6ae:	f000 f965 	bl	800a97c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <prvCheckForValidListAndQueue+0x60>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d120      	bne.n	800a6fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6ba:	4814      	ldr	r0, [pc, #80]	; (800a70c <prvCheckForValidListAndQueue+0x64>)
 800a6bc:	f7fd fc50 	bl	8007f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6c0:	4813      	ldr	r0, [pc, #76]	; (800a710 <prvCheckForValidListAndQueue+0x68>)
 800a6c2:	f7fd fc4d 	bl	8007f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6c6:	4b13      	ldr	r3, [pc, #76]	; (800a714 <prvCheckForValidListAndQueue+0x6c>)
 800a6c8:	4a10      	ldr	r2, [pc, #64]	; (800a70c <prvCheckForValidListAndQueue+0x64>)
 800a6ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6cc:	4b12      	ldr	r3, [pc, #72]	; (800a718 <prvCheckForValidListAndQueue+0x70>)
 800a6ce:	4a10      	ldr	r2, [pc, #64]	; (800a710 <prvCheckForValidListAndQueue+0x68>)
 800a6d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	4b11      	ldr	r3, [pc, #68]	; (800a71c <prvCheckForValidListAndQueue+0x74>)
 800a6d8:	4a11      	ldr	r2, [pc, #68]	; (800a720 <prvCheckForValidListAndQueue+0x78>)
 800a6da:	2110      	movs	r1, #16
 800a6dc:	200a      	movs	r0, #10
 800a6de:	f7fd fd5b 	bl	8008198 <xQueueGenericCreateStatic>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4b08      	ldr	r3, [pc, #32]	; (800a708 <prvCheckForValidListAndQueue+0x60>)
 800a6e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6e8:	4b07      	ldr	r3, [pc, #28]	; (800a708 <prvCheckForValidListAndQueue+0x60>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <prvCheckForValidListAndQueue+0x60>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	490b      	ldr	r1, [pc, #44]	; (800a724 <prvCheckForValidListAndQueue+0x7c>)
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fc98 	bl	800902c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6fc:	f000 f96c 	bl	800a9d8 <vPortExitCritical>
}
 800a700:	bf00      	nop
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20000e18 	.word	0x20000e18
 800a70c:	20000de8 	.word	0x20000de8
 800a710:	20000dfc 	.word	0x20000dfc
 800a714:	20000e10 	.word	0x20000e10
 800a718:	20000e14 	.word	0x20000e14
 800a71c:	20000ec4 	.word	0x20000ec4
 800a720:	20000e24 	.word	0x20000e24
 800a724:	0800ba58 	.word	0x0800ba58

0800a728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3b04      	subs	r3, #4
 800a738:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3b04      	subs	r3, #4
 800a746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f023 0201 	bic.w	r2, r3, #1
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3b04      	subs	r3, #4
 800a756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a758:	4a0c      	ldr	r2, [pc, #48]	; (800a78c <pxPortInitialiseStack+0x64>)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3b14      	subs	r3, #20
 800a762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3b04      	subs	r3, #4
 800a76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f06f 0202 	mvn.w	r2, #2
 800a776:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3b20      	subs	r3, #32
 800a77c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a77e:	68fb      	ldr	r3, [r7, #12]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	0800a791 	.word	0x0800a791

0800a790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a79a:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <prvTaskExitError+0x50>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d009      	beq.n	800a7b8 <prvTaskExitError+0x28>
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	e7fe      	b.n	800a7b6 <prvTaskExitError+0x26>
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7ca:	bf00      	nop
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0fc      	beq.n	800a7cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000024 	.word	0x20000024
	...

0800a7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <pxCurrentTCBConst2>)
 800a7f2:	6819      	ldr	r1, [r3, #0]
 800a7f4:	6808      	ldr	r0, [r1, #0]
 800a7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	f380 8809 	msr	PSP, r0
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	f380 8811 	msr	BASEPRI, r0
 800a80a:	4770      	bx	lr
 800a80c:	f3af 8000 	nop.w

0800a810 <pxCurrentTCBConst2>:
 800a810:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop

0800a818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a818:	4808      	ldr	r0, [pc, #32]	; (800a83c <prvPortStartFirstTask+0x24>)
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	6800      	ldr	r0, [r0, #0]
 800a81e:	f380 8808 	msr	MSP, r0
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8814 	msr	CONTROL, r0
 800a82a:	b662      	cpsie	i
 800a82c:	b661      	cpsie	f
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	df00      	svc	0
 800a838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a83a:	bf00      	nop
 800a83c:	e000ed08 	.word	0xe000ed08

0800a840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a846:	4b44      	ldr	r3, [pc, #272]	; (800a958 <xPortStartScheduler+0x118>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a44      	ldr	r2, [pc, #272]	; (800a95c <xPortStartScheduler+0x11c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d109      	bne.n	800a864 <xPortStartScheduler+0x24>
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e7fe      	b.n	800a862 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a864:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <xPortStartScheduler+0x118>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a3d      	ldr	r2, [pc, #244]	; (800a960 <xPortStartScheduler+0x120>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d109      	bne.n	800a882 <xPortStartScheduler+0x42>
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e7fe      	b.n	800a880 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a882:	4b38      	ldr	r3, [pc, #224]	; (800a964 <xPortStartScheduler+0x124>)
 800a884:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	22ff      	movs	r2, #255	; 0xff
 800a892:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	4b30      	ldr	r3, [pc, #192]	; (800a968 <xPortStartScheduler+0x128>)
 800a8a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8aa:	4b30      	ldr	r3, [pc, #192]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8b0:	e009      	b.n	800a8c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a8b2:	4b2e      	ldr	r3, [pc, #184]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	4a2c      	ldr	r2, [pc, #176]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ce:	2b80      	cmp	r3, #128	; 0x80
 800a8d0:	d0ef      	beq.n	800a8b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f1c3 0307 	rsb	r3, r3, #7
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d009      	beq.n	800a8f2 <xPortStartScheduler+0xb2>
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60bb      	str	r3, [r7, #8]
 800a8f0:	e7fe      	b.n	800a8f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8f2:	4b1e      	ldr	r3, [pc, #120]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	4a1c      	ldr	r2, [pc, #112]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <xPortStartScheduler+0x12c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a904:	4a19      	ldr	r2, [pc, #100]	; (800a96c <xPortStartScheduler+0x12c>)
 800a906:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a910:	4b17      	ldr	r3, [pc, #92]	; (800a970 <xPortStartScheduler+0x130>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a16      	ldr	r2, [pc, #88]	; (800a970 <xPortStartScheduler+0x130>)
 800a916:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a91a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a91c:	4b14      	ldr	r3, [pc, #80]	; (800a970 <xPortStartScheduler+0x130>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a13      	ldr	r2, [pc, #76]	; (800a970 <xPortStartScheduler+0x130>)
 800a922:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a926:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a928:	f000 f8d6 	bl	800aad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a92c:	4b11      	ldr	r3, [pc, #68]	; (800a974 <xPortStartScheduler+0x134>)
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a932:	f000 f8f5 	bl	800ab20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a936:	4b10      	ldr	r3, [pc, #64]	; (800a978 <xPortStartScheduler+0x138>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a0f      	ldr	r2, [pc, #60]	; (800a978 <xPortStartScheduler+0x138>)
 800a93c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a940:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a942:	f7ff ff69 	bl	800a818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a946:	f7fe ff9b 	bl	8009880 <vTaskSwitchContext>
	prvTaskExitError();
 800a94a:	f7ff ff21 	bl	800a790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	e000ed00 	.word	0xe000ed00
 800a95c:	410fc271 	.word	0x410fc271
 800a960:	410fc270 	.word	0x410fc270
 800a964:	e000e400 	.word	0xe000e400
 800a968:	20000f14 	.word	0x20000f14
 800a96c:	20000f18 	.word	0x20000f18
 800a970:	e000ed20 	.word	0xe000ed20
 800a974:	20000024 	.word	0x20000024
 800a978:	e000ef34 	.word	0xe000ef34

0800a97c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a994:	4b0e      	ldr	r3, [pc, #56]	; (800a9d0 <vPortEnterCritical+0x54>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3301      	adds	r3, #1
 800a99a:	4a0d      	ldr	r2, [pc, #52]	; (800a9d0 <vPortEnterCritical+0x54>)
 800a99c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a99e:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <vPortEnterCritical+0x54>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10e      	bne.n	800a9c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <vPortEnterCritical+0x58>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <vPortEnterCritical+0x48>
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	603b      	str	r3, [r7, #0]
 800a9c2:	e7fe      	b.n	800a9c2 <vPortEnterCritical+0x46>
	}
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20000024 	.word	0x20000024
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9de:	4b11      	ldr	r3, [pc, #68]	; (800aa24 <vPortExitCritical+0x4c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <vPortExitCritical+0x22>
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	607b      	str	r3, [r7, #4]
 800a9f8:	e7fe      	b.n	800a9f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <vPortExitCritical+0x4c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <vPortExitCritical+0x4c>)
 800aa02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <vPortExitCritical+0x4c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d104      	bne.n	800aa16 <vPortExitCritical+0x3e>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20000024 	.word	0x20000024
	...

0800aa30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa30:	f3ef 8009 	mrs	r0, PSP
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <pxCurrentTCBConst>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	f01e 0f10 	tst.w	lr, #16
 800aa40:	bf08      	it	eq
 800aa42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4a:	6010      	str	r0, [r2, #0]
 800aa4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa54:	f380 8811 	msr	BASEPRI, r0
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f7fe ff0e 	bl	8009880 <vTaskSwitchContext>
 800aa64:	f04f 0000 	mov.w	r0, #0
 800aa68:	f380 8811 	msr	BASEPRI, r0
 800aa6c:	bc09      	pop	{r0, r3}
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	6808      	ldr	r0, [r1, #0]
 800aa72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa76:	f01e 0f10 	tst.w	lr, #16
 800aa7a:	bf08      	it	eq
 800aa7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa80:	f380 8809 	msr	PSP, r0
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w

0800aa90 <pxCurrentTCBConst>:
 800aa90:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop

0800aa98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aab0:	f7fe fe28 	bl	8009704 <xTaskIncrementTick>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaba:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <SysTick_Handler+0x3c>)
 800aabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	e000ed04 	.word	0xe000ed04

0800aad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aad8:	b480      	push	{r7}
 800aada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aadc:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <vPortSetupTimerInterrupt+0x34>)
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <vPortSetupTimerInterrupt+0x38>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aae8:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <vPortSetupTimerInterrupt+0x3c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a0a      	ldr	r2, [pc, #40]	; (800ab18 <vPortSetupTimerInterrupt+0x40>)
 800aaee:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf2:	099b      	lsrs	r3, r3, #6
 800aaf4:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <vPortSetupTimerInterrupt+0x44>)
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aafa:	4b04      	ldr	r3, [pc, #16]	; (800ab0c <vPortSetupTimerInterrupt+0x34>)
 800aafc:	2207      	movs	r2, #7
 800aafe:	601a      	str	r2, [r3, #0]
}
 800ab00:	bf00      	nop
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	e000e010 	.word	0xe000e010
 800ab10:	e000e018 	.word	0xe000e018
 800ab14:	20000000 	.word	0x20000000
 800ab18:	10624dd3 	.word	0x10624dd3
 800ab1c:	e000e014 	.word	0xe000e014

0800ab20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab30 <vPortEnableVFP+0x10>
 800ab24:	6801      	ldr	r1, [r0, #0]
 800ab26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab2a:	6001      	str	r1, [r0, #0]
 800ab2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab2e:	bf00      	nop
 800ab30:	e000ed88 	.word	0xe000ed88

0800ab34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab3a:	f3ef 8305 	mrs	r3, IPSR
 800ab3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b0f      	cmp	r3, #15
 800ab44:	d913      	bls.n	800ab6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab46:	4a16      	ldr	r2, [pc, #88]	; (800aba0 <vPortValidateInterruptPriority+0x6c>)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab50:	4b14      	ldr	r3, [pc, #80]	; (800aba4 <vPortValidateInterruptPriority+0x70>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	7afa      	ldrb	r2, [r7, #11]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d209      	bcs.n	800ab6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	607b      	str	r3, [r7, #4]
 800ab6c:	e7fe      	b.n	800ab6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab6e:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <vPortValidateInterruptPriority+0x74>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab76:	4b0d      	ldr	r3, [pc, #52]	; (800abac <vPortValidateInterruptPriority+0x78>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d909      	bls.n	800ab92 <vPortValidateInterruptPriority+0x5e>
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	e7fe      	b.n	800ab90 <vPortValidateInterruptPriority+0x5c>
	}
 800ab92:	bf00      	nop
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000e3f0 	.word	0xe000e3f0
 800aba4:	20000f14 	.word	0x20000f14
 800aba8:	e000ed0c 	.word	0xe000ed0c
 800abac:	20000f18 	.word	0x20000f18

0800abb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08a      	sub	sp, #40	; 0x28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abbc:	f7fe fce8 	bl	8009590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abc0:	4b57      	ldr	r3, [pc, #348]	; (800ad20 <pvPortMalloc+0x170>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abc8:	f000 f90c 	bl	800ade4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abcc:	4b55      	ldr	r3, [pc, #340]	; (800ad24 <pvPortMalloc+0x174>)
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4013      	ands	r3, r2
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f040 808c 	bne.w	800acf2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01c      	beq.n	800ac1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800abe0:	2208      	movs	r2, #8
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d013      	beq.n	800ac1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f023 0307 	bic.w	r3, r3, #7
 800abf8:	3308      	adds	r3, #8
 800abfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <pvPortMalloc+0x6a>
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	617b      	str	r3, [r7, #20]
 800ac18:	e7fe      	b.n	800ac18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d068      	beq.n	800acf2 <pvPortMalloc+0x142>
 800ac20:	4b41      	ldr	r3, [pc, #260]	; (800ad28 <pvPortMalloc+0x178>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d863      	bhi.n	800acf2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac2a:	4b40      	ldr	r3, [pc, #256]	; (800ad2c <pvPortMalloc+0x17c>)
 800ac2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac2e:	4b3f      	ldr	r3, [pc, #252]	; (800ad2c <pvPortMalloc+0x17c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac34:	e004      	b.n	800ac40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d903      	bls.n	800ac52 <pvPortMalloc+0xa2>
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f1      	bne.n	800ac36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac52:	4b33      	ldr	r3, [pc, #204]	; (800ad20 <pvPortMalloc+0x170>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d04a      	beq.n	800acf2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2208      	movs	r2, #8
 800ac62:	4413      	add	r3, r2
 800ac64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	1ad2      	subs	r2, r2, r3
 800ac76:	2308      	movs	r3, #8
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d91e      	bls.n	800acbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d009      	beq.n	800aca4 <pvPortMalloc+0xf4>
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
 800aca2:	e7fe      	b.n	800aca2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	1ad2      	subs	r2, r2, r3
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acb6:	69b8      	ldr	r0, [r7, #24]
 800acb8:	f000 f8f6 	bl	800aea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <pvPortMalloc+0x178>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	4a18      	ldr	r2, [pc, #96]	; (800ad28 <pvPortMalloc+0x178>)
 800acc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acca:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <pvPortMalloc+0x178>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b18      	ldr	r3, [pc, #96]	; (800ad30 <pvPortMalloc+0x180>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d203      	bcs.n	800acde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <pvPortMalloc+0x178>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a15      	ldr	r2, [pc, #84]	; (800ad30 <pvPortMalloc+0x180>)
 800acdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	4b10      	ldr	r3, [pc, #64]	; (800ad24 <pvPortMalloc+0x174>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	431a      	orrs	r2, r3
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acf2:	f7fe fc5b 	bl	80095ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d009      	beq.n	800ad14 <pvPortMalloc+0x164>
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	e7fe      	b.n	800ad12 <pvPortMalloc+0x162>
	return pvReturn;
 800ad14:	69fb      	ldr	r3, [r7, #28]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3728      	adds	r7, #40	; 0x28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001b24 	.word	0x20001b24
 800ad24:	20001b30 	.word	0x20001b30
 800ad28:	20001b28 	.word	0x20001b28
 800ad2c:	20001b1c 	.word	0x20001b1c
 800ad30:	20001b2c 	.word	0x20001b2c

0800ad34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d046      	beq.n	800add4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad46:	2308      	movs	r3, #8
 800ad48:	425b      	negs	r3, r3
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	4b20      	ldr	r3, [pc, #128]	; (800addc <vPortFree+0xa8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <vPortFree+0x42>
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	e7fe      	b.n	800ad74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d009      	beq.n	800ad92 <vPortFree+0x5e>
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60bb      	str	r3, [r7, #8]
 800ad90:	e7fe      	b.n	800ad90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	4b11      	ldr	r3, [pc, #68]	; (800addc <vPortFree+0xa8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d019      	beq.n	800add4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d115      	bne.n	800add4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b0b      	ldr	r3, [pc, #44]	; (800addc <vPortFree+0xa8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adb8:	f7fe fbea 	bl	8009590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <vPortFree+0xac>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4413      	add	r3, r2
 800adc6:	4a06      	ldr	r2, [pc, #24]	; (800ade0 <vPortFree+0xac>)
 800adc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adca:	6938      	ldr	r0, [r7, #16]
 800adcc:	f000 f86c 	bl	800aea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800add0:	f7fe fbec 	bl	80095ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800add4:	bf00      	nop
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20001b30 	.word	0x20001b30
 800ade0:	20001b28 	.word	0x20001b28

0800ade4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800adee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adf0:	4b27      	ldr	r3, [pc, #156]	; (800ae90 <prvHeapInit+0xac>)
 800adf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00c      	beq.n	800ae18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3307      	adds	r3, #7
 800ae02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0307 	bic.w	r3, r3, #7
 800ae0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	4a1f      	ldr	r2, [pc, #124]	; (800ae90 <prvHeapInit+0xac>)
 800ae14:	4413      	add	r3, r2
 800ae16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae1c:	4a1d      	ldr	r2, [pc, #116]	; (800ae94 <prvHeapInit+0xb0>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae22:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <prvHeapInit+0xb0>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae30:	2208      	movs	r2, #8
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1a9b      	subs	r3, r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0307 	bic.w	r3, r3, #7
 800ae3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <prvHeapInit+0xb4>)
 800ae44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <prvHeapInit+0xb4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae4e:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <prvHeapInit+0xb4>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	1ad2      	subs	r2, r2, r3
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae64:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <prvHeapInit+0xb4>)
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4a0a      	ldr	r2, [pc, #40]	; (800ae9c <prvHeapInit+0xb8>)
 800ae72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	4a09      	ldr	r2, [pc, #36]	; (800aea0 <prvHeapInit+0xbc>)
 800ae7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <prvHeapInit+0xc0>)
 800ae7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae82:	601a      	str	r2, [r3, #0]
}
 800ae84:	bf00      	nop
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20000f1c 	.word	0x20000f1c
 800ae94:	20001b1c 	.word	0x20001b1c
 800ae98:	20001b24 	.word	0x20001b24
 800ae9c:	20001b2c 	.word	0x20001b2c
 800aea0:	20001b28 	.word	0x20001b28
 800aea4:	20001b30 	.word	0x20001b30

0800aea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aeb0:	4b28      	ldr	r3, [pc, #160]	; (800af54 <prvInsertBlockIntoFreeList+0xac>)
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	e002      	b.n	800aebc <prvInsertBlockIntoFreeList+0x14>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d8f7      	bhi.n	800aeb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	4413      	add	r3, r2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d108      	bne.n	800aeea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	441a      	add	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d118      	bne.n	800af30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <prvInsertBlockIntoFreeList+0xb0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d00d      	beq.n	800af26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	441a      	add	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	e008      	b.n	800af38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <prvInsertBlockIntoFreeList+0xb0>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	e003      	b.n	800af38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d002      	beq.n	800af46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20001b1c 	.word	0x20001b1c
 800af58:	20001b24 	.word	0x20001b24

0800af5c <__errno>:
 800af5c:	4b01      	ldr	r3, [pc, #4]	; (800af64 <__errno+0x8>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000028 	.word	0x20000028

0800af68 <__libc_init_array>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	4e0d      	ldr	r6, [pc, #52]	; (800afa0 <__libc_init_array+0x38>)
 800af6c:	4c0d      	ldr	r4, [pc, #52]	; (800afa4 <__libc_init_array+0x3c>)
 800af6e:	1ba4      	subs	r4, r4, r6
 800af70:	10a4      	asrs	r4, r4, #2
 800af72:	2500      	movs	r5, #0
 800af74:	42a5      	cmp	r5, r4
 800af76:	d109      	bne.n	800af8c <__libc_init_array+0x24>
 800af78:	4e0b      	ldr	r6, [pc, #44]	; (800afa8 <__libc_init_array+0x40>)
 800af7a:	4c0c      	ldr	r4, [pc, #48]	; (800afac <__libc_init_array+0x44>)
 800af7c:	f000 fc42 	bl	800b804 <_init>
 800af80:	1ba4      	subs	r4, r4, r6
 800af82:	10a4      	asrs	r4, r4, #2
 800af84:	2500      	movs	r5, #0
 800af86:	42a5      	cmp	r5, r4
 800af88:	d105      	bne.n	800af96 <__libc_init_array+0x2e>
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af90:	4798      	blx	r3
 800af92:	3501      	adds	r5, #1
 800af94:	e7ee      	b.n	800af74 <__libc_init_array+0xc>
 800af96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af9a:	4798      	blx	r3
 800af9c:	3501      	adds	r5, #1
 800af9e:	e7f2      	b.n	800af86 <__libc_init_array+0x1e>
 800afa0:	0800bba4 	.word	0x0800bba4
 800afa4:	0800bba4 	.word	0x0800bba4
 800afa8:	0800bba4 	.word	0x0800bba4
 800afac:	0800bba8 	.word	0x0800bba8

0800afb0 <memcpy>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	1e43      	subs	r3, r0, #1
 800afb4:	440a      	add	r2, r1
 800afb6:	4291      	cmp	r1, r2
 800afb8:	d100      	bne.n	800afbc <memcpy+0xc>
 800afba:	bd10      	pop	{r4, pc}
 800afbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afc4:	e7f7      	b.n	800afb6 <memcpy+0x6>

0800afc6 <memset>:
 800afc6:	4402      	add	r2, r0
 800afc8:	4603      	mov	r3, r0
 800afca:	4293      	cmp	r3, r2
 800afcc:	d100      	bne.n	800afd0 <memset+0xa>
 800afce:	4770      	bx	lr
 800afd0:	f803 1b01 	strb.w	r1, [r3], #1
 800afd4:	e7f9      	b.n	800afca <memset+0x4>

0800afd6 <_vsniprintf_r>:
 800afd6:	b530      	push	{r4, r5, lr}
 800afd8:	1e14      	subs	r4, r2, #0
 800afda:	4605      	mov	r5, r0
 800afdc:	b09b      	sub	sp, #108	; 0x6c
 800afde:	4618      	mov	r0, r3
 800afe0:	da05      	bge.n	800afee <_vsniprintf_r+0x18>
 800afe2:	238b      	movs	r3, #139	; 0x8b
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	b01b      	add	sp, #108	; 0x6c
 800afec:	bd30      	pop	{r4, r5, pc}
 800afee:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aff2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aff6:	bf14      	ite	ne
 800aff8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800affc:	4623      	moveq	r3, r4
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	9305      	str	r3, [sp, #20]
 800b002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b006:	9100      	str	r1, [sp, #0]
 800b008:	9104      	str	r1, [sp, #16]
 800b00a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b00e:	4602      	mov	r2, r0
 800b010:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b012:	4669      	mov	r1, sp
 800b014:	4628      	mov	r0, r5
 800b016:	f000 f873 	bl	800b100 <_svfiprintf_r>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	bfbc      	itt	lt
 800b01e:	238b      	movlt	r3, #139	; 0x8b
 800b020:	602b      	strlt	r3, [r5, #0]
 800b022:	2c00      	cmp	r4, #0
 800b024:	d0e1      	beq.n	800afea <_vsniprintf_r+0x14>
 800b026:	9b00      	ldr	r3, [sp, #0]
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]
 800b02c:	e7dd      	b.n	800afea <_vsniprintf_r+0x14>
	...

0800b030 <vsniprintf>:
 800b030:	b507      	push	{r0, r1, r2, lr}
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4613      	mov	r3, r2
 800b036:	460a      	mov	r2, r1
 800b038:	4601      	mov	r1, r0
 800b03a:	4803      	ldr	r0, [pc, #12]	; (800b048 <vsniprintf+0x18>)
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f7ff ffca 	bl	800afd6 <_vsniprintf_r>
 800b042:	b003      	add	sp, #12
 800b044:	f85d fb04 	ldr.w	pc, [sp], #4
 800b048:	20000028 	.word	0x20000028

0800b04c <__ssputs_r>:
 800b04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	688e      	ldr	r6, [r1, #8]
 800b052:	429e      	cmp	r6, r3
 800b054:	4682      	mov	sl, r0
 800b056:	460c      	mov	r4, r1
 800b058:	4690      	mov	r8, r2
 800b05a:	4699      	mov	r9, r3
 800b05c:	d837      	bhi.n	800b0ce <__ssputs_r+0x82>
 800b05e:	898a      	ldrh	r2, [r1, #12]
 800b060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b064:	d031      	beq.n	800b0ca <__ssputs_r+0x7e>
 800b066:	6825      	ldr	r5, [r4, #0]
 800b068:	6909      	ldr	r1, [r1, #16]
 800b06a:	1a6f      	subs	r7, r5, r1
 800b06c:	6965      	ldr	r5, [r4, #20]
 800b06e:	2302      	movs	r3, #2
 800b070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b074:	fb95 f5f3 	sdiv	r5, r5, r3
 800b078:	f109 0301 	add.w	r3, r9, #1
 800b07c:	443b      	add	r3, r7
 800b07e:	429d      	cmp	r5, r3
 800b080:	bf38      	it	cc
 800b082:	461d      	movcc	r5, r3
 800b084:	0553      	lsls	r3, r2, #21
 800b086:	d530      	bpl.n	800b0ea <__ssputs_r+0x9e>
 800b088:	4629      	mov	r1, r5
 800b08a:	f000 fb21 	bl	800b6d0 <_malloc_r>
 800b08e:	4606      	mov	r6, r0
 800b090:	b950      	cbnz	r0, 800b0a8 <__ssputs_r+0x5c>
 800b092:	230c      	movs	r3, #12
 800b094:	f8ca 3000 	str.w	r3, [sl]
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09e:	81a3      	strh	r3, [r4, #12]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	6921      	ldr	r1, [r4, #16]
 800b0ac:	f7ff ff80 	bl	800afb0 <memcpy>
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	6126      	str	r6, [r4, #16]
 800b0be:	6165      	str	r5, [r4, #20]
 800b0c0:	443e      	add	r6, r7
 800b0c2:	1bed      	subs	r5, r5, r7
 800b0c4:	6026      	str	r6, [r4, #0]
 800b0c6:	60a5      	str	r5, [r4, #8]
 800b0c8:	464e      	mov	r6, r9
 800b0ca:	454e      	cmp	r6, r9
 800b0cc:	d900      	bls.n	800b0d0 <__ssputs_r+0x84>
 800b0ce:	464e      	mov	r6, r9
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	f000 fa93 	bl	800b600 <memmove>
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	441e      	add	r6, r3
 800b0e4:	6026      	str	r6, [r4, #0]
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	e7dc      	b.n	800b0a4 <__ssputs_r+0x58>
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	f000 fb4a 	bl	800b784 <_realloc_r>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d1e2      	bne.n	800b0bc <__ssputs_r+0x70>
 800b0f6:	6921      	ldr	r1, [r4, #16]
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	f000 fa9b 	bl	800b634 <_free_r>
 800b0fe:	e7c8      	b.n	800b092 <__ssputs_r+0x46>

0800b100 <_svfiprintf_r>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	461d      	mov	r5, r3
 800b106:	898b      	ldrh	r3, [r1, #12]
 800b108:	061f      	lsls	r7, r3, #24
 800b10a:	b09d      	sub	sp, #116	; 0x74
 800b10c:	4680      	mov	r8, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	4616      	mov	r6, r2
 800b112:	d50f      	bpl.n	800b134 <_svfiprintf_r+0x34>
 800b114:	690b      	ldr	r3, [r1, #16]
 800b116:	b96b      	cbnz	r3, 800b134 <_svfiprintf_r+0x34>
 800b118:	2140      	movs	r1, #64	; 0x40
 800b11a:	f000 fad9 	bl	800b6d0 <_malloc_r>
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	6120      	str	r0, [r4, #16]
 800b122:	b928      	cbnz	r0, 800b130 <_svfiprintf_r+0x30>
 800b124:	230c      	movs	r3, #12
 800b126:	f8c8 3000 	str.w	r3, [r8]
 800b12a:	f04f 30ff 	mov.w	r0, #4294967295
 800b12e:	e0c8      	b.n	800b2c2 <_svfiprintf_r+0x1c2>
 800b130:	2340      	movs	r3, #64	; 0x40
 800b132:	6163      	str	r3, [r4, #20]
 800b134:	2300      	movs	r3, #0
 800b136:	9309      	str	r3, [sp, #36]	; 0x24
 800b138:	2320      	movs	r3, #32
 800b13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b13e:	2330      	movs	r3, #48	; 0x30
 800b140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b144:	9503      	str	r5, [sp, #12]
 800b146:	f04f 0b01 	mov.w	fp, #1
 800b14a:	4637      	mov	r7, r6
 800b14c:	463d      	mov	r5, r7
 800b14e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b152:	b10b      	cbz	r3, 800b158 <_svfiprintf_r+0x58>
 800b154:	2b25      	cmp	r3, #37	; 0x25
 800b156:	d13e      	bne.n	800b1d6 <_svfiprintf_r+0xd6>
 800b158:	ebb7 0a06 	subs.w	sl, r7, r6
 800b15c:	d00b      	beq.n	800b176 <_svfiprintf_r+0x76>
 800b15e:	4653      	mov	r3, sl
 800b160:	4632      	mov	r2, r6
 800b162:	4621      	mov	r1, r4
 800b164:	4640      	mov	r0, r8
 800b166:	f7ff ff71 	bl	800b04c <__ssputs_r>
 800b16a:	3001      	adds	r0, #1
 800b16c:	f000 80a4 	beq.w	800b2b8 <_svfiprintf_r+0x1b8>
 800b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b172:	4453      	add	r3, sl
 800b174:	9309      	str	r3, [sp, #36]	; 0x24
 800b176:	783b      	ldrb	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 809d 	beq.w	800b2b8 <_svfiprintf_r+0x1b8>
 800b17e:	2300      	movs	r3, #0
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b190:	931a      	str	r3, [sp, #104]	; 0x68
 800b192:	462f      	mov	r7, r5
 800b194:	2205      	movs	r2, #5
 800b196:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b19a:	4850      	ldr	r0, [pc, #320]	; (800b2dc <_svfiprintf_r+0x1dc>)
 800b19c:	f7f5 f828 	bl	80001f0 <memchr>
 800b1a0:	9b04      	ldr	r3, [sp, #16]
 800b1a2:	b9d0      	cbnz	r0, 800b1da <_svfiprintf_r+0xda>
 800b1a4:	06d9      	lsls	r1, r3, #27
 800b1a6:	bf44      	itt	mi
 800b1a8:	2220      	movmi	r2, #32
 800b1aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1ae:	071a      	lsls	r2, r3, #28
 800b1b0:	bf44      	itt	mi
 800b1b2:	222b      	movmi	r2, #43	; 0x2b
 800b1b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1b8:	782a      	ldrb	r2, [r5, #0]
 800b1ba:	2a2a      	cmp	r2, #42	; 0x2a
 800b1bc:	d015      	beq.n	800b1ea <_svfiprintf_r+0xea>
 800b1be:	9a07      	ldr	r2, [sp, #28]
 800b1c0:	462f      	mov	r7, r5
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	250a      	movs	r5, #10
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1cc:	3b30      	subs	r3, #48	; 0x30
 800b1ce:	2b09      	cmp	r3, #9
 800b1d0:	d94d      	bls.n	800b26e <_svfiprintf_r+0x16e>
 800b1d2:	b1b8      	cbz	r0, 800b204 <_svfiprintf_r+0x104>
 800b1d4:	e00f      	b.n	800b1f6 <_svfiprintf_r+0xf6>
 800b1d6:	462f      	mov	r7, r5
 800b1d8:	e7b8      	b.n	800b14c <_svfiprintf_r+0x4c>
 800b1da:	4a40      	ldr	r2, [pc, #256]	; (800b2dc <_svfiprintf_r+0x1dc>)
 800b1dc:	1a80      	subs	r0, r0, r2
 800b1de:	fa0b f000 	lsl.w	r0, fp, r0
 800b1e2:	4318      	orrs	r0, r3
 800b1e4:	9004      	str	r0, [sp, #16]
 800b1e6:	463d      	mov	r5, r7
 800b1e8:	e7d3      	b.n	800b192 <_svfiprintf_r+0x92>
 800b1ea:	9a03      	ldr	r2, [sp, #12]
 800b1ec:	1d11      	adds	r1, r2, #4
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	9103      	str	r1, [sp, #12]
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	db01      	blt.n	800b1fa <_svfiprintf_r+0xfa>
 800b1f6:	9207      	str	r2, [sp, #28]
 800b1f8:	e004      	b.n	800b204 <_svfiprintf_r+0x104>
 800b1fa:	4252      	negs	r2, r2
 800b1fc:	f043 0302 	orr.w	r3, r3, #2
 800b200:	9207      	str	r2, [sp, #28]
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	783b      	ldrb	r3, [r7, #0]
 800b206:	2b2e      	cmp	r3, #46	; 0x2e
 800b208:	d10c      	bne.n	800b224 <_svfiprintf_r+0x124>
 800b20a:	787b      	ldrb	r3, [r7, #1]
 800b20c:	2b2a      	cmp	r3, #42	; 0x2a
 800b20e:	d133      	bne.n	800b278 <_svfiprintf_r+0x178>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d1a      	adds	r2, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9203      	str	r2, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfb8      	it	lt
 800b21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b220:	3702      	adds	r7, #2
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	4d2e      	ldr	r5, [pc, #184]	; (800b2e0 <_svfiprintf_r+0x1e0>)
 800b226:	7839      	ldrb	r1, [r7, #0]
 800b228:	2203      	movs	r2, #3
 800b22a:	4628      	mov	r0, r5
 800b22c:	f7f4 ffe0 	bl	80001f0 <memchr>
 800b230:	b138      	cbz	r0, 800b242 <_svfiprintf_r+0x142>
 800b232:	2340      	movs	r3, #64	; 0x40
 800b234:	1b40      	subs	r0, r0, r5
 800b236:	fa03 f000 	lsl.w	r0, r3, r0
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	4303      	orrs	r3, r0
 800b23e:	3701      	adds	r7, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	7839      	ldrb	r1, [r7, #0]
 800b244:	4827      	ldr	r0, [pc, #156]	; (800b2e4 <_svfiprintf_r+0x1e4>)
 800b246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b24a:	2206      	movs	r2, #6
 800b24c:	1c7e      	adds	r6, r7, #1
 800b24e:	f7f4 ffcf 	bl	80001f0 <memchr>
 800b252:	2800      	cmp	r0, #0
 800b254:	d038      	beq.n	800b2c8 <_svfiprintf_r+0x1c8>
 800b256:	4b24      	ldr	r3, [pc, #144]	; (800b2e8 <_svfiprintf_r+0x1e8>)
 800b258:	bb13      	cbnz	r3, 800b2a0 <_svfiprintf_r+0x1a0>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	3307      	adds	r3, #7
 800b25e:	f023 0307 	bic.w	r3, r3, #7
 800b262:	3308      	adds	r3, #8
 800b264:	9303      	str	r3, [sp, #12]
 800b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b268:	444b      	add	r3, r9
 800b26a:	9309      	str	r3, [sp, #36]	; 0x24
 800b26c:	e76d      	b.n	800b14a <_svfiprintf_r+0x4a>
 800b26e:	fb05 3202 	mla	r2, r5, r2, r3
 800b272:	2001      	movs	r0, #1
 800b274:	460f      	mov	r7, r1
 800b276:	e7a6      	b.n	800b1c6 <_svfiprintf_r+0xc6>
 800b278:	2300      	movs	r3, #0
 800b27a:	3701      	adds	r7, #1
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	4619      	mov	r1, r3
 800b280:	250a      	movs	r5, #10
 800b282:	4638      	mov	r0, r7
 800b284:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b288:	3a30      	subs	r2, #48	; 0x30
 800b28a:	2a09      	cmp	r2, #9
 800b28c:	d903      	bls.n	800b296 <_svfiprintf_r+0x196>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0c8      	beq.n	800b224 <_svfiprintf_r+0x124>
 800b292:	9105      	str	r1, [sp, #20]
 800b294:	e7c6      	b.n	800b224 <_svfiprintf_r+0x124>
 800b296:	fb05 2101 	mla	r1, r5, r1, r2
 800b29a:	2301      	movs	r3, #1
 800b29c:	4607      	mov	r7, r0
 800b29e:	e7f0      	b.n	800b282 <_svfiprintf_r+0x182>
 800b2a0:	ab03      	add	r3, sp, #12
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4b11      	ldr	r3, [pc, #68]	; (800b2ec <_svfiprintf_r+0x1ec>)
 800b2a8:	a904      	add	r1, sp, #16
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	f3af 8000 	nop.w
 800b2b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2b4:	4681      	mov	r9, r0
 800b2b6:	d1d6      	bne.n	800b266 <_svfiprintf_r+0x166>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	065b      	lsls	r3, r3, #25
 800b2bc:	f53f af35 	bmi.w	800b12a <_svfiprintf_r+0x2a>
 800b2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2c2:	b01d      	add	sp, #116	; 0x74
 800b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c8:	ab03      	add	r3, sp, #12
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <_svfiprintf_r+0x1ec>)
 800b2d0:	a904      	add	r1, sp, #16
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f000 f882 	bl	800b3dc <_printf_i>
 800b2d8:	e7ea      	b.n	800b2b0 <_svfiprintf_r+0x1b0>
 800b2da:	bf00      	nop
 800b2dc:	0800bb70 	.word	0x0800bb70
 800b2e0:	0800bb76 	.word	0x0800bb76
 800b2e4:	0800bb7a 	.word	0x0800bb7a
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	0800b04d 	.word	0x0800b04d

0800b2f0 <_printf_common>:
 800b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f4:	4691      	mov	r9, r2
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	688a      	ldr	r2, [r1, #8]
 800b2fa:	690b      	ldr	r3, [r1, #16]
 800b2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b300:	4293      	cmp	r3, r2
 800b302:	bfb8      	it	lt
 800b304:	4613      	movlt	r3, r2
 800b306:	f8c9 3000 	str.w	r3, [r9]
 800b30a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b30e:	4606      	mov	r6, r0
 800b310:	460c      	mov	r4, r1
 800b312:	b112      	cbz	r2, 800b31a <_printf_common+0x2a>
 800b314:	3301      	adds	r3, #1
 800b316:	f8c9 3000 	str.w	r3, [r9]
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	0699      	lsls	r1, r3, #26
 800b31e:	bf42      	ittt	mi
 800b320:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b324:	3302      	addmi	r3, #2
 800b326:	f8c9 3000 	strmi.w	r3, [r9]
 800b32a:	6825      	ldr	r5, [r4, #0]
 800b32c:	f015 0506 	ands.w	r5, r5, #6
 800b330:	d107      	bne.n	800b342 <_printf_common+0x52>
 800b332:	f104 0a19 	add.w	sl, r4, #25
 800b336:	68e3      	ldr	r3, [r4, #12]
 800b338:	f8d9 2000 	ldr.w	r2, [r9]
 800b33c:	1a9b      	subs	r3, r3, r2
 800b33e:	42ab      	cmp	r3, r5
 800b340:	dc28      	bgt.n	800b394 <_printf_common+0xa4>
 800b342:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b346:	6822      	ldr	r2, [r4, #0]
 800b348:	3300      	adds	r3, #0
 800b34a:	bf18      	it	ne
 800b34c:	2301      	movne	r3, #1
 800b34e:	0692      	lsls	r2, r2, #26
 800b350:	d42d      	bmi.n	800b3ae <_printf_common+0xbe>
 800b352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b356:	4639      	mov	r1, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	47c0      	blx	r8
 800b35c:	3001      	adds	r0, #1
 800b35e:	d020      	beq.n	800b3a2 <_printf_common+0xb2>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	68e5      	ldr	r5, [r4, #12]
 800b364:	f8d9 2000 	ldr.w	r2, [r9]
 800b368:	f003 0306 	and.w	r3, r3, #6
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	bf08      	it	eq
 800b370:	1aad      	subeq	r5, r5, r2
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	6922      	ldr	r2, [r4, #16]
 800b376:	bf0c      	ite	eq
 800b378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b37c:	2500      	movne	r5, #0
 800b37e:	4293      	cmp	r3, r2
 800b380:	bfc4      	itt	gt
 800b382:	1a9b      	subgt	r3, r3, r2
 800b384:	18ed      	addgt	r5, r5, r3
 800b386:	f04f 0900 	mov.w	r9, #0
 800b38a:	341a      	adds	r4, #26
 800b38c:	454d      	cmp	r5, r9
 800b38e:	d11a      	bne.n	800b3c6 <_printf_common+0xd6>
 800b390:	2000      	movs	r0, #0
 800b392:	e008      	b.n	800b3a6 <_printf_common+0xb6>
 800b394:	2301      	movs	r3, #1
 800b396:	4652      	mov	r2, sl
 800b398:	4639      	mov	r1, r7
 800b39a:	4630      	mov	r0, r6
 800b39c:	47c0      	blx	r8
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d103      	bne.n	800b3aa <_printf_common+0xba>
 800b3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3aa:	3501      	adds	r5, #1
 800b3ac:	e7c3      	b.n	800b336 <_printf_common+0x46>
 800b3ae:	18e1      	adds	r1, r4, r3
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	2030      	movs	r0, #48	; 0x30
 800b3b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3b8:	4422      	add	r2, r4
 800b3ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3c2:	3302      	adds	r3, #2
 800b3c4:	e7c5      	b.n	800b352 <_printf_common+0x62>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	47c0      	blx	r8
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d0e6      	beq.n	800b3a2 <_printf_common+0xb2>
 800b3d4:	f109 0901 	add.w	r9, r9, #1
 800b3d8:	e7d8      	b.n	800b38c <_printf_common+0x9c>
	...

0800b3dc <_printf_i>:
 800b3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	7e09      	ldrb	r1, [r1, #24]
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	296e      	cmp	r1, #110	; 0x6e
 800b3ec:	4617      	mov	r7, r2
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	4698      	mov	r8, r3
 800b3f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3f4:	f000 80b3 	beq.w	800b55e <_printf_i+0x182>
 800b3f8:	d822      	bhi.n	800b440 <_printf_i+0x64>
 800b3fa:	2963      	cmp	r1, #99	; 0x63
 800b3fc:	d036      	beq.n	800b46c <_printf_i+0x90>
 800b3fe:	d80a      	bhi.n	800b416 <_printf_i+0x3a>
 800b400:	2900      	cmp	r1, #0
 800b402:	f000 80b9 	beq.w	800b578 <_printf_i+0x19c>
 800b406:	2958      	cmp	r1, #88	; 0x58
 800b408:	f000 8083 	beq.w	800b512 <_printf_i+0x136>
 800b40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b410:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b414:	e032      	b.n	800b47c <_printf_i+0xa0>
 800b416:	2964      	cmp	r1, #100	; 0x64
 800b418:	d001      	beq.n	800b41e <_printf_i+0x42>
 800b41a:	2969      	cmp	r1, #105	; 0x69
 800b41c:	d1f6      	bne.n	800b40c <_printf_i+0x30>
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	6813      	ldr	r3, [r2, #0]
 800b422:	0605      	lsls	r5, r0, #24
 800b424:	f103 0104 	add.w	r1, r3, #4
 800b428:	d52a      	bpl.n	800b480 <_printf_i+0xa4>
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6011      	str	r1, [r2, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da03      	bge.n	800b43a <_printf_i+0x5e>
 800b432:	222d      	movs	r2, #45	; 0x2d
 800b434:	425b      	negs	r3, r3
 800b436:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b43a:	486f      	ldr	r0, [pc, #444]	; (800b5f8 <_printf_i+0x21c>)
 800b43c:	220a      	movs	r2, #10
 800b43e:	e039      	b.n	800b4b4 <_printf_i+0xd8>
 800b440:	2973      	cmp	r1, #115	; 0x73
 800b442:	f000 809d 	beq.w	800b580 <_printf_i+0x1a4>
 800b446:	d808      	bhi.n	800b45a <_printf_i+0x7e>
 800b448:	296f      	cmp	r1, #111	; 0x6f
 800b44a:	d020      	beq.n	800b48e <_printf_i+0xb2>
 800b44c:	2970      	cmp	r1, #112	; 0x70
 800b44e:	d1dd      	bne.n	800b40c <_printf_i+0x30>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	f043 0320 	orr.w	r3, r3, #32
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	e003      	b.n	800b462 <_printf_i+0x86>
 800b45a:	2975      	cmp	r1, #117	; 0x75
 800b45c:	d017      	beq.n	800b48e <_printf_i+0xb2>
 800b45e:	2978      	cmp	r1, #120	; 0x78
 800b460:	d1d4      	bne.n	800b40c <_printf_i+0x30>
 800b462:	2378      	movs	r3, #120	; 0x78
 800b464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b468:	4864      	ldr	r0, [pc, #400]	; (800b5fc <_printf_i+0x220>)
 800b46a:	e055      	b.n	800b518 <_printf_i+0x13c>
 800b46c:	6813      	ldr	r3, [r2, #0]
 800b46e:	1d19      	adds	r1, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6011      	str	r1, [r2, #0]
 800b474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b47c:	2301      	movs	r3, #1
 800b47e:	e08c      	b.n	800b59a <_printf_i+0x1be>
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6011      	str	r1, [r2, #0]
 800b484:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b488:	bf18      	it	ne
 800b48a:	b21b      	sxthne	r3, r3
 800b48c:	e7cf      	b.n	800b42e <_printf_i+0x52>
 800b48e:	6813      	ldr	r3, [r2, #0]
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	1d18      	adds	r0, r3, #4
 800b494:	6010      	str	r0, [r2, #0]
 800b496:	0628      	lsls	r0, r5, #24
 800b498:	d501      	bpl.n	800b49e <_printf_i+0xc2>
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	e002      	b.n	800b4a4 <_printf_i+0xc8>
 800b49e:	0668      	lsls	r0, r5, #25
 800b4a0:	d5fb      	bpl.n	800b49a <_printf_i+0xbe>
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	4854      	ldr	r0, [pc, #336]	; (800b5f8 <_printf_i+0x21c>)
 800b4a6:	296f      	cmp	r1, #111	; 0x6f
 800b4a8:	bf14      	ite	ne
 800b4aa:	220a      	movne	r2, #10
 800b4ac:	2208      	moveq	r2, #8
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4b4:	6865      	ldr	r5, [r4, #4]
 800b4b6:	60a5      	str	r5, [r4, #8]
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	f2c0 8095 	blt.w	800b5e8 <_printf_i+0x20c>
 800b4be:	6821      	ldr	r1, [r4, #0]
 800b4c0:	f021 0104 	bic.w	r1, r1, #4
 800b4c4:	6021      	str	r1, [r4, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d13d      	bne.n	800b546 <_printf_i+0x16a>
 800b4ca:	2d00      	cmp	r5, #0
 800b4cc:	f040 808e 	bne.w	800b5ec <_printf_i+0x210>
 800b4d0:	4665      	mov	r5, ip
 800b4d2:	2a08      	cmp	r2, #8
 800b4d4:	d10b      	bne.n	800b4ee <_printf_i+0x112>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	07db      	lsls	r3, r3, #31
 800b4da:	d508      	bpl.n	800b4ee <_printf_i+0x112>
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	bfde      	ittt	le
 800b4e4:	2330      	movle	r3, #48	; 0x30
 800b4e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4ee:	ebac 0305 	sub.w	r3, ip, r5
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	f8cd 8000 	str.w	r8, [sp]
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	aa03      	add	r2, sp, #12
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff fef6 	bl	800b2f0 <_printf_common>
 800b504:	3001      	adds	r0, #1
 800b506:	d14d      	bne.n	800b5a4 <_printf_i+0x1c8>
 800b508:	f04f 30ff 	mov.w	r0, #4294967295
 800b50c:	b005      	add	sp, #20
 800b50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b512:	4839      	ldr	r0, [pc, #228]	; (800b5f8 <_printf_i+0x21c>)
 800b514:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b518:	6813      	ldr	r3, [r2, #0]
 800b51a:	6821      	ldr	r1, [r4, #0]
 800b51c:	1d1d      	adds	r5, r3, #4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6015      	str	r5, [r2, #0]
 800b522:	060a      	lsls	r2, r1, #24
 800b524:	d50b      	bpl.n	800b53e <_printf_i+0x162>
 800b526:	07ca      	lsls	r2, r1, #31
 800b528:	bf44      	itt	mi
 800b52a:	f041 0120 	orrmi.w	r1, r1, #32
 800b52e:	6021      	strmi	r1, [r4, #0]
 800b530:	b91b      	cbnz	r3, 800b53a <_printf_i+0x15e>
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	f022 0220 	bic.w	r2, r2, #32
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	2210      	movs	r2, #16
 800b53c:	e7b7      	b.n	800b4ae <_printf_i+0xd2>
 800b53e:	064d      	lsls	r5, r1, #25
 800b540:	bf48      	it	mi
 800b542:	b29b      	uxthmi	r3, r3
 800b544:	e7ef      	b.n	800b526 <_printf_i+0x14a>
 800b546:	4665      	mov	r5, ip
 800b548:	fbb3 f1f2 	udiv	r1, r3, r2
 800b54c:	fb02 3311 	mls	r3, r2, r1, r3
 800b550:	5cc3      	ldrb	r3, [r0, r3]
 800b552:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b556:	460b      	mov	r3, r1
 800b558:	2900      	cmp	r1, #0
 800b55a:	d1f5      	bne.n	800b548 <_printf_i+0x16c>
 800b55c:	e7b9      	b.n	800b4d2 <_printf_i+0xf6>
 800b55e:	6813      	ldr	r3, [r2, #0]
 800b560:	6825      	ldr	r5, [r4, #0]
 800b562:	6961      	ldr	r1, [r4, #20]
 800b564:	1d18      	adds	r0, r3, #4
 800b566:	6010      	str	r0, [r2, #0]
 800b568:	0628      	lsls	r0, r5, #24
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	d501      	bpl.n	800b572 <_printf_i+0x196>
 800b56e:	6019      	str	r1, [r3, #0]
 800b570:	e002      	b.n	800b578 <_printf_i+0x19c>
 800b572:	066a      	lsls	r2, r5, #25
 800b574:	d5fb      	bpl.n	800b56e <_printf_i+0x192>
 800b576:	8019      	strh	r1, [r3, #0]
 800b578:	2300      	movs	r3, #0
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	4665      	mov	r5, ip
 800b57e:	e7b9      	b.n	800b4f4 <_printf_i+0x118>
 800b580:	6813      	ldr	r3, [r2, #0]
 800b582:	1d19      	adds	r1, r3, #4
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	681d      	ldr	r5, [r3, #0]
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	2100      	movs	r1, #0
 800b58c:	4628      	mov	r0, r5
 800b58e:	f7f4 fe2f 	bl	80001f0 <memchr>
 800b592:	b108      	cbz	r0, 800b598 <_printf_i+0x1bc>
 800b594:	1b40      	subs	r0, r0, r5
 800b596:	6060      	str	r0, [r4, #4]
 800b598:	6863      	ldr	r3, [r4, #4]
 800b59a:	6123      	str	r3, [r4, #16]
 800b59c:	2300      	movs	r3, #0
 800b59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a2:	e7a7      	b.n	800b4f4 <_printf_i+0x118>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	47c0      	blx	r8
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d0aa      	beq.n	800b508 <_printf_i+0x12c>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	079b      	lsls	r3, r3, #30
 800b5b6:	d413      	bmi.n	800b5e0 <_printf_i+0x204>
 800b5b8:	68e0      	ldr	r0, [r4, #12]
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	4298      	cmp	r0, r3
 800b5be:	bfb8      	it	lt
 800b5c0:	4618      	movlt	r0, r3
 800b5c2:	e7a3      	b.n	800b50c <_printf_i+0x130>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	464a      	mov	r2, r9
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	47c0      	blx	r8
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d09a      	beq.n	800b508 <_printf_i+0x12c>
 800b5d2:	3501      	adds	r5, #1
 800b5d4:	68e3      	ldr	r3, [r4, #12]
 800b5d6:	9a03      	ldr	r2, [sp, #12]
 800b5d8:	1a9b      	subs	r3, r3, r2
 800b5da:	42ab      	cmp	r3, r5
 800b5dc:	dcf2      	bgt.n	800b5c4 <_printf_i+0x1e8>
 800b5de:	e7eb      	b.n	800b5b8 <_printf_i+0x1dc>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	f104 0919 	add.w	r9, r4, #25
 800b5e6:	e7f5      	b.n	800b5d4 <_printf_i+0x1f8>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1ac      	bne.n	800b546 <_printf_i+0x16a>
 800b5ec:	7803      	ldrb	r3, [r0, #0]
 800b5ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5f6:	e76c      	b.n	800b4d2 <_printf_i+0xf6>
 800b5f8:	0800bb81 	.word	0x0800bb81
 800b5fc:	0800bb92 	.word	0x0800bb92

0800b600 <memmove>:
 800b600:	4288      	cmp	r0, r1
 800b602:	b510      	push	{r4, lr}
 800b604:	eb01 0302 	add.w	r3, r1, r2
 800b608:	d807      	bhi.n	800b61a <memmove+0x1a>
 800b60a:	1e42      	subs	r2, r0, #1
 800b60c:	4299      	cmp	r1, r3
 800b60e:	d00a      	beq.n	800b626 <memmove+0x26>
 800b610:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b614:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b618:	e7f8      	b.n	800b60c <memmove+0xc>
 800b61a:	4283      	cmp	r3, r0
 800b61c:	d9f5      	bls.n	800b60a <memmove+0xa>
 800b61e:	1881      	adds	r1, r0, r2
 800b620:	1ad2      	subs	r2, r2, r3
 800b622:	42d3      	cmn	r3, r2
 800b624:	d100      	bne.n	800b628 <memmove+0x28>
 800b626:	bd10      	pop	{r4, pc}
 800b628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b62c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b630:	e7f7      	b.n	800b622 <memmove+0x22>
	...

0800b634 <_free_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4605      	mov	r5, r0
 800b638:	2900      	cmp	r1, #0
 800b63a:	d045      	beq.n	800b6c8 <_free_r+0x94>
 800b63c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b640:	1f0c      	subs	r4, r1, #4
 800b642:	2b00      	cmp	r3, #0
 800b644:	bfb8      	it	lt
 800b646:	18e4      	addlt	r4, r4, r3
 800b648:	f000 f8d2 	bl	800b7f0 <__malloc_lock>
 800b64c:	4a1f      	ldr	r2, [pc, #124]	; (800b6cc <_free_r+0x98>)
 800b64e:	6813      	ldr	r3, [r2, #0]
 800b650:	4610      	mov	r0, r2
 800b652:	b933      	cbnz	r3, 800b662 <_free_r+0x2e>
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	6014      	str	r4, [r2, #0]
 800b658:	4628      	mov	r0, r5
 800b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65e:	f000 b8c8 	b.w	800b7f2 <__malloc_unlock>
 800b662:	42a3      	cmp	r3, r4
 800b664:	d90c      	bls.n	800b680 <_free_r+0x4c>
 800b666:	6821      	ldr	r1, [r4, #0]
 800b668:	1862      	adds	r2, r4, r1
 800b66a:	4293      	cmp	r3, r2
 800b66c:	bf04      	itt	eq
 800b66e:	681a      	ldreq	r2, [r3, #0]
 800b670:	685b      	ldreq	r3, [r3, #4]
 800b672:	6063      	str	r3, [r4, #4]
 800b674:	bf04      	itt	eq
 800b676:	1852      	addeq	r2, r2, r1
 800b678:	6022      	streq	r2, [r4, #0]
 800b67a:	6004      	str	r4, [r0, #0]
 800b67c:	e7ec      	b.n	800b658 <_free_r+0x24>
 800b67e:	4613      	mov	r3, r2
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	b10a      	cbz	r2, 800b688 <_free_r+0x54>
 800b684:	42a2      	cmp	r2, r4
 800b686:	d9fa      	bls.n	800b67e <_free_r+0x4a>
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	1858      	adds	r0, r3, r1
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d10b      	bne.n	800b6a8 <_free_r+0x74>
 800b690:	6820      	ldr	r0, [r4, #0]
 800b692:	4401      	add	r1, r0
 800b694:	1858      	adds	r0, r3, r1
 800b696:	4282      	cmp	r2, r0
 800b698:	6019      	str	r1, [r3, #0]
 800b69a:	d1dd      	bne.n	800b658 <_free_r+0x24>
 800b69c:	6810      	ldr	r0, [r2, #0]
 800b69e:	6852      	ldr	r2, [r2, #4]
 800b6a0:	605a      	str	r2, [r3, #4]
 800b6a2:	4401      	add	r1, r0
 800b6a4:	6019      	str	r1, [r3, #0]
 800b6a6:	e7d7      	b.n	800b658 <_free_r+0x24>
 800b6a8:	d902      	bls.n	800b6b0 <_free_r+0x7c>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	e7d3      	b.n	800b658 <_free_r+0x24>
 800b6b0:	6820      	ldr	r0, [r4, #0]
 800b6b2:	1821      	adds	r1, r4, r0
 800b6b4:	428a      	cmp	r2, r1
 800b6b6:	bf04      	itt	eq
 800b6b8:	6811      	ldreq	r1, [r2, #0]
 800b6ba:	6852      	ldreq	r2, [r2, #4]
 800b6bc:	6062      	str	r2, [r4, #4]
 800b6be:	bf04      	itt	eq
 800b6c0:	1809      	addeq	r1, r1, r0
 800b6c2:	6021      	streq	r1, [r4, #0]
 800b6c4:	605c      	str	r4, [r3, #4]
 800b6c6:	e7c7      	b.n	800b658 <_free_r+0x24>
 800b6c8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20001b34 	.word	0x20001b34

0800b6d0 <_malloc_r>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	1ccd      	adds	r5, r1, #3
 800b6d4:	f025 0503 	bic.w	r5, r5, #3
 800b6d8:	3508      	adds	r5, #8
 800b6da:	2d0c      	cmp	r5, #12
 800b6dc:	bf38      	it	cc
 800b6de:	250c      	movcc	r5, #12
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	db01      	blt.n	800b6ea <_malloc_r+0x1a>
 800b6e6:	42a9      	cmp	r1, r5
 800b6e8:	d903      	bls.n	800b6f2 <_malloc_r+0x22>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	6033      	str	r3, [r6, #0]
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	bd70      	pop	{r4, r5, r6, pc}
 800b6f2:	f000 f87d 	bl	800b7f0 <__malloc_lock>
 800b6f6:	4a21      	ldr	r2, [pc, #132]	; (800b77c <_malloc_r+0xac>)
 800b6f8:	6814      	ldr	r4, [r2, #0]
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	b991      	cbnz	r1, 800b724 <_malloc_r+0x54>
 800b6fe:	4c20      	ldr	r4, [pc, #128]	; (800b780 <_malloc_r+0xb0>)
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	b91b      	cbnz	r3, 800b70c <_malloc_r+0x3c>
 800b704:	4630      	mov	r0, r6
 800b706:	f000 f863 	bl	800b7d0 <_sbrk_r>
 800b70a:	6020      	str	r0, [r4, #0]
 800b70c:	4629      	mov	r1, r5
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 f85e 	bl	800b7d0 <_sbrk_r>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d124      	bne.n	800b762 <_malloc_r+0x92>
 800b718:	230c      	movs	r3, #12
 800b71a:	6033      	str	r3, [r6, #0]
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 f868 	bl	800b7f2 <__malloc_unlock>
 800b722:	e7e4      	b.n	800b6ee <_malloc_r+0x1e>
 800b724:	680b      	ldr	r3, [r1, #0]
 800b726:	1b5b      	subs	r3, r3, r5
 800b728:	d418      	bmi.n	800b75c <_malloc_r+0x8c>
 800b72a:	2b0b      	cmp	r3, #11
 800b72c:	d90f      	bls.n	800b74e <_malloc_r+0x7e>
 800b72e:	600b      	str	r3, [r1, #0]
 800b730:	50cd      	str	r5, [r1, r3]
 800b732:	18cc      	adds	r4, r1, r3
 800b734:	4630      	mov	r0, r6
 800b736:	f000 f85c 	bl	800b7f2 <__malloc_unlock>
 800b73a:	f104 000b 	add.w	r0, r4, #11
 800b73e:	1d23      	adds	r3, r4, #4
 800b740:	f020 0007 	bic.w	r0, r0, #7
 800b744:	1ac3      	subs	r3, r0, r3
 800b746:	d0d3      	beq.n	800b6f0 <_malloc_r+0x20>
 800b748:	425a      	negs	r2, r3
 800b74a:	50e2      	str	r2, [r4, r3]
 800b74c:	e7d0      	b.n	800b6f0 <_malloc_r+0x20>
 800b74e:	428c      	cmp	r4, r1
 800b750:	684b      	ldr	r3, [r1, #4]
 800b752:	bf16      	itet	ne
 800b754:	6063      	strne	r3, [r4, #4]
 800b756:	6013      	streq	r3, [r2, #0]
 800b758:	460c      	movne	r4, r1
 800b75a:	e7eb      	b.n	800b734 <_malloc_r+0x64>
 800b75c:	460c      	mov	r4, r1
 800b75e:	6849      	ldr	r1, [r1, #4]
 800b760:	e7cc      	b.n	800b6fc <_malloc_r+0x2c>
 800b762:	1cc4      	adds	r4, r0, #3
 800b764:	f024 0403 	bic.w	r4, r4, #3
 800b768:	42a0      	cmp	r0, r4
 800b76a:	d005      	beq.n	800b778 <_malloc_r+0xa8>
 800b76c:	1a21      	subs	r1, r4, r0
 800b76e:	4630      	mov	r0, r6
 800b770:	f000 f82e 	bl	800b7d0 <_sbrk_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d0cf      	beq.n	800b718 <_malloc_r+0x48>
 800b778:	6025      	str	r5, [r4, #0]
 800b77a:	e7db      	b.n	800b734 <_malloc_r+0x64>
 800b77c:	20001b34 	.word	0x20001b34
 800b780:	20001b38 	.word	0x20001b38

0800b784 <_realloc_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4607      	mov	r7, r0
 800b788:	4614      	mov	r4, r2
 800b78a:	460e      	mov	r6, r1
 800b78c:	b921      	cbnz	r1, 800b798 <_realloc_r+0x14>
 800b78e:	4611      	mov	r1, r2
 800b790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b794:	f7ff bf9c 	b.w	800b6d0 <_malloc_r>
 800b798:	b922      	cbnz	r2, 800b7a4 <_realloc_r+0x20>
 800b79a:	f7ff ff4b 	bl	800b634 <_free_r>
 800b79e:	4625      	mov	r5, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a4:	f000 f826 	bl	800b7f4 <_malloc_usable_size_r>
 800b7a8:	42a0      	cmp	r0, r4
 800b7aa:	d20f      	bcs.n	800b7cc <_realloc_r+0x48>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f7ff ff8e 	bl	800b6d0 <_malloc_r>
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0f2      	beq.n	800b7a0 <_realloc_r+0x1c>
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4622      	mov	r2, r4
 800b7be:	f7ff fbf7 	bl	800afb0 <memcpy>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff ff35 	bl	800b634 <_free_r>
 800b7ca:	e7e9      	b.n	800b7a0 <_realloc_r+0x1c>
 800b7cc:	4635      	mov	r5, r6
 800b7ce:	e7e7      	b.n	800b7a0 <_realloc_r+0x1c>

0800b7d0 <_sbrk_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4c06      	ldr	r4, [pc, #24]	; (800b7ec <_sbrk_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	f7f5 f94c 	bl	8000a78 <_sbrk>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_sbrk_r+0x1a>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_sbrk_r+0x1a>
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20002638 	.word	0x20002638

0800b7f0 <__malloc_lock>:
 800b7f0:	4770      	bx	lr

0800b7f2 <__malloc_unlock>:
 800b7f2:	4770      	bx	lr

0800b7f4 <_malloc_usable_size_r>:
 800b7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f8:	1f18      	subs	r0, r3, #4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bfbc      	itt	lt
 800b7fe:	580b      	ldrlt	r3, [r1, r0]
 800b800:	18c0      	addlt	r0, r0, r3
 800b802:	4770      	bx	lr

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
