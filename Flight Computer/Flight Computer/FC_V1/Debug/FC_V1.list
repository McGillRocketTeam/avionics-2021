
FC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000903c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080091e0  080091e0  000191e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009310  08009310  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08009310  08009310  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009310  08009310  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae4  2000007c  08009394  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b60  08009394  00021b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d13e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6a  00000000  00000000  0004d1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023d0  00000000  00000000  00050c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002268  00000000  00000000  00053028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004f31  00000000  00000000  00055290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016fe5  00000000  00000000  0005a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de0d1  00000000  00000000  000711a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f1c  00000000  00000000  0014f2f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091c4 	.word	0x080091c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080091c4 	.word	0x080091c4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	461a      	mov	r2, r3
 8000b64:	460b      	mov	r3, r1
 8000b66:	72fb      	strb	r3, [r7, #11]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685c      	ldr	r4, [r3, #4]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6898      	ldr	r0, [r3, #8]
 8000b74:	893b      	ldrh	r3, [r7, #8]
 8000b76:	7af9      	ldrb	r1, [r7, #11]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	47a0      	blx	r4
 8000b7c:	6178      	str	r0, [r7, #20]
  return ret;
 8000b7e:	697b      	ldr	r3, [r7, #20]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd90      	pop	{r4, r7, pc}

08000b88 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	461a      	mov	r2, r3
 8000b94:	460b      	mov	r3, r1
 8000b96:	72fb      	strb	r3, [r7, #11]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681c      	ldr	r4, [r3, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6898      	ldr	r0, [r3, #8]
 8000ba4:	893b      	ldrh	r3, [r7, #8]
 8000ba6:	7af9      	ldrb	r1, [r7, #11]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	47a0      	blx	r4
 8000bac:	6178      	str	r0, [r7, #20]
  return ret;
 8000bae:	697b      	ldr	r3, [r7, #20]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	371c      	adds	r7, #28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}

08000bb8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000bc4:	f107 0208 	add.w	r2, r7, #8
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffc3 	bl	8000b58 <lps22hh_read_reg>
 8000bd2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10f      	bne.n	8000bfa <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	7a3b      	ldrb	r3, [r7, #8]
 8000be4:	f362 0341 	bfi	r3, r2, #1, #1
 8000be8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000bea:	f107 0208 	add.w	r2, r7, #8
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffc8 	bl	8000b88 <lps22hh_write_reg>
 8000bf8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000c10:	f107 0210 	add.w	r2, r7, #16
 8000c14:	2301      	movs	r3, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff9d 	bl	8000b58 <lps22hh_read_reg>
 8000c1e:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d107      	bne.n	8000c36 <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	2111      	movs	r1, #17
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ff92 	bl	8000b58 <lps22hh_read_reg>
 8000c34:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10f      	bne.n	8000c5c <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	7c3b      	ldrb	r3, [r7, #16]
 8000c46:	f362 1306 	bfi	r3, r2, #4, #3
 8000c4a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	2301      	movs	r3, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff97 	bl	8000b88 <lps22hh_write_reg>
 8000c5a:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d119      	bne.n	8000c96 <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c72:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	7b3b      	ldrb	r3, [r7, #12]
 8000c80:	f362 0300 	bfi	r3, r2, #0, #1
 8000c84:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8000c86:	f107 020c 	add.w	r2, r7, #12
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2111      	movs	r1, #17
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff7a 	bl	8000b88 <lps22hh_write_reg>
 8000c94:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 8000c96:	697b      	ldr	r3, [r7, #20]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8000caa:	2301      	movs	r3, #1
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	210f      	movs	r1, #15
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff51 	bl	8000b58 <lps22hh_read_reg>
 8000cb6:	60f8      	str	r0, [r7, #12]
  return ret;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000cce:	f107 0208 	add.w	r2, r7, #8
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2111      	movs	r1, #17
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff3e 	bl	8000b58 <lps22hh_read_reg>
 8000cdc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10f      	bne.n	8000d04 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	7a3b      	ldrb	r3, [r7, #8]
 8000cee:	f362 0382 	bfi	r3, r2, #2, #1
 8000cf2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000cf4:	f107 0208 	add.w	r2, r7, #8
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2111      	movs	r1, #17
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff43 	bl	8000b88 <lps22hh_write_reg>
 8000d02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2111      	movs	r1, #17
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff19 	bl	8000b58 <lps22hh_read_reg>
 8000d26:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8000d28:	7a3b      	ldrb	r3, [r7, #8]
 8000d2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
  return ret;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	72fb      	strb	r3, [r7, #11]
 8000d50:	4613      	mov	r3, r2
 8000d52:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	685c      	ldr	r4, [r3, #4]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6898      	ldr	r0, [r3, #8]
 8000d5c:	893b      	ldrh	r3, [r7, #8]
 8000d5e:	7af9      	ldrb	r1, [r7, #11]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	47a0      	blx	r4
 8000d64:	6178      	str	r0, [r7, #20]
  return ret;
 8000d66:	697b      	ldr	r3, [r7, #20]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	72fb      	strb	r3, [r7, #11]
 8000d80:	4613      	mov	r3, r2
 8000d82:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681c      	ldr	r4, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6898      	ldr	r0, [r3, #8]
 8000d8c:	893b      	ldrh	r3, [r7, #8]
 8000d8e:	7af9      	ldrb	r1, [r7, #11]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	47a0      	blx	r4
 8000d94:	6178      	str	r0, [r7, #20]
  return ret;
 8000d96:	697b      	ldr	r3, [r7, #20]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8000dac:	f107 0208 	add.w	r2, r7, #8
 8000db0:	2301      	movs	r3, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ffc3 	bl	8000d40 <lsm6dsr_read_reg>
 8000dba:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <lsm6dsr_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	7a3b      	ldrb	r3, [r7, #8]
 8000dcc:	f362 0383 	bfi	r3, r2, #2, #2
 8000dd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8000dd2:	f107 0208 	add.w	r2, r7, #8
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffc8 	bl	8000d70 <lsm6dsr_write_reg>
 8000de0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fb50 	bl	80014a8 <lsm6dsr_fsm_enable_get>
 8000e08:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 80c4 	bne.w	8000f9a <lsm6dsr_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000e12:	7b3b      	ldrb	r3, [r7, #12]
 8000e14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8000e1a:	7b3b      	ldrb	r3, [r7, #12]
 8000e1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e20:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8000e26:	7b3b      	ldrb	r3, [r7, #12]
 8000e28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e2c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e38:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8000e3e:	7b3b      	ldrb	r3, [r7, #12]
 8000e40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e44:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8000e4a:	7b3b      	ldrb	r3, [r7, #12]
 8000e4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8000e56:	7b3b      	ldrb	r3, [r7, #12]
 8000e58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e5c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000e68:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8000e6e:	7b7b      	ldrb	r3, [r7, #13]
 8000e70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e80:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e8c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8000e92:	7b7b      	ldrb	r3, [r7, #13]
 8000e94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e98:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ea4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000eb0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8000eb6:	7b7b      	ldrb	r3, [r7, #13]
 8000eb8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000ebc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000ec8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d163      	bne.n	8000f9a <lsm6dsr_xl_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8000ed2:	f107 030b 	add.w	r3, r7, #11
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 fb11 	bl	8001500 <lsm6dsr_fsm_data_rate_get>
 8000ede:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d159      	bne.n	8000f9a <lsm6dsr_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8000ee6:	7afb      	ldrb	r3, [r7, #11]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d853      	bhi.n	8000f94 <lsm6dsr_xl_data_rate_set+0x1a8>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <lsm6dsr_xl_data_rate_set+0x108>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f35 	.word	0x08000f35
 8000f00:	08000f5f 	.word	0x08000f5f
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <lsm6dsr_xl_data_rate_set+0x124>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000f0e:	e045      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	75fb      	strb	r3, [r7, #23]
            break;
 8000f14:	e042      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <lsm6dsr_xl_data_rate_set+0x136>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000f20:	e03c      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d102      	bne.n	8000f2e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8000f2c:	e036      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	75fb      	strb	r3, [r7, #23]
            break;
 8000f32:	e033      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <lsm6dsr_xl_data_rate_set+0x154>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000f3e:	e02d      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8000f46:	2303      	movs	r3, #3
 8000f48:	75fb      	strb	r3, [r7, #23]
            break;
 8000f4a:	e027      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d102      	bne.n	8000f58 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8000f52:	2303      	movs	r3, #3
 8000f54:	75fb      	strb	r3, [r7, #23]
            break;
 8000f56:	e021      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8000f5c:	e01e      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000f64:	2304      	movs	r3, #4
 8000f66:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000f68:	e018      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000f70:	2304      	movs	r3, #4
 8000f72:	75fb      	strb	r3, [r7, #23]
            break;
 8000f74:	e012      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d102      	bne.n	8000f82 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	75fb      	strb	r3, [r7, #23]
            break;
 8000f80:	e00c      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d102      	bne.n	8000f8e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8000f8c:	e006      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	75fb      	strb	r3, [r7, #23]
            break;
 8000f92:	e003      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	75fb      	strb	r3, [r7, #23]
            break;
 8000f98:	e000      	b.n	8000f9c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8000f9a:	bf00      	nop
    }
  }

  if (ret == 0) {
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <lsm6dsr_xl_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8000fa2:	f107 0208 	add.w	r2, r7, #8
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2110      	movs	r1, #16
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fec8 	bl	8000d40 <lsm6dsr_read_reg>
 8000fb0:	6138      	str	r0, [r7, #16]
                           1);
  }

  if (ret == 0) {
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10f      	bne.n	8000fd8 <lsm6dsr_xl_data_rate_set+0x1ec>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	7a3b      	ldrb	r3, [r7, #8]
 8000fc2:	f362 1307 	bfi	r3, r2, #4, #4
 8000fc6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8000fc8:	f107 0208 	add.w	r2, r7, #8
 8000fcc:	2301      	movs	r3, #1
 8000fce:	2110      	movs	r1, #16
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fecd 	bl	8000d70 <lsm6dsr_write_reg>
 8000fd6:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000fd8:	693b      	ldr	r3, [r7, #16]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop

08000fe4 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2111      	movs	r1, #17
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fea1 	bl	8000d40 <lsm6dsr_read_reg>
 8000ffe:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10f      	bne.n	8001026 <lsm6dsr_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	b2da      	uxtb	r2, r3
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	f362 0303 	bfi	r3, r2, #0, #4
 8001014:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001016:	f107 0208 	add.w	r2, r7, #8
 800101a:	2301      	movs	r3, #1
 800101c:	2111      	movs	r1, #17
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fea6 	bl	8000d70 <lsm6dsr_write_reg>
 8001024:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fa2e 	bl	80014a8 <lsm6dsr_fsm_enable_get>
 800104c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 80c4 	bne.w	80011de <lsm6dsr_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800105c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001064:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001066:	4313      	orrs	r3, r2
 8001068:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001070:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001072:	4313      	orrs	r3, r2
 8001074:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800107c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800107e:	4313      	orrs	r3, r2
 8001080:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001082:	7b3b      	ldrb	r3, [r7, #12]
 8001084:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001088:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800108a:	4313      	orrs	r3, r2
 800108c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800108e:	7b3b      	ldrb	r3, [r7, #12]
 8001090:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001094:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001096:	4313      	orrs	r3, r2
 8001098:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80010a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010c4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80010d0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80010d6:	7b7b      	ldrb	r3, [r7, #13]
 80010d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80010dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80010ee:	7b7b      	ldrb	r3, [r7, #13]
 80010f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001100:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001102:	4313      	orrs	r3, r2
 8001104:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8001106:	7b7b      	ldrb	r3, [r7, #13]
 8001108:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800110c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800110e:	4313      	orrs	r3, r2
 8001110:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001112:	2b01      	cmp	r3, #1
 8001114:	d163      	bne.n	80011de <lsm6dsr_gy_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8001116:	f107 030b 	add.w	r3, r7, #11
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f9ef 	bl	8001500 <lsm6dsr_fsm_data_rate_get>
 8001122:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d159      	bne.n	80011de <lsm6dsr_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d853      	bhi.n	80011d8 <lsm6dsr_gy_data_rate_set+0x1a8>
 8001130:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <lsm6dsr_gy_data_rate_set+0x108>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001149 	.word	0x08001149
 800113c:	0800115b 	.word	0x0800115b
 8001140:	08001179 	.word	0x08001179
 8001144:	080011a3 	.word	0x080011a3
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <lsm6dsr_gy_data_rate_set+0x124>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8001152:	e045      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	75fb      	strb	r3, [r7, #23]
            break;
 8001158:	e042      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <lsm6dsr_gy_data_rate_set+0x136>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001160:	2302      	movs	r3, #2
 8001162:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8001164:	e03c      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d102      	bne.n	8001172 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800116c:	2302      	movs	r3, #2
 800116e:	75fb      	strb	r3, [r7, #23]
            break;
 8001170:	e036      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	75fb      	strb	r3, [r7, #23]
            break;
 8001176:	e033      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <lsm6dsr_gy_data_rate_set+0x154>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800117e:	2303      	movs	r3, #3
 8001180:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8001182:	e02d      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800118a:	2303      	movs	r3, #3
 800118c:	75fb      	strb	r3, [r7, #23]
            break;
 800118e:	e027      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d102      	bne.n	800119c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001196:	2303      	movs	r3, #3
 8001198:	75fb      	strb	r3, [r7, #23]
            break;
 800119a:	e021      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	75fb      	strb	r3, [r7, #23]
            break;
 80011a0:	e01e      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80011a8:	2304      	movs	r3, #4
 80011aa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80011ac:	e018      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d102      	bne.n	80011ba <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80011b4:	2304      	movs	r3, #4
 80011b6:	75fb      	strb	r3, [r7, #23]
            break;
 80011b8:	e012      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d102      	bne.n	80011c6 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80011c0:	2304      	movs	r3, #4
 80011c2:	75fb      	strb	r3, [r7, #23]
            break;
 80011c4:	e00c      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d102      	bne.n	80011d2 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80011cc:	2304      	movs	r3, #4
 80011ce:	75fb      	strb	r3, [r7, #23]
            break;
 80011d0:	e006      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	75fb      	strb	r3, [r7, #23]
            break;
 80011d6:	e003      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	75fb      	strb	r3, [r7, #23]
            break;
 80011dc:	e000      	b.n	80011e0 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80011de:	bf00      	nop
    }
  }

  if (ret == 0) {
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d107      	bne.n	80011f6 <lsm6dsr_gy_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80011e6:	f107 0208 	add.w	r2, r7, #8
 80011ea:	2301      	movs	r3, #1
 80011ec:	2111      	movs	r1, #17
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fda6 	bl	8000d40 <lsm6dsr_read_reg>
 80011f4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10f      	bne.n	800121c <lsm6dsr_gy_data_rate_set+0x1ec>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	b2da      	uxtb	r2, r3
 8001204:	7a3b      	ldrb	r3, [r7, #8]
 8001206:	f362 1307 	bfi	r3, r2, #4, #4
 800120a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800120c:	f107 0208 	add.w	r2, r7, #8
 8001210:	2301      	movs	r3, #1
 8001212:	2111      	movs	r1, #17
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fdab 	bl	8000d70 <lsm6dsr_write_reg>
 800121a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800121c:	693b      	ldr	r3, [r7, #16]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop

08001228 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	2301      	movs	r3, #1
 800123a:	2112      	movs	r1, #18
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd7f 	bl	8000d40 <lsm6dsr_read_reg>
 8001242:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10f      	bne.n	800126a <lsm6dsr_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	7a3b      	ldrb	r3, [r7, #8]
 8001254:	f362 1386 	bfi	r3, r2, #6, #1
 8001258:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800125a:	f107 0208 	add.w	r2, r7, #8
 800125e:	2301      	movs	r3, #1
 8001260:	2112      	movs	r1, #18
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fd84 	bl	8000d70 <lsm6dsr_write_reg>
 8001268:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2301      	movs	r3, #1
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fd59 	bl	8000d40 <lsm6dsr_read_reg>
 800128e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <lsm6dsr_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	f362 1387 	bfi	r3, r2, #6, #2
 80012a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80012a6:	f107 0208 	add.w	r2, r7, #8
 80012aa:	2301      	movs	r3, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fd5e 	bl	8000d70 <lsm6dsr_write_reg>
 80012b4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80012ca:	2301      	movs	r3, #1
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	210f      	movs	r1, #15
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fd35 	bl	8000d40 <lsm6dsr_read_reg>
 80012d6:	60f8      	str	r0, [r7, #12]
  return ret;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	2301      	movs	r3, #1
 80012f4:	2112      	movs	r1, #18
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fd22 	bl	8000d40 <lsm6dsr_read_reg>
 80012fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <lsm6dsr_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	7a3b      	ldrb	r3, [r7, #8]
 800130e:	f362 0300 	bfi	r3, r2, #0, #1
 8001312:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	2301      	movs	r3, #1
 800131a:	2112      	movs	r1, #18
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fd27 	bl	8000d70 <lsm6dsr_write_reg>
 8001322:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	2301      	movs	r3, #1
 800133e:	2112      	movs	r1, #18
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fcfd 	bl	8000d40 <lsm6dsr_read_reg>
 8001346:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001348:	7a3b      	ldrb	r3, [r7, #8]
 800134a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	701a      	strb	r2, [r3, #0]
  return ret;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	2301      	movs	r3, #1
 8001372:	2110      	movs	r1, #16
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fce3 	bl	8000d40 <lsm6dsr_read_reg>
 800137a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <lsm6dsr_xl_filter_lp2_set+0x42>
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	f362 0341 	bfi	r3, r2, #1, #1
 8001390:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8001392:	f107 0208 	add.w	r2, r7, #8
 8001396:	2301      	movs	r3, #1
 8001398:	2110      	movs	r1, #16
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fce8 	bl	8000d70 <lsm6dsr_write_reg>
 80013a0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl,
 80013b8:	f107 0208 	add.w	r2, r7, #8
 80013bc:	2301      	movs	r3, #1
 80013be:	2117      	movs	r1, #23
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fcbd 	bl	8000d40 <lsm6dsr_read_reg>
 80013c6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d121      	bne.n	8001412 <lsm6dsr_xl_hp_path_on_out_set+0x66>
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7a3b      	ldrb	r3, [r7, #8]
 80013da:	f362 0382 	bfi	r3, r2, #2, #1
 80013de:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	7a3b      	ldrb	r3, [r7, #8]
 80013ec:	f362 1304 	bfi	r3, r2, #4, #1
 80013f0:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	7a3b      	ldrb	r3, [r7, #8]
 80013fc:	f362 1347 	bfi	r3, r2, #5, #3
 8001400:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	2301      	movs	r3, #1
 8001408:	2117      	movs	r1, #23
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fcb0 	bl	8000d70 <lsm6dsr_write_reg>
 8001410:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8001428:	f107 0210 	add.w	r2, r7, #16
 800142c:	2301      	movs	r3, #1
 800142e:	2118      	movs	r1, #24
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc85 	bl	8000d40 <lsm6dsr_read_reg>
 8001436:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d111      	bne.n	8001462 <lsm6dsr_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	09db      	lsrs	r3, r3, #7
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7c3b      	ldrb	r3, [r7, #16]
 800144c:	f362 0341 	bfi	r3, r2, #1, #1
 8001450:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8001452:	f107 0210 	add.w	r2, r7, #16
 8001456:	2301      	movs	r3, #1
 8001458:	2118      	movs	r1, #24
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fc88 	bl	8000d70 <lsm6dsr_write_reg>
 8001460:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <lsm6dsr_i3c_disable_set+0x5c>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	2301      	movs	r3, #1
 800146e:	2162      	movs	r1, #98	; 0x62
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fc65 	bl	8000d40 <lsm6dsr_read_reg>
 8001476:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <lsm6dsr_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b2da      	uxtb	r2, r3
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	f362 03c4 	bfi	r3, r2, #3, #2
 800148c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	2301      	movs	r3, #1
 8001494:	2162      	movs	r1, #98	; 0x62
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fc6a 	bl	8000d70 <lsm6dsr_write_reg>
 800149c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800149e:	697b      	ldr	r3, [r7, #20]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80014b2:	2102      	movs	r1, #2
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fedd 	bl	8001274 <lsm6dsr_mem_bank_set>
 80014ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <lsm6dsr_fsm_enable_get+0x28>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80014c2:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80014c4:	2301      	movs	r3, #1
 80014c6:	2146      	movs	r1, #70	; 0x46
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fc39 	bl	8000d40 <lsm6dsr_read_reg>
 80014ce:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <lsm6dsr_fsm_enable_get+0x3e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80014da:	2301      	movs	r3, #1
 80014dc:	2147      	movs	r1, #71	; 0x47
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fc2e 	bl	8000d40 <lsm6dsr_read_reg>
 80014e4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <lsm6dsr_fsm_enable_get+0x4e>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80014ec:	2100      	movs	r1, #0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fec0 	bl	8001274 <lsm6dsr_mem_bank_set>
 80014f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800150a:	2102      	movs	r1, #2
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff feb1 	bl	8001274 <lsm6dsr_mem_bank_set>
 8001512:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <lsm6dsr_fsm_data_rate_get+0x2a>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800151a:	f107 0208 	add.w	r2, r7, #8
 800151e:	2301      	movs	r3, #1
 8001520:	215f      	movs	r1, #95	; 0x5f
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fc0c 	bl	8000d40 <lsm6dsr_read_reg>
 8001528:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <lsm6dsr_fsm_data_rate_get+0x3a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001530:	2100      	movs	r1, #0
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fe9e 	bl	8001274 <lsm6dsr_mem_bank_set>
 8001538:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800153a:	7a3b      	ldrb	r3, [r7, #8]
 800153c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d81a      	bhi.n	800157c <lsm6dsr_fsm_data_rate_get+0x7c>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	08001565 	.word	0x08001565
 8001554:	0800156d 	.word	0x0800156d
 8001558:	08001575 	.word	0x08001575
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
      break;
 8001562:	e00f      	b.n	8001584 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
      break;
 800156a:	e00b      	b.n	8001584 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	701a      	strb	r2, [r3, #0]
      break;
 8001572:	e007      	b.n	8001584 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2203      	movs	r2, #3
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	e003      	b.n	8001584 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
      break;
 8001582:	bf00      	nop
  }

  return ret;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001596:	f000 fe31 	bl	80021fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159a:	f000 f84f 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159e:	f000 f91d 	bl	80017dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015a2:	f000 f8eb 	bl	800177c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015a6:	f000 f8a9 	bl	80016fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Reset GPIOs
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2104      	movs	r1, #4
 80015ae:	4819      	ldr	r0, [pc, #100]	; (8001614 <main+0x84>)
 80015b0:	f001 f8e8 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Relay_Drogue_GPIO_Port, Relay_Drogue_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <main+0x84>)
 80015ba:	f001 f8e3 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Relay_Main_GPIO_Port, Relay_Main_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <main+0x84>)
 80015c4:	f001 f8de 	bl	8002784 <HAL_GPIO_WritePin>

  // Initialize sensors
  stmdev_ctx_t dev_ctx_lsm = lsm6dsr_init();
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fb6d 	bl	8001cac <lsm6dsr_init>
  stmdev_ctx_t dev_ctx_lps = lps22hh_init();
 80015d2:	463b      	mov	r3, r7
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fbd7 	bl	8001d88 <lps22hh_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015da:	f004 f859 	bl	8005690 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ejectionTask */
  ejectionTaskHandle = osThreadNew(startEjection, NULL, &ejectionTask_attributes);
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <main+0x88>)
 80015e0:	2100      	movs	r1, #0
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <main+0x8c>)
 80015e4:	f004 f8bc 	bl	8005760 <osThreadNew>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <main+0x90>)
 80015ec:	601a      	str	r2, [r3, #0]

  /* creation of telemetryTask */
  telemetryTaskHandle = osThreadNew(startTelemetry, NULL, &telemetryTask_attributes);
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <main+0x94>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <main+0x98>)
 80015f4:	f004 f8b4 	bl	8005760 <osThreadNew>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <main+0x9c>)
 80015fc:	601a      	str	r2, [r3, #0]

  /* creation of sensorPollTask */
  sensorPollTaskHandle = osThreadNew(startSensorPoll, NULL, &sensorPollTask_attributes);
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <main+0xa0>)
 8001600:	2100      	movs	r1, #0
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <main+0xa4>)
 8001604:	f004 f8ac 	bl	8005760 <osThreadNew>
 8001608:	4602      	mov	r2, r0
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <main+0xa8>)
 800160c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800160e:	f004 f873 	bl	80056f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001612:	e7fe      	b.n	8001612 <main+0x82>
 8001614:	48000800 	.word	0x48000800
 8001618:	08009228 	.word	0x08009228
 800161c:	08001919 	.word	0x08001919
 8001620:	20001a34 	.word	0x20001a34
 8001624:	0800924c 	.word	0x0800924c
 8001628:	08001bd1 	.word	0x08001bd1
 800162c:	20001a3c 	.word	0x20001a3c
 8001630:	08009270 	.word	0x08009270
 8001634:	08001c61 	.word	0x08001c61
 8001638:	20001ac8 	.word	0x20001ac8

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0a6      	sub	sp, #152	; 0x98
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001646:	2228      	movs	r2, #40	; 0x28
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fd5b 	bl	8008106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2258      	movs	r2, #88	; 0x58
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fd4d 	bl	8008106 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166c:	2302      	movs	r3, #2
 800166e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001674:	2310      	movs	r3, #16
 8001676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001688:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800168c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fdfc 	bl	8003298 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016a6:	f000 faf5 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2302      	movs	r3, #2
 80016b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fcfc 	bl	80040c4 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016d2:	f000 fadf 	bl	8001c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80016d6:	2322      	movs	r3, #34	; 0x22
 80016d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 ff55 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016f0:	f000 fad0 	bl	8001c94 <Error_Handler>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3798      	adds	r7, #152	; 0x98
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_I2C1_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <MX_I2C1_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_I2C1_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_I2C1_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_I2C1_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_I2C1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_I2C1_Init+0x74>)
 8001738:	f001 f83c 	bl	80027b4 <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 faa7 	bl	8001c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_I2C1_Init+0x74>)
 800174a:	f001 fd0d 	bl	8003168 <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 fa9e 	bl	8001c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2C1_Init+0x74>)
 800175c:	f001 fd4f 	bl	80031fe <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fa95 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200019b0 	.word	0x200019b0
 8001774:	40005400 	.word	0x40005400
 8001778:	2000090e 	.word	0x2000090e

0800177c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <MX_USART2_UART_Init+0x5c>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001788:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017c0:	f003 fbdc 	bl	8004f7c <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 fa63 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20001a40 	.word	0x20001a40
 80017d8:	40004400 	.word	0x40004400

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b45      	ldr	r3, [pc, #276]	; (8001908 <MX_GPIO_Init+0x12c>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a44      	ldr	r2, [pc, #272]	; (8001908 <MX_GPIO_Init+0x12c>)
 80017f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <MX_GPIO_Init+0x12c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <MX_GPIO_Init+0x12c>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <MX_GPIO_Init+0x12c>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Status_Pin|Relay_Drogue_Pin|Relay_Main_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2134      	movs	r1, #52	; 0x34
 8001856:	482d      	ldr	r0, [pc, #180]	; (800190c <MX_GPIO_Init+0x130>)
 8001858:	f000 ff94 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2120      	movs	r1, #32
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 ff8e 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186e:	4828      	ldr	r0, [pc, #160]	; (8001910 <MX_GPIO_Init+0x134>)
 8001870:	f000 ff88 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MX_GPIO_Init+0x138>)
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4820      	ldr	r0, [pc, #128]	; (800190c <MX_GPIO_Init+0x130>)
 800188a:	f000 fdf1 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Status_Pin Relay_Drogue_Pin Relay_Main_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin|Relay_Drogue_Pin|Relay_Main_Pin;
 800188e:	2334      	movs	r3, #52	; 0x34
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <MX_GPIO_Init+0x130>)
 80018a6:	f000 fde3 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80018aa:	2308      	movs	r3, #8
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_GPIO_Init+0x130>)
 80018be:	f000 fdd7 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018c2:	2320      	movs	r3, #32
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f000 fdc8 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80018e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_GPIO_Init+0x134>)
 80018fa:	f000 fdb9 	bl	8002470 <HAL_GPIO_Init>

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	48000800 	.word	0x48000800
 8001910:	48000400 	.word	0x48000400
 8001914:	10210000 	.word	0x10210000

08001918 <startEjection>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startEjection */
void startEjection(void *argument)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  // TODO: Add buzzer sound here

  // Get sea-level pressure
  for (uint16_t i = 0; i < ALT_MEAS_AVGING; i++){
 8001920:	2300      	movs	r3, #0
 8001922:	82fb      	strh	r3, [r7, #22]
 8001924:	e00c      	b.n	8001940 <startEjection+0x28>

//	  alt_ground += bme.readAltitude(LOCAL_PRESSURE/100); (arduino code)
	  alt_ground += 1;								// TODO: Replace 1 here by actual sensor reading fct from queue
 8001926:	4b98      	ldr	r3, [pc, #608]	; (8001b88 <startEjection+0x270>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001934:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <startEjection+0x270>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
  for (uint16_t i = 0; i < ALT_MEAS_AVGING; i++){
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	3301      	adds	r3, #1
 800193e:	82fb      	strh	r3, [r7, #22]
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001946:	d3ee      	bcc.n	8001926 <startEjection+0xe>
  }

  alt_ground = alt_ground/ALT_MEAS_AVGING; 			// Average of alt readings
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <startEjection+0x270>)
 800194a:	ed93 7a00 	vldr	s14, [r3]
 800194e:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001b8c <startEjection+0x274>
 8001952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001956:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <startEjection+0x270>)
 8001958:	edc3 7a00 	vstr	s15, [r3]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f003 ffa8 	bl	80058b4 <osDelay>

    if (main_deployed == 0){
 8001964:	4b8a      	ldr	r3, [pc, #552]	; (8001b90 <startEjection+0x278>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f7      	bne.n	800195c <startEjection+0x44>


    	T = (HAL_GetTick() - t_previous_loop)/1000; // HAL_GetTick() = time since program start running T running time of curr loop (s)
 800196c:	f000 fc70 	bl	8002250 <HAL_GetTick>
 8001970:	ee07 0a90 	vmov	s15, r0
 8001974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001978:	4b86      	ldr	r3, [pc, #536]	; (8001b94 <startEjection+0x27c>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001982:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001b98 <startEjection+0x280>
 8001986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198a:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <startEjection+0x284>)
 800198c:	edc3 7a00 	vstr	s15, [r3]
    	t_previous_loop = HAL_GetTick(); 			// Total time
 8001990:	f000 fc5e 	bl	8002250 <HAL_GetTick>
 8001994:	ee07 0a90 	vmov	s15, r0
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <startEjection+0x27c>)
 800199e:	edc3 7a00 	vstr	s15, [r3]

//		alt_meas = (bme.readAltitude(LOCAL_PRESSURE/100) - alt_ground)*3.28084; //Measures AGL altitude in feet ARDUINO
    	alt_meas = 0;		// TODO: Replace 0 by sensor measurement
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <startEjection+0x288>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

		// Low-pass filter - rocket at high speeds pressure fluctuates and affects altitude reading, usually at a high frequency, so low pass filter filters those high freuqency changes out
		// and keeps just the overall, low frequency changes (caused by altitude change)
    	a = 2 * 3.14159 * a;
 80019aa:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <startEjection+0x28c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd7a 	bl	80004a8 <__aeabi_f2d>
 80019b4:	a372      	add	r3, pc, #456	; (adr r3, 8001b80 <startEjection+0x268>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fdcd 	bl	8000558 <__aeabi_dmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4618      	mov	r0, r3
 80019c4:	4621      	mov	r1, r4
 80019c6:	f7ff f877 	bl	8000ab8 <__aeabi_d2f>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <startEjection+0x28c>)
 80019ce:	601a      	str	r2, [r3, #0]
    	alt_filtered = (1 - T * a) * alt_previous[NUM_MEAS_AVGING-1] + a * T * alt_meas;
 80019d0:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <startEjection+0x284>)
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <startEjection+0x28c>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e8:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <startEjection+0x290>)
 80019ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f2:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <startEjection+0x28c>)
 80019f4:	edd3 6a00 	vldr	s13, [r3]
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <startEjection+0x284>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <startEjection+0x288>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <startEjection+0x294>)
 8001a12:	edc3 7a00 	vstr	s15, [r3]

		// Slide window of 10 measurement history.
		for (int i = 0; i < NUM_MEAS_AVGING-1; i++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e00d      	b.n	8001a38 <startEjection+0x120>
			alt_previous[i] = alt_previous[i+1];
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <startEjection+0x290>)
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	495f      	ldr	r1, [pc, #380]	; (8001ba8 <startEjection+0x290>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MEAS_AVGING-1; i++){
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3301      	adds	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	ddee      	ble.n	8001a1c <startEjection+0x104>
		}
		alt_previous[NUM_MEAS_AVGING-1] = alt_filtered;
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <startEjection+0x294>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <startEjection+0x290>)
 8001a44:	6253      	str	r3, [r2, #36]	; 0x24

		// Launch Detection
		if (alt_filtered > 150 && launched == 0){
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <startEjection+0x294>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001bb0 <startEjection+0x298>
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd06      	ble.n	8001a68 <startEjection+0x150>
 8001a5a:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <startEjection+0x29c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <startEjection+0x150>
			launched = 1;
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <startEjection+0x29c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		}

		// Average gradient of 10 past measurements.
		average_gradient = 0;
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <startEjection+0x2a0>)
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MEAS_AVGING-1; i++){
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e019      	b.n	8001aaa <startEjection+0x192>
			average_gradient += (alt_previous[i+1]- alt_previous[i]);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <startEjection+0x290>)
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <startEjection+0x290>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <startEjection+0x2a0>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <startEjection+0x2a0>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < NUM_MEAS_AVGING-1; i++){
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	dde2      	ble.n	8001a76 <startEjection+0x15e>
		}

		if (T>0){
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <startEjection+0x284>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	dd09      	ble.n	8001ad4 <startEjection+0x1bc>
			average_gradient /= (NUM_MEAS_AVGING);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <startEjection+0x2a0>)
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <startEjection+0x2a0>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
		}

		// Apogee detection
		if (alt_filtered > THRESHOLD_ALTITUDE && launched && apogee_reached == 0){
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <startEjection+0x294>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001bbc <startEjection+0x2a4>
 8001ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	dd22      	ble.n	8001b2e <startEjection+0x216>
 8001ae8:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <startEjection+0x29c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01e      	beq.n	8001b2e <startEjection+0x216>
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <startEjection+0x2a8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <startEjection+0x216>

			if (average_gradient < -2){ //what is the purpose of this -2?
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <startEjection+0x2a0>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d510      	bpl.n	8001b2e <startEjection+0x216>
				apogee_reached = 1;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <startEjection+0x2a8>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Relay_Drogue_GPIO_Port, Relay_Drogue_Pin, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2110      	movs	r1, #16
 8001b16:	482b      	ldr	r0, [pc, #172]	; (8001bc4 <startEjection+0x2ac>)
 8001b18:	f000 fe34 	bl	8002784 <HAL_GPIO_WritePin>
				// TODO: Add other drogue

				osDelay(DROGUE_DELAY);
 8001b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b20:	f003 fec8 	bl	80058b4 <osDelay>

				HAL_GPIO_WritePin(Relay_Drogue_GPIO_Port, Relay_Drogue_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2110      	movs	r1, #16
 8001b28:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <startEjection+0x2ac>)
 8001b2a:	f000 fe2b 	bl	8002784 <HAL_GPIO_WritePin>
				// TODO: Add other drogue
			}
		}

		// Main Deployment detection
		if (apogee_reached && alt_filtered < MAIN_DEPLOYMENT && main_deployed == 0){
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <startEjection+0x2a8>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f43f af12 	beq.w	800195c <startEjection+0x44>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <startEjection+0x294>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001bc8 <startEjection+0x2b0>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d515      	bpl.n	8001b78 <startEjection+0x260>
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <startEjection+0x278>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f af03 	bne.w	800195c <startEjection+0x44>
			main_deployed = 1;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <startEjection+0x278>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Relay_Main_GPIO_Port, Relay_Main_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2120      	movs	r1, #32
 8001b60:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <startEjection+0x2ac>)
 8001b62:	f000 fe0f 	bl	8002784 <HAL_GPIO_WritePin>
			// TODO: Add other main

			osDelay(MAIN_DELAY);
 8001b66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b6a:	f003 fea3 	bl	80058b4 <osDelay>

			HAL_GPIO_WritePin(Relay_Main_GPIO_Port, Relay_Main_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <startEjection+0x2ac>)
 8001b74:	f000 fe06 	bl	8002784 <HAL_GPIO_WritePin>
    osDelay(1000);
 8001b78:	e6f0      	b.n	800195c <startEjection+0x44>
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w
 8001b80:	f01b866e 	.word	0xf01b866e
 8001b84:	401921f9 	.word	0x401921f9
 8001b88:	20000098 	.word	0x20000098
 8001b8c:	43fa0000 	.word	0x43fa0000
 8001b90:	2000009e 	.word	0x2000009e
 8001b94:	20001a04 	.word	0x20001a04
 8001b98:	447a0000 	.word	0x447a0000
 8001b9c:	20001a08 	.word	0x20001a08
 8001ba0:	20001a00 	.word	0x20001a00
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20001a0c 	.word	0x20001a0c
 8001bac:	20001ac4 	.word	0x20001ac4
 8001bb0:	43160000 	.word	0x43160000
 8001bb4:	2000009d 	.word	0x2000009d
 8001bb8:	20001acc 	.word	0x20001acc
 8001bbc:	461c4000 	.word	0x461c4000
 8001bc0:	2000009c 	.word	0x2000009c
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	44bb8000 	.word	0x44bb8000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <startTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetry */
void startTelemetry(void *argument)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetry */
  /* Infinite loop */
  for(;;)
  {
	osDelay(500);
 8001bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bdc:	f003 fe6a 	bl	80058b4 <osDelay>

    // TODO: Queue stuff here

	real_altitude = 44330 * (1.0 - pow(pressure / LOCAL_PRESSURE, 0.190295));
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <startTelemetry+0x80>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c54 <startTelemetry+0x84>
 8001bea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bee:	ee16 0a90 	vmov	r0, s13
 8001bf2:	f7fe fc59 	bl	80004a8 <__aeabi_f2d>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001c40 <startTelemetry+0x70>
 8001bfe:	ec44 3b10 	vmov	d0, r3, r4
 8001c02:	f006 fa89 	bl	8008118 <pow>
 8001c06:	ec54 3b10 	vmov	r3, r4, d0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	4911      	ldr	r1, [pc, #68]	; (8001c58 <startTelemetry+0x88>)
 8001c14:	f7fe fae8 	bl	80001e8 <__aeabi_dsub>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4621      	mov	r1, r4
 8001c20:	a309      	add	r3, pc, #36	; (adr r3, 8001c48 <startTelemetry+0x78>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fc97 	bl	8000558 <__aeabi_dmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f7fe ff41 	bl	8000ab8 <__aeabi_d2f>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <startTelemetry+0x8c>)
 8001c3a:	601a      	str	r2, [r3, #0]
	osDelay(500);
 8001c3c:	e7cc      	b.n	8001bd8 <startTelemetry+0x8>
 8001c3e:	bf00      	nop
 8001c40:	28cbd124 	.word	0x28cbd124
 8001c44:	3fc85b96 	.word	0x3fc85b96
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40e5a540 	.word	0x40e5a540
 8001c50:	200000a0 	.word	0x200000a0
 8001c54:	47c5a800 	.word	0x47c5a800
 8001c58:	3ff00000 	.word	0x3ff00000
 8001c5c:	20001a38 	.word	0x20001a38

08001c60 <startSensorPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSensorPoll */
void startSensorPoll(void *argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSensorPoll */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	f003 fe23 	bl	80058b4 <osDelay>
 8001c6e:	e7fb      	b.n	8001c68 <startSensorPoll+0x8>

08001c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c82:	f000 fad1 	bl	8002228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40001000 	.word	0x40001000

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <Error_Handler+0x14>)
 8001c9e:	f000 fd71 	bl	8002784 <HAL_GPIO_WritePin>
	__BKPT();
 8001ca2:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	48000800 	.word	0x48000800

08001cac <lsm6dsr_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSR Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsr_init(void){
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsr;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsr.write_reg = lsm6dsr_write;
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <lsm6dsr_init+0xc8>)
 8001cb6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsr.read_reg = lsm6dsr_read;
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <lsm6dsr_init+0xcc>)
 8001cba:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsr.handle = &SENSOR_BUS;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <lsm6dsr_init+0xd0>)
 8001cbe:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001cc0:	200a      	movs	r0, #10
 8001cc2:	f000 f923 	bl	8001f0c <platform_delay>

	/* Check device ID */
	lsm6dsr_device_id_get(&dev_ctx_lsm6dsr, &whoamI_lsm6dsr);
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	492d      	ldr	r1, [pc, #180]	; (8001d80 <lsm6dsr_init+0xd4>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff faf7 	bl	80012c0 <lsm6dsr_device_id_get>

	if (whoamI_lsm6dsr != LSM6DSR_ID)
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <lsm6dsr_init+0xd4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b6b      	cmp	r3, #107	; 0x6b
 8001cd8:	d000      	beq.n	8001cdc <lsm6dsr_init+0x30>
	while (1);
 8001cda:	e7fe      	b.n	8001cda <lsm6dsr_init+0x2e>

	/* Restore default configuration */
	lsm6dsr_reset_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fafd 	bl	80012e2 <lsm6dsr_reset_set>

	do {
	lsm6dsr_reset_get(&dev_ctx_lsm6dsr, &rst_lsm6dsr);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4925      	ldr	r1, [pc, #148]	; (8001d84 <lsm6dsr_init+0xd8>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb1d 	bl	800132e <lsm6dsr_reset_get>
	} while (rst_lsm6dsr);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <lsm6dsr_init+0xd8>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f5      	bne.n	8001ce8 <lsm6dsr_init+0x3c>

	/* Disable I3C interface */
	lsm6dsr_i3c_disable_set(&dev_ctx_lsm6dsr, LSM6DSR_I3C_DISABLE);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb8a 	bl	800141c <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa8a 	bl	8001228 <lsm6dsr_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_XL_ODR_12Hz5);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f866 	bl	8000dec <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_GY_ODR_12Hz5);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f982 	bl	8001030 <lsm6dsr_gy_data_rate_set>

	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2g);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f834 	bl	8000da0 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2000dps);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	210c      	movs	r1, #12
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f950 	bl	8000fe4 <lsm6dsr_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&dev_ctx_lsm6dsr, LSM6DSR_LP_ODR_DIV_100);
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb2e 	bl	80013ac <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fb02 	bl	8001360 <lsm6dsr_xl_filter_lp2_set>

	return dev_ctx_lsm6dsr;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	461c      	mov	r4, r3
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	08001e25 	.word	0x08001e25
 8001d78:	08001e5f 	.word	0x08001e5f
 8001d7c:	200019b0 	.word	0x200019b0
 8001d80:	200000a4 	.word	0x200000a4
 8001d84:	200000a5 	.word	0x200000a5

08001d88 <lps22hh_init>:
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}
}

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <lps22hh_init+0x88>)
 8001d92:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <lps22hh_init+0x8c>)
 8001d96:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <lps22hh_init+0x90>)
 8001d9a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001d9c:	200a      	movs	r0, #10
 8001d9e:	f000 f8b5 	bl	8001f0c <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <lps22hh_init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	491b      	ldr	r1, [pc, #108]	; (8001e1c <lps22hh_init+0x94>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff76 	bl	8000ca0 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID )
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <lps22hh_init+0x94>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2bb3      	cmp	r3, #179	; 0xb3
 8001dba:	d000      	beq.n	8001dbe <lps22hh_init+0x36>
	while (1); /*manage here device not found */
 8001dbc:	e7fe      	b.n	8001dbc <lps22hh_init+0x34>

	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff7c 	bl	8000cc2 <lps22hh_reset_set>

	do {
	lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4914      	ldr	r1, [pc, #80]	; (8001e20 <lps22hh_init+0x98>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe ff9c 	bl	8000d0e <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <lps22hh_init+0x98>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f5      	bne.n	8001dca <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fee7 	bl	8000bb8 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_10_Hz_LOW_NOISE);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	2112      	movs	r1, #18
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff07 	bl	8000c04 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	461c      	mov	r4, r3
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	08001e99 	.word	0x08001e99
 8001e14:	08001ed3 	.word	0x08001ed3
 8001e18:	200019b0 	.word	0x200019b0
 8001e1c:	200000a6 	.word	0x200000a6
 8001e20:	200000a7 	.word	0x200000a7

08001e24 <lsm6dsr_write>:
 *
 */
static int32_t lsm6dsr_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af04      	add	r7, sp, #16
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
 8001e34:	4613      	mov	r3, r2
 8001e36:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg,
 8001e38:	7afb      	ldrb	r3, [r7, #11]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	21d5      	movs	r1, #213	; 0xd5
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fd40 	bl	80028d4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <lsm6dsr_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsr_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b088      	sub	sp, #32
 8001e62:	af04      	add	r7, sp, #16
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	72fb      	strb	r3, [r7, #11]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	21d5      	movs	r1, #213	; 0xd5
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fe37 	bl	8002afc <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	72fb      	strb	r3, [r7, #11]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	893b      	ldrh	r3, [r7, #8]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	21bb      	movs	r1, #187	; 0xbb
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fd06 	bl	80028d4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b088      	sub	sp, #32
 8001ed6:	af04      	add	r7, sp, #16
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	461a      	mov	r2, r3
 8001ede:	460b      	mov	r3, r1
 8001ee0:	72fb      	strb	r3, [r7, #11]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	893b      	ldrh	r3, [r7, #8]
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	21bb      	movs	r1, #187	; 0xbb
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fdfd 	bl	8002afc <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9a7 	bl	8002268 <HAL_Delay>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_MspInit+0x44>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_MspInit+0x44>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_MspInit+0x44>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_MspInit+0x44>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_MspInit+0x44>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_MspInit+0x44>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_I2C_MspInit+0x7c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d128      	bne.n	8001fe0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6153      	str	r3, [r2, #20]
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <HAL_I2C_MspInit+0x84>)
 8001fc4:	f000 fa54 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd2:	61d3      	str	r3, [r2, #28]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_I2C_MspInit+0x80>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_UART_MspInit+0x7c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d128      	bne.n	8002068 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_UART_MspInit+0x80>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_UART_MspInit+0x80>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_UART_MspInit+0x80>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_UART_MspInit+0x80>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_UART_MspInit+0x80>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6153      	str	r3, [r2, #20]
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_UART_MspInit+0x80>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002046:	230c      	movs	r3, #12
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002056:	2307      	movs	r3, #7
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002064:	f000 fa04 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40004400 	.word	0x40004400
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002088:	2200      	movs	r2, #0
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	2036      	movs	r0, #54	; 0x36
 800208e:	f000 f9c5 	bl	800241c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002092:	2036      	movs	r0, #54	; 0x36
 8002094:	f000 f9de 	bl	8002454 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_InitTick+0xa0>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_InitTick+0xa0>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	61d3      	str	r3, [r2, #28]
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_InitTick+0xa0>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020b0:	f107 0210 	add.w	r2, r7, #16
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fa38 	bl	8004530 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020c0:	f002 f9f2 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80020c4:	4603      	mov	r3, r0
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_InitTick+0xa4>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	3b01      	subs	r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_InitTick+0xa8>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <HAL_InitTick+0xac>)
 80020dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_InitTick+0xa8>)
 80020e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_InitTick+0xa8>)
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_InitTick+0xa8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_InitTick+0xa8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <HAL_InitTick+0xa8>)
 80020fa:	f002 fc69 	bl	80049d0 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002104:	4806      	ldr	r0, [pc, #24]	; (8002120 <HAL_InitTick+0xa8>)
 8002106:	f002 fcc5 	bl	8004a94 <HAL_TIM_Base_Start_IT>
 800210a:	4603      	mov	r3, r0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3730      	adds	r7, #48	; 0x30
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	431bde83 	.word	0x431bde83
 8002120:	20001ad0 	.word	0x20001ad0
 8002124:	40001000 	.word	0x40001000

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <HardFault_Handler+0x14>)
 8002142:	f000 fb1f 	bl	8002784 <HAL_GPIO_WritePin>
	__BKPT();
 8002146:	be00      	bkpt	0x0000

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <HardFault_Handler+0x10>
 800214a:	bf00      	nop
 800214c:	48000800 	.word	0x48000800

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM6_DAC_IRQHandler+0x10>)
 8002176:	f002 fcfd 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001ad0 	.word	0x20001ad0

08002184 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <SystemInit+0x20>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <SystemInit+0x20>)
 8002190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ae:	490e      	ldr	r1, [pc, #56]	; (80021e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <LoopForever+0xe>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c4:	4c0b      	ldr	r4, [pc, #44]	; (80021f4 <LoopForever+0x16>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021d2:	f7ff ffd7 	bl	8002184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021d6:	f005 ff67 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021da:	f7ff f9d9 	bl	8001590 <main>

080021de <LoopForever>:

LoopForever:
    b LoopForever
 80021de:	e7fe      	b.n	80021de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021ec:	08009318 	.word	0x08009318
  ldr r2, =_sbss
 80021f0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021f4:	20001b60 	.word	0x20001b60

080021f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC1_2_IRQHandler>
	...

080021fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_Init+0x28>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_Init+0x28>)
 8002206:	f043 0310 	orr.w	r3, r3, #16
 800220a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f8fa 	bl	8002406 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	2000      	movs	r0, #0
 8002214:	f7ff ff30 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002218:	f7ff fe84 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	20001b1c 	.word	0x20001b1c

08002250 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;  
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20001b1c 	.word	0x20001b1c

08002268 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_Delay+0x40>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2000000c 	.word	0x2000000c

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff4c 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242e:	f7ff ff61 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f7ff ffb1 	bl	80023a0 <NVIC_EncodePriority>
 800243e:	4602      	mov	r2, r0
 8002440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff80 	bl	800234c <__NVIC_SetPriority>
}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff54 	bl	8002310 <__NVIC_EnableIRQ>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e160      	b.n	8002742 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8152 	beq.w	800273c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d00b      	beq.n	80024b8 <HAL_GPIO_Init+0x48>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ac:	2b11      	cmp	r3, #17
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0201 	and.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0xea>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80ac 	beq.w	800273c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_GPIO_Init+0x2f0>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a5d      	ldr	r2, [pc, #372]	; (8002760 <HAL_GPIO_Init+0x2f0>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_GPIO_Init+0x2f0>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025fc:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_GPIO_Init+0x2f4>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002626:	d025      	beq.n	8002674 <HAL_GPIO_Init+0x204>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <HAL_GPIO_Init+0x2f8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01f      	beq.n	8002670 <HAL_GPIO_Init+0x200>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_GPIO_Init+0x2fc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d019      	beq.n	800266c <HAL_GPIO_Init+0x1fc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_GPIO_Init+0x300>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_GPIO_Init+0x1f8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_GPIO_Init+0x304>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00d      	beq.n	8002664 <HAL_GPIO_Init+0x1f4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_GPIO_Init+0x308>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <HAL_GPIO_Init+0x1f0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_GPIO_Init+0x30c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_GPIO_Init+0x1ec>
 8002658:	2306      	movs	r3, #6
 800265a:	e00c      	b.n	8002676 <HAL_GPIO_Init+0x206>
 800265c:	2307      	movs	r3, #7
 800265e:	e00a      	b.n	8002676 <HAL_GPIO_Init+0x206>
 8002660:	2305      	movs	r3, #5
 8002662:	e008      	b.n	8002676 <HAL_GPIO_Init+0x206>
 8002664:	2304      	movs	r3, #4
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x206>
 8002668:	2303      	movs	r3, #3
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x206>
 800266c:	2302      	movs	r3, #2
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x206>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x206>
 8002674:	2300      	movs	r3, #0
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002686:	4937      	ldr	r1, [pc, #220]	; (8002764 <HAL_GPIO_Init+0x2f4>)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_GPIO_Init+0x310>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026b8:	4a31      	ldr	r2, [pc, #196]	; (8002780 <HAL_GPIO_Init+0x310>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_GPIO_Init+0x310>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_GPIO_Init+0x310>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_GPIO_Init+0x310>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_GPIO_Init+0x310>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_GPIO_Init+0x310>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <HAL_GPIO_Init+0x310>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f ae97 	bne.w	8002480 <HAL_GPIO_Init+0x10>
  }
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40010000 	.word	0x40010000
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	48000c00 	.word	0x48000c00
 8002774:	48001000 	.word	0x48001000
 8002778:	48001400 	.word	0x48001400
 800277c:	48001800 	.word	0x48001800
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e081      	b.n	80028ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fbc6 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	e006      	b.n	800283c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800283a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d104      	bne.n	800284e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800284c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800285c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	ea42 0103 	orr.w	r1, r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	f040 80f9 	bne.w	8002aee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_I2C_Mem_Write+0x34>
 8002902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ed      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Mem_Write+0x4e>
 800291e:	2302      	movs	r3, #2
 8002920:	e0e6      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800292a:	f7ff fc91 	bl	8002250 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2319      	movs	r3, #25
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fac3 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d1      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2221      	movs	r2, #33	; 0x21
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002974:	88f8      	ldrh	r0, [r7, #6]
 8002976:	893a      	ldrh	r2, [r7, #8]
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4603      	mov	r3, r0
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9d3 	bl	8002d30 <I2C_RequestMemoryWrite>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a9      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d90e      	bls.n	80029c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fba5 	bl	800310c <I2C_TransferConfig>
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	8979      	ldrh	r1, [r7, #10]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fb94 	bl	800310c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 faad 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07b      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d130      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fa3f 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04d      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2bff      	cmp	r3, #255	; 0xff
 8002a5c:	d90e      	bls.n	8002a7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fb49 	bl	800310c <I2C_TransferConfig>
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fb38 	bl	800310c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d19e      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa8c 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01a      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_I2C_Mem_Write+0x224>)
 8002ace:	400b      	ands	r3, r1
 8002ad0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fe00e800 	.word	0xfe00e800

08002afc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80fd 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x34>
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0f1      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x4e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0ea      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b52:	f7ff fb7d 	bl	8002250 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f9af 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d5      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2222      	movs	r2, #34	; 0x22
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f913 	bl	8002dd8 <I2C_RequestMemoryRead>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ad      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d90e      	bls.n	8002bec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa91 	bl	800310c <I2C_TransferConfig>
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fa80 	bl	800310c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	2200      	movs	r2, #0
 8002c14:	2104      	movs	r1, #4
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f956 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07c      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d034      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d130      	bne.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f927 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04d      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	d90e      	bls.n	8002cac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	8979      	ldrh	r1, [r7, #10]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fa31 	bl	800310c <I2C_TransferConfig>
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa20 	bl	800310c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d19a      	bne.n	8002c0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f974 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01a      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_I2C_Mem_Read+0x230>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	80002400 	.word	0x80002400
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <I2C_RequestMemoryWrite+0xa4>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f9d7 	bl	800310c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f8f0 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02c      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
 8002d82:	e015      	b.n	8002db0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	69b9      	ldr	r1, [r7, #24]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8d6 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e012      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f884 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	80002000 	.word	0x80002000

08002dd8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <I2C_RequestMemoryRead+0xa4>)
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f984 	bl	800310c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f89d 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02c      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
 8002e28:	e015      	b.n	8002e56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f883 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e012      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f831 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	80002000 	.word	0x80002000

08002e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e022      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d01e      	beq.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7ff f9b5 	bl	8002250 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d113      	bne.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e00f      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d0cd      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f54:	e02c      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f870 	bl	8003040 <I2C_IsAcknowledgeFailed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02a      	b.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d01e      	beq.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f96d 	bl	8002250 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d1cb      	bne.n	8002f56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd4:	e028      	b.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f830 	bl	8003040 <I2C_IsAcknowledgeFailed>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e026      	b.n	8003038 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f931 	bl	8002250 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e007      	b.n	8003038 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d1cf      	bne.n	8002fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d151      	bne.n	80030fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800305a:	e022      	b.n	80030a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d01e      	beq.n	80030a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003064:	f7ff f8f4 	bl	8002250 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <I2C_IsAcknowledgeFailed+0x3a>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d113      	bne.n	80030a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e02e      	b.n	8003100 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d1d5      	bne.n	800305c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2220      	movs	r2, #32
 80030be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff fedd 	bl	8002e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <I2C_IsAcknowledgeFailed+0xc8>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f043 0204 	orr.w	r2, r3, #4
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	817b      	strh	r3, [r7, #10]
 800311a:	4613      	mov	r3, r2
 800311c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	0d5b      	lsrs	r3, r3, #21
 8003128:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <I2C_TransferConfig+0x58>)
 800312e:	430b      	orrs	r3, r1
 8003130:	43db      	mvns	r3, r3
 8003132:	ea02 0103 	and.w	r1, r2, r3
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800313c:	7a7b      	ldrb	r3, [r7, #9]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	431a      	orrs	r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	03ff63ff 	.word	0x03ff63ff

08003168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d138      	bne.n	80031f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003188:	2302      	movs	r3, #2
 800318a:	e032      	b.n	80031f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	d139      	bne.n	8003288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800321e:	2302      	movs	r3, #2
 8003220:	e033      	b.n	800328a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800329e:	af00      	add	r7, sp, #0
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f000 bf01 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8160 	beq.w	8003582 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032c2:	4bae      	ldr	r3, [pc, #696]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d00c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ce:	4bab      	ldr	r3, [pc, #684]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d159      	bne.n	800338e <HAL_RCC_OscConfig+0xf6>
 80032da:	4ba8      	ldr	r3, [pc, #672]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e6:	d152      	bne.n	800338e <HAL_RCC_OscConfig+0xf6>
 80032e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_RCC_OscConfig+0x82>
 8003314:	4b99      	ldr	r3, [pc, #612]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0xae>
 800331a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800332e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003332:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003336:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800334e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800335a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f002 021f 	and.w	r2, r2, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8102 	beq.w	8003580 <HAL_RCC_OscConfig+0x2e8>
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 80fc 	bne.w	8003580 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f000 be93 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x110>
 800339a:	4b78      	ldr	r3, [pc, #480]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a77      	ldr	r2, [pc, #476]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e030      	b.n	800340a <HAL_RCC_OscConfig+0x172>
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x134>
 80033b2:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a71      	ldr	r2, [pc, #452]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b6f      	ldr	r3, [pc, #444]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6e      	ldr	r2, [pc, #440]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01e      	b.n	800340a <HAL_RCC_OscConfig+0x172>
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x15a>
 80033d8:	4b68      	ldr	r3, [pc, #416]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a67      	ldr	r2, [pc, #412]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b65      	ldr	r3, [pc, #404]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a64      	ldr	r2, [pc, #400]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x172>
 80033f2:	4b62      	ldr	r3, [pc, #392]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a61      	ldr	r2, [pc, #388]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5e      	ldr	r2, [pc, #376]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d059      	beq.n	80034c8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe ff1c 	bl	8002250 <HAL_GetTick>
 8003418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341e:	f7fe ff17 	bl	8002250 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d902      	bls.n	8003434 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	f000 be40 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003448:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d102      	bne.n	8003466 <HAL_RCC_OscConfig+0x1ce>
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x1fa>
 8003466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800347a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003482:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003496:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800349a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800349e:	fa92 f2a2 	rbit	r2, r2
 80034a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80034a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034aa:	fab2 f282 	clz	r2, r2
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f042 0220 	orr.w	r2, r2, #32
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f002 021f 	and.w	r2, r2, #31
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ab      	beq.n	800341e <HAL_RCC_OscConfig+0x186>
 80034c6:	e05c      	b.n	8003582 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe fec2 	bl	8002250 <HAL_GetTick>
 80034cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fe febd 	bl	8002250 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d902      	bls.n	80034e8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	f000 bde6 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
 80034e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80034fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_RCC_OscConfig+0x282>
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x2ae>
 800351a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800352e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003532:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003536:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_RCC_OscConfig+0x2e4>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800354a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800354e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003552:	fa92 f2a2 	rbit	r2, r2
 8003556:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800355a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f042 0220 	orr.w	r2, r2, #32
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f002 021f 	and.w	r2, r2, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1ab      	bne.n	80034d2 <HAL_RCC_OscConfig+0x23a>
 800357a:	e002      	b.n	8003582 <HAL_RCC_OscConfig+0x2ea>
 800357c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8170 	beq.w	8003872 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003592:	4bd0      	ldr	r3, [pc, #832]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800359e:	4bcd      	ldr	r3, [pc, #820]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d16d      	bne.n	8003686 <HAL_RCC_OscConfig+0x3ee>
 80035aa:	4bca      	ldr	r3, [pc, #808]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80035b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b6:	d166      	bne.n	8003686 <HAL_RCC_OscConfig+0x3ee>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80035ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x350>
 80035e2:	4bbc      	ldr	r3, [pc, #752]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e013      	b.n	8003610 <HAL_RCC_OscConfig+0x378>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003600:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800360c:	4bb1      	ldr	r3, [pc, #708]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003616:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800361a:	fa92 f2a2 	rbit	r2, r2
 800361e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003622:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0220 	orr.w	r2, r2, #32
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_RCC_OscConfig+0x3ba>
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f000 bd31 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4ba0      	ldr	r3, [pc, #640]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	21f8      	movs	r1, #248	; 0xf8
 8003662:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800366a:	fa91 f1a1 	rbit	r1, r1
 800366e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003672:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003676:	fab1 f181 	clz	r1, r1
 800367a:	b2c9      	uxtb	r1, r1
 800367c:	408b      	lsls	r3, r1
 800367e:	4995      	ldr	r1, [pc, #596]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003684:	e0f5      	b.n	8003872 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8085 	beq.w	800379c <HAL_RCC_OscConfig+0x504>
 8003692:	2301      	movs	r3, #1
 8003694:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80036a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	2301      	movs	r3, #1
 80036bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe fdc7 	bl	8002250 <HAL_GetTick>
 80036c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe fdc2 	bl	8002250 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d902      	bls.n	80036de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	f000 bceb 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
 80036de:	2302      	movs	r3, #2
 80036e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80036f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HAL_RCC_OscConfig+0x476>
 8003708:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	e013      	b.n	8003736 <HAL_RCC_OscConfig+0x49e>
 800370e:	2302      	movs	r3, #2
 8003710:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003726:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003732:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2202      	movs	r2, #2
 8003738:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800373c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003748:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0af      	beq.n	80036c8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	21f8      	movs	r1, #248	; 0xf8
 8003778:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003780:	fa91 f1a1 	rbit	r1, r1
 8003784:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003788:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800378c:	fab1 f181 	clz	r1, r1
 8003790:	b2c9      	uxtb	r1, r1
 8003792:	408b      	lsls	r3, r1
 8003794:	494f      	ldr	r1, [pc, #316]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
 800379a:	e06a      	b.n	8003872 <HAL_RCC_OscConfig+0x5da>
 800379c:	2301      	movs	r3, #1
 800379e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80037ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	461a      	mov	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fd42 	bl	8002250 <HAL_GetTick>
 80037cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fe fd3d 	bl	8002250 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d902      	bls.n	80037e8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	f000 bc66 	b.w	80040b4 <HAL_RCC_OscConfig+0xe1c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80037fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HAL_RCC_OscConfig+0x580>
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	e013      	b.n	8003840 <HAL_RCC_OscConfig+0x5a8>
 8003818:	2302      	movs	r3, #2
 800381a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800382a:	2302      	movs	r3, #2
 800382c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x63c>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003846:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003852:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f042 0220 	orr.w	r2, r2, #32
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f002 021f 	and.w	r2, r2, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1af      	bne.n	80037d2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80da 	beq.w	8003a36 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d069      	beq.n	8003960 <HAL_RCC_OscConfig+0x6c8>
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800389e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x640>)
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	461a      	mov	r2, r3
 80038b2:	2301      	movs	r3, #1
 80038b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fccb 	bl	8002250 <HAL_GetTick>
 80038ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e00d      	b.n	80038dc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fcc6 	bl	8002250 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d905      	bls.n	80038dc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e3ef      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	10908120 	.word	0x10908120
 80038dc:	2302      	movs	r3, #2
 80038de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80038f4:	2202      	movs	r2, #2
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	fa93 f2a3 	rbit	r2, r3
 800391a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800391e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003920:	4ba4      	ldr	r3, [pc, #656]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003924:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003928:	2102      	movs	r1, #2
 800392a:	6019      	str	r1, [r3, #0]
 800392c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f1a3 	rbit	r1, r3
 8003936:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800393a:	6019      	str	r1, [r3, #0]
  return result;
 800393c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0b0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x628>
 800395e:	e06a      	b.n	8003a36 <HAL_RCC_OscConfig+0x79e>
 8003960:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f2a3 	rbit	r2, r3
 8003972:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003976:	601a      	str	r2, [r3, #0]
  return result;
 8003978:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800397c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	4b8c      	ldr	r3, [pc, #560]	; (8003bb8 <HAL_RCC_OscConfig+0x920>)
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	461a      	mov	r2, r3
 800398e:	2300      	movs	r3, #0
 8003990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fc5d 	bl	8002250 <HAL_GetTick>
 8003996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	e009      	b.n	80039b0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe fc58 	bl	8002250 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e381      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 80039b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039b4:	2202      	movs	r2, #2
 80039b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039cc:	2202      	movs	r2, #2
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039e4:	2202      	movs	r2, #2
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b6e      	ldr	r3, [pc, #440]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 80039fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a00:	2102      	movs	r1, #2
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f1a3 	rbit	r1, r3
 8003a0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a12:	6019      	str	r1, [r3, #0]
  return result;
 8003a14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1b2      	bne.n	800399c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8157 	beq.w	8003cf4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d112      	bne.n	8003a7e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4a55      	ldr	r2, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a62:	61d3      	str	r3, [r2, #28]
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_OscConfig+0x924>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCC_OscConfig+0x924>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_RCC_OscConfig+0x924>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fe fbdb 	bl	8002250 <HAL_GetTick>
 8003a9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	e009      	b.n	8003ab4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fe fbd6 	bl	8002250 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e2ff      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x924>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x840>
 8003aca:	4b3a      	ldr	r3, [pc, #232]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	e02f      	b.n	8003b38 <HAL_RCC_OscConfig+0x8a0>
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x864>
 8003ae2:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a33      	ldr	r2, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	6213      	str	r3, [r2, #32]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0x8a0>
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x888>
 8003b06:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6213      	str	r3, [r2, #32]
 8003b12:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6213      	str	r3, [r2, #32]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0x8a0>
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4a20      	ldr	r2, [pc, #128]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d06a      	beq.n	8003c18 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fb85 	bl	8002250 <HAL_GetTick>
 8003b46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fb80 	bl	8002250 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e2a7      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003b64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b68:	2202      	movs	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b80:	2202      	movs	r2, #2
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b92:	601a      	str	r2, [r3, #0]
  return result;
 8003b94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x928>
 8003bae:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <HAL_RCC_OscConfig+0x91c>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	e013      	b.n	8003bdc <HAL_RCC_OscConfig+0x944>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	10908120 	.word	0x10908120
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	4bc0      	ldr	r3, [pc, #768]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003be0:	2102      	movs	r1, #2
 8003be2:	6011      	str	r1, [r2, #0]
 8003be4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	fa92 f1a2 	rbit	r1, r2
 8003bee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bf2:	6011      	str	r1, [r2, #0]
  return result;
 8003bf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	fab2 f282 	clz	r2, r2
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	f002 021f 	and.w	r2, r2, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d09a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x8b4>
 8003c16:	e063      	b.n	8003ce0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c18:	f7fe fb1a 	bl	8002250 <HAL_GetTick>
 8003c1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	e00b      	b.n	8003c3a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe fb15 	bl	8002250 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e23c      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003c3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c56:	2202      	movs	r2, #2
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c68:	601a      	str	r2, [r3, #0]
  return result;
 8003c6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_OscConfig+0x9f2>
 8003c84:	4b95      	ldr	r3, [pc, #596]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	e00d      	b.n	8003ca6 <HAL_RCC_OscConfig+0xa0e>
 8003c8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fa93 f2a3 	rbit	r2, r3
 8003c9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4b8e      	ldr	r3, [pc, #568]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003caa:	2102      	movs	r1, #2
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fa92 f1a2 	rbit	r1, r2
 8003cb8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cbc:	6011      	str	r1, [r2, #0]
  return result;
 8003cbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1a0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ce0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b7c      	ldr	r3, [pc, #496]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4a7b      	ldr	r2, [pc, #492]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	1d3b      	adds	r3, r7, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 81d9 	beq.w	80040b2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	f000 81a6 	beq.w	800405a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	f040 811e 	bne.w	8003f56 <HAL_RCC_OscConfig+0xcbe>
 8003d1a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d32:	601a      	str	r2, [r3, #0]
  return result;
 8003d34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe fa7e 	bl	8002250 <HAL_GetTick>
 8003d54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d58:	e009      	b.n	8003d6e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fe fa79 	bl	8002250 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1a2      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003d6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	fa93 f2a3 	rbit	r2, r3
 8003d82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d86:	601a      	str	r2, [r3, #0]
  return result;
 8003d88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_OscConfig+0xb10>
 8003da2:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e01b      	b.n	8003de0 <HAL_RCC_OscConfig+0xb48>
 8003da8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f2a3 	rbit	r2, r3
 8003dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003de4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	fa92 f1a2 	rbit	r1, r2
 8003df4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003df8:	6011      	str	r1, [r2, #0]
  return result;
 8003dfa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f042 0220 	orr.w	r2, r2, #32
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	f002 021f 	and.w	r2, r2, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f202 	lsl.w	r2, r1, r2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d19e      	bne.n	8003d5a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f023 020f 	bic.w	r2, r3, #15
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	492c      	ldr	r1, [pc, #176]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a19      	ldr	r1, [r3, #32]
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	4925      	ldr	r1, [pc, #148]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e64:	601a      	str	r2, [r3, #0]
  return result;
 8003e66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e6a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2301      	movs	r3, #1
 8003e80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe f9e5 	bl	8002250 <HAL_GetTick>
 8003e86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe f9e0 	bl	8002250 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e109      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003ea0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fa93 f2a3 	rbit	r2, r3
 8003eb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eb8:	601a      	str	r2, [r3, #0]
  return result;
 8003eba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xc48>
 8003ed4:	4b01      	ldr	r3, [pc, #4]	; (8003edc <HAL_RCC_OscConfig+0xc44>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	e01e      	b.n	8003f18 <HAL_RCC_OscConfig+0xc80>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	fa93 f2a3 	rbit	r2, r3
 8003ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	4b6a      	ldr	r3, [pc, #424]	; (80040c0 <HAL_RCC_OscConfig+0xe28>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	fa92 f1a2 	rbit	r1, r2
 8003f2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f30:	6011      	str	r1, [r2, #0]
  return result;
 8003f32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f002 021f 	and.w	r2, r2, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d09b      	beq.n	8003e8c <HAL_RCC_OscConfig+0xbf4>
 8003f54:	e0ad      	b.n	80040b2 <HAL_RCC_OscConfig+0xe1a>
 8003f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	fa93 f2a3 	rbit	r2, r3
 8003f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f6e:	601a      	str	r2, [r3, #0]
  return result;
 8003f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	461a      	mov	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe f960 	bl	8002250 <HAL_GetTick>
 8003f90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f94:	e009      	b.n	8003faa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fe f95b 	bl	8002250 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e084      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
 8003faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc2:	601a      	str	r2, [r3, #0]
  return result;
 8003fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xd4c>
 8003fde:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_RCC_OscConfig+0xe28>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e01b      	b.n	800401c <HAL_RCC_OscConfig+0xd84>
 8003fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f107 0320 	add.w	r3, r7, #32
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f107 031c 	add.w	r3, r7, #28
 8004002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f2a3 	rbit	r2, r3
 8004012:	f107 0318 	add.w	r3, r7, #24
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <HAL_RCC_OscConfig+0xe28>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f107 0214 	add.w	r2, r7, #20
 8004020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	f107 0214 	add.w	r2, r7, #20
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	fa92 f1a2 	rbit	r1, r2
 8004030:	f107 0210 	add.w	r2, r7, #16
 8004034:	6011      	str	r1, [r2, #0]
  return result;
 8004036:	f107 0210 	add.w	r2, r7, #16
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	fab2 f282 	clz	r2, r2
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f002 021f 	and.w	r2, r2, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d19e      	bne.n	8003f96 <HAL_RCC_OscConfig+0xcfe>
 8004058:	e02b      	b.n	80040b2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e025      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_RCC_OscConfig+0xe28>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_RCC_OscConfig+0xe28>)
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004078:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800407c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	429a      	cmp	r2, r3
 8004088:	d111      	bne.n	80040ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800408a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800408e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004098:	429a      	cmp	r2, r3
 800409a:	d108      	bne.n	80040ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800409c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b09e      	sub	sp, #120	; 0x78
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e162      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b90      	ldr	r3, [pc, #576]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d910      	bls.n	800410c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	498b      	ldr	r1, [pc, #556]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e14a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b82      	ldr	r3, [pc, #520]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	497f      	ldr	r1, [pc, #508]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80dc 	beq.w	80042f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d13c      	bne.n	80041ba <HAL_RCC_ClockConfig+0xf6>
 8004140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004144:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800414e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_RCC_ClockConfig+0xa6>
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e00f      	b.n	800418a <HAL_RCC_ClockConfig+0xc6>
 800416a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800416e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	667b      	str	r3, [r7, #100]	; 0x64
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
 800417e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800418e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004192:	fa92 f2a2 	rbit	r2, r2
 8004196:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800419a:	fab2 f282 	clz	r2, r2
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	f042 0220 	orr.w	r2, r2, #32
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	f002 021f 	and.w	r2, r2, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d17b      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0f3      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d13c      	bne.n	800423c <HAL_RCC_ClockConfig+0x178>
 80041c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_RCC_ClockConfig+0x128>
 80041e6:	4b4f      	ldr	r3, [pc, #316]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	e00f      	b.n	800420c <HAL_RCC_ClockConfig+0x148>
 80041ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	647b      	str	r3, [r7, #68]	; 0x44
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004210:	63ba      	str	r2, [r7, #56]	; 0x38
 8004212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004214:	fa92 f2a2 	rbit	r2, r2
 8004218:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800421a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f042 0220 	orr.w	r2, r2, #32
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f002 021f 	and.w	r2, r2, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13a      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b2      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
 800423c:	2302      	movs	r3, #2
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_ClockConfig+0x1a0>
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e00d      	b.n	8004280 <HAL_RCC_ClockConfig+0x1bc>
 8004264:	2302      	movs	r3, #2
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	2302      	movs	r3, #2
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2202      	movs	r2, #2
 8004282:	61ba      	str	r2, [r7, #24]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	fa92 f2a2 	rbit	r2, r2
 800428a:	617a      	str	r2, [r7, #20]
  return result;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e079      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	491a      	ldr	r1, [pc, #104]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fd ffc6 	bl	8002250 <HAL_GetTick>
 80042c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fd ffc2 	bl	8002250 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e061      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d214      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	4906      	ldr	r1, [pc, #24]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e040      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	491a      	ldr	r1, [pc, #104]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4912      	ldr	r1, [pc, #72]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004366:	f000 f829 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800436a:	4601      	mov	r1, r0
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004374:	22f0      	movs	r2, #240	; 0xf0
 8004376:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	fa92 f2a2 	rbit	r2, r2
 800437e:	60fa      	str	r2, [r7, #12]
  return result;
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	40d3      	lsrs	r3, r2
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x2ec>)
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	fa21 f303 	lsr.w	r3, r1, r3
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fe6c 	bl	8002078 <HAL_InitTick>
  
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3778      	adds	r7, #120	; 0x78
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08009294 	.word	0x08009294
 80043b4:	20000004 	.word	0x20000004
 80043b8:	20000008 	.word	0x20000008

080043bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b08b      	sub	sp, #44	; 0x2c
 80043c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x30>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x36>
 80043ea:	e03f      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043ee:	623b      	str	r3, [r7, #32]
      break;
 80043f0:	e03f      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	fa92 f2a2 	rbit	r2, r2
 8004404:	607a      	str	r2, [r7, #4]
  return result;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	40d3      	lsrs	r3, r2
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	220f      	movs	r2, #15
 8004420:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	fa92 f2a2 	rbit	r2, r2
 8004428:	60fa      	str	r2, [r7, #12]
  return result;
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	40d3      	lsrs	r3, r2
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004444:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	e007      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004456:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	fbb2 f2f3 	udiv	r2, r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	623b      	str	r3, [r7, #32]
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc8>)
 800446e:	623b      	str	r3, [r7, #32]
      break;
 8004470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004472:	6a3b      	ldr	r3, [r7, #32]
}
 8004474:	4618      	mov	r0, r3
 8004476:	372c      	adds	r7, #44	; 0x2c
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40021000 	.word	0x40021000
 8004484:	007a1200 	.word	0x007a1200
 8004488:	080092ac 	.word	0x080092ac
 800448c:	080092bc 	.word	0x080092bc

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000004 	.word	0x20000004

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044ae:	f7ff ffef 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	fa92 f2a2 	rbit	r2, r2
 80044c8:	603a      	str	r2, [r7, #0]
  return result;
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	fab2 f282 	clz	r2, r2
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	40d3      	lsrs	r3, r2
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	080092a4 	.word	0x080092a4

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044f2:	f7ff ffcd 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044f6:	4601      	mov	r1, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004500:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004504:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	fa92 f2a2 	rbit	r2, r2
 800450c:	603a      	str	r2, [r7, #0]
  return result;
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	fab2 f282 	clz	r2, r2
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	40d3      	lsrs	r3, r2
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_RCC_GetPCLK2Freq+0x40>)
 800451a:	5cd3      	ldrb	r3, [r2, r3]
 800451c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	080092a4 	.word	0x080092a4

08004530 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	220f      	movs	r2, #15
 800453e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCC_GetClockConfig+0x60>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	40022000 	.word	0x40022000

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b092      	sub	sp, #72	; 0x48
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80d4 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b8:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10e      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	61d3      	str	r3, [r2, #28]
 80045d0:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a41      	ldr	r2, [pc, #260]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7fd fe29 	bl	8002250 <HAL_GetTick>
 80045fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd fe25 	bl	8002250 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	; 0x64
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1d6      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004620:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8084 	beq.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800463c:	429a      	cmp	r2, r3
 800463e:	d07c      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	461a      	mov	r2, r3
 800466a:	2301      	movs	r3, #1
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fd fdd5 	bl	8002250 <HAL_GetTick>
 80046a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd fdd1 	bl	8002250 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e180      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046c0:	2302      	movs	r3, #2
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	2302      	movs	r3, #2
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	61fb      	str	r3, [r7, #28]
  return result;
 80046d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0302 	orr.w	r3, r3, #2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d108      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046ee:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	e00d      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	10908100 	.word	0x10908100
 8004700:	2302      	movs	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	4ba0      	ldr	r3, [pc, #640]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2202      	movs	r2, #2
 8004712:	613a      	str	r2, [r7, #16]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	fa92 f2a2 	rbit	r2, r2
 800471a:	60fa      	str	r2, [r7, #12]
  return result;
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	fab2 f282 	clz	r2, r2
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f002 021f 	and.w	r2, r2, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f202 	lsl.w	r2, r1, r2
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0b7      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800473a:	4b95      	ldr	r3, [pc, #596]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4992      	ldr	r1, [pc, #584]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800474c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b8e      	ldr	r3, [pc, #568]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4a8d      	ldr	r2, [pc, #564]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476c:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f023 0203 	bic.w	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4985      	ldr	r1, [pc, #532]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478a:	4b81      	ldr	r3, [pc, #516]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	497e      	ldr	r1, [pc, #504]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a8:	4b79      	ldr	r3, [pc, #484]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4976      	ldr	r1, [pc, #472]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f023 0210 	bic.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	496f      	ldr	r1, [pc, #444]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	4967      	ldr	r1, [pc, #412]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004802:	4b63      	ldr	r3, [pc, #396]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f023 0220 	bic.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4960      	ldr	r1, [pc, #384]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	4958      	ldr	r1, [pc, #352]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800483e:	4b54      	ldr	r3, [pc, #336]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4951      	ldr	r1, [pc, #324]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800485c:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4949      	ldr	r1, [pc, #292]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4942      	ldr	r1, [pc, #264]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	493a      	ldr	r1, [pc, #232]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4933      	ldr	r1, [pc, #204]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048d4:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	492b      	ldr	r1, [pc, #172]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048f2:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4924      	ldr	r1, [pc, #144]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	491c      	ldr	r1, [pc, #112]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800492e:	4b18      	ldr	r3, [pc, #96]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	4915      	ldr	r1, [pc, #84]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	490d      	ldr	r1, [pc, #52]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	4906      	ldr	r1, [pc, #24]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00c      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004988:	4b01      	ldr	r3, [pc, #4]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	e002      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	490b      	ldr	r1, [pc, #44]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3748      	adds	r7, #72	; 0x48
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e049      	b.n	8004a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f841 	bl	8004a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 f9f8 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e04f      	b.n	8004b4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_Base_Start_IT+0x76>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d115      	bne.n	8004b36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d015      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b22:	d011      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e008      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e000      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40015000 	.word	0x40015000
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f905 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8f7 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f908 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8db 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8cd 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8de 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8b1 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8a3 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8b4 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f887 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f879 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f88a 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc ffbc 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f918 	bl	8004f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f90b 	bl	8004f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f838 	bl	8004dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0220 	mvn.w	r2, #32
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8cb 	bl	8004f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a42      	ldr	r2, [pc, #264]	; (8004f20 <TIM_Base_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3f      	ldr	r2, [pc, #252]	; (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3e      	ldr	r2, [pc, #248]	; (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3d      	ldr	r2, [pc, #244]	; (8004f2c <TIM_Base_SetConfig+0x128>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <TIM_Base_SetConfig+0x11c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <TIM_Base_SetConfig+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_Base_SetConfig+0x11c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <TIM_Base_SetConfig+0x100>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <TIM_Base_SetConfig+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00f      	beq.n	8004f04 <TIM_Base_SetConfig+0x100>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <TIM_Base_SetConfig+0x130>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_Base_SetConfig+0x100>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <TIM_Base_SetConfig+0x134>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_Base_SetConfig+0x100>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <TIM_Base_SetConfig+0x138>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x100>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d103      	bne.n	8004f0c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	615a      	str	r2, [r3, #20]
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40015000 	.word	0x40015000
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e040      	b.n	8005010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd f828 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f82c 	bl	8005018 <UART_SetConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9f4 	bl	80053c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa7b 	bl	8005504 <UART_CheckIdleState>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4baa      	ldr	r3, [pc, #680]	; (80052ec <UART_SetConfig+0x2d4>)
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	6979      	ldr	r1, [r7, #20]
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	430a      	orrs	r2, r1
 8005088:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a98      	ldr	r2, [pc, #608]	; (80052f0 <UART_SetConfig+0x2d8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d121      	bne.n	80050d8 <UART_SetConfig+0xc0>
 8005094:	4b97      	ldr	r3, [pc, #604]	; (80052f4 <UART_SetConfig+0x2dc>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d817      	bhi.n	80050d0 <UART_SetConfig+0xb8>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x90>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cb 	.word	0x080050cb
 80050b4:	080050bf 	.word	0x080050bf
 80050b8:	2301      	movs	r3, #1
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e0b2      	b.n	8005224 <UART_SetConfig+0x20c>
 80050be:	2302      	movs	r3, #2
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e0af      	b.n	8005224 <UART_SetConfig+0x20c>
 80050c4:	2304      	movs	r3, #4
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e0ac      	b.n	8005224 <UART_SetConfig+0x20c>
 80050ca:	2308      	movs	r3, #8
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e0a9      	b.n	8005224 <UART_SetConfig+0x20c>
 80050d0:	2310      	movs	r3, #16
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	bf00      	nop
 80050d6:	e0a5      	b.n	8005224 <UART_SetConfig+0x20c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a86      	ldr	r2, [pc, #536]	; (80052f8 <UART_SetConfig+0x2e0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d123      	bne.n	800512a <UART_SetConfig+0x112>
 80050e2:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <UART_SetConfig+0x2dc>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ee:	d012      	beq.n	8005116 <UART_SetConfig+0xfe>
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d802      	bhi.n	80050fc <UART_SetConfig+0xe4>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <UART_SetConfig+0xf2>
 80050fa:	e012      	b.n	8005122 <UART_SetConfig+0x10a>
 80050fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005100:	d00c      	beq.n	800511c <UART_SetConfig+0x104>
 8005102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005106:	d003      	beq.n	8005110 <UART_SetConfig+0xf8>
 8005108:	e00b      	b.n	8005122 <UART_SetConfig+0x10a>
 800510a:	2300      	movs	r3, #0
 800510c:	77fb      	strb	r3, [r7, #31]
 800510e:	e089      	b.n	8005224 <UART_SetConfig+0x20c>
 8005110:	2302      	movs	r3, #2
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e086      	b.n	8005224 <UART_SetConfig+0x20c>
 8005116:	2304      	movs	r3, #4
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e083      	b.n	8005224 <UART_SetConfig+0x20c>
 800511c:	2308      	movs	r3, #8
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e080      	b.n	8005224 <UART_SetConfig+0x20c>
 8005122:	2310      	movs	r3, #16
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	bf00      	nop
 8005128:	e07c      	b.n	8005224 <UART_SetConfig+0x20c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a73      	ldr	r2, [pc, #460]	; (80052fc <UART_SetConfig+0x2e4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d123      	bne.n	800517c <UART_SetConfig+0x164>
 8005134:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <UART_SetConfig+0x2dc>)
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800513c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005140:	d012      	beq.n	8005168 <UART_SetConfig+0x150>
 8005142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005146:	d802      	bhi.n	800514e <UART_SetConfig+0x136>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <UART_SetConfig+0x144>
 800514c:	e012      	b.n	8005174 <UART_SetConfig+0x15c>
 800514e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005152:	d00c      	beq.n	800516e <UART_SetConfig+0x156>
 8005154:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005158:	d003      	beq.n	8005162 <UART_SetConfig+0x14a>
 800515a:	e00b      	b.n	8005174 <UART_SetConfig+0x15c>
 800515c:	2300      	movs	r3, #0
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e060      	b.n	8005224 <UART_SetConfig+0x20c>
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e05d      	b.n	8005224 <UART_SetConfig+0x20c>
 8005168:	2304      	movs	r3, #4
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e05a      	b.n	8005224 <UART_SetConfig+0x20c>
 800516e:	2308      	movs	r3, #8
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e057      	b.n	8005224 <UART_SetConfig+0x20c>
 8005174:	2310      	movs	r3, #16
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	bf00      	nop
 800517a:	e053      	b.n	8005224 <UART_SetConfig+0x20c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5f      	ldr	r2, [pc, #380]	; (8005300 <UART_SetConfig+0x2e8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d123      	bne.n	80051ce <UART_SetConfig+0x1b6>
 8005186:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <UART_SetConfig+0x2dc>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800518e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005192:	d012      	beq.n	80051ba <UART_SetConfig+0x1a2>
 8005194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005198:	d802      	bhi.n	80051a0 <UART_SetConfig+0x188>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <UART_SetConfig+0x196>
 800519e:	e012      	b.n	80051c6 <UART_SetConfig+0x1ae>
 80051a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a4:	d00c      	beq.n	80051c0 <UART_SetConfig+0x1a8>
 80051a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051aa:	d003      	beq.n	80051b4 <UART_SetConfig+0x19c>
 80051ac:	e00b      	b.n	80051c6 <UART_SetConfig+0x1ae>
 80051ae:	2300      	movs	r3, #0
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e037      	b.n	8005224 <UART_SetConfig+0x20c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e034      	b.n	8005224 <UART_SetConfig+0x20c>
 80051ba:	2304      	movs	r3, #4
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e031      	b.n	8005224 <UART_SetConfig+0x20c>
 80051c0:	2308      	movs	r3, #8
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e02e      	b.n	8005224 <UART_SetConfig+0x20c>
 80051c6:	2310      	movs	r3, #16
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	bf00      	nop
 80051cc:	e02a      	b.n	8005224 <UART_SetConfig+0x20c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4c      	ldr	r2, [pc, #304]	; (8005304 <UART_SetConfig+0x2ec>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d123      	bne.n	8005220 <UART_SetConfig+0x208>
 80051d8:	4b46      	ldr	r3, [pc, #280]	; (80052f4 <UART_SetConfig+0x2dc>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80051e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e4:	d012      	beq.n	800520c <UART_SetConfig+0x1f4>
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d802      	bhi.n	80051f2 <UART_SetConfig+0x1da>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <UART_SetConfig+0x1e8>
 80051f0:	e012      	b.n	8005218 <UART_SetConfig+0x200>
 80051f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051f6:	d00c      	beq.n	8005212 <UART_SetConfig+0x1fa>
 80051f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051fc:	d003      	beq.n	8005206 <UART_SetConfig+0x1ee>
 80051fe:	e00b      	b.n	8005218 <UART_SetConfig+0x200>
 8005200:	2300      	movs	r3, #0
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e00e      	b.n	8005224 <UART_SetConfig+0x20c>
 8005206:	2302      	movs	r3, #2
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e00b      	b.n	8005224 <UART_SetConfig+0x20c>
 800520c:	2304      	movs	r3, #4
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x20c>
 8005212:	2308      	movs	r3, #8
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	e005      	b.n	8005224 <UART_SetConfig+0x20c>
 8005218:	2310      	movs	r3, #16
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	bf00      	nop
 800521e:	e001      	b.n	8005224 <UART_SetConfig+0x20c>
 8005220:	2310      	movs	r3, #16
 8005222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522c:	d16e      	bne.n	800530c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d828      	bhi.n	8005286 <UART_SetConfig+0x26e>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x224>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7ff f922 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8005264:	61b8      	str	r0, [r7, #24]
        break;
 8005266:	e013      	b.n	8005290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7ff f940 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 800526c:	61b8      	str	r0, [r7, #24]
        break;
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b25      	ldr	r3, [pc, #148]	; (8005308 <UART_SetConfig+0x2f0>)
 8005272:	61bb      	str	r3, [r7, #24]
        break;
 8005274:	e00c      	b.n	8005290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7ff f8a1 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800527a:	61b8      	str	r0, [r7, #24]
        break;
 800527c:	e008      	b.n	8005290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61bb      	str	r3, [r7, #24]
        break;
 8005284:	e004      	b.n	8005290 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	77bb      	strb	r3, [r7, #30]
        break;
 800528e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8086 	beq.w	80053a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	005a      	lsls	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	441a      	add	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	d916      	bls.n	80052e4 <UART_SetConfig+0x2cc>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d212      	bcs.n	80052e4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f023 030f 	bic.w	r3, r3, #15
 80052c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	89fb      	ldrh	r3, [r7, #14]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	89fa      	ldrh	r2, [r7, #14]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	e05f      	b.n	80053a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	77bb      	strb	r3, [r7, #30]
 80052e8:	e05c      	b.n	80053a4 <UART_SetConfig+0x38c>
 80052ea:	bf00      	nop
 80052ec:	efff69f3 	.word	0xefff69f3
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40004400 	.word	0x40004400
 80052fc:	40004800 	.word	0x40004800
 8005300:	40004c00 	.word	0x40004c00
 8005304:	40005000 	.word	0x40005000
 8005308:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800530c:	7ffb      	ldrb	r3, [r7, #31]
 800530e:	2b08      	cmp	r3, #8
 8005310:	d827      	bhi.n	8005362 <UART_SetConfig+0x34a>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x300>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005363 	.word	0x08005363
 8005328:	08005353 	.word	0x08005353
 800532c:	08005363 	.word	0x08005363
 8005330:	08005363 	.word	0x08005363
 8005334:	08005363 	.word	0x08005363
 8005338:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7ff f8b4 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8005340:	61b8      	str	r0, [r7, #24]
        break;
 8005342:	e013      	b.n	800536c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7ff f8d2 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 8005348:	61b8      	str	r0, [r7, #24]
        break;
 800534a:	e00f      	b.n	800536c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <UART_SetConfig+0x3a4>)
 800534e:	61bb      	str	r3, [r7, #24]
        break;
 8005350:	e00c      	b.n	800536c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7ff f833 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8005356:	61b8      	str	r0, [r7, #24]
        break;
 8005358:	e008      	b.n	800536c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	61bb      	str	r3, [r7, #24]
        break;
 8005360:	e004      	b.n	800536c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	77bb      	strb	r3, [r7, #30]
        break;
 800536a:	bf00      	nop
    }

    if (pclk != 0U)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d018      	beq.n	80053a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085a      	lsrs	r2, r3, #1
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	441a      	add	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	b29b      	uxth	r3, r3
 8005386:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b0f      	cmp	r3, #15
 800538c:	d908      	bls.n	80053a0 <UART_SetConfig+0x388>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d204      	bcs.n	80053a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e001      	b.n	80053a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	007a1200 	.word	0x007a1200

080053c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054be:	d10a      	bne.n	80054d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005514:	f7fc fe9c 	bl	8002250 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10e      	bne.n	8005546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f82d 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e023      	b.n	800558e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b04      	cmp	r3, #4
 8005552:	d10e      	bne.n	8005572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f817 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e00d      	b.n	800558e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a6:	e05e      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d05a      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b0:	f7fc fe4e 	bl	8002250 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d11b      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e043      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02c      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561a:	d124      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005634:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e00f      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d091      	beq.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	60bb      	str	r3, [r7, #8]
  return(result);
 800569c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	607b      	str	r3, [r7, #4]
  return(result);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <osKernelInitialize+0x32>
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <osKernelInitialize+0x64>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d109      	bne.n	80056ca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056b6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ba:	603b      	str	r3, [r7, #0]
  return(result);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80056c2:	f06f 0305 	mvn.w	r3, #5
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e00c      	b.n	80056e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <osKernelInitialize+0x64>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <osKernelInitialize+0x64>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e002      	b.n	80056e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056e4:	68fb      	ldr	r3, [r7, #12]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200000a8 	.word	0x200000a8

080056f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056fe:	f3ef 8305 	mrs	r3, IPSR
 8005702:	60bb      	str	r3, [r7, #8]
  return(result);
 8005704:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10f      	bne.n	800572a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800570a:	f3ef 8310 	mrs	r3, PRIMASK
 800570e:	607b      	str	r3, [r7, #4]
  return(result);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <osKernelStart+0x32>
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <osKernelStart+0x64>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d109      	bne.n	8005732 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800571e:	f3ef 8311 	mrs	r3, BASEPRI
 8005722:	603b      	str	r3, [r7, #0]
  return(result);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <osKernelStart+0x3a>
    stat = osErrorISR;
 800572a:	f06f 0305 	mvn.w	r3, #5
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e00e      	b.n	8005750 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <osKernelStart+0x64>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d107      	bne.n	800574a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <osKernelStart+0x64>)
 800573c:	2202      	movs	r2, #2
 800573e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005740:	f001 f86a 	bl	8006818 <vTaskStartScheduler>
      stat = osOK;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e002      	b.n	8005750 <osKernelStart+0x58>
    } else {
      stat = osError;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005750:	68fb      	ldr	r3, [r7, #12]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200000a8 	.word	0x200000a8

08005760 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b092      	sub	sp, #72	; 0x48
 8005764:	af04      	add	r7, sp, #16
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005770:	f3ef 8305 	mrs	r3, IPSR
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005778:	2b00      	cmp	r3, #0
 800577a:	f040 8094 	bne.w	80058a6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	623b      	str	r3, [r7, #32]
  return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 808d 	bne.w	80058a6 <osThreadNew+0x146>
 800578c:	4b48      	ldr	r3, [pc, #288]	; (80058b0 <osThreadNew+0x150>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d106      	bne.n	80057a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005794:	f3ef 8311 	mrs	r3, BASEPRI
 8005798:	61fb      	str	r3, [r7, #28]
  return(result);
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8082 	bne.w	80058a6 <osThreadNew+0x146>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d07e      	beq.n	80058a6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80057ac:	2318      	movs	r3, #24
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80057b0:	2300      	movs	r3, #0
 80057b2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80057b4:	f107 031b 	add.w	r3, r7, #27
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d045      	beq.n	8005852 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <osThreadNew+0x74>
        name = attr->name;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <osThreadNew+0x9a>
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b38      	cmp	r3, #56	; 0x38
 80057ec:	d805      	bhi.n	80057fa <osThreadNew+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <osThreadNew+0x9e>
        return (NULL);
 80057fa:	2300      	movs	r3, #0
 80057fc:	e054      	b.n	80058a8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <osThreadNew+0xd4>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b5b      	cmp	r3, #91	; 0x5b
 800581c:	d90a      	bls.n	8005834 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <osThreadNew+0xd4>
        mem = 1;
 800582e:	2301      	movs	r3, #1
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	e010      	b.n	8005856 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <osThreadNew+0xf6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <osThreadNew+0xf6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <osThreadNew+0xf6>
          mem = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005850:	e001      	b.n	8005856 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	2b01      	cmp	r3, #1
 800585a:	d110      	bne.n	800587e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fe08 	bl	8006488 <xTaskCreateStatic>
 8005878:	4603      	mov	r3, r0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e013      	b.n	80058a6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d110      	bne.n	80058a6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	b29a      	uxth	r2, r3
 8005888:	f107 0314 	add.w	r3, r7, #20
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fe4f 	bl	800653a <xTaskCreate>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d001      	beq.n	80058a6 <osThreadNew+0x146>
          hTask = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058a6:	697b      	ldr	r3, [r7, #20]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3738      	adds	r7, #56	; 0x38
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200000a8 	.word	0x200000a8

080058b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058bc:	f3ef 8305 	mrs	r3, IPSR
 80058c0:	613b      	str	r3, [r7, #16]
  return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c8:	f3ef 8310 	mrs	r3, PRIMASK
 80058cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <osDelay+0x34>
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <osDelay+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d109      	bne.n	80058f0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058dc:	f3ef 8311 	mrs	r3, BASEPRI
 80058e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <osDelay+0x3c>
    stat = osErrorISR;
 80058e8:	f06f 0305 	mvn.w	r3, #5
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e007      	b.n	8005900 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <osDelay+0x4c>
      vTaskDelay(ticks);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 ff58 	bl	80067b0 <vTaskDelay>
    }
  }

  return (stat);
 8005900:	697b      	ldr	r3, [r7, #20]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200000a8 	.word	0x200000a8

08005910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a07      	ldr	r2, [pc, #28]	; (800593c <vApplicationGetIdleTaskMemory+0x2c>)
 8005920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a06      	ldr	r2, [pc, #24]	; (8005940 <vApplicationGetIdleTaskMemory+0x30>)
 8005926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	601a      	str	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	200000ac 	.word	0x200000ac
 8005940:	20000108 	.word	0x20000108

08005944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a07      	ldr	r2, [pc, #28]	; (8005970 <vApplicationGetTimerTaskMemory+0x2c>)
 8005954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a06      	ldr	r2, [pc, #24]	; (8005974 <vApplicationGetTimerTaskMemory+0x30>)
 800595a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000308 	.word	0x20000308
 8005974:	20000364 	.word	0x20000364

08005978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f103 0208 	add.w	r2, r3, #8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f103 0208 	add.w	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f103 0208 	add.w	r2, r3, #8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e00c      	b.n	8005a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e002      	b.n	8005a48 <vListInsert+0x2e>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d2f6      	bcs.n	8005a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6892      	ldr	r2, [r2, #8]
 8005aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6852      	ldr	r2, [r2, #4]
 8005aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d103      	bne.n	8005ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	e7fe      	b.n	8005b06 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005b08:	f001 ffd8 	bl	8007abc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d114      	bne.n	8005b88 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01a      	beq.n	8005b9c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3310      	adds	r3, #16
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 f8da 	bl	8006d24 <xTaskRemoveFromEventList>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <xQueueGenericReset+0xcc>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e009      	b.n	8005b9c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3310      	adds	r3, #16
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fef3 	bl	8005978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff feee 	bl	8005978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b9c:	f001 ffbc 	bl	8007b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ba0:	2301      	movs	r3, #1
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	; 0x38
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueGenericCreateStatic+0x28>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <xQueueGenericCreateStatic+0x42>
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <xQueueGenericCreateStatic+0x4e>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <xQueueGenericCreateStatic+0x52>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueGenericCreateStatic+0x54>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <xQueueGenericCreateStatic+0x6c>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	e7fe      	b.n	8005c1a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <xQueueGenericCreateStatic+0x78>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <xQueueGenericCreateStatic+0x7c>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <xQueueGenericCreateStatic+0x7e>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <xQueueGenericCreateStatic+0x96>
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	e7fe      	b.n	8005c44 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c46:	2350      	movs	r3, #80	; 0x50
 8005c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d009      	beq.n	8005c64 <xQueueGenericCreateStatic+0xb4>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	e7fe      	b.n	8005c62 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f805 	bl	8005c94 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3730      	adds	r7, #48	; 0x30
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e002      	b.n	8005cb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	69b8      	ldr	r0, [r7, #24]
 8005cc6:	f7ff ff0b 	bl	8005ae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08e      	sub	sp, #56	; 0x38
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cea:	2300      	movs	r3, #0
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <xQueueGenericSend+0x30>
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	e7fe      	b.n	8005d0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <xQueueGenericSend+0x3e>
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <xQueueGenericSend+0x42>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <xQueueGenericSend+0x44>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <xQueueGenericSend+0x5c>
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	e7fe      	b.n	8005d36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSend+0x6a>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <xQueueGenericSend+0x6e>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xQueueGenericSend+0x70>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <xQueueGenericSend+0x88>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	e7fe      	b.n	8005d62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d64:	f001 f99a 	bl	800709c <xTaskGetSchedulerState>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <xQueueGenericSend+0x98>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <xQueueGenericSend+0x9c>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <xQueueGenericSend+0x9e>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <xQueueGenericSend+0xb6>
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e7fe      	b.n	8005d90 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d92:	f001 fe93 	bl	8007abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <xQueueGenericSend+0xcc>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d129      	bne.n	8005dfc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dae:	f000 f9ff 	bl	80061b0 <prvCopyDataToQueue>
 8005db2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	3324      	adds	r3, #36	; 0x24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 ffaf 	bl	8006d24 <xTaskRemoveFromEventList>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dcc:	4b3f      	ldr	r3, [pc, #252]	; (8005ecc <xQueueGenericSend+0x1f0>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	e00a      	b.n	8005df4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005de4:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <xQueueGenericSend+0x1f0>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005df4:	f001 fe90 	bl	8007b18 <vPortExitCritical>
				return pdPASS;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e063      	b.n	8005ec4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e02:	f001 fe89 	bl	8007b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e05c      	b.n	8005ec4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 ffe7 	bl	8006de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1e:	f001 fe7b 	bl	8007b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e22:	f000 fd5d 	bl	80068e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e26:	f001 fe49 	bl	8007abc <vPortEnterCritical>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d103      	bne.n	8005e40 <xQueueGenericSend+0x164>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <xQueueGenericSend+0x17a>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e56:	f001 fe5f 	bl	8007b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e5a:	1d3a      	adds	r2, r7, #4
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 ffd6 	bl	8006e14 <xTaskCheckForTimeOut>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d124      	bne.n	8005eb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e70:	f000 fa96 	bl	80063a0 <prvIsQueueFull>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ff00 	bl	8006c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e8a:	f000 fa21 	bl	80062d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e8e:	f000 fd35 	bl	80068fc <xTaskResumeAll>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f af7c 	bne.w	8005d92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <xQueueGenericSend+0x1f0>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	e772      	b.n	8005d92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eae:	f000 fa0f 	bl	80062d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eb2:	f000 fd23 	bl	80068fc <xTaskResumeAll>
 8005eb6:	e76c      	b.n	8005d92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eba:	f000 fa09 	bl	80062d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ebe:	f000 fd1d 	bl	80068fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ec2:	2300      	movs	r3, #0
		}
	}
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3738      	adds	r7, #56	; 0x38
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <xQueueGenericSendFromISR+0x2c>
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8005efa:	e7fe      	b.n	8005efa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSendFromISR+0x3a>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSendFromISR+0x3e>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSendFromISR+0x40>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <xQueueGenericSendFromISR+0x58>
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	e7fe      	b.n	8005f26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d103      	bne.n	8005f36 <xQueueGenericSendFromISR+0x66>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericSendFromISR+0x6a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericSendFromISR+0x6c>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <xQueueGenericSendFromISR+0x84>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e7fe      	b.n	8005f52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f54:	f001 fe8e 	bl	8007c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f58:	f3ef 8211 	mrs	r2, BASEPRI
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61ba      	str	r2, [r7, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <xQueueGenericSendFromISR+0xb6>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d12c      	bne.n	8005fe0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f96:	f000 f90b 	bl	80061b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d112      	bne.n	8005fca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d016      	beq.n	8005fda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 feb7 	bl	8006d24 <xTaskRemoveFromEventList>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e007      	b.n	8005fda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	b25a      	sxtb	r2, r3
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005fde:	e001      	b.n	8005fe4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3738      	adds	r7, #56	; 0x38
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08c      	sub	sp, #48	; 0x30
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006004:	2300      	movs	r3, #0
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <xQueueReceive+0x2e>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	e7fe      	b.n	8006024 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <xQueueReceive+0x3c>
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <xQueueReceive+0x40>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <xQueueReceive+0x42>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <xQueueReceive+0x5a>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e7fe      	b.n	8006050 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006052:	f001 f823 	bl	800709c <xTaskGetSchedulerState>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <xQueueReceive+0x6a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <xQueueReceive+0x6e>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <xQueueReceive+0x70>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <xQueueReceive+0x88>
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e7fe      	b.n	800607e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006080:	f001 fd1c 	bl	8007abc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01f      	beq.n	80060d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006094:	f000 f8f6 	bl	8006284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1e5a      	subs	r2, r3, #1
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	3310      	adds	r3, #16
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fe39 	bl	8006d24 <xTaskRemoveFromEventList>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060b8:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <xQueueReceive+0x1b4>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060c8:	f001 fd26 	bl	8007b18 <vPortExitCritical>
				return pdPASS;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e069      	b.n	80061a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060d6:	f001 fd1f 	bl	8007b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060da:	2300      	movs	r3, #0
 80060dc:	e062      	b.n	80061a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fe7d 	bl	8006de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060f2:	f001 fd11 	bl	8007b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f6:	f000 fbf3 	bl	80068e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060fa:	f001 fcdf 	bl	8007abc <vPortEnterCritical>
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006104:	b25b      	sxtb	r3, r3
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d103      	bne.n	8006114 <xQueueReceive+0x11c>
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800611a:	b25b      	sxtb	r3, r3
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d103      	bne.n	800612a <xQueueReceive+0x132>
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800612a:	f001 fcf5 	bl	8007b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800612e:	1d3a      	adds	r2, r7, #4
 8006130:	f107 0310 	add.w	r3, r7, #16
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fe6c 	bl	8006e14 <xTaskCheckForTimeOut>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d123      	bne.n	800618a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f000 f916 	bl	8006374 <prvIsQueueEmpty>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	3324      	adds	r3, #36	; 0x24
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fd96 	bl	8006c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800615c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615e:	f000 f8b7 	bl	80062d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006162:	f000 fbcb 	bl	80068fc <xTaskResumeAll>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d189      	bne.n	8006080 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xQueueReceive+0x1b4>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	e780      	b.n	8006080 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006180:	f000 f8a6 	bl	80062d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006184:	f000 fbba 	bl	80068fc <xTaskResumeAll>
 8006188:	e77a      	b.n	8006080 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800618a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618c:	f000 f8a0 	bl	80062d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006190:	f000 fbb4 	bl	80068fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006196:	f000 f8ed 	bl	8006374 <prvIsQueueEmpty>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f43f af6f 	beq.w	8006080 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3730      	adds	r7, #48	; 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10d      	bne.n	80061ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d14d      	bne.n	8006272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 ff7c 	bl	80070d8 <xTaskPriorityDisinherit>
 80061e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	e043      	b.n	8006272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d119      	bne.n	8006224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6898      	ldr	r0, [r3, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	461a      	mov	r2, r3
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	f001 ff78 	bl	80080f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d32b      	bcc.n	8006272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	e026      	b.n	8006272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68d8      	ldr	r0, [r3, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	461a      	mov	r2, r3
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	f001 ff5e 	bl	80080f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	425b      	negs	r3, r3
 800623e:	441a      	add	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d207      	bcs.n	8006260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	425b      	negs	r3, r3
 800625a:	441a      	add	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d105      	bne.n	8006272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3b01      	subs	r3, #1
 8006270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d018      	beq.n	80062c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d303      	bcc.n	80062b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68d9      	ldr	r1, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	461a      	mov	r2, r3
 80062c2:	6838      	ldr	r0, [r7, #0]
 80062c4:	f001 ff14 	bl	80080f0 <memcpy>
	}
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062d8:	f001 fbf0 	bl	8007abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e4:	e011      	b.n	800630a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d012      	beq.n	8006314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3324      	adds	r3, #36	; 0x24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fd16 	bl	8006d24 <xTaskRemoveFromEventList>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062fe:	f000 fde9 	bl	8006ed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	3b01      	subs	r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800630a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	dce9      	bgt.n	80062e6 <prvUnlockQueue+0x16>
 8006312:	e000      	b.n	8006316 <prvUnlockQueue+0x46>
					break;
 8006314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800631e:	f001 fbfb 	bl	8007b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006322:	f001 fbcb 	bl	8007abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632e:	e011      	b.n	8006354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d012      	beq.n	800635e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3310      	adds	r3, #16
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fcf1 	bl	8006d24 <xTaskRemoveFromEventList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006348:	f000 fdc4 	bl	8006ed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	3b01      	subs	r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dce9      	bgt.n	8006330 <prvUnlockQueue+0x60>
 800635c:	e000      	b.n	8006360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800635e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	22ff      	movs	r2, #255	; 0xff
 8006364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006368:	f001 fbd6 	bl	8007b18 <vPortExitCritical>
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800637c:	f001 fb9e 	bl	8007abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e001      	b.n	8006392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006392:	f001 fbc1 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a8:	f001 fb88 	bl	8007abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d102      	bne.n	80063be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e001      	b.n	80063c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063c2:	f001 fba9 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	e014      	b.n	800640a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <vQueueAddToRegistry+0x4c>)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063ec:	490b      	ldr	r1, [pc, #44]	; (800641c <vQueueAddToRegistry+0x4c>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <vQueueAddToRegistry+0x4c>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006402:	e005      	b.n	8006410 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b07      	cmp	r3, #7
 800640e:	d9e7      	bls.n	80063e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20001b20 	.word	0x20001b20

08006420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006430:	f001 fb44 	bl	8007abc <vPortEnterCritical>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <vQueueWaitForMessageRestricted+0x2a>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <vQueueWaitForMessageRestricted+0x40>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	f001 fb5a 	bl	8007b18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fc2b 	bl	8006cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff28 	bl	80062d0 <prvUnlockQueue>
	}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af04      	add	r7, sp, #16
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <xTaskCreateStatic+0x28>
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	e7fe      	b.n	80064ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <xTaskCreateStatic+0x42>
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e7fe      	b.n	80064c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064ca:	235c      	movs	r3, #92	; 0x5c
 80064cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b5c      	cmp	r3, #92	; 0x5c
 80064d2:	d009      	beq.n	80064e8 <xTaskCreateStatic+0x60>
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e7fe      	b.n	80064e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01e      	beq.n	800652c <xTaskCreateStatic+0xa4>
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006506:	2300      	movs	r3, #0
 8006508:	9303      	str	r3, [sp, #12]
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f850 	bl	80065c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006526:	f000 f8d3 	bl	80066d0 <prvAddNewTaskToReadyList>
 800652a:	e001      	b.n	8006530 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006530:	697b      	ldr	r3, [r7, #20]
	}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	; 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800653a:	b580      	push	{r7, lr}
 800653c:	b08c      	sub	sp, #48	; 0x30
 800653e:	af04      	add	r7, sp, #16
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4618      	mov	r0, r3
 8006550:	f001 fbce 	bl	8007cf0 <pvPortMalloc>
 8006554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800655c:	205c      	movs	r0, #92	; 0x5c
 800655e:	f001 fbc7 	bl	8007cf0 <pvPortMalloc>
 8006562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
 8006570:	e005      	b.n	800657e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f001 fc7e 	bl	8007e74 <vPortFree>
 8006578:	e001      	b.n	800657e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d017      	beq.n	80065b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800658c:	88fa      	ldrh	r2, [r7, #6]
 800658e:	2300      	movs	r3, #0
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f80e 	bl	80065c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065a8:	69f8      	ldr	r0, [r7, #28]
 80065aa:	f000 f891 	bl	80066d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e002      	b.n	80065ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065ba:	69bb      	ldr	r3, [r7, #24]
	}
 80065bc:	4618      	mov	r0, r3
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	461a      	mov	r2, r3
 80065dc:	21a5      	movs	r1, #165	; 0xa5
 80065de:	f001 fd92 	bl	8008106 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065ec:	3b01      	subs	r3, #1
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <prvInitialiseNewTask+0x56>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e7fe      	b.n	8006618 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	e012      	b.n	8006646 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	7819      	ldrb	r1, [r3, #0]
 8006628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	3334      	adds	r3, #52	; 0x34
 8006630:	460a      	mov	r2, r1
 8006632:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3301      	adds	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d9e9      	bls.n	8006620 <prvInitialiseNewTask+0x5c>
 800664c:	e000      	b.n	8006650 <prvInitialiseNewTask+0x8c>
		{
			break;
 800664e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	2b37      	cmp	r3, #55	; 0x37
 800665c:	d901      	bls.n	8006662 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800665e:	2337      	movs	r3, #55	; 0x37
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2200      	movs	r2, #0
 8006672:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff f99d 	bl	80059b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	3318      	adds	r3, #24
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff f998 	bl	80059b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2200      	movs	r2, #0
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f001 f8db 	bl	800786c <pxPortInitialiseStack>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066d8:	f001 f9f0 	bl	8007abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066e6:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ee:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d110      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066fc:	f000 fc0e 	bl	8006f1c <prvInitialiseTaskLists>
 8006700:	e00d      	b.n	800671e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <prvAddNewTaskToReadyList+0xcc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800670a:	4b23      	ldr	r3, [pc, #140]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	429a      	cmp	r2, r3
 8006716:	d802      	bhi.n	800671e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800671e:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 8006726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006728:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006734:	4b1b      	ldr	r3, [pc, #108]	; (80067a4 <prvAddNewTaskToReadyList+0xd4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d903      	bls.n	8006744 <prvAddNewTaskToReadyList+0x74>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <prvAddNewTaskToReadyList+0xd4>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <prvAddNewTaskToReadyList+0xd8>)
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7ff f939 	bl	80059d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006760:	f001 f9da 	bl	8007b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <prvAddNewTaskToReadyList+0xcc>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	429a      	cmp	r2, r3
 8006778:	d207      	bcs.n	800678a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <prvAddNewTaskToReadyList+0xdc>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000c38 	.word	0x20000c38
 8006798:	20000764 	.word	0x20000764
 800679c:	20000c44 	.word	0x20000c44
 80067a0:	20000c54 	.word	0x20000c54
 80067a4:	20000c40 	.word	0x20000c40
 80067a8:	20000768 	.word	0x20000768
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <vTaskDelay+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <vTaskDelay+0x2e>
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	e7fe      	b.n	80067dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067de:	f000 f87f 	bl	80068e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fce3 	bl	80071b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ea:	f000 f887 	bl	80068fc <xTaskResumeAll>
 80067ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <vTaskDelay+0x64>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000c60 	.word	0x20000c60
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006826:	463a      	mov	r2, r7
 8006828:	1d39      	adds	r1, r7, #4
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff f86e 	bl	8005910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	460a      	mov	r2, r1
 8006846:	4920      	ldr	r1, [pc, #128]	; (80068c8 <vTaskStartScheduler+0xb0>)
 8006848:	4820      	ldr	r0, [pc, #128]	; (80068cc <vTaskStartScheduler+0xb4>)
 800684a:	f7ff fe1d 	bl	8006488 <xTaskCreateStatic>
 800684e:	4602      	mov	r2, r0
 8006850:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <vTaskStartScheduler+0xb8>)
 8006852:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006854:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <vTaskStartScheduler+0xb8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d102      	bne.n	8006872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800686c:	f000 fcf4 	bl	8007258 <xTimerCreateTimerTask>
 8006870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d115      	bne.n	80068a4 <vTaskStartScheduler+0x8c>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <vTaskStartScheduler+0xbc>)
 800688c:	f04f 32ff 	mov.w	r2, #4294967295
 8006890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <vTaskStartScheduler+0xc0>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <vTaskStartScheduler+0xc4>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800689e:	f001 f86f 	bl	8007980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068a2:	e00d      	b.n	80068c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d109      	bne.n	80068c0 <vTaskStartScheduler+0xa8>
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e7fe      	b.n	80068be <vTaskStartScheduler+0xa6>
}
 80068c0:	bf00      	nop
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	08009210 	.word	0x08009210
 80068cc:	08006eed 	.word	0x08006eed
 80068d0:	20000c5c 	.word	0x20000c5c
 80068d4:	20000c58 	.word	0x20000c58
 80068d8:	20000c44 	.word	0x20000c44
 80068dc:	20000c3c 	.word	0x20000c3c

080068e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <vTaskSuspendAll+0x18>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	4a03      	ldr	r2, [pc, #12]	; (80068f8 <vTaskSuspendAll+0x18>)
 80068ec:	6013      	str	r3, [r2, #0]
}
 80068ee:	bf00      	nop
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000c60 	.word	0x20000c60

080068fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800690a:	4b41      	ldr	r3, [pc, #260]	; (8006a10 <xTaskResumeAll+0x114>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <xTaskResumeAll+0x2a>
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	e7fe      	b.n	8006924 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006926:	f001 f8c9 	bl	8007abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800692a:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <xTaskResumeAll+0x114>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3b01      	subs	r3, #1
 8006930:	4a37      	ldr	r2, [pc, #220]	; (8006a10 <xTaskResumeAll+0x114>)
 8006932:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006934:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <xTaskResumeAll+0x114>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d162      	bne.n	8006a02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800693c:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <xTaskResumeAll+0x118>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d05e      	beq.n	8006a02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006944:	e02f      	b.n	80069a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006946:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <xTaskResumeAll+0x11c>)
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3318      	adds	r3, #24
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff f89a 	bl	8005a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3304      	adds	r3, #4
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff f895 	bl	8005a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006966:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <xTaskResumeAll+0x120>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d903      	bls.n	8006976 <xTaskResumeAll+0x7a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <xTaskResumeAll+0x120>)
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <xTaskResumeAll+0x124>)
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7ff f820 	bl	80059d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <xTaskResumeAll+0x128>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d302      	bcc.n	80069a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069a0:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <xTaskResumeAll+0x11c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1cb      	bne.n	8006946 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b4:	f000 fb4c 	bl	8007050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <xTaskResumeAll+0x130>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c4:	f000 f846 	bl	8006a54 <xTaskIncrementTick>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069ce:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f1      	bne.n	80069c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <xTaskResumeAll+0x130>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <xTaskResumeAll+0x12c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069f2:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <xTaskResumeAll+0x134>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a02:	f001 f889 	bl	8007b18 <vPortExitCritical>

	return xAlreadyYielded;
 8006a06:	68bb      	ldr	r3, [r7, #8]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000c60 	.word	0x20000c60
 8006a14:	20000c38 	.word	0x20000c38
 8006a18:	20000bf8 	.word	0x20000bf8
 8006a1c:	20000c40 	.word	0x20000c40
 8006a20:	20000768 	.word	0x20000768
 8006a24:	20000764 	.word	0x20000764
 8006a28:	20000c4c 	.word	0x20000c4c
 8006a2c:	20000c48 	.word	0x20000c48
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <xTaskGetTickCount+0x1c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a40:	687b      	ldr	r3, [r7, #4]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000c3c 	.word	0x20000c3c

08006a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5e:	4b51      	ldr	r3, [pc, #324]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 808d 	bne.w	8006b82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a68:	4b4f      	ldr	r3, [pc, #316]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a70:	4a4d      	ldr	r2, [pc, #308]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11f      	bne.n	8006abc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a7c:	4b4b      	ldr	r3, [pc, #300]	; (8006bac <xTaskIncrementTick+0x158>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <xTaskIncrementTick+0x46>
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	e7fe      	b.n	8006a98 <xTaskIncrementTick+0x44>
 8006a9a:	4b44      	ldr	r3, [pc, #272]	; (8006bac <xTaskIncrementTick+0x158>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a41      	ldr	r2, [pc, #260]	; (8006bac <xTaskIncrementTick+0x158>)
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	4a41      	ldr	r2, [pc, #260]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b41      	ldr	r3, [pc, #260]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a3f      	ldr	r2, [pc, #252]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	f000 faca 	bl	8007050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006abc:	4b3e      	ldr	r3, [pc, #248]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d34e      	bcc.n	8006b64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <xTaskIncrementTick+0x158>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <xTaskIncrementTick+0x80>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <xTaskIncrementTick+0x82>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ada:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	601a      	str	r2, [r3, #0]
					break;
 8006ae2:	e03f      	b.n	8006b64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ae4:	4b31      	ldr	r3, [pc, #196]	; (8006bac <xTaskIncrementTick+0x158>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d203      	bcs.n	8006b04 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006afc:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6013      	str	r3, [r2, #0]
						break;
 8006b02:	e02f      	b.n	8006b64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe ffbf 	bl	8005a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	3318      	adds	r3, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe ffb6 	bl	8005a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4b25      	ldr	r3, [pc, #148]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <xTaskIncrementTick+0xe0>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <xTaskIncrementTick+0x16c>)
 8006b42:	441a      	add	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe ff41 	bl	80059d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d3b3      	bcc.n	8006ac6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b62:	e7b0      	b.n	8006ac6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b64:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	4915      	ldr	r1, [pc, #84]	; (8006bc0 <xTaskIncrementTick+0x16c>)
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d907      	bls.n	8006b8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e004      	b.n	8006b8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <xTaskIncrementTick+0x174>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <xTaskIncrementTick+0x174>)
 8006b8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTaskIncrementTick+0x178>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006b94:	2301      	movs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b98:	697b      	ldr	r3, [r7, #20]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000c60 	.word	0x20000c60
 8006ba8:	20000c3c 	.word	0x20000c3c
 8006bac:	20000bf0 	.word	0x20000bf0
 8006bb0:	20000bf4 	.word	0x20000bf4
 8006bb4:	20000c50 	.word	0x20000c50
 8006bb8:	20000c58 	.word	0x20000c58
 8006bbc:	20000c40 	.word	0x20000c40
 8006bc0:	20000768 	.word	0x20000768
 8006bc4:	20000764 	.word	0x20000764
 8006bc8:	20000c48 	.word	0x20000c48
 8006bcc:	20000c4c 	.word	0x20000c4c

08006bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bd6:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <vTaskSwitchContext+0xa4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bde:	4b26      	ldr	r3, [pc, #152]	; (8006c78 <vTaskSwitchContext+0xa8>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be4:	e040      	b.n	8006c68 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <vTaskSwitchContext+0xa8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bec:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <vTaskSwitchContext+0xac>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e00f      	b.n	8006c14 <vTaskSwitchContext+0x44>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <vTaskSwitchContext+0x3e>
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	e7fe      	b.n	8006c0c <vTaskSwitchContext+0x3c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	491a      	ldr	r1, [pc, #104]	; (8006c80 <vTaskSwitchContext+0xb0>)
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0e5      	beq.n	8006bf4 <vTaskSwitchContext+0x24>
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <vTaskSwitchContext+0xb0>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d104      	bne.n	8006c58 <vTaskSwitchContext+0x88>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	605a      	str	r2, [r3, #4]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vTaskSwitchContext+0xb4>)
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	4a06      	ldr	r2, [pc, #24]	; (8006c7c <vTaskSwitchContext+0xac>)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000c60 	.word	0x20000c60
 8006c78:	20000c4c 	.word	0x20000c4c
 8006c7c:	20000c40 	.word	0x20000c40
 8006c80:	20000768 	.word	0x20000768
 8006c84:	20000764 	.word	0x20000764

08006c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <vTaskPlaceOnEventList+0x24>
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e7fe      	b.n	8006caa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cac:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <vTaskPlaceOnEventList+0x44>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fe feb0 	bl	8005a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6838      	ldr	r0, [r7, #0]
 8006cbe:	f000 fa77 	bl	80071b0 <prvAddCurrentTaskToDelayedList>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000764 	.word	0x20000764

08006cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <vTaskPlaceOnEventListRestricted+0x26>
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e7fe      	b.n	8006cf4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <vTaskPlaceOnEventListRestricted+0x50>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7fe fe67 	bl	80059d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	68b8      	ldr	r0, [r7, #8]
 8006d14:	f000 fa4c 	bl	80071b0 <prvAddCurrentTaskToDelayedList>
	}
 8006d18:	bf00      	nop
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000764 	.word	0x20000764

08006d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <xTaskRemoveFromEventList+0x2a>
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e7fe      	b.n	8006d4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3318      	adds	r3, #24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fe9a 	bl	8005a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <xTaskRemoveFromEventList+0xac>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fe91 	bl	8005a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <xTaskRemoveFromEventList+0xb0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <xTaskRemoveFromEventList+0x5a>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <xTaskRemoveFromEventList+0xb0>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4a13      	ldr	r2, [pc, #76]	; (8006dd8 <xTaskRemoveFromEventList+0xb4>)
 8006d8c:	441a      	add	r2, r3
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7fe fe1c 	bl	80059d2 <vListInsertEnd>
 8006d9a:	e005      	b.n	8006da8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3318      	adds	r3, #24
 8006da0:	4619      	mov	r1, r3
 8006da2:	480e      	ldr	r0, [pc, #56]	; (8006ddc <xTaskRemoveFromEventList+0xb8>)
 8006da4:	f7fe fe15 	bl	80059d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <xTaskRemoveFromEventList+0xbc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d905      	bls.n	8006dc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <xTaskRemoveFromEventList+0xc0>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e001      	b.n	8006dc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20000c60 	.word	0x20000c60
 8006dd4:	20000c40 	.word	0x20000c40
 8006dd8:	20000768 	.word	0x20000768
 8006ddc:	20000bf8 	.word	0x20000bf8
 8006de0:	20000764 	.word	0x20000764
 8006de4:	20000c4c 	.word	0x20000c4c

08006de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <vTaskInternalSetTimeOutState+0x24>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <vTaskInternalSetTimeOutState+0x28>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000c50 	.word	0x20000c50
 8006e10:	20000c3c 	.word	0x20000c3c

08006e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <xTaskCheckForTimeOut+0x24>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	e7fe      	b.n	8006e36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <xTaskCheckForTimeOut+0x3e>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e7fe      	b.n	8006e50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006e52:	f000 fe33 	bl	8007abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e56:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <xTaskCheckForTimeOut+0xb8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d102      	bne.n	8006e76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	e023      	b.n	8006ebe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <xTaskCheckForTimeOut+0xbc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d007      	beq.n	8006e92 <xTaskCheckForTimeOut+0x7e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d302      	bcc.n	8006e92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e015      	b.n	8006ebe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d20b      	bcs.n	8006eb4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad2      	subs	r2, r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff9d 	bl	8006de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	e004      	b.n	8006ebe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ebe:	f000 fe2b 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000c3c 	.word	0x20000c3c
 8006ed0:	20000c50 	.word	0x20000c50

08006ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <vTaskMissedYield+0x14>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20000c4c 	.word	0x20000c4c

08006eec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ef4:	f000 f852 	bl	8006f9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <prvIdleTask+0x28>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d9f9      	bls.n	8006ef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <prvIdleTask+0x2c>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f10:	e7f0      	b.n	8006ef4 <prvIdleTask+0x8>
 8006f12:	bf00      	nop
 8006f14:	20000768 	.word	0x20000768
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
 8006f26:	e00c      	b.n	8006f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <prvInitialiseTaskLists+0x60>)
 8006f34:	4413      	add	r3, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fd1e 	bl	8005978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b37      	cmp	r3, #55	; 0x37
 8006f46:	d9ef      	bls.n	8006f28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f48:	480d      	ldr	r0, [pc, #52]	; (8006f80 <prvInitialiseTaskLists+0x64>)
 8006f4a:	f7fe fd15 	bl	8005978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f4e:	480d      	ldr	r0, [pc, #52]	; (8006f84 <prvInitialiseTaskLists+0x68>)
 8006f50:	f7fe fd12 	bl	8005978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f54:	480c      	ldr	r0, [pc, #48]	; (8006f88 <prvInitialiseTaskLists+0x6c>)
 8006f56:	f7fe fd0f 	bl	8005978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f5a:	480c      	ldr	r0, [pc, #48]	; (8006f8c <prvInitialiseTaskLists+0x70>)
 8006f5c:	f7fe fd0c 	bl	8005978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f60:	480b      	ldr	r0, [pc, #44]	; (8006f90 <prvInitialiseTaskLists+0x74>)
 8006f62:	f7fe fd09 	bl	8005978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <prvInitialiseTaskLists+0x78>)
 8006f68:	4a05      	ldr	r2, [pc, #20]	; (8006f80 <prvInitialiseTaskLists+0x64>)
 8006f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <prvInitialiseTaskLists+0x7c>)
 8006f6e:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <prvInitialiseTaskLists+0x68>)
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000768 	.word	0x20000768
 8006f80:	20000bc8 	.word	0x20000bc8
 8006f84:	20000bdc 	.word	0x20000bdc
 8006f88:	20000bf8 	.word	0x20000bf8
 8006f8c:	20000c0c 	.word	0x20000c0c
 8006f90:	20000c24 	.word	0x20000c24
 8006f94:	20000bf0 	.word	0x20000bf0
 8006f98:	20000bf4 	.word	0x20000bf4

08006f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa2:	e019      	b.n	8006fd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fa4:	f000 fd8a 	bl	8007abc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <prvCheckTasksWaitingTermination+0x4c>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fd69 	bl	8005a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <prvCheckTasksWaitingTermination+0x50>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <prvCheckTasksWaitingTermination+0x50>)
 8006fc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <prvCheckTasksWaitingTermination+0x54>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <prvCheckTasksWaitingTermination+0x54>)
 8006fcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fce:	f000 fda3 	bl	8007b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f80e 	bl	8006ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <prvCheckTasksWaitingTermination+0x54>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e1      	bne.n	8006fa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000c0c 	.word	0x20000c0c
 8006fec:	20000c38 	.word	0x20000c38
 8006ff0:	20000c20 	.word	0x20000c20

08006ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	4618      	mov	r0, r3
 800700c:	f000 ff32 	bl	8007e74 <vPortFree>
				vPortFree( pxTCB );
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ff2f 	bl	8007e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007016:	e017      	b.n	8007048 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800701e:	2b01      	cmp	r3, #1
 8007020:	d103      	bne.n	800702a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 ff26 	bl	8007e74 <vPortFree>
	}
 8007028:	e00e      	b.n	8007048 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007030:	2b02      	cmp	r3, #2
 8007032:	d009      	beq.n	8007048 <prvDeleteTCB+0x54>
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	e7fe      	b.n	8007046 <prvDeleteTCB+0x52>
	}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <prvResetNextTaskUnblockTime+0x44>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <prvResetNextTaskUnblockTime+0x14>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <prvResetNextTaskUnblockTime+0x16>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <prvResetNextTaskUnblockTime+0x48>)
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007072:	e008      	b.n	8007086 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <prvResetNextTaskUnblockTime+0x44>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <prvResetNextTaskUnblockTime+0x48>)
 8007084:	6013      	str	r3, [r2, #0]
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000bf0 	.word	0x20000bf0
 8007098:	20000c58 	.word	0x20000c58

0800709c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <xTaskGetSchedulerState+0x34>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070aa:	2301      	movs	r3, #1
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	e008      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b0:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <xTaskGetSchedulerState+0x38>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070b8:	2302      	movs	r3, #2
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	e001      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070c2:	687b      	ldr	r3, [r7, #4]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20000c44 	.word	0x20000c44
 80070d4:	20000c60 	.word	0x20000c60

080070d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d054      	beq.n	8007198 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ee:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <xTaskPriorityDisinherit+0xcc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d009      	beq.n	800710c <xTaskPriorityDisinherit+0x34>
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e7fe      	b.n	800710a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <xTaskPriorityDisinherit+0x50>
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	e7fe      	b.n	8007126 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713a:	429a      	cmp	r2, r3
 800713c:	d02c      	beq.n	8007198 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d128      	bne.n	8007198 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fc9e 	bl	8005a8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <xTaskPriorityDisinherit+0xd0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d903      	bls.n	8007178 <xTaskPriorityDisinherit+0xa0>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <xTaskPriorityDisinherit+0xd0>)
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4a09      	ldr	r2, [pc, #36]	; (80071ac <xTaskPriorityDisinherit+0xd4>)
 8007186:	441a      	add	r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3304      	adds	r3, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f7fe fc1f 	bl	80059d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007198:	697b      	ldr	r3, [r7, #20]
	}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000764 	.word	0x20000764
 80071a8:	20000c40 	.word	0x20000c40
 80071ac:	20000768 	.word	0x20000768

080071b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071ba:	4b21      	ldr	r3, [pc, #132]	; (8007240 <prvAddCurrentTaskToDelayedList+0x90>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <prvAddCurrentTaskToDelayedList+0x94>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fc60 	bl	8005a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d10a      	bne.n	80071ea <prvAddCurrentTaskToDelayedList+0x3a>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071da:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <prvAddCurrentTaskToDelayedList+0x94>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4819      	ldr	r0, [pc, #100]	; (8007248 <prvAddCurrentTaskToDelayedList+0x98>)
 80071e4:	f7fe fbf5 	bl	80059d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071e8:	e026      	b.n	8007238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4413      	add	r3, r2
 80071f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d209      	bcs.n	8007216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007202:	4b12      	ldr	r3, [pc, #72]	; (800724c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <prvAddCurrentTaskToDelayedList+0x94>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe fc03 	bl	8005a1a <vListInsert>
}
 8007214:	e010      	b.n	8007238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007216:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <prvAddCurrentTaskToDelayedList+0x94>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3304      	adds	r3, #4
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f7fe fbf9 	bl	8005a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d202      	bcs.n	8007238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007232:	4a08      	ldr	r2, [pc, #32]	; (8007254 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000c3c 	.word	0x20000c3c
 8007244:	20000764 	.word	0x20000764
 8007248:	20000c24 	.word	0x20000c24
 800724c:	20000bf4 	.word	0x20000bf4
 8007250:	20000bf0 	.word	0x20000bf0
 8007254:	20000c58 	.word	0x20000c58

08007258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007262:	f000 fac3 	bl	80077ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007266:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <xTimerCreateTimerTask+0x80>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d021      	beq.n	80072b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007276:	1d3a      	adds	r2, r7, #4
 8007278:	f107 0108 	add.w	r1, r7, #8
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fb5f 	bl	8005944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	2302      	movs	r3, #2
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	460a      	mov	r2, r1
 8007298:	4910      	ldr	r1, [pc, #64]	; (80072dc <xTimerCreateTimerTask+0x84>)
 800729a:	4811      	ldr	r0, [pc, #68]	; (80072e0 <xTimerCreateTimerTask+0x88>)
 800729c:	f7ff f8f4 	bl	8006488 <xTaskCreateStatic>
 80072a0:	4602      	mov	r2, r0
 80072a2:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <xTimerCreateTimerTask+0x8c>)
 80072a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <xTimerCreateTimerTask+0x8c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072ae:	2301      	movs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <xTimerCreateTimerTask+0x74>
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	e7fe      	b.n	80072ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80072cc:	697b      	ldr	r3, [r7, #20]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000c94 	.word	0x20000c94
 80072dc:	08009218 	.word	0x08009218
 80072e0:	08007401 	.word	0x08007401
 80072e4:	20000c98 	.word	0x20000c98

080072e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <xTimerGenericCommand+0x2c>
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	e7fe      	b.n	8007312 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <xTimerGenericCommand+0x94>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02a      	beq.n	8007372 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b05      	cmp	r3, #5
 800732c:	dc18      	bgt.n	8007360 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800732e:	f7ff feb5 	bl	800709c <xTaskGetSchedulerState>
 8007332:	4603      	mov	r3, r0
 8007334:	2b02      	cmp	r3, #2
 8007336:	d109      	bne.n	800734c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <xTimerGenericCommand+0x94>)
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	f107 0110 	add.w	r1, r7, #16
 8007340:	2300      	movs	r3, #0
 8007342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007344:	f7fe fcca 	bl	8005cdc <xQueueGenericSend>
 8007348:	6278      	str	r0, [r7, #36]	; 0x24
 800734a:	e012      	b.n	8007372 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <xTimerGenericCommand+0x94>)
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	f107 0110 	add.w	r1, r7, #16
 8007354:	2300      	movs	r3, #0
 8007356:	2200      	movs	r2, #0
 8007358:	f7fe fcc0 	bl	8005cdc <xQueueGenericSend>
 800735c:	6278      	str	r0, [r7, #36]	; 0x24
 800735e:	e008      	b.n	8007372 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <xTimerGenericCommand+0x94>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	f107 0110 	add.w	r1, r7, #16
 8007368:	2300      	movs	r3, #0
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	f7fe fdb0 	bl	8005ed0 <xQueueGenericSendFromISR>
 8007370:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000c94 	.word	0x20000c94

08007380 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800738a:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <prvProcessExpiredTimer+0x7c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3304      	adds	r3, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fb77 	bl	8005a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d121      	bne.n	80073ea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	18d1      	adds	r1, r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f000 f8c8 	bl	8007548 <prvInsertTimerInActiveList>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d015      	beq.n	80073ea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073be:	2300      	movs	r3, #0
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	2100      	movs	r1, #0
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	f7ff ff8d 	bl	80072e8 <xTimerGenericCommand>
 80073ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <prvProcessExpiredTimer+0x6a>
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e7fe      	b.n	80073e8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	6978      	ldr	r0, [r7, #20]
 80073f0:	4798      	blx	r3
}
 80073f2:	bf00      	nop
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000c8c 	.word	0x20000c8c

08007400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007408:	f107 0308 	add.w	r3, r7, #8
 800740c:	4618      	mov	r0, r3
 800740e:	f000 f857 	bl	80074c0 <prvGetNextExpireTime>
 8007412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4619      	mov	r1, r3
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f803 	bl	8007424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800741e:	f000 f8d5 	bl	80075cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007422:	e7f1      	b.n	8007408 <prvTimerTask+0x8>

08007424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800742e:	f7ff fa57 	bl	80068e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f866 	bl	8007508 <prvSampleTimeNow>
 800743c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d130      	bne.n	80074a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <prvProcessTimerOrBlockTask+0x3c>
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	429a      	cmp	r2, r3
 8007450:	d806      	bhi.n	8007460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007452:	f7ff fa53 	bl	80068fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff91 	bl	8007380 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800745e:	e024      	b.n	80074aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <prvProcessTimerOrBlockTask+0x90>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	bf0c      	ite	eq
 8007470:	2301      	moveq	r3, #1
 8007472:	2300      	movne	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <prvProcessTimerOrBlockTask+0x94>)
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	f7fe ffcb 	bl	8006420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800748a:	f7ff fa37 	bl	80068fc <xTaskResumeAll>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <prvProcessTimerOrBlockTask+0x98>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
}
 80074a4:	e001      	b.n	80074aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074a6:	f7ff fa29 	bl	80068fc <xTaskResumeAll>
}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000c90 	.word	0x20000c90
 80074b8:	20000c94 	.word	0x20000c94
 80074bc:	e000ed04 	.word	0xe000ed04

080074c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <prvGetNextExpireTime+0x44>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bf0c      	ite	eq
 80074d2:	2301      	moveq	r3, #1
 80074d4:	2300      	movne	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <prvGetNextExpireTime+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e001      	b.n	80074f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	20000c8c 	.word	0x20000c8c

08007508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007510:	f7ff fa90 	bl	8006a34 <xTaskGetTickCount>
 8007514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <prvSampleTimeNow+0x3c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	429a      	cmp	r2, r3
 800751e:	d205      	bcs.n	800752c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007520:	f000 f904 	bl	800772c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e002      	b.n	8007532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007532:	4a04      	ldr	r2, [pc, #16]	; (8007544 <prvSampleTimeNow+0x3c>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007538:	68fb      	ldr	r3, [r7, #12]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000c9c 	.word	0x20000c9c

08007548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d812      	bhi.n	8007594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	429a      	cmp	r2, r3
 800757a:	d302      	bcc.n	8007582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e01b      	b.n	80075ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <prvInsertTimerInActiveList+0x7c>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3304      	adds	r3, #4
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f7fe fa44 	bl	8005a1a <vListInsert>
 8007592:	e012      	b.n	80075ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d206      	bcs.n	80075aa <prvInsertTimerInActiveList+0x62>
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d302      	bcc.n	80075aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e007      	b.n	80075ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <prvInsertTimerInActiveList+0x80>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe fa30 	bl	8005a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075ba:	697b      	ldr	r3, [r7, #20]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000c90 	.word	0x20000c90
 80075c8:	20000c8c 	.word	0x20000c8c

080075cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08e      	sub	sp, #56	; 0x38
 80075d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075d2:	e099      	b.n	8007708 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da17      	bge.n	800760a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	3304      	adds	r3, #4
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <prvProcessReceivedCommands+0x2e>
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	e7fe      	b.n	80075f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007600:	6850      	ldr	r0, [r2, #4]
 8007602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007604:	6892      	ldr	r2, [r2, #8]
 8007606:	4611      	mov	r1, r2
 8007608:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db7a      	blt.n	8007706 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	3304      	adds	r3, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe fa33 	bl	8005a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007626:	463b      	mov	r3, r7
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff ff6d 	bl	8007508 <prvSampleTimeNow>
 800762e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d868      	bhi.n	8007708 <prvProcessReceivedCommands+0x13c>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <prvProcessReceivedCommands+0x70>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007665 	.word	0x08007665
 8007640:	08007665 	.word	0x08007665
 8007644:	08007665 	.word	0x08007665
 8007648:	08007709 	.word	0x08007709
 800764c:	080076bf 	.word	0x080076bf
 8007650:	080076f5 	.word	0x080076f5
 8007654:	08007665 	.word	0x08007665
 8007658:	08007665 	.word	0x08007665
 800765c:	08007709 	.word	0x08007709
 8007660:	080076bf 	.word	0x080076bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	18d1      	adds	r1, r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007672:	f7ff ff69 	bl	8007548 <prvInsertTimerInActiveList>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d045      	beq.n	8007708 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007682:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d13d      	bne.n	8007708 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	441a      	add	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	2100      	movs	r1, #0
 800769c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769e:	f7ff fe23 	bl	80072e8 <xTimerGenericCommand>
 80076a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d12e      	bne.n	8007708 <prvProcessReceivedCommands+0x13c>
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e7fe      	b.n	80076bc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <prvProcessReceivedCommands+0x114>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e7fe      	b.n	80076de <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	699a      	ldr	r2, [r3, #24]
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	18d1      	adds	r1, r2, r3
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ee:	f7ff ff2b 	bl	8007548 <prvInsertTimerInActiveList>
					break;
 80076f2:	e009      	b.n	8007708 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80076fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007700:	f000 fbb8 	bl	8007e74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007704:	e000      	b.n	8007708 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007706:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <prvProcessReceivedCommands+0x15c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	1d39      	adds	r1, r7, #4
 800770e:	2200      	movs	r2, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fc71 	bl	8005ff8 <xQueueReceive>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f af5b 	bne.w	80075d4 <prvProcessReceivedCommands+0x8>
	}
}
 800771e:	bf00      	nop
 8007720:	3730      	adds	r7, #48	; 0x30
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000c94 	.word	0x20000c94

0800772c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007732:	e044      	b.n	80077be <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007734:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3304      	adds	r3, #4
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe f99d 	bl	8005a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d12d      	bne.n	80077be <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d90e      	bls.n	8007792 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007780:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe f945 	bl	8005a1a <vListInsert>
 8007790:	e015      	b.n	80077be <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007792:	2300      	movs	r3, #0
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	2100      	movs	r1, #0
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fda3 	bl	80072e8 <xTimerGenericCommand>
 80077a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <prvSwitchTimerLists+0x92>
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	e7fe      	b.n	80077bc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1b5      	bne.n	8007734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <prvSwitchTimerLists+0xbc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <prvSwitchTimerLists+0xb8>)
 80077d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077d6:	4a04      	ldr	r2, [pc, #16]	; (80077e8 <prvSwitchTimerLists+0xbc>)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	6013      	str	r3, [r2, #0]
}
 80077dc:	bf00      	nop
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000c8c 	.word	0x20000c8c
 80077e8:	20000c90 	.word	0x20000c90

080077ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077f2:	f000 f963 	bl	8007abc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077f6:	4b15      	ldr	r3, [pc, #84]	; (800784c <prvCheckForValidListAndQueue+0x60>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d120      	bne.n	8007840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077fe:	4814      	ldr	r0, [pc, #80]	; (8007850 <prvCheckForValidListAndQueue+0x64>)
 8007800:	f7fe f8ba 	bl	8005978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007804:	4813      	ldr	r0, [pc, #76]	; (8007854 <prvCheckForValidListAndQueue+0x68>)
 8007806:	f7fe f8b7 	bl	8005978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <prvCheckForValidListAndQueue+0x6c>)
 800780c:	4a10      	ldr	r2, [pc, #64]	; (8007850 <prvCheckForValidListAndQueue+0x64>)
 800780e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <prvCheckForValidListAndQueue+0x70>)
 8007812:	4a10      	ldr	r2, [pc, #64]	; (8007854 <prvCheckForValidListAndQueue+0x68>)
 8007814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <prvCheckForValidListAndQueue+0x74>)
 800781c:	4a11      	ldr	r2, [pc, #68]	; (8007864 <prvCheckForValidListAndQueue+0x78>)
 800781e:	2110      	movs	r1, #16
 8007820:	200a      	movs	r0, #10
 8007822:	f7fe f9c5 	bl	8005bb0 <xQueueGenericCreateStatic>
 8007826:	4602      	mov	r2, r0
 8007828:	4b08      	ldr	r3, [pc, #32]	; (800784c <prvCheckForValidListAndQueue+0x60>)
 800782a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <prvCheckForValidListAndQueue+0x60>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <prvCheckForValidListAndQueue+0x60>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	490b      	ldr	r1, [pc, #44]	; (8007868 <prvCheckForValidListAndQueue+0x7c>)
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fdc8 	bl	80063d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007840:	f000 f96a 	bl	8007b18 <vPortExitCritical>
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000c94 	.word	0x20000c94
 8007850:	20000c64 	.word	0x20000c64
 8007854:	20000c78 	.word	0x20000c78
 8007858:	20000c8c 	.word	0x20000c8c
 800785c:	20000c90 	.word	0x20000c90
 8007860:	20000d40 	.word	0x20000d40
 8007864:	20000ca0 	.word	0x20000ca0
 8007868:	08009220 	.word	0x08009220

0800786c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3b04      	subs	r3, #4
 800787c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b04      	subs	r3, #4
 800788a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3b04      	subs	r3, #4
 800789a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800789c:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <pxPortInitialiseStack+0x64>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3b14      	subs	r3, #20
 80078a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f06f 0202 	mvn.w	r2, #2
 80078ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b20      	subs	r3, #32
 80078c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	080078d5 	.word	0x080078d5

080078d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <prvTaskExitError+0x50>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d009      	beq.n	80078fc <prvTaskExitError+0x28>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e7fe      	b.n	80078fa <prvTaskExitError+0x26>
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800790e:	bf00      	nop
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0fc      	beq.n	8007910 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000010 	.word	0x20000010
	...

08007930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pxCurrentTCBConst2>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f380 8809 	msr	PSP, r0
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	4770      	bx	lr
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst2>:
 8007950:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007958:	4808      	ldr	r0, [pc, #32]	; (800797c <prvPortStartFirstTask+0x24>)
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	6800      	ldr	r0, [r0, #0]
 800795e:	f380 8808 	msr	MSP, r0
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8814 	msr	CONTROL, r0
 800796a:	b662      	cpsie	i
 800796c:	b661      	cpsie	f
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	df00      	svc	0
 8007978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800797a:	bf00      	nop
 800797c:	e000ed08 	.word	0xe000ed08

08007980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007986:	4b44      	ldr	r3, [pc, #272]	; (8007a98 <xPortStartScheduler+0x118>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a44      	ldr	r2, [pc, #272]	; (8007a9c <xPortStartScheduler+0x11c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d109      	bne.n	80079a4 <xPortStartScheduler+0x24>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	e7fe      	b.n	80079a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079a4:	4b3c      	ldr	r3, [pc, #240]	; (8007a98 <xPortStartScheduler+0x118>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <xPortStartScheduler+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d109      	bne.n	80079c2 <xPortStartScheduler+0x42>
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e7fe      	b.n	80079c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079c2:	4b38      	ldr	r3, [pc, #224]	; (8007aa4 <xPortStartScheduler+0x124>)
 80079c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <xPortStartScheduler+0x128>)
 80079e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <xPortStartScheduler+0x12c>)
 80079ec:	2207      	movs	r2, #7
 80079ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079f0:	e009      	b.n	8007a06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <xPortStartScheduler+0x12c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <xPortStartScheduler+0x12c>)
 80079fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d0ef      	beq.n	80079f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a12:	4b26      	ldr	r3, [pc, #152]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1c3 0307 	rsb	r3, r3, #7
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d009      	beq.n	8007a32 <xPortStartScheduler+0xb2>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	e7fe      	b.n	8007a30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a3c:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a44:	4a19      	ldr	r2, [pc, #100]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a16      	ldr	r2, [pc, #88]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a5c:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a68:	f000 f8d6 	bl	8007c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a6c:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a72:	f000 f8f5 	bl	8007c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a82:	f7ff ff69 	bl	8007958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a86:	f7ff f8a3 	bl	8006bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8007a8a:	f7ff ff23 	bl	80078d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed00 	.word	0xe000ed00
 8007a9c:	410fc271 	.word	0x410fc271
 8007aa0:	410fc270 	.word	0x410fc270
 8007aa4:	e000e400 	.word	0xe000e400
 8007aa8:	20000d90 	.word	0x20000d90
 8007aac:	20000d94 	.word	0x20000d94
 8007ab0:	e000ed20 	.word	0xe000ed20
 8007ab4:	20000010 	.word	0x20000010
 8007ab8:	e000ef34 	.word	0xe000ef34

08007abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <vPortEnterCritical+0x54>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	4a0d      	ldr	r2, [pc, #52]	; (8007b10 <vPortEnterCritical+0x54>)
 8007adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ade:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <vPortEnterCritical+0x54>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10e      	bne.n	8007b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortEnterCritical+0x58>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <vPortEnterCritical+0x48>
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	603b      	str	r3, [r7, #0]
 8007b02:	e7fe      	b.n	8007b02 <vPortEnterCritical+0x46>
	}
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20000010 	.word	0x20000010
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <vPortExitCritical+0x22>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	e7fe      	b.n	8007b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a08      	ldr	r2, [pc, #32]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <vPortExitCritical+0x3e>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000010 	.word	0x20000010
	...

08007b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b70:	f3ef 8009 	mrs	r0, PSP
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <pxCurrentTCBConst>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f01e 0f10 	tst.w	lr, #16
 8007b80:	bf08      	it	eq
 8007b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b94:	f380 8811 	msr	BASEPRI, r0
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f7ff f816 	bl	8006bd0 <vTaskSwitchContext>
 8007ba4:	f04f 0000 	mov.w	r0, #0
 8007ba8:	f380 8811 	msr	BASEPRI, r0
 8007bac:	bc09      	pop	{r0, r3}
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	6808      	ldr	r0, [r1, #0]
 8007bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb6:	f01e 0f10 	tst.w	lr, #16
 8007bba:	bf08      	it	eq
 8007bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bc0:	f380 8809 	msr	PSP, r0
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w

08007bd0 <pxCurrentTCBConst>:
 8007bd0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bf0:	f7fe ff30 	bl	8006a54 <xTaskIncrementTick>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <SysTick_Handler+0x3c>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	2300      	movs	r3, #0
 8007c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <vPortSetupTimerInterrupt+0x34>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <vPortSetupTimerInterrupt+0x38>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <vPortSetupTimerInterrupt+0x3c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <vPortSetupTimerInterrupt+0x40>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	099b      	lsrs	r3, r3, #6
 8007c34:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <vPortSetupTimerInterrupt+0x44>)
 8007c36:	3b01      	subs	r3, #1
 8007c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c3a:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <vPortSetupTimerInterrupt+0x34>)
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	601a      	str	r2, [r3, #0]
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000e010 	.word	0xe000e010
 8007c50:	e000e018 	.word	0xe000e018
 8007c54:	20000004 	.word	0x20000004
 8007c58:	10624dd3 	.word	0x10624dd3
 8007c5c:	e000e014 	.word	0xe000e014

08007c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c70 <vPortEnableVFP+0x10>
 8007c64:	6801      	ldr	r1, [r0, #0]
 8007c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c6a:	6001      	str	r1, [r0, #0]
 8007c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c6e:	bf00      	nop
 8007c70:	e000ed88 	.word	0xe000ed88

08007c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c7a:	f3ef 8305 	mrs	r3, IPSR
 8007c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d913      	bls.n	8007cae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <vPortValidateInterruptPriority+0x6c>)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c90:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <vPortValidateInterruptPriority+0x70>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	7afa      	ldrb	r2, [r7, #11]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d209      	bcs.n	8007cae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	e7fe      	b.n	8007cac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <vPortValidateInterruptPriority+0x74>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <vPortValidateInterruptPriority+0x78>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d909      	bls.n	8007cd2 <vPortValidateInterruptPriority+0x5e>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	e7fe      	b.n	8007cd0 <vPortValidateInterruptPriority+0x5c>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e3f0 	.word	0xe000e3f0
 8007ce4:	20000d90 	.word	0x20000d90
 8007ce8:	e000ed0c 	.word	0xe000ed0c
 8007cec:	20000d94 	.word	0x20000d94

08007cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cfc:	f7fe fdf0 	bl	80068e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d00:	4b57      	ldr	r3, [pc, #348]	; (8007e60 <pvPortMalloc+0x170>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d08:	f000 f90c 	bl	8007f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d0c:	4b55      	ldr	r3, [pc, #340]	; (8007e64 <pvPortMalloc+0x174>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 808c 	bne.w	8007e32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01c      	beq.n	8007d5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d013      	beq.n	8007d5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f023 0307 	bic.w	r3, r3, #7
 8007d38:	3308      	adds	r3, #8
 8007d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <pvPortMalloc+0x6a>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e7fe      	b.n	8007d58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d068      	beq.n	8007e32 <pvPortMalloc+0x142>
 8007d60:	4b41      	ldr	r3, [pc, #260]	; (8007e68 <pvPortMalloc+0x178>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d863      	bhi.n	8007e32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d6a:	4b40      	ldr	r3, [pc, #256]	; (8007e6c <pvPortMalloc+0x17c>)
 8007d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <pvPortMalloc+0x17c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d74:	e004      	b.n	8007d80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d903      	bls.n	8007d92 <pvPortMalloc+0xa2>
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f1      	bne.n	8007d76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d92:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <pvPortMalloc+0x170>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d04a      	beq.n	8007e32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4413      	add	r3, r2
 8007da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	2308      	movs	r3, #8
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d91e      	bls.n	8007dfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <pvPortMalloc+0xf4>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e7fe      	b.n	8007de2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df6:	69b8      	ldr	r0, [r7, #24]
 8007df8:	f000 f8f6 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <pvPortMalloc+0x178>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <pvPortMalloc+0x178>)
 8007e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e0a:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <pvPortMalloc+0x178>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <pvPortMalloc+0x180>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d203      	bcs.n	8007e1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <pvPortMalloc+0x178>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <pvPortMalloc+0x180>)
 8007e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <pvPortMalloc+0x174>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e32:	f7fe fd63 	bl	80068fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <pvPortMalloc+0x164>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e7fe      	b.n	8007e52 <pvPortMalloc+0x162>
	return pvReturn;
 8007e54:	69fb      	ldr	r3, [r7, #28]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3728      	adds	r7, #40	; 0x28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200019a0 	.word	0x200019a0
 8007e64:	200019ac 	.word	0x200019ac
 8007e68:	200019a4 	.word	0x200019a4
 8007e6c:	20001998 	.word	0x20001998
 8007e70:	200019a8 	.word	0x200019a8

08007e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d046      	beq.n	8007f14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e86:	2308      	movs	r3, #8
 8007e88:	425b      	negs	r3, r3
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4b20      	ldr	r3, [pc, #128]	; (8007f1c <vPortFree+0xa8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <vPortFree+0x42>
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e7fe      	b.n	8007eb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <vPortFree+0x5e>
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	e7fe      	b.n	8007ed0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <vPortFree+0xa8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d115      	bne.n	8007f14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <vPortFree+0xa8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	401a      	ands	r2, r3
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ef8:	f7fe fcf2 	bl	80068e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vPortFree+0xac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <vPortFree+0xac>)
 8007f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f0a:	6938      	ldr	r0, [r7, #16]
 8007f0c:	f000 f86c 	bl	8007fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f10:	f7fe fcf4 	bl	80068fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	200019ac 	.word	0x200019ac
 8007f20:	200019a4 	.word	0x200019a4

08007f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvHeapInit+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <prvHeapInit+0xac>)
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvHeapInit+0xb4>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvHeapInit+0xb8>)
 8007fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <prvHeapInit+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <prvHeapInit+0xc0>)
 8007fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000d98 	.word	0x20000d98
 8007fd4:	20001998 	.word	0x20001998
 8007fd8:	200019a0 	.word	0x200019a0
 8007fdc:	200019a8 	.word	0x200019a8
 8007fe0:	200019a4 	.word	0x200019a4
 8007fe4:	200019ac 	.word	0x200019ac

08007fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <prvInsertBlockIntoFreeList+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e002      	b.n	8007ffc <prvInsertBlockIntoFreeList+0x14>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d8f7      	bhi.n	8007ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d108      	bne.n	800802a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d118      	bne.n	8008070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e008      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e003      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20001998 	.word	0x20001998
 8008098:	200019a0 	.word	0x200019a0

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000014 	.word	0x20000014

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4e0d      	ldr	r6, [pc, #52]	; (80080e0 <__libc_init_array+0x38>)
 80080ac:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080ae:	1ba4      	subs	r4, r4, r6
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	2500      	movs	r5, #0
 80080b4:	42a5      	cmp	r5, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	4e0b      	ldr	r6, [pc, #44]	; (80080e8 <__libc_init_array+0x40>)
 80080ba:	4c0c      	ldr	r4, [pc, #48]	; (80080ec <__libc_init_array+0x44>)
 80080bc:	f001 f882 	bl	80091c4 <_init>
 80080c0:	1ba4      	subs	r4, r4, r6
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	2500      	movs	r5, #0
 80080c6:	42a5      	cmp	r5, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080d0:	4798      	blx	r3
 80080d2:	3501      	adds	r5, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080da:	4798      	blx	r3
 80080dc:	3501      	adds	r5, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	08009310 	.word	0x08009310
 80080e4:	08009310 	.word	0x08009310
 80080e8:	08009310 	.word	0x08009310
 80080ec:	08009314 	.word	0x08009314

080080f0 <memcpy>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	1e43      	subs	r3, r0, #1
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	bd10      	pop	{r4, pc}
 80080fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008104:	e7f7      	b.n	80080f6 <memcpy+0x6>

08008106 <memset>:
 8008106:	4402      	add	r2, r0
 8008108:	4603      	mov	r3, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	d100      	bne.n	8008110 <memset+0xa>
 800810e:	4770      	bx	lr
 8008110:	f803 1b01 	strb.w	r1, [r3], #1
 8008114:	e7f9      	b.n	800810a <memset+0x4>
	...

08008118 <pow>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	ed2d 8b04 	vpush	{d8-d9}
 8008120:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80083f4 <pow+0x2dc>
 8008124:	b08d      	sub	sp, #52	; 0x34
 8008126:	ec57 6b10 	vmov	r6, r7, d0
 800812a:	ec55 4b11 	vmov	r4, r5, d1
 800812e:	f000 f963 	bl	80083f8 <__ieee754_pow>
 8008132:	f999 3000 	ldrsb.w	r3, [r9]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	eeb0 8a40 	vmov.f32	s16, s0
 800813e:	eef0 8a60 	vmov.f32	s17, s1
 8008142:	46c8      	mov	r8, r9
 8008144:	d05f      	beq.n	8008206 <pow+0xee>
 8008146:	4622      	mov	r2, r4
 8008148:	462b      	mov	r3, r5
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fc9d 	bl	8000a8c <__aeabi_dcmpun>
 8008152:	4683      	mov	fp, r0
 8008154:	2800      	cmp	r0, #0
 8008156:	d156      	bne.n	8008206 <pow+0xee>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f7f8 fc94 	bl	8000a8c <__aeabi_dcmpun>
 8008164:	9001      	str	r0, [sp, #4]
 8008166:	b1e8      	cbz	r0, 80081a4 <pow+0x8c>
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	f7f8 fc5a 	bl	8000a28 <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d046      	beq.n	8008206 <pow+0xee>
 8008178:	2301      	movs	r3, #1
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	4b96      	ldr	r3, [pc, #600]	; (80083d8 <pow+0x2c0>)
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	4b96      	ldr	r3, [pc, #600]	; (80083dc <pow+0x2c4>)
 8008182:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008186:	2200      	movs	r2, #0
 8008188:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	2b02      	cmp	r3, #2
 8008190:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008194:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008198:	d033      	beq.n	8008202 <pow+0xea>
 800819a:	a802      	add	r0, sp, #8
 800819c:	f000 fefb 	bl	8008f96 <matherr>
 80081a0:	bb48      	cbnz	r0, 80081f6 <pow+0xde>
 80081a2:	e05d      	b.n	8008260 <pow+0x148>
 80081a4:	f04f 0a00 	mov.w	sl, #0
 80081a8:	f04f 0b00 	mov.w	fp, #0
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 fc38 	bl	8000a28 <__aeabi_dcmpeq>
 80081b8:	ec4b ab19 	vmov	d9, sl, fp
 80081bc:	2800      	cmp	r0, #0
 80081be:	d054      	beq.n	800826a <pow+0x152>
 80081c0:	4652      	mov	r2, sl
 80081c2:	465b      	mov	r3, fp
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fc2e 	bl	8000a28 <__aeabi_dcmpeq>
 80081cc:	4680      	mov	r8, r0
 80081ce:	b318      	cbz	r0, 8008218 <pow+0x100>
 80081d0:	2301      	movs	r3, #1
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	4b80      	ldr	r3, [pc, #512]	; (80083d8 <pow+0x2c0>)
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	930a      	str	r3, [sp, #40]	; 0x28
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80081e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0d5      	beq.n	800819a <pow+0x82>
 80081ee:	4b7b      	ldr	r3, [pc, #492]	; (80083dc <pow+0x2c4>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	b11b      	cbz	r3, 8008202 <pow+0xea>
 80081fa:	f7ff ff4f 	bl	800809c <__errno>
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008206:	eeb0 0a48 	vmov.f32	s0, s16
 800820a:	eef0 0a68 	vmov.f32	s1, s17
 800820e:	b00d      	add	sp, #52	; 0x34
 8008210:	ecbd 8b04 	vpop	{d8-d9}
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	ec45 4b10 	vmov	d0, r4, r5
 800821c:	f000 feb3 	bl	8008f86 <finite>
 8008220:	2800      	cmp	r0, #0
 8008222:	d0f0      	beq.n	8008206 <pow+0xee>
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	4620      	mov	r0, r4
 800822a:	4629      	mov	r1, r5
 800822c:	f7f8 fc06 	bl	8000a3c <__aeabi_dcmplt>
 8008230:	2800      	cmp	r0, #0
 8008232:	d0e8      	beq.n	8008206 <pow+0xee>
 8008234:	2301      	movs	r3, #1
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	4b67      	ldr	r3, [pc, #412]	; (80083d8 <pow+0x2c0>)
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	f999 3000 	ldrsb.w	r3, [r9]
 8008240:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008244:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008248:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800824c:	b913      	cbnz	r3, 8008254 <pow+0x13c>
 800824e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008252:	e7a2      	b.n	800819a <pow+0x82>
 8008254:	4962      	ldr	r1, [pc, #392]	; (80083e0 <pow+0x2c8>)
 8008256:	2000      	movs	r0, #0
 8008258:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d19c      	bne.n	800819a <pow+0x82>
 8008260:	f7ff ff1c 	bl	800809c <__errno>
 8008264:	2321      	movs	r3, #33	; 0x21
 8008266:	6003      	str	r3, [r0, #0]
 8008268:	e7c5      	b.n	80081f6 <pow+0xde>
 800826a:	eeb0 0a48 	vmov.f32	s0, s16
 800826e:	eef0 0a68 	vmov.f32	s1, s17
 8008272:	f000 fe88 	bl	8008f86 <finite>
 8008276:	9000      	str	r0, [sp, #0]
 8008278:	2800      	cmp	r0, #0
 800827a:	f040 8081 	bne.w	8008380 <pow+0x268>
 800827e:	ec47 6b10 	vmov	d0, r6, r7
 8008282:	f000 fe80 	bl	8008f86 <finite>
 8008286:	2800      	cmp	r0, #0
 8008288:	d07a      	beq.n	8008380 <pow+0x268>
 800828a:	ec45 4b10 	vmov	d0, r4, r5
 800828e:	f000 fe7a 	bl	8008f86 <finite>
 8008292:	2800      	cmp	r0, #0
 8008294:	d074      	beq.n	8008380 <pow+0x268>
 8008296:	ec53 2b18 	vmov	r2, r3, d8
 800829a:	ee18 0a10 	vmov	r0, s16
 800829e:	4619      	mov	r1, r3
 80082a0:	f7f8 fbf4 	bl	8000a8c <__aeabi_dcmpun>
 80082a4:	f999 9000 	ldrsb.w	r9, [r9]
 80082a8:	4b4b      	ldr	r3, [pc, #300]	; (80083d8 <pow+0x2c0>)
 80082aa:	b1b0      	cbz	r0, 80082da <pow+0x1c2>
 80082ac:	2201      	movs	r2, #1
 80082ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	930a      	str	r3, [sp, #40]	; 0x28
 80082b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80082ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d0c4      	beq.n	800824e <pow+0x136>
 80082c4:	4652      	mov	r2, sl
 80082c6:	465b      	mov	r3, fp
 80082c8:	4650      	mov	r0, sl
 80082ca:	4659      	mov	r1, fp
 80082cc:	f7f8 fa6e 	bl	80007ac <__aeabi_ddiv>
 80082d0:	f1b9 0f02 	cmp.w	r9, #2
 80082d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082d8:	e7c1      	b.n	800825e <pow+0x146>
 80082da:	2203      	movs	r2, #3
 80082dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082e0:	900a      	str	r0, [sp, #40]	; 0x28
 80082e2:	4629      	mov	r1, r5
 80082e4:	4620      	mov	r0, r4
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b3e      	ldr	r3, [pc, #248]	; (80083e4 <pow+0x2cc>)
 80082ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80082ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80082f2:	f7f8 f931 	bl	8000558 <__aeabi_dmul>
 80082f6:	4604      	mov	r4, r0
 80082f8:	460d      	mov	r5, r1
 80082fa:	f1b9 0f00 	cmp.w	r9, #0
 80082fe:	d124      	bne.n	800834a <pow+0x232>
 8008300:	4b39      	ldr	r3, [pc, #228]	; (80083e8 <pow+0x2d0>)
 8008302:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008306:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800830a:	4630      	mov	r0, r6
 800830c:	4652      	mov	r2, sl
 800830e:	465b      	mov	r3, fp
 8008310:	4639      	mov	r1, r7
 8008312:	f7f8 fb93 	bl	8000a3c <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d056      	beq.n	80083c8 <pow+0x2b0>
 800831a:	ec45 4b10 	vmov	d0, r4, r5
 800831e:	f000 fe47 	bl	8008fb0 <rint>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	ec51 0b10 	vmov	r0, r1, d0
 800832a:	f7f8 fb7d 	bl	8000a28 <__aeabi_dcmpeq>
 800832e:	b920      	cbnz	r0, 800833a <pow+0x222>
 8008330:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <pow+0x2d4>)
 8008332:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008336:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800833a:	f998 3000 	ldrsb.w	r3, [r8]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d142      	bne.n	80083c8 <pow+0x2b0>
 8008342:	f7ff feab 	bl	800809c <__errno>
 8008346:	2322      	movs	r3, #34	; 0x22
 8008348:	e78d      	b.n	8008266 <pow+0x14e>
 800834a:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <pow+0x2d8>)
 800834c:	2200      	movs	r2, #0
 800834e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008352:	4630      	mov	r0, r6
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	4639      	mov	r1, r7
 800835a:	f7f8 fb6f 	bl	8000a3c <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d0eb      	beq.n	800833a <pow+0x222>
 8008362:	ec45 4b10 	vmov	d0, r4, r5
 8008366:	f000 fe23 	bl	8008fb0 <rint>
 800836a:	4622      	mov	r2, r4
 800836c:	462b      	mov	r3, r5
 800836e:	ec51 0b10 	vmov	r0, r1, d0
 8008372:	f7f8 fb59 	bl	8000a28 <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	d1df      	bne.n	800833a <pow+0x222>
 800837a:	2200      	movs	r2, #0
 800837c:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <pow+0x2c8>)
 800837e:	e7da      	b.n	8008336 <pow+0x21e>
 8008380:	2200      	movs	r2, #0
 8008382:	2300      	movs	r3, #0
 8008384:	ec51 0b18 	vmov	r0, r1, d8
 8008388:	f7f8 fb4e 	bl	8000a28 <__aeabi_dcmpeq>
 800838c:	2800      	cmp	r0, #0
 800838e:	f43f af3a 	beq.w	8008206 <pow+0xee>
 8008392:	ec47 6b10 	vmov	d0, r6, r7
 8008396:	f000 fdf6 	bl	8008f86 <finite>
 800839a:	2800      	cmp	r0, #0
 800839c:	f43f af33 	beq.w	8008206 <pow+0xee>
 80083a0:	ec45 4b10 	vmov	d0, r4, r5
 80083a4:	f000 fdef 	bl	8008f86 <finite>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	f43f af2c 	beq.w	8008206 <pow+0xee>
 80083ae:	2304      	movs	r3, #4
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <pow+0x2c0>)
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	2300      	movs	r3, #0
 80083b8:	930a      	str	r3, [sp, #40]	; 0x28
 80083ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80083c2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80083c6:	e7b8      	b.n	800833a <pow+0x222>
 80083c8:	a802      	add	r0, sp, #8
 80083ca:	f000 fde4 	bl	8008f96 <matherr>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f47f af11 	bne.w	80081f6 <pow+0xde>
 80083d4:	e7b5      	b.n	8008342 <pow+0x22a>
 80083d6:	bf00      	nop
 80083d8:	080092cc 	.word	0x080092cc
 80083dc:	3ff00000 	.word	0x3ff00000
 80083e0:	fff00000 	.word	0xfff00000
 80083e4:	3fe00000 	.word	0x3fe00000
 80083e8:	47efffff 	.word	0x47efffff
 80083ec:	c7efffff 	.word	0xc7efffff
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	20000078 	.word	0x20000078

080083f8 <__ieee754_pow>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	b091      	sub	sp, #68	; 0x44
 80083fe:	ed8d 1b00 	vstr	d1, [sp]
 8008402:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008406:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800840a:	ea58 0302 	orrs.w	r3, r8, r2
 800840e:	ec57 6b10 	vmov	r6, r7, d0
 8008412:	f000 84be 	beq.w	8008d92 <__ieee754_pow+0x99a>
 8008416:	4b7a      	ldr	r3, [pc, #488]	; (8008600 <__ieee754_pow+0x208>)
 8008418:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800841c:	429c      	cmp	r4, r3
 800841e:	463d      	mov	r5, r7
 8008420:	ee10 aa10 	vmov	sl, s0
 8008424:	dc09      	bgt.n	800843a <__ieee754_pow+0x42>
 8008426:	d103      	bne.n	8008430 <__ieee754_pow+0x38>
 8008428:	b93e      	cbnz	r6, 800843a <__ieee754_pow+0x42>
 800842a:	45a0      	cmp	r8, r4
 800842c:	dc0d      	bgt.n	800844a <__ieee754_pow+0x52>
 800842e:	e001      	b.n	8008434 <__ieee754_pow+0x3c>
 8008430:	4598      	cmp	r8, r3
 8008432:	dc02      	bgt.n	800843a <__ieee754_pow+0x42>
 8008434:	4598      	cmp	r8, r3
 8008436:	d10e      	bne.n	8008456 <__ieee754_pow+0x5e>
 8008438:	b16a      	cbz	r2, 8008456 <__ieee754_pow+0x5e>
 800843a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800843e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008442:	ea54 030a 	orrs.w	r3, r4, sl
 8008446:	f000 84a4 	beq.w	8008d92 <__ieee754_pow+0x99a>
 800844a:	486e      	ldr	r0, [pc, #440]	; (8008604 <__ieee754_pow+0x20c>)
 800844c:	b011      	add	sp, #68	; 0x44
 800844e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008452:	f000 bda5 	b.w	8008fa0 <nan>
 8008456:	2d00      	cmp	r5, #0
 8008458:	da53      	bge.n	8008502 <__ieee754_pow+0x10a>
 800845a:	4b6b      	ldr	r3, [pc, #428]	; (8008608 <__ieee754_pow+0x210>)
 800845c:	4598      	cmp	r8, r3
 800845e:	dc4d      	bgt.n	80084fc <__ieee754_pow+0x104>
 8008460:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008464:	4598      	cmp	r8, r3
 8008466:	dd4c      	ble.n	8008502 <__ieee754_pow+0x10a>
 8008468:	ea4f 5328 	mov.w	r3, r8, asr #20
 800846c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008470:	2b14      	cmp	r3, #20
 8008472:	dd26      	ble.n	80084c2 <__ieee754_pow+0xca>
 8008474:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008478:	fa22 f103 	lsr.w	r1, r2, r3
 800847c:	fa01 f303 	lsl.w	r3, r1, r3
 8008480:	4293      	cmp	r3, r2
 8008482:	d13e      	bne.n	8008502 <__ieee754_pow+0x10a>
 8008484:	f001 0101 	and.w	r1, r1, #1
 8008488:	f1c1 0b02 	rsb	fp, r1, #2
 800848c:	2a00      	cmp	r2, #0
 800848e:	d15b      	bne.n	8008548 <__ieee754_pow+0x150>
 8008490:	4b5b      	ldr	r3, [pc, #364]	; (8008600 <__ieee754_pow+0x208>)
 8008492:	4598      	cmp	r8, r3
 8008494:	d124      	bne.n	80084e0 <__ieee754_pow+0xe8>
 8008496:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800849a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800849e:	ea53 030a 	orrs.w	r3, r3, sl
 80084a2:	f000 8476 	beq.w	8008d92 <__ieee754_pow+0x99a>
 80084a6:	4b59      	ldr	r3, [pc, #356]	; (800860c <__ieee754_pow+0x214>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	dd2d      	ble.n	8008508 <__ieee754_pow+0x110>
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	f280 8473 	bge.w	8008d9a <__ieee754_pow+0x9a2>
 80084b4:	2000      	movs	r0, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	ec41 0b10 	vmov	d0, r0, r1
 80084bc:	b011      	add	sp, #68	; 0x44
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	d13e      	bne.n	8008544 <__ieee754_pow+0x14c>
 80084c6:	f1c3 0314 	rsb	r3, r3, #20
 80084ca:	fa48 f103 	asr.w	r1, r8, r3
 80084ce:	fa01 f303 	lsl.w	r3, r1, r3
 80084d2:	4543      	cmp	r3, r8
 80084d4:	f040 8469 	bne.w	8008daa <__ieee754_pow+0x9b2>
 80084d8:	f001 0101 	and.w	r1, r1, #1
 80084dc:	f1c1 0b02 	rsb	fp, r1, #2
 80084e0:	4b4b      	ldr	r3, [pc, #300]	; (8008610 <__ieee754_pow+0x218>)
 80084e2:	4598      	cmp	r8, r3
 80084e4:	d118      	bne.n	8008518 <__ieee754_pow+0x120>
 80084e6:	f1b9 0f00 	cmp.w	r9, #0
 80084ea:	f280 845a 	bge.w	8008da2 <__ieee754_pow+0x9aa>
 80084ee:	4948      	ldr	r1, [pc, #288]	; (8008610 <__ieee754_pow+0x218>)
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7f8 f959 	bl	80007ac <__aeabi_ddiv>
 80084fa:	e7dd      	b.n	80084b8 <__ieee754_pow+0xc0>
 80084fc:	f04f 0b02 	mov.w	fp, #2
 8008500:	e7c4      	b.n	800848c <__ieee754_pow+0x94>
 8008502:	f04f 0b00 	mov.w	fp, #0
 8008506:	e7c1      	b.n	800848c <__ieee754_pow+0x94>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	dad2      	bge.n	80084b4 <__ieee754_pow+0xbc>
 800850e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008516:	e7cf      	b.n	80084b8 <__ieee754_pow+0xc0>
 8008518:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800851c:	d106      	bne.n	800852c <__ieee754_pow+0x134>
 800851e:	4632      	mov	r2, r6
 8008520:	463b      	mov	r3, r7
 8008522:	4610      	mov	r0, r2
 8008524:	4619      	mov	r1, r3
 8008526:	f7f8 f817 	bl	8000558 <__aeabi_dmul>
 800852a:	e7c5      	b.n	80084b8 <__ieee754_pow+0xc0>
 800852c:	4b39      	ldr	r3, [pc, #228]	; (8008614 <__ieee754_pow+0x21c>)
 800852e:	4599      	cmp	r9, r3
 8008530:	d10a      	bne.n	8008548 <__ieee754_pow+0x150>
 8008532:	2d00      	cmp	r5, #0
 8008534:	db08      	blt.n	8008548 <__ieee754_pow+0x150>
 8008536:	ec47 6b10 	vmov	d0, r6, r7
 800853a:	b011      	add	sp, #68	; 0x44
 800853c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	f000 bc68 	b.w	8008e14 <__ieee754_sqrt>
 8008544:	f04f 0b00 	mov.w	fp, #0
 8008548:	ec47 6b10 	vmov	d0, r6, r7
 800854c:	f000 fd12 	bl	8008f74 <fabs>
 8008550:	ec51 0b10 	vmov	r0, r1, d0
 8008554:	f1ba 0f00 	cmp.w	sl, #0
 8008558:	d127      	bne.n	80085aa <__ieee754_pow+0x1b2>
 800855a:	b124      	cbz	r4, 8008566 <__ieee754_pow+0x16e>
 800855c:	4b2c      	ldr	r3, [pc, #176]	; (8008610 <__ieee754_pow+0x218>)
 800855e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008562:	429a      	cmp	r2, r3
 8008564:	d121      	bne.n	80085aa <__ieee754_pow+0x1b2>
 8008566:	f1b9 0f00 	cmp.w	r9, #0
 800856a:	da05      	bge.n	8008578 <__ieee754_pow+0x180>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	2000      	movs	r0, #0
 8008572:	4927      	ldr	r1, [pc, #156]	; (8008610 <__ieee754_pow+0x218>)
 8008574:	f7f8 f91a 	bl	80007ac <__aeabi_ddiv>
 8008578:	2d00      	cmp	r5, #0
 800857a:	da9d      	bge.n	80084b8 <__ieee754_pow+0xc0>
 800857c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008580:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008584:	ea54 030b 	orrs.w	r3, r4, fp
 8008588:	d108      	bne.n	800859c <__ieee754_pow+0x1a4>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	f7f7 fe29 	bl	80001e8 <__aeabi_dsub>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e7ac      	b.n	80084f6 <__ieee754_pow+0xfe>
 800859c:	f1bb 0f01 	cmp.w	fp, #1
 80085a0:	d18a      	bne.n	80084b8 <__ieee754_pow+0xc0>
 80085a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085a6:	4619      	mov	r1, r3
 80085a8:	e786      	b.n	80084b8 <__ieee754_pow+0xc0>
 80085aa:	0fed      	lsrs	r5, r5, #31
 80085ac:	1e6b      	subs	r3, r5, #1
 80085ae:	930d      	str	r3, [sp, #52]	; 0x34
 80085b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80085b4:	d102      	bne.n	80085bc <__ieee754_pow+0x1c4>
 80085b6:	4632      	mov	r2, r6
 80085b8:	463b      	mov	r3, r7
 80085ba:	e7e8      	b.n	800858e <__ieee754_pow+0x196>
 80085bc:	4b16      	ldr	r3, [pc, #88]	; (8008618 <__ieee754_pow+0x220>)
 80085be:	4598      	cmp	r8, r3
 80085c0:	f340 80fe 	ble.w	80087c0 <__ieee754_pow+0x3c8>
 80085c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80085c8:	4598      	cmp	r8, r3
 80085ca:	dd0a      	ble.n	80085e2 <__ieee754_pow+0x1ea>
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <__ieee754_pow+0x214>)
 80085ce:	429c      	cmp	r4, r3
 80085d0:	dc0d      	bgt.n	80085ee <__ieee754_pow+0x1f6>
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	f6bf af6d 	bge.w	80084b4 <__ieee754_pow+0xbc>
 80085da:	a307      	add	r3, pc, #28	; (adr r3, 80085f8 <__ieee754_pow+0x200>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	e79f      	b.n	8008522 <__ieee754_pow+0x12a>
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <__ieee754_pow+0x224>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	ddf4      	ble.n	80085d2 <__ieee754_pow+0x1da>
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <__ieee754_pow+0x218>)
 80085ea:	429c      	cmp	r4, r3
 80085ec:	dd18      	ble.n	8008620 <__ieee754_pow+0x228>
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	dcf2      	bgt.n	80085da <__ieee754_pow+0x1e2>
 80085f4:	e75e      	b.n	80084b4 <__ieee754_pow+0xbc>
 80085f6:	bf00      	nop
 80085f8:	8800759c 	.word	0x8800759c
 80085fc:	7e37e43c 	.word	0x7e37e43c
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	080092cf 	.word	0x080092cf
 8008608:	433fffff 	.word	0x433fffff
 800860c:	3fefffff 	.word	0x3fefffff
 8008610:	3ff00000 	.word	0x3ff00000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	41e00000 	.word	0x41e00000
 800861c:	3feffffe 	.word	0x3feffffe
 8008620:	2200      	movs	r2, #0
 8008622:	4b63      	ldr	r3, [pc, #396]	; (80087b0 <__ieee754_pow+0x3b8>)
 8008624:	f7f7 fde0 	bl	80001e8 <__aeabi_dsub>
 8008628:	a355      	add	r3, pc, #340	; (adr r3, 8008780 <__ieee754_pow+0x388>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	4604      	mov	r4, r0
 8008630:	460d      	mov	r5, r1
 8008632:	f7f7 ff91 	bl	8000558 <__aeabi_dmul>
 8008636:	a354      	add	r3, pc, #336	; (adr r3, 8008788 <__ieee754_pow+0x390>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f7f7 ff88 	bl	8000558 <__aeabi_dmul>
 8008648:	2200      	movs	r2, #0
 800864a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864e:	4b59      	ldr	r3, [pc, #356]	; (80087b4 <__ieee754_pow+0x3bc>)
 8008650:	4620      	mov	r0, r4
 8008652:	4629      	mov	r1, r5
 8008654:	f7f7 ff80 	bl	8000558 <__aeabi_dmul>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	a14c      	add	r1, pc, #304	; (adr r1, 8008790 <__ieee754_pow+0x398>)
 800865e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008662:	f7f7 fdc1 	bl	80001e8 <__aeabi_dsub>
 8008666:	4622      	mov	r2, r4
 8008668:	462b      	mov	r3, r5
 800866a:	f7f7 ff75 	bl	8000558 <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	2000      	movs	r0, #0
 8008674:	4950      	ldr	r1, [pc, #320]	; (80087b8 <__ieee754_pow+0x3c0>)
 8008676:	f7f7 fdb7 	bl	80001e8 <__aeabi_dsub>
 800867a:	4622      	mov	r2, r4
 800867c:	462b      	mov	r3, r5
 800867e:	4680      	mov	r8, r0
 8008680:	4689      	mov	r9, r1
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 ff67 	bl	8000558 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f7 ff61 	bl	8000558 <__aeabi_dmul>
 8008696:	a340      	add	r3, pc, #256	; (adr r3, 8008798 <__ieee754_pow+0x3a0>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f7 ff5c 	bl	8000558 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a8:	f7f7 fd9e 	bl	80001e8 <__aeabi_dsub>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f7 fd98 	bl	80001ec <__adddf3>
 80086bc:	2000      	movs	r0, #0
 80086be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c2:	4632      	mov	r2, r6
 80086c4:	463b      	mov	r3, r7
 80086c6:	f7f7 fd8f 	bl	80001e8 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fd89 	bl	80001e8 <__aeabi_dsub>
 80086d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80086dc:	4313      	orrs	r3, r2
 80086de:	4606      	mov	r6, r0
 80086e0:	460f      	mov	r7, r1
 80086e2:	f040 81eb 	bne.w	8008abc <__ieee754_pow+0x6c4>
 80086e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80087a0 <__ieee754_pow+0x3a8>
 80086ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80086ee:	2400      	movs	r4, #0
 80086f0:	4622      	mov	r2, r4
 80086f2:	462b      	mov	r3, r5
 80086f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086fc:	f7f7 fd74 	bl	80001e8 <__aeabi_dsub>
 8008700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008704:	f7f7 ff28 	bl	8000558 <__aeabi_dmul>
 8008708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f7 ff20 	bl	8000558 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f7 fd64 	bl	80001ec <__adddf3>
 8008724:	4622      	mov	r2, r4
 8008726:	462b      	mov	r3, r5
 8008728:	4680      	mov	r8, r0
 800872a:	4689      	mov	r9, r1
 800872c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008730:	f7f7 ff12 	bl	8000558 <__aeabi_dmul>
 8008734:	460b      	mov	r3, r1
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	4602      	mov	r2, r0
 800873c:	4649      	mov	r1, r9
 800873e:	4640      	mov	r0, r8
 8008740:	e9cd 4500 	strd	r4, r5, [sp]
 8008744:	f7f7 fd52 	bl	80001ec <__adddf3>
 8008748:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <__ieee754_pow+0x3c4>)
 800874a:	4299      	cmp	r1, r3
 800874c:	4606      	mov	r6, r0
 800874e:	460f      	mov	r7, r1
 8008750:	468b      	mov	fp, r1
 8008752:	f340 82f7 	ble.w	8008d44 <__ieee754_pow+0x94c>
 8008756:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800875a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800875e:	4303      	orrs	r3, r0
 8008760:	f000 81ea 	beq.w	8008b38 <__ieee754_pow+0x740>
 8008764:	a310      	add	r3, pc, #64	; (adr r3, 80087a8 <__ieee754_pow+0x3b0>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	f7f7 fef3 	bl	8000558 <__aeabi_dmul>
 8008772:	a30d      	add	r3, pc, #52	; (adr r3, 80087a8 <__ieee754_pow+0x3b0>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	e6d5      	b.n	8008526 <__ieee754_pow+0x12e>
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w
 8008780:	60000000 	.word	0x60000000
 8008784:	3ff71547 	.word	0x3ff71547
 8008788:	f85ddf44 	.word	0xf85ddf44
 800878c:	3e54ae0b 	.word	0x3e54ae0b
 8008790:	55555555 	.word	0x55555555
 8008794:	3fd55555 	.word	0x3fd55555
 8008798:	652b82fe 	.word	0x652b82fe
 800879c:	3ff71547 	.word	0x3ff71547
 80087a0:	00000000 	.word	0x00000000
 80087a4:	bff00000 	.word	0xbff00000
 80087a8:	8800759c 	.word	0x8800759c
 80087ac:	7e37e43c 	.word	0x7e37e43c
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	3fd00000 	.word	0x3fd00000
 80087b8:	3fe00000 	.word	0x3fe00000
 80087bc:	408fffff 	.word	0x408fffff
 80087c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	da05      	bge.n	80087d6 <__ieee754_pow+0x3de>
 80087ca:	4bd3      	ldr	r3, [pc, #844]	; (8008b18 <__ieee754_pow+0x720>)
 80087cc:	f7f7 fec4 	bl	8000558 <__aeabi_dmul>
 80087d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80087d4:	460c      	mov	r4, r1
 80087d6:	1523      	asrs	r3, r4, #20
 80087d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80087dc:	4413      	add	r3, r2
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	4bce      	ldr	r3, [pc, #824]	; (8008b1c <__ieee754_pow+0x724>)
 80087e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80087e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80087ea:	429c      	cmp	r4, r3
 80087ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80087f0:	dd08      	ble.n	8008804 <__ieee754_pow+0x40c>
 80087f2:	4bcb      	ldr	r3, [pc, #812]	; (8008b20 <__ieee754_pow+0x728>)
 80087f4:	429c      	cmp	r4, r3
 80087f6:	f340 815e 	ble.w	8008ab6 <__ieee754_pow+0x6be>
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	3301      	adds	r3, #1
 80087fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008800:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008804:	f04f 0a00 	mov.w	sl, #0
 8008808:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800880c:	930c      	str	r3, [sp, #48]	; 0x30
 800880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008810:	4bc4      	ldr	r3, [pc, #784]	; (8008b24 <__ieee754_pow+0x72c>)
 8008812:	4413      	add	r3, r2
 8008814:	ed93 7b00 	vldr	d7, [r3]
 8008818:	4629      	mov	r1, r5
 800881a:	ec53 2b17 	vmov	r2, r3, d7
 800881e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008822:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008826:	f7f7 fcdf 	bl	80001e8 <__aeabi_dsub>
 800882a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008836:	f7f7 fcd9 	bl	80001ec <__adddf3>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	2000      	movs	r0, #0
 8008840:	49b9      	ldr	r1, [pc, #740]	; (8008b28 <__ieee754_pow+0x730>)
 8008842:	f7f7 ffb3 	bl	80007ac <__aeabi_ddiv>
 8008846:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fe81 	bl	8000558 <__aeabi_dmul>
 8008856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800885a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800885e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008862:	2300      	movs	r3, #0
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800886a:	106d      	asrs	r5, r5, #1
 800886c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008870:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008874:	2200      	movs	r2, #0
 8008876:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	4614      	mov	r4, r2
 8008880:	461d      	mov	r5, r3
 8008882:	f7f7 fe69 	bl	8000558 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f7 fcab 	bl	80001e8 <__aeabi_dsub>
 8008892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fca3 	bl	80001e8 <__aeabi_dsub>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088aa:	f7f7 fc9d 	bl	80001e8 <__aeabi_dsub>
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	f7f7 fe51 	bl	8000558 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fc93 	bl	80001e8 <__aeabi_dsub>
 80088c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80088c6:	f7f7 fe47 	bl	8000558 <__aeabi_dmul>
 80088ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7f7 fe3f 	bl	8000558 <__aeabi_dmul>
 80088da:	a37b      	add	r3, pc, #492	; (adr r3, 8008ac8 <__ieee754_pow+0x6d0>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	4604      	mov	r4, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	f7f7 fe38 	bl	8000558 <__aeabi_dmul>
 80088e8:	a379      	add	r3, pc, #484	; (adr r3, 8008ad0 <__ieee754_pow+0x6d8>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fc7d 	bl	80001ec <__adddf3>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	f7f7 fe2f 	bl	8000558 <__aeabi_dmul>
 80088fa:	a377      	add	r3, pc, #476	; (adr r3, 8008ad8 <__ieee754_pow+0x6e0>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fc74 	bl	80001ec <__adddf3>
 8008904:	4622      	mov	r2, r4
 8008906:	462b      	mov	r3, r5
 8008908:	f7f7 fe26 	bl	8000558 <__aeabi_dmul>
 800890c:	a374      	add	r3, pc, #464	; (adr r3, 8008ae0 <__ieee754_pow+0x6e8>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fc6b 	bl	80001ec <__adddf3>
 8008916:	4622      	mov	r2, r4
 8008918:	462b      	mov	r3, r5
 800891a:	f7f7 fe1d 	bl	8000558 <__aeabi_dmul>
 800891e:	a372      	add	r3, pc, #456	; (adr r3, 8008ae8 <__ieee754_pow+0x6f0>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fc62 	bl	80001ec <__adddf3>
 8008928:	4622      	mov	r2, r4
 800892a:	462b      	mov	r3, r5
 800892c:	f7f7 fe14 	bl	8000558 <__aeabi_dmul>
 8008930:	a36f      	add	r3, pc, #444	; (adr r3, 8008af0 <__ieee754_pow+0x6f8>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fc59 	bl	80001ec <__adddf3>
 800893a:	4622      	mov	r2, r4
 800893c:	4606      	mov	r6, r0
 800893e:	460f      	mov	r7, r1
 8008940:	462b      	mov	r3, r5
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fe07 	bl	8000558 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fe01 	bl	8000558 <__aeabi_dmul>
 8008956:	4642      	mov	r2, r8
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	464b      	mov	r3, r9
 800895e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008962:	f7f7 fc43 	bl	80001ec <__adddf3>
 8008966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800896a:	f7f7 fdf5 	bl	8000558 <__aeabi_dmul>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f7 fc3b 	bl	80001ec <__adddf3>
 8008976:	4642      	mov	r2, r8
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	464b      	mov	r3, r9
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f7 fde9 	bl	8000558 <__aeabi_dmul>
 8008986:	2200      	movs	r2, #0
 8008988:	4b68      	ldr	r3, [pc, #416]	; (8008b2c <__ieee754_pow+0x734>)
 800898a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800898e:	f7f7 fc2d 	bl	80001ec <__adddf3>
 8008992:	4632      	mov	r2, r6
 8008994:	463b      	mov	r3, r7
 8008996:	f7f7 fc29 	bl	80001ec <__adddf3>
 800899a:	9802      	ldr	r0, [sp, #8]
 800899c:	460d      	mov	r5, r1
 800899e:	4604      	mov	r4, r0
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4640      	mov	r0, r8
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7f7 fdd6 	bl	8000558 <__aeabi_dmul>
 80089ac:	2200      	movs	r2, #0
 80089ae:	4680      	mov	r8, r0
 80089b0:	4689      	mov	r9, r1
 80089b2:	4b5e      	ldr	r3, [pc, #376]	; (8008b2c <__ieee754_pow+0x734>)
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f7 fc16 	bl	80001e8 <__aeabi_dsub>
 80089bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089c0:	f7f7 fc12 	bl	80001e8 <__aeabi_dsub>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f7 fc0c 	bl	80001e8 <__aeabi_dsub>
 80089d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d4:	f7f7 fdc0 	bl	8000558 <__aeabi_dmul>
 80089d8:	4622      	mov	r2, r4
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	462b      	mov	r3, r5
 80089e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e4:	f7f7 fdb8 	bl	8000558 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fbfc 	bl	80001ec <__adddf3>
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4640      	mov	r0, r8
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7f7 fbf4 	bl	80001ec <__adddf3>
 8008a04:	9802      	ldr	r0, [sp, #8]
 8008a06:	a33c      	add	r3, pc, #240	; (adr r3, 8008af8 <__ieee754_pow+0x700>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	f7f7 fda2 	bl	8000558 <__aeabi_dmul>
 8008a14:	4642      	mov	r2, r8
 8008a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fbe2 	bl	80001e8 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f7 fbdc 	bl	80001e8 <__aeabi_dsub>
 8008a30:	a333      	add	r3, pc, #204	; (adr r3, 8008b00 <__ieee754_pow+0x708>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fd8f 	bl	8000558 <__aeabi_dmul>
 8008a3a:	a333      	add	r3, pc, #204	; (adr r3, 8008b08 <__ieee754_pow+0x710>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	4606      	mov	r6, r0
 8008a42:	460f      	mov	r7, r1
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fd86 	bl	8000558 <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4630      	mov	r0, r6
 8008a52:	4639      	mov	r1, r7
 8008a54:	f7f7 fbca 	bl	80001ec <__adddf3>
 8008a58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a5a:	4b35      	ldr	r3, [pc, #212]	; (8008b30 <__ieee754_pow+0x738>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fbc3 	bl	80001ec <__adddf3>
 8008a66:	4604      	mov	r4, r0
 8008a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	f7f7 fd0a 	bl	8000484 <__aeabi_i2d>
 8008a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a72:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <__ieee754_pow+0x73c>)
 8008a74:	4413      	add	r3, r2
 8008a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	4622      	mov	r2, r4
 8008a80:	462b      	mov	r3, r5
 8008a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a86:	f7f7 fbb1 	bl	80001ec <__adddf3>
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	f7f7 fbad 	bl	80001ec <__adddf3>
 8008a92:	4632      	mov	r2, r6
 8008a94:	463b      	mov	r3, r7
 8008a96:	f7f7 fba9 	bl	80001ec <__adddf3>
 8008a9a:	9802      	ldr	r0, [sp, #8]
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aa4:	f7f7 fba0 	bl	80001e8 <__aeabi_dsub>
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	464b      	mov	r3, r9
 8008aac:	f7f7 fb9c 	bl	80001e8 <__aeabi_dsub>
 8008ab0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ab4:	e607      	b.n	80086c6 <__ieee754_pow+0x2ce>
 8008ab6:	f04f 0a01 	mov.w	sl, #1
 8008aba:	e6a5      	b.n	8008808 <__ieee754_pow+0x410>
 8008abc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008b10 <__ieee754_pow+0x718>
 8008ac0:	e613      	b.n	80086ea <__ieee754_pow+0x2f2>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
 8008ac8:	4a454eef 	.word	0x4a454eef
 8008acc:	3fca7e28 	.word	0x3fca7e28
 8008ad0:	93c9db65 	.word	0x93c9db65
 8008ad4:	3fcd864a 	.word	0x3fcd864a
 8008ad8:	a91d4101 	.word	0xa91d4101
 8008adc:	3fd17460 	.word	0x3fd17460
 8008ae0:	518f264d 	.word	0x518f264d
 8008ae4:	3fd55555 	.word	0x3fd55555
 8008ae8:	db6fabff 	.word	0xdb6fabff
 8008aec:	3fdb6db6 	.word	0x3fdb6db6
 8008af0:	33333303 	.word	0x33333303
 8008af4:	3fe33333 	.word	0x3fe33333
 8008af8:	e0000000 	.word	0xe0000000
 8008afc:	3feec709 	.word	0x3feec709
 8008b00:	dc3a03fd 	.word	0xdc3a03fd
 8008b04:	3feec709 	.word	0x3feec709
 8008b08:	145b01f5 	.word	0x145b01f5
 8008b0c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b10:	00000000 	.word	0x00000000
 8008b14:	3ff00000 	.word	0x3ff00000
 8008b18:	43400000 	.word	0x43400000
 8008b1c:	0003988e 	.word	0x0003988e
 8008b20:	000bb679 	.word	0x000bb679
 8008b24:	080092d0 	.word	0x080092d0
 8008b28:	3ff00000 	.word	0x3ff00000
 8008b2c:	40080000 	.word	0x40080000
 8008b30:	080092f0 	.word	0x080092f0
 8008b34:	080092e0 	.word	0x080092e0
 8008b38:	a3b4      	add	r3, pc, #720	; (adr r3, 8008e0c <__ieee754_pow+0xa14>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fb53 	bl	80001ec <__adddf3>
 8008b46:	4622      	mov	r2, r4
 8008b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	f7f7 fb49 	bl	80001e8 <__aeabi_dsub>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b5e:	f7f7 ff8b 	bl	8000a78 <__aeabi_dcmpgt>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f47f adfe 	bne.w	8008764 <__ieee754_pow+0x36c>
 8008b68:	4aa3      	ldr	r2, [pc, #652]	; (8008df8 <__ieee754_pow+0xa00>)
 8008b6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f340 810a 	ble.w	8008d88 <__ieee754_pow+0x990>
 8008b74:	151b      	asrs	r3, r3, #20
 8008b76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008b7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008b7e:	fa4a f303 	asr.w	r3, sl, r3
 8008b82:	445b      	add	r3, fp
 8008b84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008b88:	4e9c      	ldr	r6, [pc, #624]	; (8008dfc <__ieee754_pow+0xa04>)
 8008b8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008b8e:	4116      	asrs	r6, r2
 8008b90:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008b94:	2000      	movs	r0, #0
 8008b96:	ea23 0106 	bic.w	r1, r3, r6
 8008b9a:	f1c2 0214 	rsb	r2, r2, #20
 8008b9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ba2:	fa4a fa02 	asr.w	sl, sl, r2
 8008ba6:	f1bb 0f00 	cmp.w	fp, #0
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	bfb8      	it	lt
 8008bb4:	f1ca 0a00 	rsblt	sl, sl, #0
 8008bb8:	f7f7 fb16 	bl	80001e8 <__aeabi_dsub>
 8008bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bc8:	f7f7 fb10 	bl	80001ec <__adddf3>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	a378      	add	r3, pc, #480	; (adr r3, 8008db0 <__ieee754_pow+0x9b8>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	460d      	mov	r5, r1
 8008bd8:	f7f7 fcbe 	bl	8000558 <__aeabi_dmul>
 8008bdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008be0:	4606      	mov	r6, r0
 8008be2:	460f      	mov	r7, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fafe 	bl	80001e8 <__aeabi_dsub>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f7 faf8 	bl	80001e8 <__aeabi_dsub>
 8008bf8:	a36f      	add	r3, pc, #444	; (adr r3, 8008db8 <__ieee754_pow+0x9c0>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fcab 	bl	8000558 <__aeabi_dmul>
 8008c02:	a36f      	add	r3, pc, #444	; (adr r3, 8008dc0 <__ieee754_pow+0x9c8>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f7f7 fca2 	bl	8000558 <__aeabi_dmul>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4640      	mov	r0, r8
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	f7f7 fae6 	bl	80001ec <__adddf3>
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 fade 	bl	80001ec <__adddf3>
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	f7f7 fad6 	bl	80001e8 <__aeabi_dsub>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fad0 	bl	80001e8 <__aeabi_dsub>
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	464b      	mov	r3, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	4649      	mov	r1, r9
 8008c54:	f7f7 fc80 	bl	8000558 <__aeabi_dmul>
 8008c58:	a35b      	add	r3, pc, #364	; (adr r3, 8008dc8 <__ieee754_pow+0x9d0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	f7f7 fc79 	bl	8000558 <__aeabi_dmul>
 8008c66:	a35a      	add	r3, pc, #360	; (adr r3, 8008dd0 <__ieee754_pow+0x9d8>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fabc 	bl	80001e8 <__aeabi_dsub>
 8008c70:	4622      	mov	r2, r4
 8008c72:	462b      	mov	r3, r5
 8008c74:	f7f7 fc70 	bl	8000558 <__aeabi_dmul>
 8008c78:	a357      	add	r3, pc, #348	; (adr r3, 8008dd8 <__ieee754_pow+0x9e0>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fab5 	bl	80001ec <__adddf3>
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	f7f7 fc67 	bl	8000558 <__aeabi_dmul>
 8008c8a:	a355      	add	r3, pc, #340	; (adr r3, 8008de0 <__ieee754_pow+0x9e8>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 faaa 	bl	80001e8 <__aeabi_dsub>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 fc5e 	bl	8000558 <__aeabi_dmul>
 8008c9c:	a352      	add	r3, pc, #328	; (adr r3, 8008de8 <__ieee754_pow+0x9f0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 faa3 	bl	80001ec <__adddf3>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	f7f7 fc55 	bl	8000558 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	f7f7 fa97 	bl	80001e8 <__aeabi_dsub>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	f7f7 fc47 	bl	8000558 <__aeabi_dmul>
 8008cca:	2200      	movs	r2, #0
 8008ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8008cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 fa86 	bl	80001e8 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce4:	f7f7 fd62 	bl	80007ac <__aeabi_ddiv>
 8008ce8:	4632      	mov	r2, r6
 8008cea:	4604      	mov	r4, r0
 8008cec:	460d      	mov	r5, r1
 8008cee:	463b      	mov	r3, r7
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 fc30 	bl	8000558 <__aeabi_dmul>
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	f7f7 fa76 	bl	80001ec <__adddf3>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7f7 fa6e 	bl	80001e8 <__aeabi_dsub>
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	464b      	mov	r3, r9
 8008d10:	f7f7 fa6a 	bl	80001e8 <__aeabi_dsub>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	2000      	movs	r0, #0
 8008d1a:	4939      	ldr	r1, [pc, #228]	; (8008e00 <__ieee754_pow+0xa08>)
 8008d1c:	f7f7 fa64 	bl	80001e8 <__aeabi_dsub>
 8008d20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008d24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	da2f      	bge.n	8008d8e <__ieee754_pow+0x996>
 8008d2e:	4650      	mov	r0, sl
 8008d30:	ec43 2b10 	vmov	d0, r2, r3
 8008d34:	f000 f9c0 	bl	80090b8 <scalbn>
 8008d38:	ec51 0b10 	vmov	r0, r1, d0
 8008d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d40:	f7ff bbf1 	b.w	8008526 <__ieee754_pow+0x12e>
 8008d44:	4b2f      	ldr	r3, [pc, #188]	; (8008e04 <__ieee754_pow+0xa0c>)
 8008d46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008d4a:	429e      	cmp	r6, r3
 8008d4c:	f77f af0c 	ble.w	8008b68 <__ieee754_pow+0x770>
 8008d50:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <__ieee754_pow+0xa10>)
 8008d52:	440b      	add	r3, r1
 8008d54:	4303      	orrs	r3, r0
 8008d56:	d00b      	beq.n	8008d70 <__ieee754_pow+0x978>
 8008d58:	a325      	add	r3, pc, #148	; (adr r3, 8008df0 <__ieee754_pow+0x9f8>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d62:	f7f7 fbf9 	bl	8000558 <__aeabi_dmul>
 8008d66:	a322      	add	r3, pc, #136	; (adr r3, 8008df0 <__ieee754_pow+0x9f8>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7ff bbdb 	b.w	8008526 <__ieee754_pow+0x12e>
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	f7f7 fa38 	bl	80001e8 <__aeabi_dsub>
 8008d78:	4642      	mov	r2, r8
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	f7f7 fe72 	bl	8000a64 <__aeabi_dcmpge>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f43f aef1 	beq.w	8008b68 <__ieee754_pow+0x770>
 8008d86:	e7e7      	b.n	8008d58 <__ieee754_pow+0x960>
 8008d88:	f04f 0a00 	mov.w	sl, #0
 8008d8c:	e718      	b.n	8008bc0 <__ieee754_pow+0x7c8>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	e7d4      	b.n	8008d3c <__ieee754_pow+0x944>
 8008d92:	2000      	movs	r0, #0
 8008d94:	491a      	ldr	r1, [pc, #104]	; (8008e00 <__ieee754_pow+0xa08>)
 8008d96:	f7ff bb8f 	b.w	80084b8 <__ieee754_pow+0xc0>
 8008d9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d9e:	f7ff bb8b 	b.w	80084b8 <__ieee754_pow+0xc0>
 8008da2:	4630      	mov	r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	f7ff bb87 	b.w	80084b8 <__ieee754_pow+0xc0>
 8008daa:	4693      	mov	fp, r2
 8008dac:	f7ff bb98 	b.w	80084e0 <__ieee754_pow+0xe8>
 8008db0:	00000000 	.word	0x00000000
 8008db4:	3fe62e43 	.word	0x3fe62e43
 8008db8:	fefa39ef 	.word	0xfefa39ef
 8008dbc:	3fe62e42 	.word	0x3fe62e42
 8008dc0:	0ca86c39 	.word	0x0ca86c39
 8008dc4:	be205c61 	.word	0xbe205c61
 8008dc8:	72bea4d0 	.word	0x72bea4d0
 8008dcc:	3e663769 	.word	0x3e663769
 8008dd0:	c5d26bf1 	.word	0xc5d26bf1
 8008dd4:	3ebbbd41 	.word	0x3ebbbd41
 8008dd8:	af25de2c 	.word	0xaf25de2c
 8008ddc:	3f11566a 	.word	0x3f11566a
 8008de0:	16bebd93 	.word	0x16bebd93
 8008de4:	3f66c16c 	.word	0x3f66c16c
 8008de8:	5555553e 	.word	0x5555553e
 8008dec:	3fc55555 	.word	0x3fc55555
 8008df0:	c2f8f359 	.word	0xc2f8f359
 8008df4:	01a56e1f 	.word	0x01a56e1f
 8008df8:	3fe00000 	.word	0x3fe00000
 8008dfc:	000fffff 	.word	0x000fffff
 8008e00:	3ff00000 	.word	0x3ff00000
 8008e04:	4090cbff 	.word	0x4090cbff
 8008e08:	3f6f3400 	.word	0x3f6f3400
 8008e0c:	652b82fe 	.word	0x652b82fe
 8008e10:	3c971547 	.word	0x3c971547

08008e14 <__ieee754_sqrt>:
 8008e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e18:	4955      	ldr	r1, [pc, #340]	; (8008f70 <__ieee754_sqrt+0x15c>)
 8008e1a:	ec55 4b10 	vmov	r4, r5, d0
 8008e1e:	43a9      	bics	r1, r5
 8008e20:	462b      	mov	r3, r5
 8008e22:	462a      	mov	r2, r5
 8008e24:	d112      	bne.n	8008e4c <__ieee754_sqrt+0x38>
 8008e26:	ee10 2a10 	vmov	r2, s0
 8008e2a:	ee10 0a10 	vmov	r0, s0
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fb92 	bl	8000558 <__aeabi_dmul>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 f9d6 	bl	80001ec <__adddf3>
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	ec45 4b10 	vmov	d0, r4, r5
 8008e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	ee10 0a10 	vmov	r0, s0
 8008e52:	4621      	mov	r1, r4
 8008e54:	dc0f      	bgt.n	8008e76 <__ieee754_sqrt+0x62>
 8008e56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008e5a:	4330      	orrs	r0, r6
 8008e5c:	d0f2      	beq.n	8008e44 <__ieee754_sqrt+0x30>
 8008e5e:	b155      	cbz	r5, 8008e76 <__ieee754_sqrt+0x62>
 8008e60:	ee10 2a10 	vmov	r2, s0
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 f9be 	bl	80001e8 <__aeabi_dsub>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	f7f7 fc9c 	bl	80007ac <__aeabi_ddiv>
 8008e74:	e7e4      	b.n	8008e40 <__ieee754_sqrt+0x2c>
 8008e76:	151b      	asrs	r3, r3, #20
 8008e78:	d073      	beq.n	8008f62 <__ieee754_sqrt+0x14e>
 8008e7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e7e:	07dd      	lsls	r5, r3, #31
 8008e80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008e84:	bf48      	it	mi
 8008e86:	0fc8      	lsrmi	r0, r1, #31
 8008e88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e8c:	bf44      	itt	mi
 8008e8e:	0049      	lslmi	r1, r1, #1
 8008e90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008e94:	2500      	movs	r5, #0
 8008e96:	1058      	asrs	r0, r3, #1
 8008e98:	0fcb      	lsrs	r3, r1, #31
 8008e9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008e9e:	0049      	lsls	r1, r1, #1
 8008ea0:	2316      	movs	r3, #22
 8008ea2:	462c      	mov	r4, r5
 8008ea4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ea8:	19a7      	adds	r7, r4, r6
 8008eaa:	4297      	cmp	r7, r2
 8008eac:	bfde      	ittt	le
 8008eae:	19bc      	addle	r4, r7, r6
 8008eb0:	1bd2      	suble	r2, r2, r7
 8008eb2:	19ad      	addle	r5, r5, r6
 8008eb4:	0fcf      	lsrs	r7, r1, #31
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008ebc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ec0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ec4:	d1f0      	bne.n	8008ea8 <__ieee754_sqrt+0x94>
 8008ec6:	f04f 0c20 	mov.w	ip, #32
 8008eca:	469e      	mov	lr, r3
 8008ecc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ed0:	42a2      	cmp	r2, r4
 8008ed2:	eb06 070e 	add.w	r7, r6, lr
 8008ed6:	dc02      	bgt.n	8008ede <__ieee754_sqrt+0xca>
 8008ed8:	d112      	bne.n	8008f00 <__ieee754_sqrt+0xec>
 8008eda:	428f      	cmp	r7, r1
 8008edc:	d810      	bhi.n	8008f00 <__ieee754_sqrt+0xec>
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	eb07 0e06 	add.w	lr, r7, r6
 8008ee4:	da42      	bge.n	8008f6c <__ieee754_sqrt+0x158>
 8008ee6:	f1be 0f00 	cmp.w	lr, #0
 8008eea:	db3f      	blt.n	8008f6c <__ieee754_sqrt+0x158>
 8008eec:	f104 0801 	add.w	r8, r4, #1
 8008ef0:	1b12      	subs	r2, r2, r4
 8008ef2:	428f      	cmp	r7, r1
 8008ef4:	bf88      	it	hi
 8008ef6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008efa:	1bc9      	subs	r1, r1, r7
 8008efc:	4433      	add	r3, r6
 8008efe:	4644      	mov	r4, r8
 8008f00:	0052      	lsls	r2, r2, #1
 8008f02:	f1bc 0c01 	subs.w	ip, ip, #1
 8008f06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008f0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f12:	d1dd      	bne.n	8008ed0 <__ieee754_sqrt+0xbc>
 8008f14:	430a      	orrs	r2, r1
 8008f16:	d006      	beq.n	8008f26 <__ieee754_sqrt+0x112>
 8008f18:	1c5c      	adds	r4, r3, #1
 8008f1a:	bf13      	iteet	ne
 8008f1c:	3301      	addne	r3, #1
 8008f1e:	3501      	addeq	r5, #1
 8008f20:	4663      	moveq	r3, ip
 8008f22:	f023 0301 	bicne.w	r3, r3, #1
 8008f26:	106a      	asrs	r2, r5, #1
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	07e9      	lsls	r1, r5, #31
 8008f2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008f30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008f34:	bf48      	it	mi
 8008f36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008f3e:	461c      	mov	r4, r3
 8008f40:	e780      	b.n	8008e44 <__ieee754_sqrt+0x30>
 8008f42:	0aca      	lsrs	r2, r1, #11
 8008f44:	3815      	subs	r0, #21
 8008f46:	0549      	lsls	r1, r1, #21
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	d0fa      	beq.n	8008f42 <__ieee754_sqrt+0x12e>
 8008f4c:	02d6      	lsls	r6, r2, #11
 8008f4e:	d50a      	bpl.n	8008f66 <__ieee754_sqrt+0x152>
 8008f50:	f1c3 0420 	rsb	r4, r3, #32
 8008f54:	fa21 f404 	lsr.w	r4, r1, r4
 8008f58:	1e5d      	subs	r5, r3, #1
 8008f5a:	4099      	lsls	r1, r3
 8008f5c:	4322      	orrs	r2, r4
 8008f5e:	1b43      	subs	r3, r0, r5
 8008f60:	e78b      	b.n	8008e7a <__ieee754_sqrt+0x66>
 8008f62:	4618      	mov	r0, r3
 8008f64:	e7f0      	b.n	8008f48 <__ieee754_sqrt+0x134>
 8008f66:	0052      	lsls	r2, r2, #1
 8008f68:	3301      	adds	r3, #1
 8008f6a:	e7ef      	b.n	8008f4c <__ieee754_sqrt+0x138>
 8008f6c:	46a0      	mov	r8, r4
 8008f6e:	e7bf      	b.n	8008ef0 <__ieee754_sqrt+0xdc>
 8008f70:	7ff00000 	.word	0x7ff00000

08008f74 <fabs>:
 8008f74:	ec51 0b10 	vmov	r0, r1, d0
 8008f78:	ee10 2a10 	vmov	r2, s0
 8008f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f80:	ec43 2b10 	vmov	d0, r2, r3
 8008f84:	4770      	bx	lr

08008f86 <finite>:
 8008f86:	ee10 3a90 	vmov	r3, s1
 8008f8a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008f8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f92:	0fc0      	lsrs	r0, r0, #31
 8008f94:	4770      	bx	lr

08008f96 <matherr>:
 8008f96:	2000      	movs	r0, #0
 8008f98:	4770      	bx	lr
 8008f9a:	0000      	movs	r0, r0
 8008f9c:	0000      	movs	r0, r0
	...

08008fa0 <nan>:
 8008fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008fa8 <nan+0x8>
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	00000000 	.word	0x00000000
 8008fac:	7ff80000 	.word	0x7ff80000

08008fb0 <rint>:
 8008fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fb2:	ec51 0b10 	vmov	r0, r1, d0
 8008fb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008fba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008fbe:	2e13      	cmp	r6, #19
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	ee10 4a10 	vmov	r4, s0
 8008fc6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008fca:	dc56      	bgt.n	800907a <rint+0xca>
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	da2b      	bge.n	8009028 <rint+0x78>
 8008fd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008fd4:	4302      	orrs	r2, r0
 8008fd6:	d023      	beq.n	8009020 <rint+0x70>
 8008fd8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008fdc:	4302      	orrs	r2, r0
 8008fde:	4254      	negs	r4, r2
 8008fe0:	4314      	orrs	r4, r2
 8008fe2:	0c4b      	lsrs	r3, r1, #17
 8008fe4:	0b24      	lsrs	r4, r4, #12
 8008fe6:	045b      	lsls	r3, r3, #17
 8008fe8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008fec:	ea44 0103 	orr.w	r1, r4, r3
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	492f      	ldr	r1, [pc, #188]	; (80090b0 <rint+0x100>)
 8008ff4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008ff8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	4639      	mov	r1, r7
 8009000:	4630      	mov	r0, r6
 8009002:	f7f7 f8f3 	bl	80001ec <__adddf3>
 8009006:	e9cd 0100 	strd	r0, r1, [sp]
 800900a:	463b      	mov	r3, r7
 800900c:	4632      	mov	r2, r6
 800900e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009012:	f7f7 f8e9 	bl	80001e8 <__aeabi_dsub>
 8009016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800901a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800901e:	4639      	mov	r1, r7
 8009020:	ec41 0b10 	vmov	d0, r0, r1
 8009024:	b003      	add	sp, #12
 8009026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009028:	4a22      	ldr	r2, [pc, #136]	; (80090b4 <rint+0x104>)
 800902a:	4132      	asrs	r2, r6
 800902c:	ea01 0702 	and.w	r7, r1, r2
 8009030:	4307      	orrs	r7, r0
 8009032:	d0f5      	beq.n	8009020 <rint+0x70>
 8009034:	0852      	lsrs	r2, r2, #1
 8009036:	4011      	ands	r1, r2
 8009038:	430c      	orrs	r4, r1
 800903a:	d00b      	beq.n	8009054 <rint+0xa4>
 800903c:	ea23 0202 	bic.w	r2, r3, r2
 8009040:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009044:	2e13      	cmp	r6, #19
 8009046:	fa43 f306 	asr.w	r3, r3, r6
 800904a:	bf0c      	ite	eq
 800904c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009050:	2400      	movne	r4, #0
 8009052:	4313      	orrs	r3, r2
 8009054:	4916      	ldr	r1, [pc, #88]	; (80090b0 <rint+0x100>)
 8009056:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800905a:	4622      	mov	r2, r4
 800905c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009060:	4620      	mov	r0, r4
 8009062:	4629      	mov	r1, r5
 8009064:	f7f7 f8c2 	bl	80001ec <__adddf3>
 8009068:	e9cd 0100 	strd	r0, r1, [sp]
 800906c:	4622      	mov	r2, r4
 800906e:	462b      	mov	r3, r5
 8009070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009074:	f7f7 f8b8 	bl	80001e8 <__aeabi_dsub>
 8009078:	e7d2      	b.n	8009020 <rint+0x70>
 800907a:	2e33      	cmp	r6, #51	; 0x33
 800907c:	dd07      	ble.n	800908e <rint+0xde>
 800907e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009082:	d1cd      	bne.n	8009020 <rint+0x70>
 8009084:	ee10 2a10 	vmov	r2, s0
 8009088:	f7f7 f8b0 	bl	80001ec <__adddf3>
 800908c:	e7c8      	b.n	8009020 <rint+0x70>
 800908e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	40f2      	lsrs	r2, r6
 8009098:	4210      	tst	r0, r2
 800909a:	d0c1      	beq.n	8009020 <rint+0x70>
 800909c:	0852      	lsrs	r2, r2, #1
 800909e:	4210      	tst	r0, r2
 80090a0:	bf1f      	itttt	ne
 80090a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80090a6:	ea20 0202 	bicne.w	r2, r0, r2
 80090aa:	4134      	asrne	r4, r6
 80090ac:	4314      	orrne	r4, r2
 80090ae:	e7d1      	b.n	8009054 <rint+0xa4>
 80090b0:	08009300 	.word	0x08009300
 80090b4:	000fffff 	.word	0x000fffff

080090b8 <scalbn>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	ec55 4b10 	vmov	r4, r5, d0
 80090be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80090c2:	4606      	mov	r6, r0
 80090c4:	462b      	mov	r3, r5
 80090c6:	b9aa      	cbnz	r2, 80090f4 <scalbn+0x3c>
 80090c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090cc:	4323      	orrs	r3, r4
 80090ce:	d03b      	beq.n	8009148 <scalbn+0x90>
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <scalbn+0xe0>)
 80090d2:	4629      	mov	r1, r5
 80090d4:	2200      	movs	r2, #0
 80090d6:	ee10 0a10 	vmov	r0, s0
 80090da:	f7f7 fa3d 	bl	8000558 <__aeabi_dmul>
 80090de:	4b2f      	ldr	r3, [pc, #188]	; (800919c <scalbn+0xe4>)
 80090e0:	429e      	cmp	r6, r3
 80090e2:	4604      	mov	r4, r0
 80090e4:	460d      	mov	r5, r1
 80090e6:	da12      	bge.n	800910e <scalbn+0x56>
 80090e8:	a327      	add	r3, pc, #156	; (adr r3, 8009188 <scalbn+0xd0>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 fa33 	bl	8000558 <__aeabi_dmul>
 80090f2:	e009      	b.n	8009108 <scalbn+0x50>
 80090f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090f8:	428a      	cmp	r2, r1
 80090fa:	d10c      	bne.n	8009116 <scalbn+0x5e>
 80090fc:	ee10 2a10 	vmov	r2, s0
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 f872 	bl	80001ec <__adddf3>
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	e01c      	b.n	8009148 <scalbn+0x90>
 800910e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009112:	460b      	mov	r3, r1
 8009114:	3a36      	subs	r2, #54	; 0x36
 8009116:	4432      	add	r2, r6
 8009118:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800911c:	428a      	cmp	r2, r1
 800911e:	dd0b      	ble.n	8009138 <scalbn+0x80>
 8009120:	ec45 4b11 	vmov	d1, r4, r5
 8009124:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009190 <scalbn+0xd8>
 8009128:	f000 f83c 	bl	80091a4 <copysign>
 800912c:	a318      	add	r3, pc, #96	; (adr r3, 8009190 <scalbn+0xd8>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	ec51 0b10 	vmov	r0, r1, d0
 8009136:	e7da      	b.n	80090ee <scalbn+0x36>
 8009138:	2a00      	cmp	r2, #0
 800913a:	dd08      	ble.n	800914e <scalbn+0x96>
 800913c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009144:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009148:	ec45 4b10 	vmov	d0, r4, r5
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009152:	da0d      	bge.n	8009170 <scalbn+0xb8>
 8009154:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009158:	429e      	cmp	r6, r3
 800915a:	ec45 4b11 	vmov	d1, r4, r5
 800915e:	dce1      	bgt.n	8009124 <scalbn+0x6c>
 8009160:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009188 <scalbn+0xd0>
 8009164:	f000 f81e 	bl	80091a4 <copysign>
 8009168:	a307      	add	r3, pc, #28	; (adr r3, 8009188 <scalbn+0xd0>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	e7e0      	b.n	8009132 <scalbn+0x7a>
 8009170:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009174:	3236      	adds	r2, #54	; 0x36
 8009176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800917a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	2200      	movs	r2, #0
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <scalbn+0xe8>)
 8009186:	e7b2      	b.n	80090ee <scalbn+0x36>
 8009188:	c2f8f359 	.word	0xc2f8f359
 800918c:	01a56e1f 	.word	0x01a56e1f
 8009190:	8800759c 	.word	0x8800759c
 8009194:	7e37e43c 	.word	0x7e37e43c
 8009198:	43500000 	.word	0x43500000
 800919c:	ffff3cb0 	.word	0xffff3cb0
 80091a0:	3c900000 	.word	0x3c900000

080091a4 <copysign>:
 80091a4:	ec51 0b10 	vmov	r0, r1, d0
 80091a8:	ee11 0a90 	vmov	r0, s3
 80091ac:	ee10 2a10 	vmov	r2, s0
 80091b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80091b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80091b8:	ea41 0300 	orr.w	r3, r1, r0
 80091bc:	ec43 2b10 	vmov	d0, r2, r3
 80091c0:	4770      	bx	lr
	...

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
