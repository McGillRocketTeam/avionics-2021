
f303_flash-read-write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000369c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f4  080038f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  0800396c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800396c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092cd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb8  00000000  00000000  0002936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002000e  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099aa  00000000  00000000  0004bdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0b9c  00000000  00000000  00055778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  00116368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003824 	.word	0x08003824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003824 	.word	0x08003824

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
extern void    FLASH_PageErase(uint32_t PageAddress);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <myprintf+0x44>)
 80002a8:	f002 fea0 	bl	8002fec <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <myprintf+0x48>)
 80002c2:	f002 fa63 	bl	800278c <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	200001a4 	.word	0x200001a4

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 f9ed 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f849 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f8c9 	bl	8000480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ee:	f000 f897 	bl	8000420 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t number = 2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	60fb      	str	r3, [r7, #12]
  uint32_t address =  0x0807F800U;
 80002f6:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <main+0x88>)
 80002f8:	60bb      	str	r3, [r7, #8]
  uint32_t reg = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	603b      	str	r3, [r7, #0]

  if(HAL_FLASH_Unlock() != HAL_OK){
 80002fe:	f000 fb9b 	bl	8000a38 <HAL_FLASH_Unlock>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d003      	beq.n	8000310 <main+0x34>
	  while (1){
		  myprintf("Mistakes were made\n");
 8000308:	4817      	ldr	r0, [pc, #92]	; (8000368 <main+0x8c>)
 800030a:	f7ff ffc1 	bl	8000290 <myprintf>
 800030e:	e7fb      	b.n	8000308 <main+0x2c>
	  }
  }

  static FLASH_EraseInitTypeDef EraseInitStruct;
      EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <main+0x90>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
     EraseInitStruct.PageAddress = address;
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <main+0x90>)
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	6053      	str	r3, [r2, #4]
      EraseInitStruct.NbPages = 1;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <main+0x90>)
 800031e:	2201      	movs	r2, #1
 8000320:	609a      	str	r2, [r3, #8]
      HAL_FLASHEx_Erase(&EraseInitStruct, &reg);
 8000322:	463b      	mov	r3, r7
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x90>)
 8000328:	f000 fc4a 	bl	8000bc0 <HAL_FLASHEx_Erase>

      if(reg | 0xFFFFFFFF == 0xFFFFFFFF){
    	  myprintf("Memory is gone yey\n");
 800032c:	4810      	ldr	r0, [pc, #64]	; (8000370 <main+0x94>)
 800032e:	f7ff ffaf 	bl	8000290 <myprintf>

  //HAL_FLASH_Lock();

  //HAL_FLASH_Unlock();

  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, number) != HAL_OK){
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	461a      	mov	r2, r3
 8000336:	f04f 0300 	mov.w	r3, #0
 800033a:	68b9      	ldr	r1, [r7, #8]
 800033c:	2002      	movs	r0, #2
 800033e:	f000 fb0b 	bl	8000958 <HAL_FLASH_Program>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d002      	beq.n	800034e <main+0x72>
	  myprintf("Could not write\n");
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <main+0x98>)
 800034a:	f7ff ffa1 	bl	8000290 <myprintf>
  }

  HAL_FLASH_Lock();
 800034e:	f000 fb99 	bl	8000a84 <HAL_FLASH_Lock>


  uint32_t *readData = (uint32_t *) address;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	607b      	str	r3, [r7, #4]

  myprintf("すごい%i\n", *readData);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4619      	mov	r1, r3
 800035c:	4806      	ldr	r0, [pc, #24]	; (8000378 <main+0x9c>)
 800035e:	f7ff ff97 	bl	8000290 <myprintf>

  while (1)
 8000362:	e7fe      	b.n	8000362 <main+0x86>
 8000364:	0807f800 	.word	0x0807f800
 8000368:	0800383c 	.word	0x0800383c
 800036c:	2000018c 	.word	0x2000018c
 8000370:	08003850 	.word	0x08003850
 8000374:	08003864 	.word	0x08003864
 8000378:	08003878 	.word	0x08003878

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0a6      	sub	sp, #152	; 0x98
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fdfa 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2258      	movs	r2, #88	; 0x58
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fdec 	bl	8002f84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	2302      	movs	r3, #2
 80003ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b4:	2310      	movs	r3, #16
 80003b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fe29 	bl	800101c <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d0:	f000 f86e 	bl	80004b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d8:	2300      	movs	r3, #0
 80003da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fd2a 	bl	8001e48 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003fa:	f000 f859 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003fe:	2302      	movs	r3, #2
 8000400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f001 ff53 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000414:	f000 f84c 	bl	80004b0 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3798      	adds	r7, #152	; 0x98
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART2_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000464:	f002 f944 	bl	80026f0 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f81f 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200001a4 	.word	0x200001a4
 800047c:	40004400 	.word	0x40004400

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_GPIO_Init+0x2c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <MX_GPIO_Init+0x2c>)
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_GPIO_Init+0x2c>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a08      	ldr	r2, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_MspInit+0x44>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a17      	ldr	r2, [pc, #92]	; (8000580 <HAL_UART_MspInit+0x7c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d128      	bne.n	8000578 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <HAL_UART_MspInit+0x80>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a16      	ldr	r2, [pc, #88]	; (8000584 <HAL_UART_MspInit+0x80>)
 800052c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_UART_MspInit+0x80>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_UART_MspInit+0x80>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <HAL_UART_MspInit+0x80>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_UART_MspInit+0x80>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000556:	230c      	movs	r3, #12
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000566:	2307      	movs	r3, #7
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fbc8 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	; 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40004400 	.word	0x40004400
 8000584:	40021000 	.word	0x40021000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f8ba 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f002 fc90 	bl	8002f30 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20010000 	.word	0x20010000
 800063c:	00000400 	.word	0x00000400
 8000640:	20000198 	.word	0x20000198
 8000644:	20000260 	.word	0x20000260

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ffd7 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fc4f 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fe1d 	bl	80002dc <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b0:	080038fc 	.word	0x080038fc
  ldr r2, =_sbss
 80006b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006b8:	20000260 	.word	0x20000260

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f90d 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff feee 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f917 	bl	800093e <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f8ed 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	20000228 	.word	0x20000228

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000228 	.word	0x20000228

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff8e 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff47 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff5c 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff8e 	bl	8000844 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5d 	bl	80007f0 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffb0 	bl	80008ac <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800096a:	2300      	movs	r3, #0
 800096c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800096e:	2300      	movs	r3, #0
 8000970:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_FLASH_Program+0xd8>)
 8000974:	7e1b      	ldrb	r3, [r3, #24]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <HAL_FLASH_Program+0x26>
 800097a:	2302      	movs	r3, #2
 800097c:	e054      	b.n	8000a28 <HAL_FLASH_Program+0xd0>
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_FLASH_Program+0xd8>)
 8000980:	2201      	movs	r2, #1
 8000982:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000984:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000988:	f000 f8a8 	bl	8000adc <FLASH_WaitForLastOperation>
 800098c:	4603      	mov	r3, r0
 800098e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d144      	bne.n	8000a20 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d102      	bne.n	80009a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800099c:	2301      	movs	r3, #1
 800099e:	757b      	strb	r3, [r7, #21]
 80009a0:	e007      	b.n	80009b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d102      	bne.n	80009ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80009a8:	2302      	movs	r3, #2
 80009aa:	757b      	strb	r3, [r7, #21]
 80009ac:	e001      	b.n	80009b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80009ae:	2304      	movs	r3, #4
 80009b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	75bb      	strb	r3, [r7, #22]
 80009b6:	e02d      	b.n	8000a14 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80009b8:	7dbb      	ldrb	r3, [r7, #22]
 80009ba:	005a      	lsls	r2, r3, #1
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	eb02 0c03 	add.w	ip, r2, r3
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	0119      	lsls	r1, r3, #4
 80009c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009ca:	f1c1 0620 	rsb	r6, r1, #32
 80009ce:	f1a1 0020 	sub.w	r0, r1, #32
 80009d2:	fa22 f401 	lsr.w	r4, r2, r1
 80009d6:	fa03 f606 	lsl.w	r6, r3, r6
 80009da:	4334      	orrs	r4, r6
 80009dc:	fa23 f000 	lsr.w	r0, r3, r0
 80009e0:	4304      	orrs	r4, r0
 80009e2:	fa23 f501 	lsr.w	r5, r3, r1
 80009e6:	b2a3      	uxth	r3, r4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4660      	mov	r0, ip
 80009ec:	f000 f85a 	bl	8000aa4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80009f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009f4:	f000 f872 	bl	8000adc <FLASH_WaitForLastOperation>
 80009f8:	4603      	mov	r3, r0
 80009fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_FLASH_Program+0xdc>)
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <HAL_FLASH_Program+0xdc>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d107      	bne.n	8000a1e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000a0e:	7dbb      	ldrb	r3, [r7, #22]
 8000a10:	3301      	adds	r3, #1
 8000a12:	75bb      	strb	r3, [r7, #22]
 8000a14:	7dba      	ldrb	r2, [r7, #22]
 8000a16:	7d7b      	ldrb	r3, [r7, #21]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d3cd      	bcc.n	80009b8 <HAL_FLASH_Program+0x60>
 8000a1c:	e000      	b.n	8000a20 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000a1e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_FLASH_Program+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]

  return status;
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	20000230 	.word	0x20000230
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00d      	beq.n	8000a6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_FLASH_Unlock+0x44>)
 8000a52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_FLASH_Unlock+0x48>)
 8000a58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	45670123 	.word	0x45670123
 8000a80:	cdef89ab 	.word	0xcdef89ab

08000a84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_FLASH_Lock+0x1c>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_FLASH_Lock+0x1c>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <FLASH_Program_HalfWord+0x30>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <FLASH_Program_HalfWord+0x34>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <FLASH_Program_HalfWord+0x34>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	887a      	ldrh	r2, [r7, #2]
 8000ac6:	801a      	strh	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000230 	.word	0x20000230
 8000ad8:	40022000 	.word	0x40022000

08000adc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fe46 	bl	8000774 <HAL_GetTick>
 8000ae8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000aea:	e010      	b.n	8000b0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af2:	d00c      	beq.n	8000b0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <FLASH_WaitForLastOperation+0x2e>
 8000afa:	f7ff fe3b 	bl	8000774 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d201      	bcs.n	8000b0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e01f      	b.n	8000b4e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <FLASH_WaitForLastOperation+0x7c>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d0e8      	beq.n	8000aec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <FLASH_WaitForLastOperation+0x7c>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	2b20      	cmp	r3, #32
 8000b24:	d102      	bne.n	8000b2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <FLASH_WaitForLastOperation+0x7c>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <FLASH_WaitForLastOperation+0x7c>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	2b10      	cmp	r3, #16
 8000b36:	d005      	beq.n	8000b44 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <FLASH_WaitForLastOperation+0x7c>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d103      	bne.n	8000b4c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000b44:	f000 f80a 	bl	8000b5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <FLASH_SetErrorCode+0x5c>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d109      	bne.n	8000b86 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <FLASH_SetErrorCode+0x60>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <FLASH_SetErrorCode+0x60>)
 8000b7c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <FLASH_SetErrorCode+0x5c>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d109      	bne.n	8000ba6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <FLASH_SetErrorCode+0x60>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <FLASH_SetErrorCode+0x60>)
 8000b9c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <FLASH_SetErrorCode+0x5c>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60d3      	str	r3, [r2, #12]
}  
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	20000230 	.word	0x20000230

08000bc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_FLASHEx_Erase+0xcc>)
 8000bd4:	7e1b      	ldrb	r3, [r3, #24]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d101      	bne.n	8000bde <HAL_FLASHEx_Erase+0x1e>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e052      	b.n	8000c84 <HAL_FLASHEx_Erase+0xc4>
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_FLASHEx_Erase+0xcc>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d115      	bne.n	8000c18 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bf0:	f7ff ff74 	bl	8000adc <FLASH_WaitForLastOperation>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d140      	bne.n	8000c7c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000bfa:	f000 f84b 	bl	8000c94 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c02:	f7ff ff6b 	bl	8000adc <FLASH_WaitForLastOperation>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_FLASHEx_Erase+0xd0>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <HAL_FLASHEx_Erase+0xd0>)
 8000c10:	f023 0304 	bic.w	r3, r3, #4
 8000c14:	6113      	str	r3, [r2, #16]
 8000c16:	e031      	b.n	8000c7c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c1c:	f7ff ff5e 	bl	8000adc <FLASH_WaitForLastOperation>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d12a      	bne.n	8000c7c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	e019      	b.n	8000c6a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000c36:	68b8      	ldr	r0, [r7, #8]
 8000c38:	f000 f846 	bl	8000cc8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c40:	f7ff ff4c 	bl	8000adc <FLASH_WaitForLastOperation>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_FLASHEx_Erase+0xd0>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_FLASHEx_Erase+0xd0>)
 8000c4e:	f023 0302 	bic.w	r3, r3, #2
 8000c52:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	601a      	str	r2, [r3, #0]
            break;
 8000c60:	e00c      	b.n	8000c7c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000c68:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	02da      	lsls	r2, r3, #11
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3dc      	bcc.n	8000c36 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_FLASHEx_Erase+0xcc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	761a      	strb	r2, [r3, #24]

  return status;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000230 	.word	0x20000230
 8000c90:	40022000 	.word	0x40022000

08000c94 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <FLASH_MassErase+0x2c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <FLASH_MassErase+0x30>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <FLASH_MassErase+0x30>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <FLASH_MassErase+0x30>)
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <FLASH_MassErase+0x30>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb4:	6113      	str	r3, [r2, #16]
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000230 	.word	0x20000230
 8000cc4:	40022000 	.word	0x40022000

08000cc8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <FLASH_PageErase+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <FLASH_PageErase+0x3c>)
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <FLASH_PageErase+0x3c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <FLASH_PageErase+0x3c>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <FLASH_PageErase+0x3c>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <FLASH_PageErase+0x3c>)
 8000cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf2:	6113      	str	r3, [r2, #16]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000230 	.word	0x20000230
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e160      	b.n	8000fda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8152 	beq.w	8000fd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d00b      	beq.n	8000d50 <HAL_GPIO_Init+0x48>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d44:	2b11      	cmp	r3, #17
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0xea>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d123      	bne.n	8000e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	691a      	ldr	r2, [r3, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	6939      	ldr	r1, [r7, #16]
 8000e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0203 	and.w	r2, r3, #3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80ac 	beq.w	8000fd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <HAL_GPIO_Init+0x2f0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a5d      	ldr	r2, [pc, #372]	; (8000ff8 <HAL_GPIO_Init+0x2f0>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <HAL_GPIO_Init+0x2f0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e94:	4a59      	ldr	r2, [pc, #356]	; (8000ffc <HAL_GPIO_Init+0x2f4>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ebe:	d025      	beq.n	8000f0c <HAL_GPIO_Init+0x204>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a4f      	ldr	r2, [pc, #316]	; (8001000 <HAL_GPIO_Init+0x2f8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d01f      	beq.n	8000f08 <HAL_GPIO_Init+0x200>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <HAL_GPIO_Init+0x2fc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1fc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <HAL_GPIO_Init+0x300>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1f8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a4c      	ldr	r2, [pc, #304]	; (800100c <HAL_GPIO_Init+0x304>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1f4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <HAL_GPIO_Init+0x308>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1f0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_GPIO_Init+0x30c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1ec>
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	e00c      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000ef8:	2305      	movs	r3, #5
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x2f4>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f50:	4a31      	ldr	r2, [pc, #196]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f7a:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_GPIO_Init+0x310>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae97 	bne.w	8000d18 <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	48001800 	.word	0x48001800
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001022:	af00      	add	r7, sp, #0
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	f000 bf01 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8160 	beq.w	8001306 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001046:	4bae      	ldr	r3, [pc, #696]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b04      	cmp	r3, #4
 8001050:	d00c      	beq.n	800106c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001052:	4bab      	ldr	r3, [pc, #684]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b08      	cmp	r3, #8
 800105c:	d159      	bne.n	8001112 <HAL_RCC_OscConfig+0xf6>
 800105e:	4ba8      	ldr	r3, [pc, #672]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d152      	bne.n	8001112 <HAL_RCC_OscConfig+0xf6>
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001080:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d102      	bne.n	800109e <HAL_RCC_OscConfig+0x82>
 8001098:	4b99      	ldr	r3, [pc, #612]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0xae>
 800109e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010c6:	4b8e      	ldr	r3, [pc, #568]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ce:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010d2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010d6:	fa92 f2a2 	rbit	r2, r2
 80010da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	f042 0220 	orr.w	r2, r2, #32
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f002 021f 	and.w	r2, r2, #31
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8102 	beq.w	8001304 <HAL_RCC_OscConfig+0x2e8>
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80fc 	bne.w	8001304 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	f000 be93 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d106      	bne.n	800112c <HAL_RCC_OscConfig+0x110>
 800111e:	4b78      	ldr	r3, [pc, #480]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a77      	ldr	r2, [pc, #476]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e030      	b.n	800118e <HAL_RCC_OscConfig+0x172>
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x134>
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800113c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e01e      	b.n	800118e <HAL_RCC_OscConfig+0x172>
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x15a>
 800115c:	4b68      	ldr	r3, [pc, #416]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a67      	ldr	r2, [pc, #412]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b65      	ldr	r3, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a64      	ldr	r2, [pc, #400]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0x172>
 8001176:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a61      	ldr	r2, [pc, #388]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d059      	beq.n	800124c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff faec 	bl	8000774 <HAL_GetTick>
 800119c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fae7 	bl	8000774 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d902      	bls.n	80011b8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f000 be40 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	fab3 f383 	clz	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x1ce>
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x1fa>
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80011fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001202:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001206:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800121e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800122a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f042 0220 	orr.w	r2, r2, #32
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0ab      	beq.n	80011a2 <HAL_RCC_OscConfig+0x186>
 800124a:	e05c      	b.n	8001306 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fa92 	bl	8000774 <HAL_GetTick>
 8001250:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fa8d 	bl	8000774 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d902      	bls.n	800126c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	f000 bde6 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001270:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001280:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x282>
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x2ae>
 800129e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_RCC_OscConfig+0x2e4>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012d6:	fa92 f2a2 	rbit	r2, r2
 80012da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f002 021f 	and.w	r2, r2, #31
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ab      	bne.n	8001256 <HAL_RCC_OscConfig+0x23a>
 80012fe:	e002      	b.n	8001306 <HAL_RCC_OscConfig+0x2ea>
 8001300:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8170 	beq.w	80015f6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001316:	4bd0      	ldr	r3, [pc, #832]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001322:	4bcd      	ldr	r3, [pc, #820]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d16d      	bne.n	800140a <HAL_RCC_OscConfig+0x3ee>
 800132e:	4bca      	ldr	r3, [pc, #808]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133a:	d166      	bne.n	800140a <HAL_RCC_OscConfig+0x3ee>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800134e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x350>
 8001366:	4bbc      	ldr	r3, [pc, #752]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x378>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001384:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001390:	4bb1      	ldr	r3, [pc, #708]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2202      	movs	r2, #2
 8001396:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800139a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800139e:	fa92 f2a2 	rbit	r2, r2
 80013a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013aa:	fab2 f282 	clz	r2, r2
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f042 0220 	orr.w	r2, r2, #32
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f002 021f 	and.w	r2, r2, #31
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3ba>
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d002      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 bd31 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	21f8      	movs	r1, #248	; 0xf8
 80013e6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80013ee:	fa91 f1a1 	rbit	r1, r1
 80013f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80013f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013fa:	fab1 f181 	clz	r1, r1
 80013fe:	b2c9      	uxtb	r1, r1
 8001400:	408b      	lsls	r3, r1
 8001402:	4995      	ldr	r1, [pc, #596]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001408:	e0f5      	b.n	80015f6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8085 	beq.w	8001520 <HAL_RCC_OscConfig+0x504>
 8001416:	2301      	movs	r3, #1
 8001418:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001428:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001436:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	461a      	mov	r2, r3
 800143e:	2301      	movs	r3, #1
 8001440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff f997 	bl	8000774 <HAL_GetTick>
 8001446:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff f992 	bl	8000774 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d902      	bls.n	8001462 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	f000 bceb 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001474:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x476>
 800148c:	4b72      	ldr	r3, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	e013      	b.n	80014ba <HAL_RCC_OscConfig+0x49e>
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2202      	movs	r2, #2
 80014bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014c4:	fa92 f2a2 	rbit	r2, r2
 80014c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014d0:	fab2 f282 	clz	r2, r2
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	f002 021f 	and.w	r2, r2, #31
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0af      	beq.n	800144c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	21f8      	movs	r1, #248	; 0xf8
 80014fc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001504:	fa91 f1a1 	rbit	r1, r1
 8001508:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800150c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001510:	fab1 f181 	clz	r1, r1
 8001514:	b2c9      	uxtb	r1, r1
 8001516:	408b      	lsls	r3, r1
 8001518:	494f      	ldr	r1, [pc, #316]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
 800151e:	e06a      	b.n	80015f6 <HAL_RCC_OscConfig+0x5da>
 8001520:	2301      	movs	r3, #1
 8001522:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001532:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	461a      	mov	r2, r3
 8001548:	2300      	movs	r3, #0
 800154a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f912 	bl	8000774 <HAL_GetTick>
 8001550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff f90d 	bl	8000774 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d902      	bls.n	800156c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	f000 bc66 	b.w	8001e38 <HAL_RCC_OscConfig+0xe1c>
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800157e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d102      	bne.n	800159c <HAL_RCC_OscConfig+0x580>
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x5a8>
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_RCC_OscConfig+0x63c>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	2202      	movs	r2, #2
 80015c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015ce:	fa92 f2a2 	rbit	r2, r2
 80015d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80015d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f042 0220 	orr.w	r2, r2, #32
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	f002 021f 	and.w	r2, r2, #31
 80015ea:	2101      	movs	r1, #1
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1af      	bne.n	8001556 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80da 	beq.w	80017ba <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d069      	beq.n	80016e4 <HAL_RCC_OscConfig+0x6c8>
 8001610:	2301      	movs	r3, #1
 8001612:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001622:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x640>)
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	461a      	mov	r2, r3
 8001636:	2301      	movs	r3, #1
 8001638:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff f89b 	bl	8000774 <HAL_GetTick>
 800163e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	e00d      	b.n	8001660 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff f896 	bl	8000774 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d905      	bls.n	8001660 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e3ef      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001658:	40021000 	.word	0x40021000
 800165c:	10908120 	.word	0x10908120
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800166a:	fa93 f2a3 	rbit	r2, r3
 800166e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a4:	4ba4      	ldr	r3, [pc, #656]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80016a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016ac:	2102      	movs	r1, #2
 80016ae:	6019      	str	r1, [r3, #0]
 80016b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f1a3 	rbit	r1, r3
 80016ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016be:	6019      	str	r1, [r3, #0]
  return result;
 80016c0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0b0      	beq.n	8001644 <HAL_RCC_OscConfig+0x628>
 80016e2:	e06a      	b.n	80017ba <HAL_RCC_OscConfig+0x79e>
 80016e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016fa:	601a      	str	r2, [r3, #0]
  return result;
 80016fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001700:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_RCC_OscConfig+0x920>)
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	2300      	movs	r3, #0
 8001714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff f82d 	bl	8000774 <HAL_GetTick>
 800171a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	e009      	b.n	8001734 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f828 	bl	8000774 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e381      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001734:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fa93 f2a3 	rbit	r2, r3
 8001746:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800177a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 800177e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001784:	2102      	movs	r1, #2
 8001786:	6019      	str	r1, [r3, #0]
 8001788:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f1a3 	rbit	r1, r3
 8001792:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001796:	6019      	str	r1, [r3, #0]
  return result;
 8001798:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1b2      	bne.n	8001720 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8157 	beq.w	8001a78 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a55      	ldr	r2, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x924>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11a      	bne.n	8001844 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180e:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x924>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x924>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7fe ffab 	bl	8000774 <HAL_GetTick>
 800181e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	e009      	b.n	8001838 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7fe ffa6 	bl	8000774 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2ff      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_RCC_OscConfig+0x924>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <HAL_RCC_OscConfig+0x840>
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a39      	ldr	r2, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	e02f      	b.n	80018bc <HAL_RCC_OscConfig+0x8a0>
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x864>
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0x8a0>
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x888>
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0x8a0>
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 80018b6:	f023 0304 	bic.w	r3, r3, #4
 80018ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06a      	beq.n	800199c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7fe ff55 	bl	8000774 <HAL_GetTick>
 80018ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7fe ff50 	bl	8000774 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e2a7      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 80018e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018ec:	2202      	movs	r2, #2
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001916:	601a      	str	r2, [r3, #0]
  return result;
 8001918:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800191c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x928>
 8001932:	4b01      	ldr	r3, [pc, #4]	; (8001938 <HAL_RCC_OscConfig+0x91c>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	e013      	b.n	8001960 <HAL_RCC_OscConfig+0x944>
 8001938:	40021000 	.word	0x40021000
 800193c:	10908120 	.word	0x10908120
 8001940:	40007000 	.word	0x40007000
 8001944:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001948:	2202      	movs	r2, #2
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	4bc0      	ldr	r3, [pc, #768]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001964:	2102      	movs	r1, #2
 8001966:	6011      	str	r1, [r2, #0]
 8001968:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	fa92 f1a2 	rbit	r1, r2
 8001972:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001976:	6011      	str	r1, [r2, #0]
  return result;
 8001978:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d09a      	beq.n	80018d0 <HAL_RCC_OscConfig+0x8b4>
 800199a:	e063      	b.n	8001a64 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7fe feea 	bl	8000774 <HAL_GetTick>
 80019a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7fe fee5 	bl	8000774 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e23c      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 80019be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_OscConfig+0x9f2>
 8001a08:	4b95      	ldr	r3, [pc, #596]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	e00d      	b.n	8001a2a <HAL_RCC_OscConfig+0xa0e>
 8001a0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a12:	2202      	movs	r2, #2
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	fa92 f1a2 	rbit	r1, r2
 8001a3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a40:	6011      	str	r1, [r2, #0]
  return result;
 8001a42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1a0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a64:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 81d9 	beq.w	8001e36 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	f000 81a6 	beq.w	8001dde <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f040 811e 	bne.w	8001cda <HAL_RCC_OscConfig+0xcbe>
 8001a9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001abc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fe4e 	bl	8000774 <HAL_GetTick>
 8001ad8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fe49 	bl	8000774 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1a2      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001af2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0xb10>
 8001b26:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e01b      	b.n	8001b64 <HAL_RCC_OscConfig+0xb48>
 8001b2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	fa92 f1a2 	rbit	r1, r2
 8001b78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b7c:	6011      	str	r1, [r2, #0]
  return result;
 8001b7e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d19e      	bne.n	8001ade <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f023 020f 	bic.w	r2, r3, #15
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	492c      	ldr	r1, [pc, #176]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a19      	ldr	r1, [r3, #32]
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	4925      	ldr	r1, [pc, #148]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	2301      	movs	r3, #1
 8001c04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe fdb5 	bl	8000774 <HAL_GetTick>
 8001c0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0e:	e009      	b.n	8001c24 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe fdb0 	bl	8000774 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e109      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c3c:	601a      	str	r2, [r3, #0]
  return result;
 8001c3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0xc48>
 8001c58:	4b01      	ldr	r3, [pc, #4]	; (8001c60 <HAL_RCC_OscConfig+0xc44>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e01e      	b.n	8001c9c <HAL_RCC_OscConfig+0xc80>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0xe28>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ca0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fa92 f1a2 	rbit	r1, r2
 8001cb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb4:	6011      	str	r1, [r2, #0]
  return result;
 8001cb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f002 021f 	and.w	r2, r2, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d09b      	beq.n	8001c10 <HAL_RCC_OscConfig+0xbf4>
 8001cd8:	e0ad      	b.n	8001e36 <HAL_RCC_OscConfig+0xe1a>
 8001cda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cf2:	601a      	str	r2, [r3, #0]
  return result;
 8001cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cf8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7fe fd30 	bl	8000774 <HAL_GetTick>
 8001d14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe fd2b 	bl	8000774 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e084      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d46:	601a      	str	r2, [r3, #0]
  return result;
 8001d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0xd4c>
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_RCC_OscConfig+0xe28>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	e01b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd84>
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_OscConfig+0xe28>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f107 0214 	add.w	r2, r7, #20
 8001da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da8:	6011      	str	r1, [r2, #0]
 8001daa:	f107 0214 	add.w	r2, r7, #20
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fa92 f1a2 	rbit	r1, r2
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	6011      	str	r1, [r2, #0]
  return result;
 8001dba:	f107 0210 	add.w	r2, r7, #16
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d19e      	bne.n	8001d1a <HAL_RCC_OscConfig+0xcfe>
 8001ddc:	e02b      	b.n	8001e36 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e025      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_OscConfig+0xe28>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_OscConfig+0xe28>)
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e00:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d111      	bne.n	8001e32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09e      	sub	sp, #120	; 0x78
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e162      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b90      	ldr	r3, [pc, #576]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	498b      	ldr	r1, [pc, #556]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e14a      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	497f      	ldr	r1, [pc, #508]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80dc 	beq.w	8002074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d13c      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xf6>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_ClockConfig+0xa6>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e00f      	b.n	8001f0e <HAL_RCC_ClockConfig+0xc6>
 8001eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	667b      	str	r3, [r7, #100]	; 0x64
 8001efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f00:	663b      	str	r3, [r7, #96]	; 0x60
 8001f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d17b      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0f3      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d13c      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x178>
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x128>
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_ClockConfig+0x148>
 8001f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
 8001f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f002 021f 	and.w	r2, r2, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d13a      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b2      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_ClockConfig+0x1bc>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2202      	movs	r2, #2
 8002006:	61ba      	str	r2, [r7, #24]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	617a      	str	r2, [r7, #20]
  return result;
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f002 021f 	and.w	r2, r2, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e079      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002044:	f7fe fb96 	bl	8000774 <HAL_GetTick>
 8002048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe fb92 	bl	8000774 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e061      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d214      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4906      	ldr	r1, [pc, #24]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e040      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	491a      	ldr	r1, [pc, #104]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4912      	ldr	r1, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ea:	f000 f829 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f8:	22f0      	movs	r2, #240	; 0xf0
 80020fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	fa92 f2a2 	rbit	r2, r2
 8002102:	60fa      	str	r2, [r7, #12]
  return result;
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	40d3      	lsrs	r3, r2
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x2ec>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_RCC_ClockConfig+0x2f0>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_ClockConfig+0x2f4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fae4 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3778      	adds	r7, #120	; 0x78
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	08003888 	.word	0x08003888
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x30>
 800216a:	2b08      	cmp	r3, #8
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x36>
 800216e:	e03f      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002172:	623b      	str	r3, [r7, #32]
      break;
 8002174:	e03f      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800217c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	607a      	str	r2, [r7, #4]
  return result;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	40d3      	lsrs	r3, r2
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc4>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	220f      	movs	r2, #15
 80021a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	60fa      	str	r2, [r7, #12]
  return result;
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	40d3      	lsrs	r3, r2
 80021b8:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e007      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	623b      	str	r3, [r7, #32]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021f2:	623b      	str	r3, [r7, #32]
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	6a3b      	ldr	r3, [r7, #32]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	372c      	adds	r7, #44	; 0x2c
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000
 8002208:	007a1200 	.word	0x007a1200
 800220c:	080038a0 	.word	0x080038a0
 8002210:	080038b0 	.word	0x080038b0

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002232:	f7ff ffef 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002236:	4601      	mov	r1, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002240:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	fa92 f2a2 	rbit	r2, r2
 800224c:	603a      	str	r2, [r7, #0]
  return result;
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	40d3      	lsrs	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_RCC_GetPCLK1Freq+0x40>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08003898 	.word	0x08003898

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002276:	f7ff ffcd 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800227a:	4601      	mov	r1, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002288:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	603a      	str	r2, [r7, #0]
  return result;
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	40d3      	lsrs	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003898 	.word	0x08003898

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b092      	sub	sp, #72	; 0x48
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80d4 	beq.w	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d8:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10e      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4a4a      	ldr	r2, [pc, #296]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	61d3      	str	r3, [r2, #28]
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a41      	ldr	r2, [pc, #260]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe fa2b 	bl	8000774 <HAL_GetTick>
 800231e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fa27 	bl	8000774 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1d6      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8084 	beq.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235c:	429a      	cmp	r2, r3
 800235e:	d07c      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	461a      	mov	r2, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d04b      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe f9d7 	bl	8000774 <HAL_GetTick>
 80023c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe f9d3 	bl	8000774 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e180      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	61fb      	str	r3, [r7, #28]
  return result;
 80023f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d108      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800240e:	4b01      	ldr	r3, [pc, #4]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	e00d      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	10908100 	.word	0x10908100
 8002420:	2302      	movs	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	4ba0      	ldr	r3, [pc, #640]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2202      	movs	r2, #2
 8002432:	613a      	str	r2, [r7, #16]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	fa92 f2a2 	rbit	r2, r2
 800243a:	60fa      	str	r2, [r7, #12]
  return result;
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	fab2 f282 	clz	r2, r2
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f002 021f 	and.w	r2, r2, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f202 	lsl.w	r2, r1, r2
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0b7      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4992      	ldr	r1, [pc, #584]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a8d      	ldr	r2, [pc, #564]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f023 0203 	bic.w	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4985      	ldr	r1, [pc, #532]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024aa:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	497e      	ldr	r1, [pc, #504]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024c8:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	4976      	ldr	r1, [pc, #472]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e6:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f023 0210 	bic.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	496f      	ldr	r1, [pc, #444]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	4967      	ldr	r1, [pc, #412]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f023 0220 	bic.w	r2, r3, #32
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4960      	ldr	r1, [pc, #384]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002540:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	4958      	ldr	r1, [pc, #352]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255e:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4951      	ldr	r1, [pc, #324]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4949      	ldr	r1, [pc, #292]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800259a:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4942      	ldr	r1, [pc, #264]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	493a      	ldr	r1, [pc, #232]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025d6:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	4933      	ldr	r1, [pc, #204]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	492b      	ldr	r1, [pc, #172]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4924      	ldr	r1, [pc, #144]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	491c      	ldr	r1, [pc, #112]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	4915      	ldr	r1, [pc, #84]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	490d      	ldr	r1, [pc, #52]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	e002      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	490b      	ldr	r1, [pc, #44]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3748      	adds	r7, #72	; 0x48
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e040      	b.n	8002784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fd fef6 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c0 	bl	80028b4 <UART_SetConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa8a 	bl	8002c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800275a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800276a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fb11 	bl	8002da4 <UART_CheckIdleState>
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 8082 	bne.w	80028aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_UART_Transmit+0x26>
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07a      	b.n	80028ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_UART_Transmit+0x38>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e073      	b.n	80028ac <HAL_UART_Transmit+0x120>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027da:	f7fd ffcb 	bl	8000774 <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f8:	d108      	bne.n	800280c <HAL_UART_Transmit+0x80>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e003      	b.n	8002814 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800281c:	e02d      	b.n	800287a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fb04 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e039      	b.n	80028ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10b      	bne.n	8002856 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	881a      	ldrh	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284a:	b292      	uxth	r2, r2
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	3302      	adds	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e008      	b.n	8002868 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b292      	uxth	r2, r2
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1cb      	bne.n	800281e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fad0 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e005      	b.n	80028ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4bab      	ldr	r3, [pc, #684]	; (8002b8c <UART_SetConfig+0x2d8>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a99      	ldr	r2, [pc, #612]	; (8002b90 <UART_SetConfig+0x2dc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d120      	bne.n	8002972 <UART_SetConfig+0xbe>
 8002930:	4b98      	ldr	r3, [pc, #608]	; (8002b94 <UART_SetConfig+0x2e0>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d817      	bhi.n	800296c <UART_SetConfig+0xb8>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0x90>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002955 	.word	0x08002955
 8002948:	08002961 	.word	0x08002961
 800294c:	08002967 	.word	0x08002967
 8002950:	0800295b 	.word	0x0800295b
 8002954:	2301      	movs	r3, #1
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e0b5      	b.n	8002ac6 <UART_SetConfig+0x212>
 800295a:	2302      	movs	r3, #2
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e0b2      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002960:	2304      	movs	r3, #4
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e0af      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002966:	2308      	movs	r3, #8
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e0ac      	b.n	8002ac6 <UART_SetConfig+0x212>
 800296c:	2310      	movs	r3, #16
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e0a9      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a88      	ldr	r2, [pc, #544]	; (8002b98 <UART_SetConfig+0x2e4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d124      	bne.n	80029c6 <UART_SetConfig+0x112>
 800297c:	4b85      	ldr	r3, [pc, #532]	; (8002b94 <UART_SetConfig+0x2e0>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002988:	d011      	beq.n	80029ae <UART_SetConfig+0xfa>
 800298a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800298e:	d817      	bhi.n	80029c0 <UART_SetConfig+0x10c>
 8002990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002994:	d011      	beq.n	80029ba <UART_SetConfig+0x106>
 8002996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800299a:	d811      	bhi.n	80029c0 <UART_SetConfig+0x10c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <UART_SetConfig+0xf4>
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d006      	beq.n	80029b4 <UART_SetConfig+0x100>
 80029a6:	e00b      	b.n	80029c0 <UART_SetConfig+0x10c>
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	e08b      	b.n	8002ac6 <UART_SetConfig+0x212>
 80029ae:	2302      	movs	r3, #2
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e088      	b.n	8002ac6 <UART_SetConfig+0x212>
 80029b4:	2304      	movs	r3, #4
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e085      	b.n	8002ac6 <UART_SetConfig+0x212>
 80029ba:	2308      	movs	r3, #8
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e082      	b.n	8002ac6 <UART_SetConfig+0x212>
 80029c0:	2310      	movs	r3, #16
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e07f      	b.n	8002ac6 <UART_SetConfig+0x212>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a74      	ldr	r2, [pc, #464]	; (8002b9c <UART_SetConfig+0x2e8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d124      	bne.n	8002a1a <UART_SetConfig+0x166>
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <UART_SetConfig+0x2e0>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80029d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029dc:	d011      	beq.n	8002a02 <UART_SetConfig+0x14e>
 80029de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029e2:	d817      	bhi.n	8002a14 <UART_SetConfig+0x160>
 80029e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029e8:	d011      	beq.n	8002a0e <UART_SetConfig+0x15a>
 80029ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029ee:	d811      	bhi.n	8002a14 <UART_SetConfig+0x160>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <UART_SetConfig+0x148>
 80029f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f8:	d006      	beq.n	8002a08 <UART_SetConfig+0x154>
 80029fa:	e00b      	b.n	8002a14 <UART_SetConfig+0x160>
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e061      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a02:	2302      	movs	r3, #2
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e05e      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e05b      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e058      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a14:	2310      	movs	r3, #16
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e055      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a60      	ldr	r2, [pc, #384]	; (8002ba0 <UART_SetConfig+0x2ec>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d124      	bne.n	8002a6e <UART_SetConfig+0x1ba>
 8002a24:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <UART_SetConfig+0x2e0>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a30:	d011      	beq.n	8002a56 <UART_SetConfig+0x1a2>
 8002a32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a36:	d817      	bhi.n	8002a68 <UART_SetConfig+0x1b4>
 8002a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3c:	d011      	beq.n	8002a62 <UART_SetConfig+0x1ae>
 8002a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a42:	d811      	bhi.n	8002a68 <UART_SetConfig+0x1b4>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <UART_SetConfig+0x19c>
 8002a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a4c:	d006      	beq.n	8002a5c <UART_SetConfig+0x1a8>
 8002a4e:	e00b      	b.n	8002a68 <UART_SetConfig+0x1b4>
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	e037      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a56:	2302      	movs	r3, #2
 8002a58:	77fb      	strb	r3, [r7, #31]
 8002a5a:	e034      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e031      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a62:	2308      	movs	r3, #8
 8002a64:	77fb      	strb	r3, [r7, #31]
 8002a66:	e02e      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a68:	2310      	movs	r3, #16
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e02b      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <UART_SetConfig+0x2f0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d124      	bne.n	8002ac2 <UART_SetConfig+0x20e>
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <UART_SetConfig+0x2e0>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a84:	d011      	beq.n	8002aaa <UART_SetConfig+0x1f6>
 8002a86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a8a:	d817      	bhi.n	8002abc <UART_SetConfig+0x208>
 8002a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a90:	d011      	beq.n	8002ab6 <UART_SetConfig+0x202>
 8002a92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a96:	d811      	bhi.n	8002abc <UART_SetConfig+0x208>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <UART_SetConfig+0x1f0>
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa0:	d006      	beq.n	8002ab0 <UART_SetConfig+0x1fc>
 8002aa2:	e00b      	b.n	8002abc <UART_SetConfig+0x208>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e00d      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e00a      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e007      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e004      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002abc:	2310      	movs	r3, #16
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e001      	b.n	8002ac6 <UART_SetConfig+0x212>
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ace:	d16d      	bne.n	8002bac <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002ad0:	7ffb      	ldrb	r3, [r7, #31]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d827      	bhi.n	8002b26 <UART_SetConfig+0x272>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0x228>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	08002b11 	.word	0x08002b11
 8002ae8:	08002b27 	.word	0x08002b27
 8002aec:	08002b17 	.word	0x08002b17
 8002af0:	08002b27 	.word	0x08002b27
 8002af4:	08002b27 	.word	0x08002b27
 8002af8:	08002b27 	.word	0x08002b27
 8002afc:	08002b1f 	.word	0x08002b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b00:	f7ff fb94 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8002b04:	61b8      	str	r0, [r7, #24]
        break;
 8002b06:	e013      	b.n	8002b30 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b08:	f7ff fbb2 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002b0c:	61b8      	str	r0, [r7, #24]
        break;
 8002b0e:	e00f      	b.n	8002b30 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <UART_SetConfig+0x2f4>)
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e00c      	b.n	8002b30 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b16:	f7ff fb13 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002b1a:	61b8      	str	r0, [r7, #24]
        break;
 8002b1c:	e008      	b.n	8002b30 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b22:	61bb      	str	r3, [r7, #24]
        break;
 8002b24:	e004      	b.n	8002b30 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8086 	beq.w	8002c44 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	005a      	lsls	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d916      	bls.n	8002b84 <UART_SetConfig+0x2d0>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d212      	bcs.n	8002b84 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f023 030f 	bic.w	r3, r3, #15
 8002b66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	89fa      	ldrh	r2, [r7, #14]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	e05f      	b.n	8002c44 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77bb      	strb	r3, [r7, #30]
 8002b88:	e05c      	b.n	8002c44 <UART_SetConfig+0x390>
 8002b8a:	bf00      	nop
 8002b8c:	efff69f3 	.word	0xefff69f3
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40004400 	.word	0x40004400
 8002b9c:	40004800 	.word	0x40004800
 8002ba0:	40004c00 	.word	0x40004c00
 8002ba4:	40005000 	.word	0x40005000
 8002ba8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d827      	bhi.n	8002c02 <UART_SetConfig+0x34e>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <UART_SetConfig+0x304>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002be5 	.word	0x08002be5
 8002bc0:	08002bed 	.word	0x08002bed
 8002bc4:	08002c03 	.word	0x08002c03
 8002bc8:	08002bf3 	.word	0x08002bf3
 8002bcc:	08002c03 	.word	0x08002c03
 8002bd0:	08002c03 	.word	0x08002c03
 8002bd4:	08002c03 	.word	0x08002c03
 8002bd8:	08002bfb 	.word	0x08002bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff fb26 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8002be0:	61b8      	str	r0, [r7, #24]
        break;
 8002be2:	e013      	b.n	8002c0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff fb44 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002be8:	61b8      	str	r0, [r7, #24]
        break;
 8002bea:	e00f      	b.n	8002c0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <UART_SetConfig+0x3a8>)
 8002bee:	61bb      	str	r3, [r7, #24]
        break;
 8002bf0:	e00c      	b.n	8002c0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff faa5 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002bf6:	61b8      	str	r0, [r7, #24]
        break;
 8002bf8:	e008      	b.n	8002c0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfe:	61bb      	str	r3, [r7, #24]
        break;
 8002c00:	e004      	b.n	8002c0c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	77bb      	strb	r3, [r7, #30]
        break;
 8002c0a:	bf00      	nop
    }

    if (pclk != 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	085a      	lsrs	r2, r3, #1
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	d908      	bls.n	8002c40 <UART_SetConfig+0x38c>
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d204      	bcs.n	8002c40 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	e001      	b.n	8002c44 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c50:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d10a      	bne.n	8002d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
  }
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002db4:	f7fd fcde 	bl	8000774 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d10e      	bne.n	8002de6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f82d 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e023      	b.n	8002e2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d10e      	bne.n	8002e12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f817 	bl	8002e36 <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e00d      	b.n	8002e2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e46:	e05e      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d05a      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7fd fc90 	bl	8000774 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11b      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e043      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02c      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eba:	d124      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ed4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e00f      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d091      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	; (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000000c 	.word	0x2000000c

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4d0d      	ldr	r5, [pc, #52]	; (8002f74 <__libc_init_array+0x38>)
 8002f40:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	2600      	movs	r6, #0
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	4d0b      	ldr	r5, [pc, #44]	; (8002f7c <__libc_init_array+0x40>)
 8002f4e:	4c0c      	ldr	r4, [pc, #48]	; (8002f80 <__libc_init_array+0x44>)
 8002f50:	f000 fc68 	bl	8003824 <_init>
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	2600      	movs	r6, #0
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	080038f4 	.word	0x080038f4
 8002f78:	080038f4 	.word	0x080038f4
 8002f7c:	080038f4 	.word	0x080038f4
 8002f80:	080038f8 	.word	0x080038f8

08002f84 <memset>:
 8002f84:	4402      	add	r2, r0
 8002f86:	4603      	mov	r3, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <_vsniprintf_r>:
 8002f94:	b530      	push	{r4, r5, lr}
 8002f96:	1e14      	subs	r4, r2, #0
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b09b      	sub	sp, #108	; 0x6c
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	da05      	bge.n	8002fac <_vsniprintf_r+0x18>
 8002fa0:	238b      	movs	r3, #139	; 0x8b
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	b01b      	add	sp, #108	; 0x6c
 8002faa:	bd30      	pop	{r4, r5, pc}
 8002fac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002fb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002fb4:	bf14      	ite	ne
 8002fb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002fba:	4623      	moveq	r3, r4
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	9305      	str	r3, [sp, #20]
 8002fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc4:	9100      	str	r1, [sp, #0]
 8002fc6:	9104      	str	r1, [sp, #16]
 8002fc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002fcc:	4602      	mov	r2, r0
 8002fce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002fd0:	4669      	mov	r1, sp
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f874 	bl	80030c0 <_svfiprintf_r>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	bfbc      	itt	lt
 8002fdc:	238b      	movlt	r3, #139	; 0x8b
 8002fde:	602b      	strlt	r3, [r5, #0]
 8002fe0:	2c00      	cmp	r4, #0
 8002fe2:	d0e1      	beq.n	8002fa8 <_vsniprintf_r+0x14>
 8002fe4:	9b00      	ldr	r3, [sp, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e7dd      	b.n	8002fa8 <_vsniprintf_r+0x14>

08002fec <vsniprintf>:
 8002fec:	b507      	push	{r0, r1, r2, lr}
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	4601      	mov	r1, r0
 8002ff6:	4803      	ldr	r0, [pc, #12]	; (8003004 <vsniprintf+0x18>)
 8002ff8:	6800      	ldr	r0, [r0, #0]
 8002ffa:	f7ff ffcb 	bl	8002f94 <_vsniprintf_r>
 8002ffe:	b003      	add	sp, #12
 8003000:	f85d fb04 	ldr.w	pc, [sp], #4
 8003004:	2000000c 	.word	0x2000000c

08003008 <__ssputs_r>:
 8003008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	688e      	ldr	r6, [r1, #8]
 800300e:	429e      	cmp	r6, r3
 8003010:	4682      	mov	sl, r0
 8003012:	460c      	mov	r4, r1
 8003014:	4690      	mov	r8, r2
 8003016:	461f      	mov	r7, r3
 8003018:	d838      	bhi.n	800308c <__ssputs_r+0x84>
 800301a:	898a      	ldrh	r2, [r1, #12]
 800301c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003020:	d032      	beq.n	8003088 <__ssputs_r+0x80>
 8003022:	6825      	ldr	r5, [r4, #0]
 8003024:	6909      	ldr	r1, [r1, #16]
 8003026:	eba5 0901 	sub.w	r9, r5, r1
 800302a:	6965      	ldr	r5, [r4, #20]
 800302c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003034:	3301      	adds	r3, #1
 8003036:	444b      	add	r3, r9
 8003038:	106d      	asrs	r5, r5, #1
 800303a:	429d      	cmp	r5, r3
 800303c:	bf38      	it	cc
 800303e:	461d      	movcc	r5, r3
 8003040:	0553      	lsls	r3, r2, #21
 8003042:	d531      	bpl.n	80030a8 <__ssputs_r+0xa0>
 8003044:	4629      	mov	r1, r5
 8003046:	f000 fb47 	bl	80036d8 <_malloc_r>
 800304a:	4606      	mov	r6, r0
 800304c:	b950      	cbnz	r0, 8003064 <__ssputs_r+0x5c>
 800304e:	230c      	movs	r3, #12
 8003050:	f8ca 3000 	str.w	r3, [sl]
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003064:	6921      	ldr	r1, [r4, #16]
 8003066:	464a      	mov	r2, r9
 8003068:	f000 fabe 	bl	80035e8 <memcpy>
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	81a3      	strh	r3, [r4, #12]
 8003078:	6126      	str	r6, [r4, #16]
 800307a:	6165      	str	r5, [r4, #20]
 800307c:	444e      	add	r6, r9
 800307e:	eba5 0509 	sub.w	r5, r5, r9
 8003082:	6026      	str	r6, [r4, #0]
 8003084:	60a5      	str	r5, [r4, #8]
 8003086:	463e      	mov	r6, r7
 8003088:	42be      	cmp	r6, r7
 800308a:	d900      	bls.n	800308e <__ssputs_r+0x86>
 800308c:	463e      	mov	r6, r7
 800308e:	4632      	mov	r2, r6
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	4641      	mov	r1, r8
 8003094:	f000 fab6 	bl	8003604 <memmove>
 8003098:	68a3      	ldr	r3, [r4, #8]
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	1b9b      	subs	r3, r3, r6
 800309e:	4432      	add	r2, r6
 80030a0:	60a3      	str	r3, [r4, #8]
 80030a2:	6022      	str	r2, [r4, #0]
 80030a4:	2000      	movs	r0, #0
 80030a6:	e7db      	b.n	8003060 <__ssputs_r+0x58>
 80030a8:	462a      	mov	r2, r5
 80030aa:	f000 fb6f 	bl	800378c <_realloc_r>
 80030ae:	4606      	mov	r6, r0
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d1e1      	bne.n	8003078 <__ssputs_r+0x70>
 80030b4:	6921      	ldr	r1, [r4, #16]
 80030b6:	4650      	mov	r0, sl
 80030b8:	f000 fabe 	bl	8003638 <_free_r>
 80030bc:	e7c7      	b.n	800304e <__ssputs_r+0x46>
	...

080030c0 <_svfiprintf_r>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	4698      	mov	r8, r3
 80030c6:	898b      	ldrh	r3, [r1, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	b09d      	sub	sp, #116	; 0x74
 80030cc:	4607      	mov	r7, r0
 80030ce:	460d      	mov	r5, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	d50e      	bpl.n	80030f2 <_svfiprintf_r+0x32>
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	b963      	cbnz	r3, 80030f2 <_svfiprintf_r+0x32>
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	f000 fafd 	bl	80036d8 <_malloc_r>
 80030de:	6028      	str	r0, [r5, #0]
 80030e0:	6128      	str	r0, [r5, #16]
 80030e2:	b920      	cbnz	r0, 80030ee <_svfiprintf_r+0x2e>
 80030e4:	230c      	movs	r3, #12
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	e0d1      	b.n	8003292 <_svfiprintf_r+0x1d2>
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	616b      	str	r3, [r5, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9309      	str	r3, [sp, #36]	; 0x24
 80030f6:	2320      	movs	r3, #32
 80030f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003100:	2330      	movs	r3, #48	; 0x30
 8003102:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032ac <_svfiprintf_r+0x1ec>
 8003106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800310a:	f04f 0901 	mov.w	r9, #1
 800310e:	4623      	mov	r3, r4
 8003110:	469a      	mov	sl, r3
 8003112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003116:	b10a      	cbz	r2, 800311c <_svfiprintf_r+0x5c>
 8003118:	2a25      	cmp	r2, #37	; 0x25
 800311a:	d1f9      	bne.n	8003110 <_svfiprintf_r+0x50>
 800311c:	ebba 0b04 	subs.w	fp, sl, r4
 8003120:	d00b      	beq.n	800313a <_svfiprintf_r+0x7a>
 8003122:	465b      	mov	r3, fp
 8003124:	4622      	mov	r2, r4
 8003126:	4629      	mov	r1, r5
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff6d 	bl	8003008 <__ssputs_r>
 800312e:	3001      	adds	r0, #1
 8003130:	f000 80aa 	beq.w	8003288 <_svfiprintf_r+0x1c8>
 8003134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003136:	445a      	add	r2, fp
 8003138:	9209      	str	r2, [sp, #36]	; 0x24
 800313a:	f89a 3000 	ldrb.w	r3, [sl]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a2 	beq.w	8003288 <_svfiprintf_r+0x1c8>
 8003144:	2300      	movs	r3, #0
 8003146:	f04f 32ff 	mov.w	r2, #4294967295
 800314a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314e:	f10a 0a01 	add.w	sl, sl, #1
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800315a:	931a      	str	r3, [sp, #104]	; 0x68
 800315c:	4654      	mov	r4, sl
 800315e:	2205      	movs	r2, #5
 8003160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003164:	4851      	ldr	r0, [pc, #324]	; (80032ac <_svfiprintf_r+0x1ec>)
 8003166:	f7fd f843 	bl	80001f0 <memchr>
 800316a:	9a04      	ldr	r2, [sp, #16]
 800316c:	b9d8      	cbnz	r0, 80031a6 <_svfiprintf_r+0xe6>
 800316e:	06d0      	lsls	r0, r2, #27
 8003170:	bf44      	itt	mi
 8003172:	2320      	movmi	r3, #32
 8003174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003178:	0711      	lsls	r1, r2, #28
 800317a:	bf44      	itt	mi
 800317c:	232b      	movmi	r3, #43	; 0x2b
 800317e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003182:	f89a 3000 	ldrb.w	r3, [sl]
 8003186:	2b2a      	cmp	r3, #42	; 0x2a
 8003188:	d015      	beq.n	80031b6 <_svfiprintf_r+0xf6>
 800318a:	9a07      	ldr	r2, [sp, #28]
 800318c:	4654      	mov	r4, sl
 800318e:	2000      	movs	r0, #0
 8003190:	f04f 0c0a 	mov.w	ip, #10
 8003194:	4621      	mov	r1, r4
 8003196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319a:	3b30      	subs	r3, #48	; 0x30
 800319c:	2b09      	cmp	r3, #9
 800319e:	d94e      	bls.n	800323e <_svfiprintf_r+0x17e>
 80031a0:	b1b0      	cbz	r0, 80031d0 <_svfiprintf_r+0x110>
 80031a2:	9207      	str	r2, [sp, #28]
 80031a4:	e014      	b.n	80031d0 <_svfiprintf_r+0x110>
 80031a6:	eba0 0308 	sub.w	r3, r0, r8
 80031aa:	fa09 f303 	lsl.w	r3, r9, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	46a2      	mov	sl, r4
 80031b4:	e7d2      	b.n	800315c <_svfiprintf_r+0x9c>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	1d19      	adds	r1, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	9103      	str	r1, [sp, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfbb      	ittet	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	f042 0202 	orrlt.w	r2, r2, #2
 80031c8:	9307      	strge	r3, [sp, #28]
 80031ca:	9307      	strlt	r3, [sp, #28]
 80031cc:	bfb8      	it	lt
 80031ce:	9204      	strlt	r2, [sp, #16]
 80031d0:	7823      	ldrb	r3, [r4, #0]
 80031d2:	2b2e      	cmp	r3, #46	; 0x2e
 80031d4:	d10c      	bne.n	80031f0 <_svfiprintf_r+0x130>
 80031d6:	7863      	ldrb	r3, [r4, #1]
 80031d8:	2b2a      	cmp	r3, #42	; 0x2a
 80031da:	d135      	bne.n	8003248 <_svfiprintf_r+0x188>
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	9203      	str	r2, [sp, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bfb8      	it	lt
 80031e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80031ec:	3402      	adds	r4, #2
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032bc <_svfiprintf_r+0x1fc>
 80031f4:	7821      	ldrb	r1, [r4, #0]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4650      	mov	r0, sl
 80031fa:	f7fc fff9 	bl	80001f0 <memchr>
 80031fe:	b140      	cbz	r0, 8003212 <_svfiprintf_r+0x152>
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	eba0 000a 	sub.w	r0, r0, sl
 8003206:	fa03 f000 	lsl.w	r0, r3, r0
 800320a:	9b04      	ldr	r3, [sp, #16]
 800320c:	4303      	orrs	r3, r0
 800320e:	3401      	adds	r4, #1
 8003210:	9304      	str	r3, [sp, #16]
 8003212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003216:	4826      	ldr	r0, [pc, #152]	; (80032b0 <_svfiprintf_r+0x1f0>)
 8003218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800321c:	2206      	movs	r2, #6
 800321e:	f7fc ffe7 	bl	80001f0 <memchr>
 8003222:	2800      	cmp	r0, #0
 8003224:	d038      	beq.n	8003298 <_svfiprintf_r+0x1d8>
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <_svfiprintf_r+0x1f4>)
 8003228:	bb1b      	cbnz	r3, 8003272 <_svfiprintf_r+0x1b2>
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	3307      	adds	r3, #7
 800322e:	f023 0307 	bic.w	r3, r3, #7
 8003232:	3308      	adds	r3, #8
 8003234:	9303      	str	r3, [sp, #12]
 8003236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003238:	4433      	add	r3, r6
 800323a:	9309      	str	r3, [sp, #36]	; 0x24
 800323c:	e767      	b.n	800310e <_svfiprintf_r+0x4e>
 800323e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003242:	460c      	mov	r4, r1
 8003244:	2001      	movs	r0, #1
 8003246:	e7a5      	b.n	8003194 <_svfiprintf_r+0xd4>
 8003248:	2300      	movs	r3, #0
 800324a:	3401      	adds	r4, #1
 800324c:	9305      	str	r3, [sp, #20]
 800324e:	4619      	mov	r1, r3
 8003250:	f04f 0c0a 	mov.w	ip, #10
 8003254:	4620      	mov	r0, r4
 8003256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800325a:	3a30      	subs	r2, #48	; 0x30
 800325c:	2a09      	cmp	r2, #9
 800325e:	d903      	bls.n	8003268 <_svfiprintf_r+0x1a8>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0c5      	beq.n	80031f0 <_svfiprintf_r+0x130>
 8003264:	9105      	str	r1, [sp, #20]
 8003266:	e7c3      	b.n	80031f0 <_svfiprintf_r+0x130>
 8003268:	fb0c 2101 	mla	r1, ip, r1, r2
 800326c:	4604      	mov	r4, r0
 800326e:	2301      	movs	r3, #1
 8003270:	e7f0      	b.n	8003254 <_svfiprintf_r+0x194>
 8003272:	ab03      	add	r3, sp, #12
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	462a      	mov	r2, r5
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <_svfiprintf_r+0x1f8>)
 800327a:	a904      	add	r1, sp, #16
 800327c:	4638      	mov	r0, r7
 800327e:	f3af 8000 	nop.w
 8003282:	1c42      	adds	r2, r0, #1
 8003284:	4606      	mov	r6, r0
 8003286:	d1d6      	bne.n	8003236 <_svfiprintf_r+0x176>
 8003288:	89ab      	ldrh	r3, [r5, #12]
 800328a:	065b      	lsls	r3, r3, #25
 800328c:	f53f af2c 	bmi.w	80030e8 <_svfiprintf_r+0x28>
 8003290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003292:	b01d      	add	sp, #116	; 0x74
 8003294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003298:	ab03      	add	r3, sp, #12
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	462a      	mov	r2, r5
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <_svfiprintf_r+0x1f8>)
 80032a0:	a904      	add	r1, sp, #16
 80032a2:	4638      	mov	r0, r7
 80032a4:	f000 f87a 	bl	800339c <_printf_i>
 80032a8:	e7eb      	b.n	8003282 <_svfiprintf_r+0x1c2>
 80032aa:	bf00      	nop
 80032ac:	080038c0 	.word	0x080038c0
 80032b0:	080038ca 	.word	0x080038ca
 80032b4:	00000000 	.word	0x00000000
 80032b8:	08003009 	.word	0x08003009
 80032bc:	080038c6 	.word	0x080038c6

080032c0 <_printf_common>:
 80032c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c4:	4616      	mov	r6, r2
 80032c6:	4699      	mov	r9, r3
 80032c8:	688a      	ldr	r2, [r1, #8]
 80032ca:	690b      	ldr	r3, [r1, #16]
 80032cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bfb8      	it	lt
 80032d4:	4613      	movlt	r3, r2
 80032d6:	6033      	str	r3, [r6, #0]
 80032d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032dc:	4607      	mov	r7, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	b10a      	cbz	r2, 80032e6 <_printf_common+0x26>
 80032e2:	3301      	adds	r3, #1
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	0699      	lsls	r1, r3, #26
 80032ea:	bf42      	ittt	mi
 80032ec:	6833      	ldrmi	r3, [r6, #0]
 80032ee:	3302      	addmi	r3, #2
 80032f0:	6033      	strmi	r3, [r6, #0]
 80032f2:	6825      	ldr	r5, [r4, #0]
 80032f4:	f015 0506 	ands.w	r5, r5, #6
 80032f8:	d106      	bne.n	8003308 <_printf_common+0x48>
 80032fa:	f104 0a19 	add.w	sl, r4, #25
 80032fe:	68e3      	ldr	r3, [r4, #12]
 8003300:	6832      	ldr	r2, [r6, #0]
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	42ab      	cmp	r3, r5
 8003306:	dc26      	bgt.n	8003356 <_printf_common+0x96>
 8003308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800330c:	1e13      	subs	r3, r2, #0
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	bf18      	it	ne
 8003312:	2301      	movne	r3, #1
 8003314:	0692      	lsls	r2, r2, #26
 8003316:	d42b      	bmi.n	8003370 <_printf_common+0xb0>
 8003318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800331c:	4649      	mov	r1, r9
 800331e:	4638      	mov	r0, r7
 8003320:	47c0      	blx	r8
 8003322:	3001      	adds	r0, #1
 8003324:	d01e      	beq.n	8003364 <_printf_common+0xa4>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	68e5      	ldr	r5, [r4, #12]
 800332a:	6832      	ldr	r2, [r6, #0]
 800332c:	f003 0306 	and.w	r3, r3, #6
 8003330:	2b04      	cmp	r3, #4
 8003332:	bf08      	it	eq
 8003334:	1aad      	subeq	r5, r5, r2
 8003336:	68a3      	ldr	r3, [r4, #8]
 8003338:	6922      	ldr	r2, [r4, #16]
 800333a:	bf0c      	ite	eq
 800333c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003340:	2500      	movne	r5, #0
 8003342:	4293      	cmp	r3, r2
 8003344:	bfc4      	itt	gt
 8003346:	1a9b      	subgt	r3, r3, r2
 8003348:	18ed      	addgt	r5, r5, r3
 800334a:	2600      	movs	r6, #0
 800334c:	341a      	adds	r4, #26
 800334e:	42b5      	cmp	r5, r6
 8003350:	d11a      	bne.n	8003388 <_printf_common+0xc8>
 8003352:	2000      	movs	r0, #0
 8003354:	e008      	b.n	8003368 <_printf_common+0xa8>
 8003356:	2301      	movs	r3, #1
 8003358:	4652      	mov	r2, sl
 800335a:	4649      	mov	r1, r9
 800335c:	4638      	mov	r0, r7
 800335e:	47c0      	blx	r8
 8003360:	3001      	adds	r0, #1
 8003362:	d103      	bne.n	800336c <_printf_common+0xac>
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336c:	3501      	adds	r5, #1
 800336e:	e7c6      	b.n	80032fe <_printf_common+0x3e>
 8003370:	18e1      	adds	r1, r4, r3
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	2030      	movs	r0, #48	; 0x30
 8003376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337a:	4422      	add	r2, r4
 800337c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003384:	3302      	adds	r3, #2
 8003386:	e7c7      	b.n	8003318 <_printf_common+0x58>
 8003388:	2301      	movs	r3, #1
 800338a:	4622      	mov	r2, r4
 800338c:	4649      	mov	r1, r9
 800338e:	4638      	mov	r0, r7
 8003390:	47c0      	blx	r8
 8003392:	3001      	adds	r0, #1
 8003394:	d0e6      	beq.n	8003364 <_printf_common+0xa4>
 8003396:	3601      	adds	r6, #1
 8003398:	e7d9      	b.n	800334e <_printf_common+0x8e>
	...

0800339c <_printf_i>:
 800339c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	460c      	mov	r4, r1
 80033a2:	4691      	mov	r9, r2
 80033a4:	7e27      	ldrb	r7, [r4, #24]
 80033a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033a8:	2f78      	cmp	r7, #120	; 0x78
 80033aa:	4680      	mov	r8, r0
 80033ac:	469a      	mov	sl, r3
 80033ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033b2:	d807      	bhi.n	80033c4 <_printf_i+0x28>
 80033b4:	2f62      	cmp	r7, #98	; 0x62
 80033b6:	d80a      	bhi.n	80033ce <_printf_i+0x32>
 80033b8:	2f00      	cmp	r7, #0
 80033ba:	f000 80d8 	beq.w	800356e <_printf_i+0x1d2>
 80033be:	2f58      	cmp	r7, #88	; 0x58
 80033c0:	f000 80a3 	beq.w	800350a <_printf_i+0x16e>
 80033c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033cc:	e03a      	b.n	8003444 <_printf_i+0xa8>
 80033ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d2:	2b15      	cmp	r3, #21
 80033d4:	d8f6      	bhi.n	80033c4 <_printf_i+0x28>
 80033d6:	a001      	add	r0, pc, #4	; (adr r0, 80033dc <_printf_i+0x40>)
 80033d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033dc:	08003435 	.word	0x08003435
 80033e0:	08003449 	.word	0x08003449
 80033e4:	080033c5 	.word	0x080033c5
 80033e8:	080033c5 	.word	0x080033c5
 80033ec:	080033c5 	.word	0x080033c5
 80033f0:	080033c5 	.word	0x080033c5
 80033f4:	08003449 	.word	0x08003449
 80033f8:	080033c5 	.word	0x080033c5
 80033fc:	080033c5 	.word	0x080033c5
 8003400:	080033c5 	.word	0x080033c5
 8003404:	080033c5 	.word	0x080033c5
 8003408:	08003555 	.word	0x08003555
 800340c:	08003479 	.word	0x08003479
 8003410:	08003537 	.word	0x08003537
 8003414:	080033c5 	.word	0x080033c5
 8003418:	080033c5 	.word	0x080033c5
 800341c:	08003577 	.word	0x08003577
 8003420:	080033c5 	.word	0x080033c5
 8003424:	08003479 	.word	0x08003479
 8003428:	080033c5 	.word	0x080033c5
 800342c:	080033c5 	.word	0x080033c5
 8003430:	0800353f 	.word	0x0800353f
 8003434:	680b      	ldr	r3, [r1, #0]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	600a      	str	r2, [r1, #0]
 800343c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003444:	2301      	movs	r3, #1
 8003446:	e0a3      	b.n	8003590 <_printf_i+0x1f4>
 8003448:	6825      	ldr	r5, [r4, #0]
 800344a:	6808      	ldr	r0, [r1, #0]
 800344c:	062e      	lsls	r6, r5, #24
 800344e:	f100 0304 	add.w	r3, r0, #4
 8003452:	d50a      	bpl.n	800346a <_printf_i+0xce>
 8003454:	6805      	ldr	r5, [r0, #0]
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	2d00      	cmp	r5, #0
 800345a:	da03      	bge.n	8003464 <_printf_i+0xc8>
 800345c:	232d      	movs	r3, #45	; 0x2d
 800345e:	426d      	negs	r5, r5
 8003460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003464:	485e      	ldr	r0, [pc, #376]	; (80035e0 <_printf_i+0x244>)
 8003466:	230a      	movs	r3, #10
 8003468:	e019      	b.n	800349e <_printf_i+0x102>
 800346a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800346e:	6805      	ldr	r5, [r0, #0]
 8003470:	600b      	str	r3, [r1, #0]
 8003472:	bf18      	it	ne
 8003474:	b22d      	sxthne	r5, r5
 8003476:	e7ef      	b.n	8003458 <_printf_i+0xbc>
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	6825      	ldr	r5, [r4, #0]
 800347c:	1d18      	adds	r0, r3, #4
 800347e:	6008      	str	r0, [r1, #0]
 8003480:	0628      	lsls	r0, r5, #24
 8003482:	d501      	bpl.n	8003488 <_printf_i+0xec>
 8003484:	681d      	ldr	r5, [r3, #0]
 8003486:	e002      	b.n	800348e <_printf_i+0xf2>
 8003488:	0669      	lsls	r1, r5, #25
 800348a:	d5fb      	bpl.n	8003484 <_printf_i+0xe8>
 800348c:	881d      	ldrh	r5, [r3, #0]
 800348e:	4854      	ldr	r0, [pc, #336]	; (80035e0 <_printf_i+0x244>)
 8003490:	2f6f      	cmp	r7, #111	; 0x6f
 8003492:	bf0c      	ite	eq
 8003494:	2308      	moveq	r3, #8
 8003496:	230a      	movne	r3, #10
 8003498:	2100      	movs	r1, #0
 800349a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349e:	6866      	ldr	r6, [r4, #4]
 80034a0:	60a6      	str	r6, [r4, #8]
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	bfa2      	ittt	ge
 80034a6:	6821      	ldrge	r1, [r4, #0]
 80034a8:	f021 0104 	bicge.w	r1, r1, #4
 80034ac:	6021      	strge	r1, [r4, #0]
 80034ae:	b90d      	cbnz	r5, 80034b4 <_printf_i+0x118>
 80034b0:	2e00      	cmp	r6, #0
 80034b2:	d04d      	beq.n	8003550 <_printf_i+0x1b4>
 80034b4:	4616      	mov	r6, r2
 80034b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80034ba:	fb03 5711 	mls	r7, r3, r1, r5
 80034be:	5dc7      	ldrb	r7, [r0, r7]
 80034c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034c4:	462f      	mov	r7, r5
 80034c6:	42bb      	cmp	r3, r7
 80034c8:	460d      	mov	r5, r1
 80034ca:	d9f4      	bls.n	80034b6 <_printf_i+0x11a>
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d10b      	bne.n	80034e8 <_printf_i+0x14c>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	07df      	lsls	r7, r3, #31
 80034d4:	d508      	bpl.n	80034e8 <_printf_i+0x14c>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	6861      	ldr	r1, [r4, #4]
 80034da:	4299      	cmp	r1, r3
 80034dc:	bfde      	ittt	le
 80034de:	2330      	movle	r3, #48	; 0x30
 80034e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034e8:	1b92      	subs	r2, r2, r6
 80034ea:	6122      	str	r2, [r4, #16]
 80034ec:	f8cd a000 	str.w	sl, [sp]
 80034f0:	464b      	mov	r3, r9
 80034f2:	aa03      	add	r2, sp, #12
 80034f4:	4621      	mov	r1, r4
 80034f6:	4640      	mov	r0, r8
 80034f8:	f7ff fee2 	bl	80032c0 <_printf_common>
 80034fc:	3001      	adds	r0, #1
 80034fe:	d14c      	bne.n	800359a <_printf_i+0x1fe>
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	b004      	add	sp, #16
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350a:	4835      	ldr	r0, [pc, #212]	; (80035e0 <_printf_i+0x244>)
 800350c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	680e      	ldr	r6, [r1, #0]
 8003514:	061f      	lsls	r7, r3, #24
 8003516:	f856 5b04 	ldr.w	r5, [r6], #4
 800351a:	600e      	str	r6, [r1, #0]
 800351c:	d514      	bpl.n	8003548 <_printf_i+0x1ac>
 800351e:	07d9      	lsls	r1, r3, #31
 8003520:	bf44      	itt	mi
 8003522:	f043 0320 	orrmi.w	r3, r3, #32
 8003526:	6023      	strmi	r3, [r4, #0]
 8003528:	b91d      	cbnz	r5, 8003532 <_printf_i+0x196>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	f023 0320 	bic.w	r3, r3, #32
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	2310      	movs	r3, #16
 8003534:	e7b0      	b.n	8003498 <_printf_i+0xfc>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f043 0320 	orr.w	r3, r3, #32
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	2378      	movs	r3, #120	; 0x78
 8003540:	4828      	ldr	r0, [pc, #160]	; (80035e4 <_printf_i+0x248>)
 8003542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003546:	e7e3      	b.n	8003510 <_printf_i+0x174>
 8003548:	065e      	lsls	r6, r3, #25
 800354a:	bf48      	it	mi
 800354c:	b2ad      	uxthmi	r5, r5
 800354e:	e7e6      	b.n	800351e <_printf_i+0x182>
 8003550:	4616      	mov	r6, r2
 8003552:	e7bb      	b.n	80034cc <_printf_i+0x130>
 8003554:	680b      	ldr	r3, [r1, #0]
 8003556:	6826      	ldr	r6, [r4, #0]
 8003558:	6960      	ldr	r0, [r4, #20]
 800355a:	1d1d      	adds	r5, r3, #4
 800355c:	600d      	str	r5, [r1, #0]
 800355e:	0635      	lsls	r5, r6, #24
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	d501      	bpl.n	8003568 <_printf_i+0x1cc>
 8003564:	6018      	str	r0, [r3, #0]
 8003566:	e002      	b.n	800356e <_printf_i+0x1d2>
 8003568:	0671      	lsls	r1, r6, #25
 800356a:	d5fb      	bpl.n	8003564 <_printf_i+0x1c8>
 800356c:	8018      	strh	r0, [r3, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	4616      	mov	r6, r2
 8003574:	e7ba      	b.n	80034ec <_printf_i+0x150>
 8003576:	680b      	ldr	r3, [r1, #0]
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	600a      	str	r2, [r1, #0]
 800357c:	681e      	ldr	r6, [r3, #0]
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	2100      	movs	r1, #0
 8003582:	4630      	mov	r0, r6
 8003584:	f7fc fe34 	bl	80001f0 <memchr>
 8003588:	b108      	cbz	r0, 800358e <_printf_i+0x1f2>
 800358a:	1b80      	subs	r0, r0, r6
 800358c:	6060      	str	r0, [r4, #4]
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	2300      	movs	r3, #0
 8003594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003598:	e7a8      	b.n	80034ec <_printf_i+0x150>
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	4632      	mov	r2, r6
 800359e:	4649      	mov	r1, r9
 80035a0:	4640      	mov	r0, r8
 80035a2:	47d0      	blx	sl
 80035a4:	3001      	adds	r0, #1
 80035a6:	d0ab      	beq.n	8003500 <_printf_i+0x164>
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	079b      	lsls	r3, r3, #30
 80035ac:	d413      	bmi.n	80035d6 <_printf_i+0x23a>
 80035ae:	68e0      	ldr	r0, [r4, #12]
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	4298      	cmp	r0, r3
 80035b4:	bfb8      	it	lt
 80035b6:	4618      	movlt	r0, r3
 80035b8:	e7a4      	b.n	8003504 <_printf_i+0x168>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4632      	mov	r2, r6
 80035be:	4649      	mov	r1, r9
 80035c0:	4640      	mov	r0, r8
 80035c2:	47d0      	blx	sl
 80035c4:	3001      	adds	r0, #1
 80035c6:	d09b      	beq.n	8003500 <_printf_i+0x164>
 80035c8:	3501      	adds	r5, #1
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	9903      	ldr	r1, [sp, #12]
 80035ce:	1a5b      	subs	r3, r3, r1
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	dcf2      	bgt.n	80035ba <_printf_i+0x21e>
 80035d4:	e7eb      	b.n	80035ae <_printf_i+0x212>
 80035d6:	2500      	movs	r5, #0
 80035d8:	f104 0619 	add.w	r6, r4, #25
 80035dc:	e7f5      	b.n	80035ca <_printf_i+0x22e>
 80035de:	bf00      	nop
 80035e0:	080038d1 	.word	0x080038d1
 80035e4:	080038e2 	.word	0x080038e2

080035e8 <memcpy>:
 80035e8:	440a      	add	r2, r1
 80035ea:	4291      	cmp	r1, r2
 80035ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80035f0:	d100      	bne.n	80035f4 <memcpy+0xc>
 80035f2:	4770      	bx	lr
 80035f4:	b510      	push	{r4, lr}
 80035f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035fe:	4291      	cmp	r1, r2
 8003600:	d1f9      	bne.n	80035f6 <memcpy+0xe>
 8003602:	bd10      	pop	{r4, pc}

08003604 <memmove>:
 8003604:	4288      	cmp	r0, r1
 8003606:	b510      	push	{r4, lr}
 8003608:	eb01 0402 	add.w	r4, r1, r2
 800360c:	d902      	bls.n	8003614 <memmove+0x10>
 800360e:	4284      	cmp	r4, r0
 8003610:	4623      	mov	r3, r4
 8003612:	d807      	bhi.n	8003624 <memmove+0x20>
 8003614:	1e43      	subs	r3, r0, #1
 8003616:	42a1      	cmp	r1, r4
 8003618:	d008      	beq.n	800362c <memmove+0x28>
 800361a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800361e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003622:	e7f8      	b.n	8003616 <memmove+0x12>
 8003624:	4402      	add	r2, r0
 8003626:	4601      	mov	r1, r0
 8003628:	428a      	cmp	r2, r1
 800362a:	d100      	bne.n	800362e <memmove+0x2a>
 800362c:	bd10      	pop	{r4, pc}
 800362e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003636:	e7f7      	b.n	8003628 <memmove+0x24>

08003638 <_free_r>:
 8003638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d048      	beq.n	80036d0 <_free_r+0x98>
 800363e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003642:	9001      	str	r0, [sp, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f1a1 0404 	sub.w	r4, r1, #4
 800364a:	bfb8      	it	lt
 800364c:	18e4      	addlt	r4, r4, r3
 800364e:	f000 f8d3 	bl	80037f8 <__malloc_lock>
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <_free_r+0x9c>)
 8003654:	9801      	ldr	r0, [sp, #4]
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	4615      	mov	r5, r2
 800365a:	b933      	cbnz	r3, 800366a <_free_r+0x32>
 800365c:	6063      	str	r3, [r4, #4]
 800365e:	6014      	str	r4, [r2, #0]
 8003660:	b003      	add	sp, #12
 8003662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003666:	f000 b8cd 	b.w	8003804 <__malloc_unlock>
 800366a:	42a3      	cmp	r3, r4
 800366c:	d90b      	bls.n	8003686 <_free_r+0x4e>
 800366e:	6821      	ldr	r1, [r4, #0]
 8003670:	1862      	adds	r2, r4, r1
 8003672:	4293      	cmp	r3, r2
 8003674:	bf04      	itt	eq
 8003676:	681a      	ldreq	r2, [r3, #0]
 8003678:	685b      	ldreq	r3, [r3, #4]
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	bf04      	itt	eq
 800367e:	1852      	addeq	r2, r2, r1
 8003680:	6022      	streq	r2, [r4, #0]
 8003682:	602c      	str	r4, [r5, #0]
 8003684:	e7ec      	b.n	8003660 <_free_r+0x28>
 8003686:	461a      	mov	r2, r3
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	b10b      	cbz	r3, 8003690 <_free_r+0x58>
 800368c:	42a3      	cmp	r3, r4
 800368e:	d9fa      	bls.n	8003686 <_free_r+0x4e>
 8003690:	6811      	ldr	r1, [r2, #0]
 8003692:	1855      	adds	r5, r2, r1
 8003694:	42a5      	cmp	r5, r4
 8003696:	d10b      	bne.n	80036b0 <_free_r+0x78>
 8003698:	6824      	ldr	r4, [r4, #0]
 800369a:	4421      	add	r1, r4
 800369c:	1854      	adds	r4, r2, r1
 800369e:	42a3      	cmp	r3, r4
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	d1dd      	bne.n	8003660 <_free_r+0x28>
 80036a4:	681c      	ldr	r4, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	6053      	str	r3, [r2, #4]
 80036aa:	4421      	add	r1, r4
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	e7d7      	b.n	8003660 <_free_r+0x28>
 80036b0:	d902      	bls.n	80036b8 <_free_r+0x80>
 80036b2:	230c      	movs	r3, #12
 80036b4:	6003      	str	r3, [r0, #0]
 80036b6:	e7d3      	b.n	8003660 <_free_r+0x28>
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	1961      	adds	r1, r4, r5
 80036bc:	428b      	cmp	r3, r1
 80036be:	bf04      	itt	eq
 80036c0:	6819      	ldreq	r1, [r3, #0]
 80036c2:	685b      	ldreq	r3, [r3, #4]
 80036c4:	6063      	str	r3, [r4, #4]
 80036c6:	bf04      	itt	eq
 80036c8:	1949      	addeq	r1, r1, r5
 80036ca:	6021      	streq	r1, [r4, #0]
 80036cc:	6054      	str	r4, [r2, #4]
 80036ce:	e7c7      	b.n	8003660 <_free_r+0x28>
 80036d0:	b003      	add	sp, #12
 80036d2:	bd30      	pop	{r4, r5, pc}
 80036d4:	2000019c 	.word	0x2000019c

080036d8 <_malloc_r>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	1ccd      	adds	r5, r1, #3
 80036dc:	f025 0503 	bic.w	r5, r5, #3
 80036e0:	3508      	adds	r5, #8
 80036e2:	2d0c      	cmp	r5, #12
 80036e4:	bf38      	it	cc
 80036e6:	250c      	movcc	r5, #12
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	4606      	mov	r6, r0
 80036ec:	db01      	blt.n	80036f2 <_malloc_r+0x1a>
 80036ee:	42a9      	cmp	r1, r5
 80036f0:	d903      	bls.n	80036fa <_malloc_r+0x22>
 80036f2:	230c      	movs	r3, #12
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	2000      	movs	r0, #0
 80036f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036fa:	f000 f87d 	bl	80037f8 <__malloc_lock>
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <_malloc_r+0xac>)
 8003700:	680a      	ldr	r2, [r1, #0]
 8003702:	4614      	mov	r4, r2
 8003704:	b99c      	cbnz	r4, 800372e <_malloc_r+0x56>
 8003706:	4f20      	ldr	r7, [pc, #128]	; (8003788 <_malloc_r+0xb0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b923      	cbnz	r3, 8003716 <_malloc_r+0x3e>
 800370c:	4621      	mov	r1, r4
 800370e:	4630      	mov	r0, r6
 8003710:	f000 f862 	bl	80037d8 <_sbrk_r>
 8003714:	6038      	str	r0, [r7, #0]
 8003716:	4629      	mov	r1, r5
 8003718:	4630      	mov	r0, r6
 800371a:	f000 f85d 	bl	80037d8 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d123      	bne.n	800376a <_malloc_r+0x92>
 8003722:	230c      	movs	r3, #12
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	4630      	mov	r0, r6
 8003728:	f000 f86c 	bl	8003804 <__malloc_unlock>
 800372c:	e7e3      	b.n	80036f6 <_malloc_r+0x1e>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	1b5b      	subs	r3, r3, r5
 8003732:	d417      	bmi.n	8003764 <_malloc_r+0x8c>
 8003734:	2b0b      	cmp	r3, #11
 8003736:	d903      	bls.n	8003740 <_malloc_r+0x68>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	441c      	add	r4, r3
 800373c:	6025      	str	r5, [r4, #0]
 800373e:	e004      	b.n	800374a <_malloc_r+0x72>
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	42a2      	cmp	r2, r4
 8003744:	bf0c      	ite	eq
 8003746:	600b      	streq	r3, [r1, #0]
 8003748:	6053      	strne	r3, [r2, #4]
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f85a 	bl	8003804 <__malloc_unlock>
 8003750:	f104 000b 	add.w	r0, r4, #11
 8003754:	1d23      	adds	r3, r4, #4
 8003756:	f020 0007 	bic.w	r0, r0, #7
 800375a:	1ac2      	subs	r2, r0, r3
 800375c:	d0cc      	beq.n	80036f8 <_malloc_r+0x20>
 800375e:	1a1b      	subs	r3, r3, r0
 8003760:	50a3      	str	r3, [r4, r2]
 8003762:	e7c9      	b.n	80036f8 <_malloc_r+0x20>
 8003764:	4622      	mov	r2, r4
 8003766:	6864      	ldr	r4, [r4, #4]
 8003768:	e7cc      	b.n	8003704 <_malloc_r+0x2c>
 800376a:	1cc4      	adds	r4, r0, #3
 800376c:	f024 0403 	bic.w	r4, r4, #3
 8003770:	42a0      	cmp	r0, r4
 8003772:	d0e3      	beq.n	800373c <_malloc_r+0x64>
 8003774:	1a21      	subs	r1, r4, r0
 8003776:	4630      	mov	r0, r6
 8003778:	f000 f82e 	bl	80037d8 <_sbrk_r>
 800377c:	3001      	adds	r0, #1
 800377e:	d1dd      	bne.n	800373c <_malloc_r+0x64>
 8003780:	e7cf      	b.n	8003722 <_malloc_r+0x4a>
 8003782:	bf00      	nop
 8003784:	2000019c 	.word	0x2000019c
 8003788:	200001a0 	.word	0x200001a0

0800378c <_realloc_r>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	4607      	mov	r7, r0
 8003790:	4614      	mov	r4, r2
 8003792:	460e      	mov	r6, r1
 8003794:	b921      	cbnz	r1, 80037a0 <_realloc_r+0x14>
 8003796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800379a:	4611      	mov	r1, r2
 800379c:	f7ff bf9c 	b.w	80036d8 <_malloc_r>
 80037a0:	b922      	cbnz	r2, 80037ac <_realloc_r+0x20>
 80037a2:	f7ff ff49 	bl	8003638 <_free_r>
 80037a6:	4625      	mov	r5, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	f000 f830 	bl	8003810 <_malloc_usable_size_r>
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d20f      	bcs.n	80037d4 <_realloc_r+0x48>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7ff ff8e 	bl	80036d8 <_malloc_r>
 80037bc:	4605      	mov	r5, r0
 80037be:	2800      	cmp	r0, #0
 80037c0:	d0f2      	beq.n	80037a8 <_realloc_r+0x1c>
 80037c2:	4631      	mov	r1, r6
 80037c4:	4622      	mov	r2, r4
 80037c6:	f7ff ff0f 	bl	80035e8 <memcpy>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff ff33 	bl	8003638 <_free_r>
 80037d2:	e7e9      	b.n	80037a8 <_realloc_r+0x1c>
 80037d4:	4635      	mov	r5, r6
 80037d6:	e7e7      	b.n	80037a8 <_realloc_r+0x1c>

080037d8 <_sbrk_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d06      	ldr	r5, [pc, #24]	; (80037f4 <_sbrk_r+0x1c>)
 80037dc:	2300      	movs	r3, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fc fefa 	bl	80005dc <_sbrk>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_sbrk_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_sbrk_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000250 	.word	0x20000250

080037f8 <__malloc_lock>:
 80037f8:	4801      	ldr	r0, [pc, #4]	; (8003800 <__malloc_lock+0x8>)
 80037fa:	f000 b811 	b.w	8003820 <__retarget_lock_acquire_recursive>
 80037fe:	bf00      	nop
 8003800:	20000258 	.word	0x20000258

08003804 <__malloc_unlock>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__malloc_unlock+0x8>)
 8003806:	f000 b80c 	b.w	8003822 <__retarget_lock_release_recursive>
 800380a:	bf00      	nop
 800380c:	20000258 	.word	0x20000258

08003810 <_malloc_usable_size_r>:
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f18      	subs	r0, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfbc      	itt	lt
 800381a:	580b      	ldrlt	r3, [r1, r0]
 800381c:	18c0      	addlt	r0, r0, r3
 800381e:	4770      	bx	lr

08003820 <__retarget_lock_acquire_recursive>:
 8003820:	4770      	bx	lr

08003822 <__retarget_lock_release_recursive>:
 8003822:	4770      	bx	lr

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
