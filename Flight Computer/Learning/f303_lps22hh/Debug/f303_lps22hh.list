
f303_lps22hh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d58  08009d58  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009d58  08009d58  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d58  08009d58  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001694  200001e0  08009f40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  08009f40  00021874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a63  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038f3  00000000  00000000  00040c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00044568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  000457b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e71  00000000  00000000  00046880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001218b  00000000  00000000  0006a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8069  00000000  00000000  0007c87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001448e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  00144960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c5c 	.word	0x08009c5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009c5c 	.word	0x08009c5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <lps22hh_init>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/

stmdev_ctx_t lps22hh_init(void){
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <lps22hh_init+0x88>)
 800029a:	60fb      	str	r3, [r7, #12]
	dev_ctx.read_reg = platform_read;
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <lps22hh_init+0x8c>)
 800029e:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = &SENSOR_BUS;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <lps22hh_init+0x90>)
 80002a2:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 f8d5 	bl	8000454 <platform_delay>

	/* Check device ID */
	whoamI = 0;
 80002aa:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <lps22hh_init+0x94>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx, &whoamI);
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	491b      	ldr	r1, [pc, #108]	; (8000324 <lps22hh_init+0x94>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f9fa 	bl	80006b0 <lps22hh_device_id_get>

	if ( whoamI != LPS22HH_ID )
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <lps22hh_init+0x94>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2bb3      	cmp	r3, #179	; 0xb3
 80002c2:	d000      	beq.n	80002c6 <lps22hh_init+0x36>
	while (1); /*manage here device not found */
 80002c4:	e7fe      	b.n	80002c4 <lps22hh_init+0x34>

	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	2101      	movs	r1, #1
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa00 	bl	80006d2 <lps22hh_reset_set>

	do {
	lps22hh_reset_get(&dev_ctx, &rst);
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	4914      	ldr	r1, [pc, #80]	; (8000328 <lps22hh_init+0x98>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa20 	bl	800071e <lps22hh_reset_get>
	} while (rst);
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <lps22hh_init+0x98>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f5      	bne.n	80002d2 <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	2101      	movs	r1, #1
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f91f 	bl	8000530 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2112      	movs	r1, #18
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f93f 	bl	800057c <lps22hh_data_rate_set>

	return dev_ctx;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	461c      	mov	r4, r3
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800030a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	371c      	adds	r7, #28
 8000312:	46bd      	mov	sp, r7
 8000314:	bd90      	pop	{r4, r7, pc}
 8000316:	bf00      	nop
 8000318:	080003e1 	.word	0x080003e1
 800031c:	0800041b 	.word	0x0800041b
 8000320:	20000434 	.word	0x20000434
 8000324:	20000202 	.word	0x20000202
 8000328:	20000203 	.word	0x20000203

0800032c <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx, float *pressure){
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	1d3c      	adds	r4, r7, #4
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000338:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800033a:	f107 0214 	add.w	r2, r7, #20
 800033e:	1d38      	adds	r0, r7, #4
 8000340:	2301      	movs	r3, #1
 8000342:	2127      	movs	r1, #39	; 0x27
 8000344:	f000 f891 	bl	800046a <lps22hh_read_reg>

	if (reg.status.p_da) {
 8000348:	7d3b      	ldrb	r3, [r7, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d011      	beq.n	8000378 <get_pressure+0x4c>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <get_pressure+0x54>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
	  lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4908      	ldr	r1, [pc, #32]	; (8000380 <get_pressure+0x54>)
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f95a 	bl	8000618 <lps22hh_pressure_raw_get>
//	  pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
//	  sprintf((char *)tx_buffer, "pressure [hPa]:%hu\r\n", (uint16_t)pressure_hPa);
//	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <get_pressure+0x54>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8af 	bl	80004cc <lps22hh_from_lsb_to_hpa>
 800036e:	eef0 7a40 	vmov.f32	s15, s0
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8000378:	bf00      	nop
 800037a:	371c      	adds	r7, #28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	200001fc 	.word	0x200001fc

08000384 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx, float *temperature){
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	1d3c      	adds	r4, r7, #4
 800038c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000390:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8000392:	f107 0214 	add.w	r2, r7, #20
 8000396:	1d38      	adds	r0, r7, #4
 8000398:	2301      	movs	r3, #1
 800039a:	2127      	movs	r1, #39	; 0x27
 800039c:	f000 f865 	bl	800046a <lps22hh_read_reg>

	if (reg.status.t_da) {
 80003a0:	7d3b      	ldrb	r3, [r7, #20]
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d012      	beq.n	80003d2 <get_temperature+0x4e>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <get_temperature+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	801a      	strh	r2, [r3, #0]
	  lps22hh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4909      	ldr	r1, [pc, #36]	; (80003dc <get_temperature+0x58>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f957 	bl	800066a <lps22hh_temperature_raw_get>
//						   data_raw_temperature );
//	  sprintf((char *)tx_buffer, "temperature [degC]:%hu\r\n",
//			  (uint16_t)temperature_degC );
//	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <get_temperature+0x58>)
 80003be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f89a 	bl	80004fc <lps22hh_from_lsb_to_celsius>
 80003c8:	eef0 7a40 	vmov.f32	s15, s0
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000200 	.word	0x20000200

080003e0 <platform_write>:
 *
 */
static int32_t platform_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af04      	add	r7, sp, #16
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	461a      	mov	r2, r3
 80003ec:	460b      	mov	r3, r1
 80003ee:	72fb      	strb	r3, [r7, #11]
 80003f0:	4613      	mov	r3, r2
 80003f2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 80003f4:	7afb      	ldrb	r3, [r7, #11]
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	893b      	ldrh	r3, [r7, #8]
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2301      	movs	r3, #1
 8000408:	21bb      	movs	r1, #187	; 0xbb
 800040a:	68f8      	ldr	r0, [r7, #12]
 800040c:	f001 f86c 	bl	80014e8 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b088      	sub	sp, #32
 800041e:	af04      	add	r7, sp, #16
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	460b      	mov	r3, r1
 8000428:	72fb      	strb	r3, [r7, #11]
 800042a:	4613      	mov	r3, r2
 800042c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	b29a      	uxth	r2, r3
 8000432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	893b      	ldrh	r3, [r7, #8]
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2301      	movs	r3, #1
 8000442:	21bb      	movs	r1, #187	; 0xbb
 8000444:	68f8      	ldr	r0, [r7, #12]
 8000446:	f001 f963 	bl	8001710 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 fcdd 	bl	8000e1c <HAL_Delay>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b087      	sub	sp, #28
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	461a      	mov	r2, r3
 8000476:	460b      	mov	r3, r1
 8000478:	72fb      	strb	r3, [r7, #11]
 800047a:	4613      	mov	r3, r2
 800047c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	685c      	ldr	r4, [r3, #4]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6898      	ldr	r0, [r3, #8]
 8000486:	893b      	ldrh	r3, [r7, #8]
 8000488:	7af9      	ldrb	r1, [r7, #11]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	47a0      	blx	r4
 800048e:	6178      	str	r0, [r7, #20]
  return ret;
 8000490:	697b      	ldr	r3, [r7, #20]
}
 8000492:	4618      	mov	r0, r3
 8000494:	371c      	adds	r7, #28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd90      	pop	{r4, r7, pc}

0800049a <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800049a:	b590      	push	{r4, r7, lr}
 800049c:	b087      	sub	sp, #28
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	461a      	mov	r2, r3
 80004a6:	460b      	mov	r3, r1
 80004a8:	72fb      	strb	r3, [r7, #11]
 80004aa:	4613      	mov	r3, r2
 80004ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681c      	ldr	r4, [r3, #0]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6898      	ldr	r0, [r3, #8]
 80004b6:	893b      	ldrh	r3, [r7, #8]
 80004b8:	7af9      	ldrb	r1, [r7, #11]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	47a0      	blx	r4
 80004be:	6178      	str	r0, [r7, #20]
  return ret;
 80004c0:	697b      	ldr	r3, [r7, #20]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	371c      	adds	r7, #28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
	...

080004cc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	ee07 3a90 	vmov	s15, r3
 80004da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80004f8 <lps22hh_from_lsb_to_hpa+0x2c>
 80004e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80004e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80004ea:	eeb0 0a67 	vmov.f32	s0, s15
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	49800000 	.word	0x49800000

080004fc <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8000506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000512:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800052c <lps22hh_from_lsb_to_celsius+0x30>
 8000516:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800051a:	eef0 7a66 	vmov.f32	s15, s13
}
 800051e:	eeb0 0a67 	vmov.f32	s0, s15
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	42c80000 	.word	0x42c80000

08000530 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800053c:	f107 0208 	add.w	r2, r7, #8
 8000540:	2301      	movs	r3, #1
 8000542:	2110      	movs	r1, #16
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff90 	bl	800046a <lps22hh_read_reg>
 800054a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10f      	bne.n	8000572 <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	7a3b      	ldrb	r3, [r7, #8]
 800055c:	f362 0341 	bfi	r3, r2, #1, #1
 8000560:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000562:	f107 0208 	add.w	r2, r7, #8
 8000566:	2301      	movs	r3, #1
 8000568:	2110      	movs	r1, #16
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff ff95 	bl	800049a <lps22hh_write_reg>
 8000570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000588:	f107 0210 	add.w	r2, r7, #16
 800058c:	2301      	movs	r3, #1
 800058e:	2110      	movs	r1, #16
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff ff6a 	bl	800046a <lps22hh_read_reg>
 8000596:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d107      	bne.n	80005ae <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800059e:	f107 020c 	add.w	r2, r7, #12
 80005a2:	2301      	movs	r3, #1
 80005a4:	2111      	movs	r1, #17
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ff5f 	bl	800046a <lps22hh_read_reg>
 80005ac:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10f      	bne.n	80005d4 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	7c3b      	ldrb	r3, [r7, #16]
 80005be:	f362 1306 	bfi	r3, r2, #4, #3
 80005c2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80005c4:	f107 0210 	add.w	r2, r7, #16
 80005c8:	2301      	movs	r3, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff64 	bl	800049a <lps22hh_write_reg>
 80005d2:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d119      	bne.n	800060e <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	7b3b      	ldrb	r3, [r7, #12]
 80005e6:	f362 0341 	bfi	r3, r2, #1, #1
 80005ea:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	f362 0300 	bfi	r3, r2, #0, #1
 80005fc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80005fe:	f107 020c 	add.w	r2, r7, #12
 8000602:	2301      	movs	r3, #1
 8000604:	2111      	movs	r1, #17
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff47 	bl	800049a <lps22hh_write_reg>
 800060c:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 800060e:	697b      	ldr	r3, [r7, #20]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8000622:	f107 0208 	add.w	r2, r7, #8
 8000626:	2303      	movs	r3, #3
 8000628:	2128      	movs	r1, #40	; 0x28
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff1d 	bl	800046a <lps22hh_read_reg>
 8000630:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	7a7a      	ldrb	r2, [r7, #9]
 8000642:	441a      	add	r2, r3
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	7a3a      	ldrb	r2, [r7, #8]
 8000650:	441a      	add	r2, r3
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	021a      	lsls	r2, r3, #8
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	601a      	str	r2, [r3, #0]
  return ret;
 8000660:	68fb      	ldr	r3, [r7, #12]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	2302      	movs	r3, #2
 800067a:	212b      	movs	r1, #43	; 0x2b
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fef4 	bl	800046a <lps22hh_read_reg>
 8000682:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8000684:	7a7b      	ldrb	r3, [r7, #9]
 8000686:	b21a      	sxth	r2, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000692:	b29b      	uxth	r3, r3
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b29a      	uxth	r2, r3
 8000698:	7a3b      	ldrb	r3, [r7, #8]
 800069a:	b29b      	uxth	r3, r3
 800069c:	4413      	add	r3, r2
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	801a      	strh	r2, [r3, #0]
  return ret;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80006ba:	2301      	movs	r3, #1
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	210f      	movs	r1, #15
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fed2 	bl	800046a <lps22hh_read_reg>
 80006c6:	60f8      	str	r0, [r7, #12]
  return ret;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	2301      	movs	r3, #1
 80006e4:	2111      	movs	r1, #17
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff febf 	bl	800046a <lps22hh_read_reg>
 80006ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	7a3b      	ldrb	r3, [r7, #8]
 80006fe:	f362 0382 	bfi	r3, r2, #2, #1
 8000702:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000704:	f107 0208 	add.w	r2, r7, #8
 8000708:	2301      	movs	r3, #1
 800070a:	2111      	movs	r1, #17
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fec4 	bl	800049a <lps22hh_write_reg>
 8000712:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000728:	f107 0208 	add.w	r2, r7, #8
 800072c:	2301      	movs	r3, #1
 800072e:	2111      	movs	r1, #17
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff fe9a 	bl	800046a <lps22hh_read_reg>
 8000736:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8000738:	7a3b      	ldrb	r3, [r7, #8]
 800073a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	701a      	strb	r2, [r3, #0]
  return ret;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fafb 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f849 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f91f 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000762:	f000 f8ed 	bl	8000940 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000766:	f000 f8ab 	bl	80008c0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800076a:	f008 f9c1 	bl	8008af0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  stmdev_ctx_t dev_ctx_lps = lps22hh_init();
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd8c 	bl	8000290 <lps22hh_init>
  float pressure = 0;
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  float temperature = 0;
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	get_pressure(dev_ctx_lps, &pressure);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	f107 020c 	add.w	r2, r7, #12
 800078c:	ca07      	ldmia	r2, {r0, r1, r2}
 800078e:	f7ff fdcd 	bl	800032c <get_pressure>
	get_temperature(dev_ctx_lps,  &temperature);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	f107 020c 	add.w	r2, r7, #12
 8000798:	ca07      	ldmia	r2, {r0, r1, r2}
 800079a:	f7ff fdf3 	bl	8000384 <get_temperature>

	sprintf((char *)tx_buffer, "Pressure [hPa]:%hu\t Temperature [degC]:%hu\r\n", (uint16_t)pressure, (uint16_t)temperature);
 800079e:	edd7 7a02 	vldr	s15, [r7, #8]
 80007a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a6:	ee17 3a90 	vmov	r3, s15
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b6:	ee17 3a90 	vmov	r3, s15
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4909      	ldr	r1, [pc, #36]	; (80007e4 <main+0x94>)
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <main+0x98>)
 80007c0:	f008 fe46 	bl	8009450 <siprintf>
	HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 1000);
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <main+0x98>)
 80007c6:	f7ff fd0b 	bl	80001e0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	4905      	ldr	r1, [pc, #20]	; (80007e8 <main+0x98>)
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <main+0x9c>)
 80007d6:	f004 f9f9 	bl	8004bcc <HAL_UART_Transmit>

	HAL_Delay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007de:	f000 fb1d 	bl	8000e1c <HAL_Delay>
	get_pressure(dev_ctx_lps, &pressure);
 80007e2:	e7cf      	b.n	8000784 <main+0x34>
 80007e4:	08009c74 	.word	0x08009c74
 80007e8:	20000480 	.word	0x20000480
 80007ec:	20000868 	.word	0x20000868

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0a6      	sub	sp, #152	; 0x98
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fe1e 	bl	8009440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2258      	movs	r2, #88	; 0x58
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fe10 	bl	8009440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000820:	2303      	movs	r3, #3
 8000822:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000842:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fdff 	bl	8003458 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000860:	f000 f91a 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f003 fcff 	bl	8004284 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800088c:	f000 f904 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <SystemClock_Config+0xcc>)
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800089c:	2300      	movs	r3, #0
 800089e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 ff26 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ae:	f000 f8f3 	bl	8000a98 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3798      	adds	r7, #152	; 0x98
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	00020022 	.word	0x00020022

080008c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_I2C1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_I2C1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_I2C1_Init+0x74>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <MX_I2C1_Init+0x7c>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_I2C1_Init+0x74>)
 80008fc:	f000 fd64 	bl	80013c8 <HAL_I2C_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 f8c7 	bl	8000a98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_I2C1_Init+0x74>)
 800090e:	f001 fa35 	bl	8001d7c <HAL_I2CEx_ConfigAnalogFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 f8be 	bl	8000a98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_I2C1_Init+0x74>)
 8000920:	f001 fa77 	bl	8001e12 <HAL_I2CEx_ConfigDigitalFilter>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 f8b5 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000434 	.word	0x20000434
 8000938:	40005400 	.word	0x40005400
 800093c:	2000090e 	.word	0x2000090e

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f004 f8d4 	bl	8004b30 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f883 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000868 	.word	0x20000868
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a34      	ldr	r2, [pc, #208]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a2e      	ldr	r2, [pc, #184]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_GPIO_Init+0xec>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_GPIO_Init+0xec>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1c:	481c      	ldr	r0, [pc, #112]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a1e:	f000 fcbb 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f000 fcb5 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a44:	f000 fb1e 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0xf0>)
 8000a62:	f000 fb0f 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a66:	2320      	movs	r3, #32
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fb00 	bl	8001084 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	10210000 	.word	0x10210000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x44>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x44>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x44>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x44>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f000 fa8e 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_I2C_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d128      	bne.n	8000b64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480b      	ldr	r0, [pc, #44]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b48:	f000 fa9c 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	61d3      	str	r3, [r2, #28]
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fa4c 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8c4 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000c5e:	f001 fa28 	bl	80020b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20001584 	.word	0x20001584

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f008 fba6 	bl	80093ec <__errno>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20010000 	.word	0x20010000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000204 	.word	0x20000204
 8000cd4:	20001878 	.word	0x20001878

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f008 fb65 	bl	80093f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fd0f 	bl	8000750 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000d40:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 8000d44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000d48:	20001874 	.word	0x20001874

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f94d 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe9c 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f965 	bl	800106a <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f92d 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200008ec 	.word	0x200008ec

08000e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200008ec 	.word	0x200008ec

08000e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_Delay+0x40>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff3e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff31 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e160      	b.n	8001356 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8152 	beq.w	8001350 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d00b      	beq.n	80010cc <HAL_GPIO_Init+0x48>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0xea>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b12      	cmp	r3, #18
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80ac 	beq.w	8001350 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a5d      	ldr	r2, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	4a59      	ldr	r2, [pc, #356]	; (8001378 <HAL_GPIO_Init+0x2f4>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123a:	d025      	beq.n	8001288 <HAL_GPIO_Init+0x204>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x2f8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x200>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x1fc>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x1f8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1f4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x308>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1f0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1ec>
 800126c:	2306      	movs	r3, #6
 800126e:	e00c      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001270:	2307      	movs	r3, #7
 8001272:	e00a      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001274:	2305      	movs	r3, #5
 8001276:	e008      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001278:	2304      	movs	r3, #4
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x206>
 800127c:	2303      	movs	r3, #3
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x206>
 8001288:	2300      	movs	r3, #0
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129a:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_GPIO_Init+0x2f4>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001320:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x310>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	f47f ae97 	bne.w	8001094 <HAL_GPIO_Init+0x10>
  }
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	48001800 	.word	0x48001800
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e081      	b.n	80014de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb7e 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e006      	b.n	8001450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800144e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d104      	bne.n	8001462 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	ea42 0103 	orr.w	r1, r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	021a      	lsls	r2, r3, #8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69d9      	ldr	r1, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	817b      	strh	r3, [r7, #10]
 80014fa:	460b      	mov	r3, r1
 80014fc:	813b      	strh	r3, [r7, #8]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b20      	cmp	r3, #32
 800150c:	f040 80f9 	bne.w	8001702 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_I2C_Mem_Write+0x34>
 8001516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0ed      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Mem_Write+0x4e>
 8001532:	2302      	movs	r3, #2
 8001534:	e0e6      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800153e:	f7ff fc61 	bl	8000e04 <HAL_GetTick>
 8001542:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2319      	movs	r3, #25
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fac3 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d1      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2221      	movs	r2, #33	; 0x21
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a3a      	ldr	r2, [r7, #32]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001588:	88f8      	ldrh	r0, [r7, #6]
 800158a:	893a      	ldrh	r2, [r7, #8]
 800158c:	8979      	ldrh	r1, [r7, #10]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4603      	mov	r3, r0
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f9d3 	bl	8001944 <I2C_RequestMemoryWrite>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0a9      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d90e      	bls.n	80015d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	8979      	ldrh	r1, [r7, #10]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 fba5 	bl	8001d20 <I2C_TransferConfig>
 80015d6:	e00f      	b.n	80015f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	8979      	ldrh	r1, [r7, #10]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fb94 	bl	8001d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 faad 	bl	8001b5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e07b      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d034      	beq.n	80016b0 <HAL_I2C_Mem_Write+0x1c8>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d130      	bne.n	80016b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	2200      	movs	r2, #0
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 fa3f 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e04d      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2bff      	cmp	r3, #255	; 0xff
 8001670:	d90e      	bls.n	8001690 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	b2da      	uxtb	r2, r3
 800167e:	8979      	ldrh	r1, [r7, #10]
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 fb49 	bl	8001d20 <I2C_TransferConfig>
 800168e:	e00f      	b.n	80016b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fb38 	bl	8001d20 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d19e      	bne.n	80015f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fa8c 	bl	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e01a      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2220      	movs	r2, #32
 80016d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_I2C_Mem_Write+0x224>)
 80016e2:	400b      	ands	r3, r1
 80016e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001702:	2302      	movs	r3, #2
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	fe00e800 	.word	0xfe00e800

08001710 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	817b      	strh	r3, [r7, #10]
 8001722:	460b      	mov	r3, r1
 8001724:	813b      	strh	r3, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 80fd 	bne.w	8001932 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_I2C_Mem_Read+0x34>
 800173e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0f1      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_I2C_Mem_Read+0x4e>
 800175a:	2302      	movs	r3, #2
 800175c:	e0ea      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001766:	f7ff fb4d 	bl	8000e04 <HAL_GetTick>
 800176a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2319      	movs	r3, #25
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 f9af 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0d5      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2222      	movs	r2, #34	; 0x22
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017b0:	88f8      	ldrh	r0, [r7, #6]
 80017b2:	893a      	ldrh	r2, [r7, #8]
 80017b4:	8979      	ldrh	r1, [r7, #10]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4603      	mov	r3, r0
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f913 	bl	80019ec <I2C_RequestMemoryRead>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0ad      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d90e      	bls.n	8001800 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	22ff      	movs	r2, #255	; 0xff
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	8979      	ldrh	r1, [r7, #10]
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_I2C_Mem_Read+0x22c>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fa91 	bl	8001d20 <I2C_TransferConfig>
 80017fe:	e00f      	b.n	8001820 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	b2da      	uxtb	r2, r3
 8001810:	8979      	ldrh	r1, [r7, #10]
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_I2C_Mem_Read+0x22c>)
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa80 	bl	8001d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	2200      	movs	r2, #0
 8001828:	2104      	movs	r1, #4
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f956 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07c      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d034      	beq.n	80018e0 <HAL_I2C_Mem_Read+0x1d0>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d130      	bne.n	80018e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	2200      	movs	r2, #0
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f927 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e04d      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d90e      	bls.n	80018c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	22ff      	movs	r2, #255	; 0xff
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	8979      	ldrh	r1, [r7, #10]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fa31 	bl	8001d20 <I2C_TransferConfig>
 80018be:	e00f      	b.n	80018e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	2300      	movs	r3, #0
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa20 	bl	8001d20 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d19a      	bne.n	8001820 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f974 	bl	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01a      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2220      	movs	r2, #32
 8001904:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_I2C_Mem_Read+0x230>)
 8001912:	400b      	ands	r3, r1
 8001914:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001932:	2302      	movs	r3, #2
  }
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	80002400 	.word	0x80002400
 8001940:	fe00e800 	.word	0xfe00e800

08001944 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	817b      	strh	r3, [r7, #10]
 8001956:	460b      	mov	r3, r1
 8001958:	813b      	strh	r3, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <I2C_RequestMemoryWrite+0xa4>)
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f9d7 	bl	8001d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	69b9      	ldr	r1, [r7, #24]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f8f0 	bl	8001b5c <I2C_WaitOnTXISFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e02c      	b.n	80019e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800198c:	893b      	ldrh	r3, [r7, #8]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
 8001996:	e015      	b.n	80019c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001998:	893b      	ldrh	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29b      	uxth	r3, r3
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	69b9      	ldr	r1, [r7, #24]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f8d6 	bl	8001b5c <I2C_WaitOnTXISFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e012      	b.n	80019e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019ba:	893b      	ldrh	r3, [r7, #8]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f884 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	80002000 	.word	0x80002000

080019ec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	817b      	strh	r3, [r7, #10]
 80019fe:	460b      	mov	r3, r1
 8001a00:	813b      	strh	r3, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	8979      	ldrh	r1, [r7, #10]
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <I2C_RequestMemoryRead+0xa4>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f984 	bl	8001d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f89d 	bl	8001b5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e02c      	b.n	8001a86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a32:	893b      	ldrh	r3, [r7, #8]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a3c:	e015      	b.n	8001a6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a3e:	893b      	ldrh	r3, [r7, #8]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f883 	bl	8001b5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e012      	b.n	8001a86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a60:	893b      	ldrh	r3, [r7, #8]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f831 	bl	8001adc <I2C_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	80002000 	.word	0x80002000

08001a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d007      	beq.n	8001ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	619a      	str	r2, [r3, #24]
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aec:	e022      	b.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d01e      	beq.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7ff f985 	bl	8000e04 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d113      	bne.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e00f      	b.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d0cd      	beq.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b68:	e02c      	b.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f870 	bl	8001c54 <I2C_IsAcknowledgeFailed>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e02a      	b.n	8001bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d01e      	beq.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff f93d 	bl	8000e04 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d113      	bne.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e007      	b.n	8001bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d1cb      	bne.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be8:	e028      	b.n	8001c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f830 	bl	8001c54 <I2C_IsAcknowledgeFailed>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e026      	b.n	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfe:	f7ff f901 	bl	8000e04 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d113      	bne.n	8001c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e007      	b.n	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d1cf      	bne.n	8001bea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d151      	bne.n	8001d12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6e:	e022      	b.n	8001cb6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c76:	d01e      	beq.n	8001cb6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c78:	f7ff f8c4 	bl	8000e04 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d302      	bcc.n	8001c8e <I2C_IsAcknowledgeFailed+0x3a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d113      	bne.n	8001cb6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0220 	orr.w	r2, r3, #32
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e02e      	b.n	8001d14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d1d5      	bne.n	8001c70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff fedd 	bl	8001a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <I2C_IsAcknowledgeFailed+0xc8>)
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f043 0204 	orr.w	r2, r3, #4
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	fe00e800 	.word	0xfe00e800

08001d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	817b      	strh	r3, [r7, #10]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	0d5b      	lsrs	r3, r3, #21
 8001d3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <I2C_TransferConfig+0x58>)
 8001d42:	430b      	orrs	r3, r1
 8001d44:	43db      	mvns	r3, r3
 8001d46:	ea02 0103 	and.w	r1, r2, r3
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	03ff63ff 	.word	0x03ff63ff

08001d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d138      	bne.n	8001e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e032      	b.n	8001e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e000      	b.n	8001e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d139      	bne.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e033      	b.n	8001e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2224      	movs	r2, #36	; 0x24
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eac:	b08b      	sub	sp, #44	; 0x2c
 8001eae:	af06      	add	r7, sp, #24
 8001eb0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0d0      	b.n	800205e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f006 ffd9 	bl	8008e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fa58 	bl	8005398 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e04c      	b.n	8001f88 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	3301      	adds	r3, #1
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	b298      	uxth	r0, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3336      	adds	r3, #54	; 0x36
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	3303      	adds	r3, #3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	333c      	adds	r3, #60	; 0x3c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3340      	adds	r3, #64	; 0x40
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3ad      	bcc.n	8001eee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e044      	b.n	8002022 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	3301      	adds	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3b5      	bcc.n	8001f98 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	687e      	ldr	r6, [r7, #4]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	1d33      	adds	r3, r6, #4
 8002044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f003 f9c1 	bl	80053ce <USB_DevInit>

  hpcd->USB_Address = 0U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002066 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_Start+0x16>
 8002078:	2302      	movs	r3, #2
 800207a:	e016      	b.n	80020aa <HAL_PCD_Start+0x44>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f003 f96e 	bl	800536a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800208e:	2101      	movs	r1, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f007 f973 	bl	800937c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f005 f946 	bl	800732c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 f93f 	bl	8007342 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ce:	d102      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 faf6 	bl	80026c2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f005 f931 	bl	8007342 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d112      	bne.n	8002112 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	b292      	uxth	r2, r2
 8002100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f006 ff3a 	bl	8008f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800210a:	2100      	movs	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8c7 	bl	80022a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f005 f913 	bl	8007342 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002126:	d10b      	bne.n	8002140 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800213a:	b292      	uxth	r2, r2
 800213c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f005 f8fc 	bl	8007342 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002154:	d10b      	bne.n	800216e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002168:	b292      	uxth	r2, r2
 800216a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f005 f8e5 	bl	8007342 <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	d126      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0208 	bic.w	r2, r2, #8
 80021ae:	b292      	uxth	r2, r2
 80021b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 ff1b 	bl	8008ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021cc:	b292      	uxth	r2, r2
 80021ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 f8b3 	bl	8007342 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e6:	d126      	bne.n	8002236 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0208 	orr.w	r2, r2, #8
 80021fa:	b292      	uxth	r2, r2
 80021fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002212:	b292      	uxth	r2, r2
 8002214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0204 	orr.w	r2, r2, #4
 800222a:	b292      	uxth	r2, r2
 800222c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f006 fec3 	bl	8008fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f005 f881 	bl	8007342 <USB_ReadInterrupts>
 8002240:	4603      	mov	r3, r0
 8002242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224a:	d10e      	bne.n	800226a <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800225e:	b292      	uxth	r2, r2
 8002260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f006 fe7c 	bl	8008f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f005 f867 	bl	8007342 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227e:	d10b      	bne.n	8002298 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002292:	b292      	uxth	r2, r2
 8002294:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_PCD_SetAddress+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e013      	b.n	80022e2 <HAL_PCD_SetAddress+0x42>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 f816 	bl	8007304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	4608      	mov	r0, r1
 80022f4:	4611      	mov	r1, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	4603      	mov	r3, r0
 80022fa:	70fb      	strb	r3, [r7, #3]
 80022fc:	460b      	mov	r3, r1
 80022fe:	803b      	strh	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da0e      	bge.n	800232e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
 800232c:	e00e      	b.n	800234c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0207 	and.w	r2, r3, #7
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002358:	883a      	ldrh	r2, [r7, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	78ba      	ldrb	r2, [r7, #2]
 8002362:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002376:	78bb      	ldrb	r3, [r7, #2]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d102      	bne.n	8002382 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_EP_Open+0xa6>
 800238c:	2302      	movs	r3, #2
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_Open+0xc4>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 f836 	bl	8005410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80023ac:	7afb      	ldrb	r3, [r7, #11]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da0e      	bge.n	80023e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	705a      	strb	r2, [r3, #1]
 80023e6:	e00e      	b.n	8002406 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0207 	and.w	r2, r3, #7
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_PCD_EP_Close+0x6a>
 800241c:	2302      	movs	r3, #2
 800241e:	e00e      	b.n	800243e <HAL_PCD_EP_Close+0x88>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fb5c 	bl	8005aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f003 0207 	and.w	r2, r3, #7
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2200      	movs	r2, #0
 8002484:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	b2da      	uxtb	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fd0f 	bl	8005ec6 <USB_EPStartXfer>
 80024a8:	e005      	b.n	80024b6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6979      	ldr	r1, [r7, #20]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fd08 	bl	8005ec6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 0207 	and.w	r2, r3, #7
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	460b      	mov	r3, r1
 80024fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2201      	movs	r2, #1
 800253a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	b2da      	uxtb	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fcb4 	bl	8005ec6 <USB_EPStartXfer>
 800255e:	e005      	b.n	800256c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6979      	ldr	r1, [r7, #20]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fcad 	bl	8005ec6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 0207 	and.w	r2, r3, #7
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d901      	bls.n	8002594 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e03e      	b.n	8002612 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	da0e      	bge.n	80025ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	705a      	strb	r2, [r3, #1]
 80025b8:	e00c      	b.n	80025d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_EP_SetStall+0x7e>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e00e      	b.n	8002612 <HAL_PCD_EP_SetStall+0x9c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fd7f 	bl	8007106 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d901      	bls.n	8002638 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e040      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da0e      	bge.n	800265e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	705a      	strb	r2, [r3, #1]
 800265c:	e00e      	b.n	800267c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0207 	and.w	r2, r3, #7
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_PCD_EP_ClrStall+0x82>
 8002698:	2302      	movs	r3, #2
 800269a:	e00e      	b.n	80026ba <HAL_PCD_EP_ClrStall+0xa0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fd7c 	bl	80071a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b08e      	sub	sp, #56	; 0x38
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026ca:	e2d1      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80026e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8152 	bne.w	8002990 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d150      	bne.n	8002798 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	81fb      	strh	r3, [r7, #14]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002716:	b29b      	uxth	r3, r3
 8002718:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3328      	adds	r3, #40	; 0x28
 800271e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	4413      	add	r3, r2
 800273a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	441a      	add	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002756:	2100      	movs	r1, #0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f006 fbe8 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8282 	beq.w	8002c70 <PCD_EP_ISR_Handler+0x5ae>
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 827d 	bne.w	8002c70 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b292      	uxth	r2, r2
 800278a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002796:	e26b      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d032      	beq.n	8002818 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f004 fdf9 	bl	80073e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027fe:	4013      	ands	r3, r2
 8002800:	823b      	strh	r3, [r7, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	8a3a      	ldrh	r2, [r7, #16]
 8002808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800280c:	b292      	uxth	r2, r2
 800280e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f006 fb5f 	bl	8008ed4 <HAL_PCD_SetupStageCallback>
 8002816:	e22b      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002818:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800281c:	2b00      	cmp	r3, #0
 800281e:	f280 8227 	bge.w	8002c70 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29a      	uxth	r2, r3
 800282a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800282e:	4013      	ands	r3, r2
 8002830:	83bb      	strh	r3, [r7, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	8bba      	ldrh	r2, [r7, #28]
 8002838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283c:	b292      	uxth	r2, r2
 800283e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	4413      	add	r3, r2
 800285a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x1e2>
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002888:	b29b      	uxth	r3, r3
 800288a:	f004 fdab 	bl	80073e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	441a      	add	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800289c:	2100      	movs	r1, #0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f006 fb2a 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4413      	add	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d112      	bne.n	80028f2 <PCD_EP_ISR_Handler+0x230>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	e02f      	b.n	8002952 <PCD_EP_ISR_Handler+0x290>
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b3e      	cmp	r3, #62	; 0x3e
 80028f8:	d813      	bhi.n	8002922 <PCD_EP_ISR_Handler+0x260>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <PCD_EP_ISR_Handler+0x252>
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	3301      	adds	r3, #1
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	b29b      	uxth	r3, r3
 8002918:	029b      	lsls	r3, r3, #10
 800291a:	b29a      	uxth	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	e017      	b.n	8002952 <PCD_EP_ISR_Handler+0x290>
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <PCD_EP_ISR_Handler+0x27a>
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	3b01      	subs	r3, #1
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	b29b      	uxth	r3, r3
 8002940:	029b      	lsls	r3, r3, #10
 8002942:	b29b      	uxth	r3, r3
 8002944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294c:	b29a      	uxth	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	827b      	strh	r3, [r7, #18]
 8002964:	8a7b      	ldrh	r3, [r7, #18]
 8002966:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800296a:	827b      	strh	r3, [r7, #18]
 800296c:	8a7b      	ldrh	r3, [r7, #18]
 800296e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002972:	827b      	strh	r3, [r7, #18]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	8a7b      	ldrh	r3, [r7, #18]
 800297a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	b29b      	uxth	r3, r3
 800298c:	8013      	strh	r3, [r2, #0]
 800298e:	e16f      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f280 80e4 	bge.w	8002b74 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029c2:	4013      	ands	r3, r2
 80029c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029da:	b292      	uxth	r2, r2
 80029dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	7b1b      	ldrb	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d120      	bne.n	8002a3e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8083 	beq.w	8002b30 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	6959      	ldr	r1, [r3, #20]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	88da      	ldrh	r2, [r3, #6]
 8002a36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a38:	f004 fcd4 	bl	80073e4 <USB_ReadPMA>
 8002a3c:	e078      	b.n	8002b30 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	78db      	ldrb	r3, [r3, #3]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d108      	bne.n	8002a58 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f91d 	bl	8002c8c <HAL_PCD_EP_DB_Receive>
 8002a52:	4603      	mov	r3, r0
 8002a54:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002a56:	e06b      	b.n	8002b30 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01f      	beq.n	8002af2 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d028      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	6959      	ldr	r1, [r3, #20]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	891a      	ldrh	r2, [r3, #8]
 8002aea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002aec:	f004 fc7a 	bl	80073e4 <USB_ReadPMA>
 8002af0:	e01e      	b.n	8002b30 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	6959      	ldr	r1, [r3, #20]
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	895a      	ldrh	r2, [r3, #10]
 8002b2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b2c:	f004 fc5a 	bl	80073e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b36:	441a      	add	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b42:	441a      	add	r2, r3
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x498>
 8002b50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d206      	bcs.n	8002b68 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f006 f9c9 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
 8002b66:	e005      	b.n	8002b74 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f9a9 	bl	8005ec6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d078      	beq.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	843b      	strh	r3, [r7, #32]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	8c3b      	ldrh	r3, [r7, #32]
 8002bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	78db      	ldrb	r3, [r3, #3]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d108      	bne.n	8002be4 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d144      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002bda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13f      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c08:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	8bfb      	ldrh	r3, [r7, #30]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d906      	bls.n	8002c22 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	8bfb      	ldrh	r3, [r7, #30]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e002      	b.n	8002c28 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 f979 	bl	8008f2e <HAL_PCD_DataInStageCallback>
 8002c3c:	e018      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	8bfb      	ldrh	r3, [r7, #30]
 8002c44:	441a      	add	r2, r3
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	8bfb      	ldrh	r3, [r7, #30]
 8002c50:	441a      	add	r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 f932 	bl	8005ec6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002c62:	e005      	b.n	8002c70 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c66:	461a      	mov	r2, r3
 8002c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f917 	bl	8002e9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f6ff ad25 	blt.w	80026cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d07c      	beq.n	8002d9e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d306      	bcc.n	8002ce2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	8b7b      	ldrh	r3, [r7, #26]
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	e002      	b.n	8002ce8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d123      	bne.n	8002d38 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	833b      	strh	r3, [r7, #24]
 8002d0c:	8b3b      	ldrh	r3, [r7, #24]
 8002d0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d12:	833b      	strh	r3, [r7, #24]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	8b3b      	ldrh	r3, [r7, #24]
 8002d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01f      	beq.n	8002d82 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	82fb      	strh	r3, [r7, #22]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	441a      	add	r2, r3
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8085 	beq.w	8002e94 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6959      	ldr	r1, [r3, #20]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	891a      	ldrh	r2, [r3, #8]
 8002d96:	8b7b      	ldrh	r3, [r7, #26]
 8002d98:	f004 fb24 	bl	80073e4 <USB_ReadPMA>
 8002d9c:	e07a      	b.n	8002e94 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	8b7b      	ldrh	r3, [r7, #26]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d306      	bcc.n	8002ddc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	8b7b      	ldrh	r3, [r7, #26]
 8002dd4:	1ad2      	subs	r2, r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	619a      	str	r2, [r3, #24]
 8002dda:	e002      	b.n	8002de2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d123      	bne.n	8002e32 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	83fb      	strh	r3, [r7, #30]
 8002e06:	8bfb      	ldrh	r3, [r7, #30]
 8002e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e0c:	83fb      	strh	r3, [r7, #30]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	8bfb      	ldrh	r3, [r7, #30]
 8002e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11f      	bne.n	8002e7c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	83bb      	strh	r3, [r7, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	8bbb      	ldrh	r3, [r7, #28]
 8002e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e7c:	8b7b      	ldrh	r3, [r7, #26]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6959      	ldr	r1, [r3, #20]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	895a      	ldrh	r2, [r3, #10]
 8002e8e:	8b7b      	ldrh	r3, [r7, #26]
 8002e90:	f004 faa8 	bl	80073e4 <USB_ReadPMA>
    }
  }

  return count;
 8002e94:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b092      	sub	sp, #72	; 0x48
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8130 	beq.w	8003118 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002edc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d906      	bls.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	e002      	b.n	8002efc <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d12c      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f006 f80f 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 822d 	beq.w	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	827b      	strh	r3, [r7, #18]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	8a7b      	ldrh	r3, [r7, #18]
 8002f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	8013      	strh	r3, [r2, #0]
 8002f5c:	e20b      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01f      	beq.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 81e1 	bne.w	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fba:	441a      	add	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d309      	bcc.n	8002fec <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	621a      	str	r2, [r3, #32]
 8002fea:	e014      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002ff4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003000:	e009      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d155      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x22c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	4413      	add	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d112      	bne.n	8003072 <HAL_PCD_EP_DB_Transmit+0x1d4>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003056:	b29a      	uxth	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306a:	b29a      	uxth	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e047      	b.n	8003102 <HAL_PCD_EP_DB_Transmit+0x264>
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	2b3e      	cmp	r3, #62	; 0x3e
 8003076:	d811      	bhi.n	800309c <HAL_PCD_EP_DB_Transmit+0x1fe>
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	3301      	adds	r3, #1
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	b29b      	uxth	r3, r3
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	b29a      	uxth	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	e032      	b.n	8003102 <HAL_PCD_EP_DB_Transmit+0x264>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x214>
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e01b      	b.n	8003102 <HAL_PCD_EP_DB_Transmit+0x264>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d117      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0x264>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	4413      	add	r3, r2
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	00da      	lsls	r2, r3, #3
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6959      	ldr	r1, [r3, #20]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	891a      	ldrh	r2, [r3, #8]
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	b29b      	uxth	r3, r3
 8003112:	f004 f926 	bl	8007362 <USB_WritePMA>
 8003116:	e12e      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4413      	add	r3, r2
 8003132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003144:	429a      	cmp	r2, r3
 8003146:	d306      	bcc.n	8003156 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	619a      	str	r2, [r3, #24]
 8003154:	e002      	b.n	800315c <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12c      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f005 fedf 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80fd 	bne.w	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]
 80031bc:	e0db      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11f      	bne.n	8003208 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003204:	b29b      	uxth	r3, r3
 8003206:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800320e:	2b01      	cmp	r3, #1
 8003210:	f040 80b1 	bne.w	8003376 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800321a:	441a      	add	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003226:	441a      	add	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d309      	bcc.n	800324c <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	621a      	str	r2, [r3, #32]
 800324a:	e014      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003260:	e009      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d155      	bne.n	8003330 <HAL_PCD_EP_DB_Transmit+0x492>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003298:	4413      	add	r3, r2
 800329a:	647b      	str	r3, [r7, #68]	; 0x44
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	00da      	lsls	r2, r3, #3
 80032a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a4:	4413      	add	r3, r2
 80032a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d112      	bne.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x43a>
 80032b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	801a      	strh	r2, [r3, #0]
 80032d6:	e044      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	2b3e      	cmp	r3, #62	; 0x3e
 80032dc:	d811      	bhi.n	8003302 <HAL_PCD_EP_DB_Transmit+0x464>
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x456>
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	3301      	adds	r3, #1
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	029b      	lsls	r3, r3, #10
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	e02f      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003314:	3b01      	subs	r3, #1
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	b29b      	uxth	r3, r3
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	b29b      	uxth	r3, r3
 8003320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003328:	b29a      	uxth	r2, r3
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	e018      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d114      	bne.n	8003362 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003340:	b29b      	uxth	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	4413      	add	r3, r2
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	00da      	lsls	r2, r3, #3
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003352:	4413      	add	r3, r2
 8003354:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	b29a      	uxth	r2, r3
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	895a      	ldrh	r2, [r3, #10]
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	b29b      	uxth	r3, r3
 8003372:	f003 fff6 	bl	8007362 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	823b      	strh	r3, [r7, #16]
 8003392:	8a3b      	ldrh	r3, [r7, #16]
 8003394:	f083 0310 	eor.w	r3, r3, #16
 8003398:	823b      	strh	r3, [r7, #16]
 800339a:	8a3b      	ldrh	r3, [r7, #16]
 800339c:	f083 0320 	eor.w	r3, r3, #32
 80033a0:	823b      	strh	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	8a3b      	ldrh	r3, [r7, #16]
 80033b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3748      	adds	r7, #72	; 0x48
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	4613      	mov	r3, r2
 80033e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e009      	b.n	800341a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003406:	897a      	ldrh	r2, [r7, #10]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	b29a      	uxth	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	80da      	strh	r2, [r3, #6]
 800342e:	e00b      	b.n	8003448 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2201      	movs	r2, #1
 8003434:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	b29a      	uxth	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b29a      	uxth	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800345e:	af00      	add	r7, sp, #0
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f000 bf01 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8160 	beq.w	8003742 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003482:	4bae      	ldr	r3, [pc, #696]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b04      	cmp	r3, #4
 800348c:	d00c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800348e:	4bab      	ldr	r3, [pc, #684]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d159      	bne.n	800354e <HAL_RCC_OscConfig+0xf6>
 800349a:	4ba8      	ldr	r3, [pc, #672]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a6:	d152      	bne.n	800354e <HAL_RCC_OscConfig+0xf6>
 80034a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HAL_RCC_OscConfig+0x82>
 80034d4:	4b99      	ldr	r3, [pc, #612]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0xae>
 80034da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80034ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003502:	4b8e      	ldr	r3, [pc, #568]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800350a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800350e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800351a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800351e:	fab2 f282 	clz	r2, r2
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f002 021f 	and.w	r2, r2, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f202 	lsl.w	r2, r1, r2
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8102 	beq.w	8003740 <HAL_RCC_OscConfig+0x2e8>
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f040 80fc 	bne.w	8003740 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f000 be93 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x110>
 800355a:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a77      	ldr	r2, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e030      	b.n	80035ca <HAL_RCC_OscConfig+0x172>
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x134>
 8003572:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a71      	ldr	r2, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01e      	b.n	80035ca <HAL_RCC_OscConfig+0x172>
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x15a>
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 800359e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a64      	ldr	r2, [pc, #400]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x172>
 80035b2:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b5f      	ldr	r3, [pc, #380]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5e      	ldr	r2, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80035c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d059      	beq.n	8003688 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd fc16 	bl	8000e04 <HAL_GetTick>
 80035d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035de:	f7fd fc11 	bl	8000e04 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d902      	bls.n	80035f4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	f000 be40 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
 80035f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003608:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x1ce>
 8003620:	4b46      	ldr	r3, [pc, #280]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x1fa>
 8003626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800363a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800363e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003642:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003656:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800365a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800365e:	fa92 f2a2 	rbit	r2, r2
 8003662:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003666:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800366a:	fab2 f282 	clz	r2, r2
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f042 0220 	orr.w	r2, r2, #32
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	f002 021f 	and.w	r2, r2, #31
 800367a:	2101      	movs	r1, #1
 800367c:	fa01 f202 	lsl.w	r2, r1, r2
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ab      	beq.n	80035de <HAL_RCC_OscConfig+0x186>
 8003686:	e05c      	b.n	8003742 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fbbc 	bl	8000e04 <HAL_GetTick>
 800368c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003692:	f7fd fbb7 	bl	8000e04 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d902      	bls.n	80036a8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f000 bde6 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
 80036a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80036bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_RCC_OscConfig+0x282>
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x2ae>
 80036da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80036ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_RCC_OscConfig+0x2e4>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800370e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800371a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ab      	bne.n	8003692 <HAL_RCC_OscConfig+0x23a>
 800373a:	e002      	b.n	8003742 <HAL_RCC_OscConfig+0x2ea>
 800373c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8170 	beq.w	8003a32 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003752:	4bd0      	ldr	r3, [pc, #832]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800375e:	4bcd      	ldr	r3, [pc, #820]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b08      	cmp	r3, #8
 8003768:	d16d      	bne.n	8003846 <HAL_RCC_OscConfig+0x3ee>
 800376a:	4bca      	ldr	r3, [pc, #808]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003776:	d166      	bne.n	8003846 <HAL_RCC_OscConfig+0x3ee>
 8003778:	2302      	movs	r3, #2
 800377a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800378a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_RCC_OscConfig+0x350>
 80037a2:	4bbc      	ldr	r3, [pc, #752]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e013      	b.n	80037d0 <HAL_RCC_OscConfig+0x378>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80037ba:	2302      	movs	r3, #2
 80037bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037cc:	4bb1      	ldr	r3, [pc, #708]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2202      	movs	r2, #2
 80037d2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80037d6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80037da:	fa92 f2a2 	rbit	r2, r2
 80037de:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80037e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037e6:	fab2 f282 	clz	r2, r2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f042 0220 	orr.w	r2, r2, #32
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f002 021f 	and.w	r2, r2, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_RCC_OscConfig+0x3ba>
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f000 bd31 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4ba0      	ldr	r3, [pc, #640]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	21f8      	movs	r1, #248	; 0xf8
 8003822:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800382a:	fa91 f1a1 	rbit	r1, r1
 800382e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003832:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003836:	fab1 f181 	clz	r1, r1
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	408b      	lsls	r3, r1
 800383e:	4995      	ldr	r1, [pc, #596]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003844:	e0f5      	b.n	8003a32 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8085 	beq.w	800395c <HAL_RCC_OscConfig+0x504>
 8003852:	2301      	movs	r3, #1
 8003854:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003864:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2301      	movs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fac1 	bl	8000e04 <HAL_GetTick>
 8003882:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003888:	f7fd fabc 	bl	8000e04 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f000 bceb 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
 800389e:	2302      	movs	r3, #2
 80038a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80038b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0x476>
 80038c8:	4b72      	ldr	r3, [pc, #456]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e013      	b.n	80038f6 <HAL_RCC_OscConfig+0x49e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2202      	movs	r2, #2
 80038f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003908:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f042 0220 	orr.w	r2, r2, #32
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f002 021f 	and.w	r2, r2, #31
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f202 	lsl.w	r2, r1, r2
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0af      	beq.n	8003888 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b5a      	ldr	r3, [pc, #360]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	21f8      	movs	r1, #248	; 0xf8
 8003938:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003940:	fa91 f1a1 	rbit	r1, r1
 8003944:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003948:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800394c:	fab1 f181 	clz	r1, r1
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	408b      	lsls	r3, r1
 8003954:	494f      	ldr	r1, [pc, #316]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
 800395a:	e06a      	b.n	8003a32 <HAL_RCC_OscConfig+0x5da>
 800395c:	2301      	movs	r3, #1
 800395e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800396e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800397c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	461a      	mov	r2, r3
 8003984:	2300      	movs	r3, #0
 8003986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd fa3c 	bl	8000e04 <HAL_GetTick>
 800398c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fd fa37 	bl	8000e04 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	f000 bc66 	b.w	8004274 <HAL_RCC_OscConfig+0xe1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80039ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0x580>
 80039d2:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x5a8>
 80039d8:	2302      	movs	r3, #2
 80039da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039ea:	2302      	movs	r3, #2
 80039ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_RCC_OscConfig+0x63c>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2202      	movs	r2, #2
 8003a02:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003a06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003a0a:	fa92 f2a2 	rbit	r2, r2
 8003a0e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003a12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0220 	orr.w	r2, r2, #32
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1af      	bne.n	8003992 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80da 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d069      	beq.n	8003b20 <HAL_RCC_OscConfig+0x6c8>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x640>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	461a      	mov	r2, r3
 8003a72:	2301      	movs	r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fd f9c5 	bl	8000e04 <HAL_GetTick>
 8003a7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fd f9c0 	bl	8000e04 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d905      	bls.n	8003a9c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e3ef      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8003a94:	40021000 	.word	0x40021000
 8003a98:	10908120 	.word	0x10908120
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	fa93 f2a3 	rbit	r2, r3
 8003ac2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ade:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae0:	4ba4      	ldr	r3, [pc, #656]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ae8:	2102      	movs	r1, #2
 8003aea:	6019      	str	r1, [r3, #0]
 8003aec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f1a3 	rbit	r1, r3
 8003af6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003afa:	6019      	str	r1, [r3, #0]
  return result;
 8003afc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0b0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x628>
 8003b1e:	e06a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x79e>
 8003b20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b36:	601a      	str	r2, [r3, #0]
  return result;
 8003b38:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b8c      	ldr	r3, [pc, #560]	; (8003d78 <HAL_RCC_OscConfig+0x920>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fd f957 	bl	8000e04 <HAL_GetTick>
 8003b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5a:	e009      	b.n	8003b70 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fd f952 	bl	8000e04 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e381      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8003b70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	fa93 f2a3 	rbit	r2, r3
 8003b9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003bb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	6019      	str	r1, [r3, #0]
 8003bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f1a3 	rbit	r1, r3
 8003bce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bd2:	6019      	str	r1, [r3, #0]
  return result;
 8003bd4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1b2      	bne.n	8003b5c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8157 	beq.w	8003eb4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d112      	bne.n	8003c3e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4a55      	ldr	r2, [pc, #340]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCC_OscConfig+0x924>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11a      	bne.n	8003c80 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <HAL_RCC_OscConfig+0x924>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_RCC_OscConfig+0x924>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fd f8d5 	bl	8000e04 <HAL_GetTick>
 8003c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	e009      	b.n	8003c74 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c60:	f7fd f8d0 	bl	8000e04 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e2ff      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_OscConfig+0x924>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ef      	beq.n	8003c60 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x840>
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e02f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x8a0>
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x864>
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a33      	ldr	r2, [pc, #204]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a30      	ldr	r2, [pc, #192]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0x8a0>
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x888>
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6213      	str	r3, [r2, #32]
 8003cd2:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6213      	str	r3, [r2, #32]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x8a0>
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6213      	str	r3, [r2, #32]
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	1d3b      	adds	r3, r7, #4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06a      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d02:	f7fd f87f 	bl	8000e04 <HAL_GetTick>
 8003d06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd f87a 	bl	8000e04 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e2a7      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8003d24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d28:	2202      	movs	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	fa93 f2a3 	rbit	r2, r3
 8003d36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d40:	2202      	movs	r2, #2
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d52:	601a      	str	r2, [r3, #0]
  return result;
 8003d54:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x928>
 8003d6e:	4b01      	ldr	r3, [pc, #4]	; (8003d74 <HAL_RCC_OscConfig+0x91c>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	e013      	b.n	8003d9c <HAL_RCC_OscConfig+0x944>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	10908120 	.word	0x10908120
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d84:	2202      	movs	r2, #2
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	fa93 f2a3 	rbit	r2, r3
 8003d92:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	4bc0      	ldr	r3, [pc, #768]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003da0:	2102      	movs	r1, #2
 8003da2:	6011      	str	r1, [r2, #0]
 8003da4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	fa92 f1a2 	rbit	r1, r2
 8003dae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003db2:	6011      	str	r1, [r2, #0]
  return result;
 8003db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d09a      	beq.n	8003d0c <HAL_RCC_OscConfig+0x8b4>
 8003dd6:	e063      	b.n	8003ea0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fd f814 	bl	8000e04 <HAL_GetTick>
 8003ddc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	e00b      	b.n	8003dfa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fd f80f 	bl	8000e04 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e23c      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8003dfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003dfe:	2202      	movs	r2, #2
 8003e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e16:	2202      	movs	r2, #2
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e28:	601a      	str	r2, [r3, #0]
  return result;
 8003e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_OscConfig+0x9f2>
 8003e44:	4b95      	ldr	r3, [pc, #596]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	e00d      	b.n	8003e66 <HAL_RCC_OscConfig+0xa0e>
 8003e4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e4e:	2202      	movs	r2, #2
 8003e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	fa93 f2a3 	rbit	r2, r3
 8003e5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	4b8e      	ldr	r3, [pc, #568]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	fa92 f1a2 	rbit	r1, r2
 8003e78:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e7c:	6011      	str	r1, [r2, #0]
  return result;
 8003e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f002 021f 	and.w	r2, r2, #31
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1a0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ea0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b7c      	ldr	r3, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4a7b      	ldr	r2, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 81d9 	beq.w	8004272 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	f000 81a6 	beq.w	800421a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f040 811e 	bne.w	8004116 <HAL_RCC_OscConfig+0xcbe>
 8003eda:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ef2:	601a      	str	r2, [r3, #0]
  return result;
 8003ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ef8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fc ff78 	bl	8000e04 <HAL_GetTick>
 8003f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	e009      	b.n	8003f2e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fc ff73 	bl	8000e04 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e1a2      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8003f2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f46:	601a      	str	r2, [r3, #0]
  return result;
 8003f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_OscConfig+0xb10>
 8003f62:	4b4e      	ldr	r3, [pc, #312]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	e01b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb48>
 8003f68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	fa93 f2a3 	rbit	r2, r3
 8003f96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003fa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fa8:	6011      	str	r1, [r2, #0]
 8003faa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	fa92 f1a2 	rbit	r1, r2
 8003fb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fb8:	6011      	str	r1, [r2, #0]
  return result;
 8003fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f042 0220 	orr.w	r2, r2, #32
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	f002 021f 	and.w	r2, r2, #31
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d19e      	bne.n	8003f1a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f023 020f 	bic.w	r2, r3, #15
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	492c      	ldr	r1, [pc, #176]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a19      	ldr	r1, [r3, #32]
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	430b      	orrs	r3, r1
 8004006:	4925      	ldr	r1, [pc, #148]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004024:	601a      	str	r2, [r3, #0]
  return result;
 8004026:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800402a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	461a      	mov	r2, r3
 800403e:	2301      	movs	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fc fedf 	bl	8000e04 <HAL_GetTick>
 8004046:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404a:	e009      	b.n	8004060 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fc feda 	bl	8000e04 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e109      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 8004060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004078:	601a      	str	r2, [r3, #0]
  return result;
 800407a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800407e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0xc48>
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <HAL_RCC_OscConfig+0xc44>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	e01e      	b.n	80040d8 <HAL_RCC_OscConfig+0xc80>
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	fa93 f2a3 	rbit	r2, r3
 80040b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fa93 f2a3 	rbit	r2, r3
 80040ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_OscConfig+0xe28>)
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80040dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	fa92 f1a2 	rbit	r1, r2
 80040ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040f0:	6011      	str	r1, [r2, #0]
  return result;
 80040f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	fab2 f282 	clz	r2, r2
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f042 0220 	orr.w	r2, r2, #32
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f002 021f 	and.w	r2, r2, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d09b      	beq.n	800404c <HAL_RCC_OscConfig+0xbf4>
 8004114:	e0ad      	b.n	8004272 <HAL_RCC_OscConfig+0xe1a>
 8004116:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800411a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800411e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa93 f2a3 	rbit	r2, r3
 800412a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800412e:	601a      	str	r2, [r3, #0]
  return result;
 8004130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004134:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fc fe5a 	bl	8000e04 <HAL_GetTick>
 8004150:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	e009      	b.n	800416a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fc fe55 	bl	8000e04 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e084      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
 800416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800416e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	fa93 f2a3 	rbit	r2, r3
 800417e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004182:	601a      	str	r2, [r3, #0]
  return result;
 8004184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004188:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0xd4c>
 800419e:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_RCC_OscConfig+0xe28>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e01b      	b.n	80041dc <HAL_RCC_OscConfig+0xd84>
 80041a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f2a3 	rbit	r2, r3
 80041b8:	f107 0320 	add.w	r3, r7, #32
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f107 031c 	add.w	r3, r7, #28
 80041c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f107 0318 	add.w	r3, r7, #24
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_OscConfig+0xe28>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f107 0214 	add.w	r2, r7, #20
 80041e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041e4:	6011      	str	r1, [r2, #0]
 80041e6:	f107 0214 	add.w	r2, r7, #20
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	fa92 f1a2 	rbit	r1, r2
 80041f0:	f107 0210 	add.w	r2, r7, #16
 80041f4:	6011      	str	r1, [r2, #0]
  return result;
 80041f6:	f107 0210 	add.w	r2, r7, #16
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	fab2 f282 	clz	r2, r2
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	f002 021f 	and.w	r2, r2, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f202 	lsl.w	r2, r1, r2
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d19e      	bne.n	8004156 <HAL_RCC_OscConfig+0xcfe>
 8004218:	e02b      	b.n	8004272 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e025      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_OscConfig+0xe28>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_OscConfig+0xe28>)
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004238:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800423c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	429a      	cmp	r2, r3
 8004248:	d111      	bne.n	800426e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800424a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800424e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004258:	429a      	cmp	r2, r3
 800425a:	d108      	bne.n	800426e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800425c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b09e      	sub	sp, #120	; 0x78
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e162      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b90      	ldr	r3, [pc, #576]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b8d      	ldr	r3, [pc, #564]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	498b      	ldr	r1, [pc, #556]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b89      	ldr	r3, [pc, #548]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e14a      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b82      	ldr	r3, [pc, #520]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	497f      	ldr	r1, [pc, #508]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80dc 	beq.w	80044b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d13c      	bne.n	800437a <HAL_RCC_ClockConfig+0xf6>
 8004300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004304:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_RCC_ClockConfig+0xa6>
 8004324:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	e00f      	b.n	800434a <HAL_RCC_ClockConfig+0xc6>
 800432a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
 8004338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433c:	663b      	str	r3, [r7, #96]	; 0x60
 800433e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004346:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800434e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004352:	fa92 f2a2 	rbit	r2, r2
 8004356:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f042 0220 	orr.w	r2, r2, #32
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f002 021f 	and.w	r2, r2, #31
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d17b      	bne.n	800446e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0f3      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d13c      	bne.n	80043fc <HAL_RCC_ClockConfig+0x178>
 8004382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004386:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_ClockConfig+0x128>
 80043a6:	4b4f      	ldr	r3, [pc, #316]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	e00f      	b.n	80043cc <HAL_RCC_ClockConfig+0x148>
 80043ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c8:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80043d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d4:	fa92 f2a2 	rbit	r2, r2
 80043d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043dc:	fab2 f282 	clz	r2, r2
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	f042 0220 	orr.w	r2, r2, #32
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f002 021f 	and.w	r2, r2, #31
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d13a      	bne.n	800446e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b2      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
 80043fc:	2302      	movs	r3, #2
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_RCC_ClockConfig+0x1a0>
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	e00d      	b.n	8004440 <HAL_RCC_ClockConfig+0x1bc>
 8004424:	2302      	movs	r3, #2
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	2302      	movs	r3, #2
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2202      	movs	r2, #2
 8004442:	61ba      	str	r2, [r7, #24]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	fa92 f2a2 	rbit	r2, r2
 800444a:	617a      	str	r2, [r7, #20]
  return result;
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	fab2 f282 	clz	r2, r2
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	f002 021f 	and.w	r2, r2, #31
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f202 	lsl.w	r2, r1, r2
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e079      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	491a      	ldr	r1, [pc, #104]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004480:	f7fc fcc0 	bl	8000e04 <HAL_GetTick>
 8004484:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fc fcbc 	bl	8000e04 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e061      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_RCC_ClockConfig+0x260>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d214      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0207 	bic.w	r2, r3, #7
 80044c6:	4906      	ldr	r1, [pc, #24]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <HAL_RCC_ClockConfig+0x25c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e040      	b.n	8004562 <HAL_RCC_ClockConfig+0x2de>
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_ClockConfig+0x2e8>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	491a      	ldr	r1, [pc, #104]	; (800456c <HAL_RCC_ClockConfig+0x2e8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <HAL_RCC_ClockConfig+0x2e8>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4912      	ldr	r1, [pc, #72]	; (800456c <HAL_RCC_ClockConfig+0x2e8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004526:	f000 f829 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800452a:	4601      	mov	r1, r0
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_ClockConfig+0x2e8>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004534:	22f0      	movs	r2, #240	; 0xf0
 8004536:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	fa92 f2a2 	rbit	r2, r2
 800453e:	60fa      	str	r2, [r7, #12]
  return result;
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	fab2 f282 	clz	r2, r2
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	40d3      	lsrs	r3, r2
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x2ec>)
 800454c:	5cd3      	ldrb	r3, [r2, r3]
 800454e:	fa21 f303 	lsr.w	r3, r1, r3
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_RCC_ClockConfig+0x2f0>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCC_ClockConfig+0x2f4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fc0e 	bl	8000d7c <HAL_InitTick>
  
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3778      	adds	r7, #120	; 0x78
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	08009cec 	.word	0x08009cec
 8004574:	20000000 	.word	0x20000000
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	b08b      	sub	sp, #44	; 0x2c
 8004580:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004596:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x30>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x36>
 80045aa:	e03f      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ae:	623b      	str	r3, [r7, #32]
      break;
 80045b0:	e03f      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	fa92 f2a2 	rbit	r2, r2
 80045c4:	607a      	str	r2, [r7, #4]
  return result;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	fab2 f282 	clz	r2, r2
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	40d3      	lsrs	r3, r2
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	220f      	movs	r2, #15
 80045e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	fa92 f2a2 	rbit	r2, r2
 80045e8:	60fa      	str	r2, [r7, #12]
  return result;
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	fab2 f282 	clz	r2, r2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	40d3      	lsrs	r3, r2
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045f6:	5cd3      	ldrb	r3, [r2, r3]
 80045f8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004604:	4a0f      	ldr	r2, [pc, #60]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	e007      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	fbb2 f2f3 	udiv	r2, r2, r3
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	623b      	str	r3, [r7, #32]
      break;
 800462a:	e002      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_GetSysClockFreq+0xd4>)
 800462e:	623b      	str	r3, [r7, #32]
      break;
 8004630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004632:	6a3b      	ldr	r3, [r7, #32]
}
 8004634:	4618      	mov	r0, r3
 8004636:	372c      	adds	r7, #44	; 0x2c
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40021000 	.word	0x40021000
 8004644:	00f42400 	.word	0x00f42400
 8004648:	08009d04 	.word	0x08009d04
 800464c:	08009d14 	.word	0x08009d14
 8004650:	007a1200 	.word	0x007a1200

08004654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_GetHCLKFreq+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000000 	.word	0x20000000

0800466c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004672:	f7ff ffef 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8004676:	4601      	mov	r1, r0
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004680:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004684:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	fa92 f2a2 	rbit	r2, r2
 800468c:	603a      	str	r2, [r7, #0]
  return result;
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	fab2 f282 	clz	r2, r2
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	40d3      	lsrs	r3, r2
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08009cfc 	.word	0x08009cfc

080046b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046b6:	f7ff ffcd 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	fa92 f2a2 	rbit	r2, r2
 80046d0:	603a      	str	r2, [r7, #0]
  return result;
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	fab2 f282 	clz	r2, r2
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	40d3      	lsrs	r3, r2
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046de:	5cd3      	ldrb	r3, [r2, r3]
 80046e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000
 80046f0:	08009cfc 	.word	0x08009cfc

080046f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b092      	sub	sp, #72	; 0x48
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80d4 	beq.w	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004718:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10e      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4a4a      	ldr	r2, [pc, #296]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	61d3      	str	r3, [r2, #28]
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d118      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a41      	ldr	r2, [pc, #260]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004758:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475a:	f7fc fb53 	bl	8000e04 <HAL_GetTick>
 800475e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	e008      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7fc fb4f 	bl	8000e04 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b64      	cmp	r3, #100	; 0x64
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e1d6      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8084 	beq.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800479c:	429a      	cmp	r2, r3
 800479e:	d07c      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	461a      	mov	r2, r3
 80047ca:	2301      	movs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047f2:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04b      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fc faff 	bl	8000e04 <HAL_GetTick>
 8004806:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fafb 	bl	8000e04 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e180      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004820:	2302      	movs	r3, #2
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	2302      	movs	r3, #2
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	61fb      	str	r3, [r7, #28]
  return result;
 8004838:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d108      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800484e:	4b01      	ldr	r3, [pc, #4]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	e00d      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004854:	40021000 	.word	0x40021000
 8004858:	40007000 	.word	0x40007000
 800485c:	10908100 	.word	0x10908100
 8004860:	2302      	movs	r3, #2
 8004862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	4ba0      	ldr	r3, [pc, #640]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2202      	movs	r2, #2
 8004872:	613a      	str	r2, [r7, #16]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	fa92 f2a2 	rbit	r2, r2
 800487a:	60fa      	str	r2, [r7, #12]
  return result;
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	fab2 f282 	clz	r2, r2
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	f002 021f 	and.w	r2, r2, #31
 800488e:	2101      	movs	r1, #1
 8004890:	fa01 f202 	lsl.w	r2, r1, r2
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0b7      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800489a:	4b95      	ldr	r3, [pc, #596]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4992      	ldr	r1, [pc, #584]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b8e      	ldr	r3, [pc, #568]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4a8d      	ldr	r2, [pc, #564]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048cc:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	f023 0203 	bic.w	r2, r3, #3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4985      	ldr	r1, [pc, #532]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ea:	4b81      	ldr	r3, [pc, #516]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	497e      	ldr	r1, [pc, #504]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004908:	4b79      	ldr	r3, [pc, #484]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4976      	ldr	r1, [pc, #472]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004926:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f023 0210 	bic.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	496f      	ldr	r1, [pc, #444]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004944:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	4967      	ldr	r1, [pc, #412]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004962:	4b63      	ldr	r3, [pc, #396]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f023 0220 	bic.w	r2, r3, #32
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4960      	ldr	r1, [pc, #384]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004980:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	4958      	ldr	r1, [pc, #352]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800499e:	4b54      	ldr	r3, [pc, #336]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4951      	ldr	r1, [pc, #324]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049bc:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4949      	ldr	r1, [pc, #292]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049da:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	4942      	ldr	r1, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	493a      	ldr	r1, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4933      	ldr	r1, [pc, #204]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a34:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a40:	492b      	ldr	r1, [pc, #172]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4924      	ldr	r1, [pc, #144]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	491c      	ldr	r1, [pc, #112]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	4915      	ldr	r1, [pc, #84]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	490d      	ldr	r1, [pc, #52]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	4906      	ldr	r1, [pc, #24]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afc:	490b      	ldr	r1, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1a:	4904      	ldr	r1, [pc, #16]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3748      	adds	r7, #72	; 0x48
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e040      	b.n	8004bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc f810 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8c0 	bl	8004cf4 <UART_SetConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e022      	b.n	8004bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa88 	bl	800509c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb0f 	bl	80051e0 <UART_CheckIdleState>
 8004bc2:	4603      	mov	r3, r0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	f040 8082 	bne.w	8004cea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_UART_Transmit+0x26>
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07a      	b.n	8004cec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Transmit+0x38>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e073      	b.n	8004cec <HAL_UART_Transmit+0x120>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2221      	movs	r2, #33	; 0x21
 8004c18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1a:	f7fc f8f3 	bl	8000e04 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Transmit+0x80>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c5c:	e02d      	b.n	8004cba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fb02 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e039      	b.n	8004cec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881a      	ldrh	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3302      	adds	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e008      	b.n	8004ca8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1cb      	bne.n	8004c5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 face 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e005      	b.n	8004cec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4baa      	ldr	r3, [pc, #680]	; (8004fc8 <UART_SetConfig+0x2d4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a98      	ldr	r2, [pc, #608]	; (8004fcc <UART_SetConfig+0x2d8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d121      	bne.n	8004db4 <UART_SetConfig+0xc0>
 8004d70:	4b97      	ldr	r3, [pc, #604]	; (8004fd0 <UART_SetConfig+0x2dc>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d817      	bhi.n	8004dac <UART_SetConfig+0xb8>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x90>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004d9b 	.word	0x08004d9b
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e0b2      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e0af      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e0ac      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e0a9      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	bf00      	nop
 8004db2:	e0a5      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a86      	ldr	r2, [pc, #536]	; (8004fd4 <UART_SetConfig+0x2e0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d123      	bne.n	8004e06 <UART_SetConfig+0x112>
 8004dbe:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <UART_SetConfig+0x2dc>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d012      	beq.n	8004df2 <UART_SetConfig+0xfe>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d802      	bhi.n	8004dd8 <UART_SetConfig+0xe4>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <UART_SetConfig+0xf2>
 8004dd6:	e012      	b.n	8004dfe <UART_SetConfig+0x10a>
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x104>
 8004dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004de2:	d003      	beq.n	8004dec <UART_SetConfig+0xf8>
 8004de4:	e00b      	b.n	8004dfe <UART_SetConfig+0x10a>
 8004de6:	2300      	movs	r3, #0
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e089      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e086      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004df2:	2304      	movs	r3, #4
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e083      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e080      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004dfe:	2310      	movs	r3, #16
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	bf00      	nop
 8004e04:	e07c      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <UART_SetConfig+0x2e4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d123      	bne.n	8004e58 <UART_SetConfig+0x164>
 8004e10:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <UART_SetConfig+0x2dc>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e1c:	d012      	beq.n	8004e44 <UART_SetConfig+0x150>
 8004e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e22:	d802      	bhi.n	8004e2a <UART_SetConfig+0x136>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <UART_SetConfig+0x144>
 8004e28:	e012      	b.n	8004e50 <UART_SetConfig+0x15c>
 8004e2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e2e:	d00c      	beq.n	8004e4a <UART_SetConfig+0x156>
 8004e30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e34:	d003      	beq.n	8004e3e <UART_SetConfig+0x14a>
 8004e36:	e00b      	b.n	8004e50 <UART_SetConfig+0x15c>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e060      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e05d      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e44:	2304      	movs	r3, #4
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e05a      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e057      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e50:	2310      	movs	r3, #16
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	bf00      	nop
 8004e56:	e053      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5f      	ldr	r2, [pc, #380]	; (8004fdc <UART_SetConfig+0x2e8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d123      	bne.n	8004eaa <UART_SetConfig+0x1b6>
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <UART_SetConfig+0x2dc>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6e:	d012      	beq.n	8004e96 <UART_SetConfig+0x1a2>
 8004e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e74:	d802      	bhi.n	8004e7c <UART_SetConfig+0x188>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <UART_SetConfig+0x196>
 8004e7a:	e012      	b.n	8004ea2 <UART_SetConfig+0x1ae>
 8004e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e80:	d00c      	beq.n	8004e9c <UART_SetConfig+0x1a8>
 8004e82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x19c>
 8004e88:	e00b      	b.n	8004ea2 <UART_SetConfig+0x1ae>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e037      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e034      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e96:	2304      	movs	r3, #4
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e031      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e02e      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	bf00      	nop
 8004ea8:	e02a      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a4c      	ldr	r2, [pc, #304]	; (8004fe0 <UART_SetConfig+0x2ec>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d123      	bne.n	8004efc <UART_SetConfig+0x208>
 8004eb4:	4b46      	ldr	r3, [pc, #280]	; (8004fd0 <UART_SetConfig+0x2dc>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec0:	d012      	beq.n	8004ee8 <UART_SetConfig+0x1f4>
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec6:	d802      	bhi.n	8004ece <UART_SetConfig+0x1da>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <UART_SetConfig+0x1e8>
 8004ecc:	e012      	b.n	8004ef4 <UART_SetConfig+0x200>
 8004ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ed2:	d00c      	beq.n	8004eee <UART_SetConfig+0x1fa>
 8004ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed8:	d003      	beq.n	8004ee2 <UART_SetConfig+0x1ee>
 8004eda:	e00b      	b.n	8004ef4 <UART_SetConfig+0x200>
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e00e      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e00b      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e008      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e005      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	bf00      	nop
 8004efa:	e001      	b.n	8004f00 <UART_SetConfig+0x20c>
 8004efc:	2310      	movs	r3, #16
 8004efe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d16e      	bne.n	8004fe8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d828      	bhi.n	8004f62 <UART_SetConfig+0x26e>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x224>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7ff fb96 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e013      	b.n	8004f6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7ff fbb4 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8004f48:	61b8      	str	r0, [r7, #24]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <UART_SetConfig+0x2f0>)
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7ff fb13 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8004f56:	61b8      	str	r0, [r7, #24]
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77bb      	strb	r3, [r7, #30]
        break;
 8004f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8086 	beq.w	8005080 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	005a      	lsls	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d916      	bls.n	8004fc0 <UART_SetConfig+0x2cc>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d212      	bcs.n	8004fc0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f023 030f 	bic.w	r3, r3, #15
 8004fa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	89fa      	ldrh	r2, [r7, #14]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e05f      	b.n	8005080 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77bb      	strb	r3, [r7, #30]
 8004fc4:	e05c      	b.n	8005080 <UART_SetConfig+0x38c>
 8004fc6:	bf00      	nop
 8004fc8:	efff69f3 	.word	0xefff69f3
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	40004800 	.word	0x40004800
 8004fdc:	40004c00 	.word	0x40004c00
 8004fe0:	40005000 	.word	0x40005000
 8004fe4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d827      	bhi.n	800503e <UART_SetConfig+0x34a>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x300>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7ff fb28 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e013      	b.n	8005048 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7ff fb46 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <UART_SetConfig+0x3a4>)
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e00c      	b.n	8005048 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7ff faa5 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8005032:	61b8      	str	r0, [r7, #24]
        break;
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e004      	b.n	8005048 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	77bb      	strb	r3, [r7, #30]
        break;
 8005046:	bf00      	nop
    }

    if (pclk != 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d018      	beq.n	8005080 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085a      	lsrs	r2, r3, #1
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	441a      	add	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	b29b      	uxth	r3, r3
 8005062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d908      	bls.n	800507c <UART_SetConfig+0x388>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d204      	bcs.n	800507c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	e001      	b.n	8005080 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800508c:	7fbb      	ldrb	r3, [r7, #30]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	007a1200 	.word	0x007a1200

0800509c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519a:	d10a      	bne.n	80051b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f0:	f7fb fe08 	bl	8000e04 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d10e      	bne.n	8005222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f82d 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e023      	b.n	800526a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d10e      	bne.n	800524e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f817 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e00d      	b.n	800526a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	e05e      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d05a      	beq.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fb fdba 	bl	8000e04 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11b      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e043      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02c      	beq.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f6:	d124      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005310:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	429a      	cmp	r2, r3
 800535e:	d091      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800537a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800537e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053ce:	b084      	sub	sp, #16
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	f107 0014 	add.w	r0, r7, #20
 80053dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	b004      	add	sp, #16
 800540e:	4770      	bx	lr

08005410 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b09b      	sub	sp, #108	; 0x6c
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	78db      	ldrb	r3, [r3, #3]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d81f      	bhi.n	8005482 <USB_ActivateEndpoint+0x72>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <USB_ActivateEndpoint+0x38>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005459 	.word	0x08005459
 800544c:	08005475 	.word	0x08005475
 8005450:	0800548b 	.word	0x0800548b
 8005454:	08005467 	.word	0x08005467
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005458:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800545c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005460:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005464:	e012      	b.n	800548c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005466:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800546a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800546e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005472:	e00b      	b.n	800548c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005474:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800547c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005480:	e004      	b.n	800548c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005488:	e000      	b.n	800548c <USB_ActivateEndpoint+0x7c>
      break;
 800548a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	b21b      	sxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	b21a      	sxth	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b21b      	sxth	r3, r3
 80054ce:	4313      	orrs	r3, r2
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80054e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	7b1b      	ldrb	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 8149 	bne.w	8005794 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8084 	beq.w	8005614 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	00da      	lsls	r2, r3, #3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	88db      	ldrh	r3, [r3, #6]
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	81fb      	strh	r3, [r7, #14]
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <USB_ActivateEndpoint+0x180>
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	81bb      	strh	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	89bb      	ldrh	r3, [r7, #12]
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	78db      	ldrb	r3, [r3, #3]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d020      	beq.n	80055da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ae:	813b      	strh	r3, [r7, #8]
 80055b0:	893b      	ldrh	r3, [r7, #8]
 80055b2:	f083 0320 	eor.w	r3, r3, #32
 80055b6:	813b      	strh	r3, [r7, #8]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]
 80055d8:	e27f      	b.n	8005ada <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	817b      	strh	r3, [r7, #10]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
 8005612:	e262      	b.n	8005ada <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	4413      	add	r3, r2
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	00da      	lsls	r2, r3, #3
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	4413      	add	r3, r2
 8005632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	88db      	ldrh	r3, [r3, #6]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	4413      	add	r3, r2
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	00da      	lsls	r2, r3, #3
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	4413      	add	r3, r2
 8005666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d112      	bne.n	800569a <USB_ActivateEndpoint+0x28a>
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567e:	b29a      	uxth	r2, r3
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005692:	b29a      	uxth	r2, r3
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	e02f      	b.n	80056fa <USB_ActivateEndpoint+0x2ea>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b3e      	cmp	r3, #62	; 0x3e
 80056a0:	d813      	bhi.n	80056ca <USB_ActivateEndpoint+0x2ba>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <USB_ActivateEndpoint+0x2ac>
 80056b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b8:	3301      	adds	r3, #1
 80056ba:	663b      	str	r3, [r7, #96]	; 0x60
 80056bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e017      	b.n	80056fa <USB_ActivateEndpoint+0x2ea>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	663b      	str	r3, [r7, #96]	; 0x60
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <USB_ActivateEndpoint+0x2d4>
 80056de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e0:	3b01      	subs	r3, #1
 80056e2:	663b      	str	r3, [r7, #96]	; 0x60
 80056e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	83fb      	strh	r3, [r7, #30]
 8005708:	8bfb      	ldrh	r3, [r7, #30]
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01b      	beq.n	800574a <USB_ActivateEndpoint+0x33a>
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	83bb      	strh	r3, [r7, #28]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8bbb      	ldrh	r3, [r7, #28]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	837b      	strh	r3, [r7, #26]
 8005762:	8b7b      	ldrh	r3, [r7, #26]
 8005764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005768:	837b      	strh	r3, [r7, #26]
 800576a:	8b7b      	ldrh	r3, [r7, #26]
 800576c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005770:	837b      	strh	r3, [r7, #26]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	8b7b      	ldrh	r3, [r7, #26]
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]
 8005792:	e1a2      	b.n	8005ada <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e0:	4413      	add	r3, r2
 80057e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	00da      	lsls	r2, r3, #3
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f2:	657b      	str	r3, [r7, #84]	; 0x54
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	891b      	ldrh	r3, [r3, #8]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580e:	b29b      	uxth	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	4413      	add	r3, r2
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	00da      	lsls	r2, r3, #3
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	4413      	add	r3, r2
 8005822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	895b      	ldrh	r3, [r3, #10]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005836:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f040 8091 	bne.w	8005964 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01b      	beq.n	8005892 <USB_ActivateEndpoint+0x482>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	873b      	strh	r3, [r7, #56]	; 0x38
 80058a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01b      	beq.n	80058e2 <USB_ActivateEndpoint+0x4d2>
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005900:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005908:	86bb      	strh	r3, [r7, #52]	; 0x34
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	867b      	strh	r3, [r7, #50]	; 0x32
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e0ba      	b.n	8005ada <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01d      	beq.n	80059bc <USB_ActivateEndpoint+0x5ac>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01d      	beq.n	8005a14 <USB_ActivateEndpoint+0x604>
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	441a      	add	r2, r3
 80059fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d024      	beq.n	8005a66 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a3a:	f083 0320 	eor.w	r3, r3, #32
 8005a3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e01d      	b.n	8005aa2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	376c      	adds	r7, #108	; 0x6c
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop

08005aec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b08d      	sub	sp, #52	; 0x34
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	7b1b      	ldrb	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 808e 	bne.w	8005c1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d044      	beq.n	8005b92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	81bb      	strh	r3, [r7, #12]
 8005b16:	89bb      	ldrh	r3, [r7, #12]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01b      	beq.n	8005b58 <USB_DeactivateEndpoint+0x6c>
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	817b      	strh	r3, [r7, #10]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b6e:	813b      	strh	r3, [r7, #8]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
 8005b90:	e192      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	827b      	strh	r3, [r7, #18]
 8005ba0:	8a7b      	ldrh	r3, [r7, #18]
 8005ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01b      	beq.n	8005be2 <USB_DeactivateEndpoint+0xf6>
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc0:	823b      	strh	r3, [r7, #16]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8a3b      	ldrh	r3, [r7, #16]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	81fb      	strh	r3, [r7, #14]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
 8005c1a:	e14d      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 80a5 	bne.w	8005d70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	843b      	strh	r3, [r7, #32]
 8005c34:	8c3b      	ldrh	r3, [r7, #32]
 8005c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01b      	beq.n	8005c76 <USB_DeactivateEndpoint+0x18a>
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	83fb      	strh	r3, [r7, #30]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	83bb      	strh	r3, [r7, #28]
 8005c84:	8bbb      	ldrh	r3, [r7, #28]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01b      	beq.n	8005cc6 <USB_DeactivateEndpoint+0x1da>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	837b      	strh	r3, [r7, #26]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8b7b      	ldrh	r3, [r7, #26]
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	833b      	strh	r3, [r7, #24]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8b3b      	ldrh	r3, [r7, #24]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	82fb      	strh	r3, [r7, #22]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8afb      	ldrh	r3, [r7, #22]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	82bb      	strh	r3, [r7, #20]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	8abb      	ldrh	r3, [r7, #20]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e0a3      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <USB_DeactivateEndpoint+0x2d4>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <USB_DeactivateEndpoint+0x324>
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	853b      	strh	r3, [r7, #40]	; 0x28
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3734      	adds	r7, #52	; 0x34
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b0c4      	sub	sp, #272	; 0x110
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	6018      	str	r0, [r3, #0]
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	f040 8557 	bne.w	800698e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d905      	bls.n	8005efc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005efa:	e004      	b.n	8005f06 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005efc:	463b      	mov	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f06:	463b      	mov	r3, r7
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	7b1b      	ldrb	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d12c      	bne.n	8005f6a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6959      	ldr	r1, [r3, #20]
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	88da      	ldrh	r2, [r3, #6]
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	1d38      	adds	r0, r7, #4
 8005f24:	6800      	ldr	r0, [r0, #0]
 8005f26:	f001 fa1c 	bl	8007362 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	00da      	lsls	r2, r3, #3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f107 0310 	add.w	r3, r7, #16
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	f000 bcdd 	b.w	8006924 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	78db      	ldrb	r3, [r3, #3]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	f040 8347 	bne.w	8006604 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	f240 82eb 	bls.w	800655e <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8159 	beq.w	80062ac <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d164      	bne.n	80060d4 <USB_EPStartXfer+0x20e>
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	4413      	add	r3, r2
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	00da      	lsls	r2, r3, #3
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	4413      	add	r3, r2
 800602e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
 8006034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d112      	bne.n	8006062 <USB_EPStartXfer+0x19c>
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006046:	b29a      	uxth	r2, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e054      	b.n	800610c <USB_EPStartXfer+0x246>
 8006062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006066:	2b3e      	cmp	r3, #62	; 0x3e
 8006068:	d817      	bhi.n	800609a <USB_EPStartXfer+0x1d4>
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0x1c4>
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29a      	uxth	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e038      	b.n	800610c <USB_EPStartXfer+0x246>
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USB_EPStartXfer+0x1f4>
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	e01b      	b.n	800610c <USB_EPStartXfer+0x246>
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d116      	bne.n	800610c <USB_EPStartXfer+0x246>
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	4413      	add	r3, r2
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
 80060f0:	463b      	mov	r3, r7
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	00da      	lsls	r2, r3, #3
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006106:	b29a      	uxth	r2, r3
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	895b      	ldrh	r3, [r3, #10]
 8006112:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6959      	ldr	r1, [r3, #20]
 800611c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006120:	b29b      	uxth	r3, r3
 8006122:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006126:	1d38      	adds	r0, r7, #4
 8006128:	6800      	ldr	r0, [r0, #0]
 800612a:	f001 f91a 	bl	8007362 <USB_WritePMA>
            ep->xfer_buff += len;
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006138:	441a      	add	r2, r3
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006140:	463b      	mov	r3, r7
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1a      	ldr	r2, [r3, #32]
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d909      	bls.n	8006164 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	463b      	mov	r3, r7
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	621a      	str	r2, [r3, #32]
 8006162:	e008      	b.n	8006176 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d164      	bne.n	800624a <USB_EPStartXfer+0x384>
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	00da      	lsls	r2, r3, #3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d112      	bne.n	80061d8 <USB_EPStartXfer+0x312>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061bc:	b29a      	uxth	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	e057      	b.n	8006288 <USB_EPStartXfer+0x3c2>
 80061d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061dc:	2b3e      	cmp	r3, #62	; 0x3e
 80061de:	d817      	bhi.n	8006210 <USB_EPStartXfer+0x34a>
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <USB_EPStartXfer+0x33a>
 80061f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061fa:	3301      	adds	r3, #1
 80061fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006200:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29a      	uxth	r2, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e03b      	b.n	8006288 <USB_EPStartXfer+0x3c2>
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USB_EPStartXfer+0x36a>
 8006226:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800622a:	3b01      	subs	r3, #1
 800622c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e01e      	b.n	8006288 <USB_EPStartXfer+0x3c2>
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d119      	bne.n	8006288 <USB_EPStartXfer+0x3c2>
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	4413      	add	r3, r2
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	00da      	lsls	r2, r3, #3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	4413      	add	r3, r2
 8006278:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006282:	b29a      	uxth	r2, r3
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	891b      	ldrh	r3, [r3, #8]
 800628e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6959      	ldr	r1, [r3, #20]
 8006298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629c:	b29b      	uxth	r3, r3
 800629e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80062a2:	1d38      	adds	r0, r7, #4
 80062a4:	6800      	ldr	r0, [r0, #0]
 80062a6:	f001 f85c 	bl	8007362 <USB_WritePMA>
 80062aa:	e33b      	b.n	8006924 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d164      	bne.n	8006380 <USB_EPStartXfer+0x4ba>
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062bc:	1d3b      	adds	r3, r7, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ca:	4413      	add	r3, r2
 80062cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	00da      	lsls	r2, r3, #3
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	4413      	add	r3, r2
 80062da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d112      	bne.n	800630e <USB_EPStartXfer+0x448>
 80062e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e057      	b.n	80063be <USB_EPStartXfer+0x4f8>
 800630e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006312:	2b3e      	cmp	r3, #62	; 0x3e
 8006314:	d817      	bhi.n	8006346 <USB_EPStartXfer+0x480>
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <USB_EPStartXfer+0x470>
 800632c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006330:	3301      	adds	r3, #1
 8006332:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633a:	b29b      	uxth	r3, r3
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	b29a      	uxth	r2, r3
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e03b      	b.n	80063be <USB_EPStartXfer+0x4f8>
 8006346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x4a0>
 800635c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e01e      	b.n	80063be <USB_EPStartXfer+0x4f8>
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d119      	bne.n	80063be <USB_EPStartXfer+0x4f8>
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	657b      	str	r3, [r7, #84]	; 0x54
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006398:	b29b      	uxth	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639e:	4413      	add	r3, r2
 80063a0:	657b      	str	r3, [r7, #84]	; 0x54
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
 80063b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	891b      	ldrh	r3, [r3, #8]
 80063c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6959      	ldr	r1, [r3, #20]
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80063d8:	1d38      	adds	r0, r7, #4
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	f000 ffc1 	bl	8007362 <USB_WritePMA>
            ep->xfer_buff += len;
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ea:	441a      	add	r2, r3
 80063ec:	463b      	mov	r3, r7
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d909      	bls.n	8006416 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006402:	463b      	mov	r3, r7
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640c:	1ad2      	subs	r2, r2, r3
 800640e:	463b      	mov	r3, r7
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	621a      	str	r2, [r3, #32]
 8006414:	e008      	b.n	8006428 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d164      	bne.n	8006502 <USB_EPStartXfer+0x63c>
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	4413      	add	r3, r2
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	00da      	lsls	r2, r3, #3
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	4413      	add	r3, r2
 800645c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d112      	bne.n	8006490 <USB_EPStartXfer+0x5ca>
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006474:	b29a      	uxth	r2, r3
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006488:	b29a      	uxth	r2, r3
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e054      	b.n	800653a <USB_EPStartXfer+0x674>
 8006490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006494:	2b3e      	cmp	r3, #62	; 0x3e
 8006496:	d817      	bhi.n	80064c8 <USB_EPStartXfer+0x602>
 8006498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <USB_EPStartXfer+0x5f2>
 80064ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064b2:	3301      	adds	r3, #1
 80064b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e038      	b.n	800653a <USB_EPStartXfer+0x674>
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0x622>
 80064de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064e2:	3b01      	subs	r3, #1
 80064e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e01b      	b.n	800653a <USB_EPStartXfer+0x674>
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d116      	bne.n	800653a <USB_EPStartXfer+0x674>
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	4413      	add	r3, r2
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	00da      	lsls	r2, r3, #3
 8006526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006528:	4413      	add	r3, r2
 800652a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800652e:	643b      	str	r3, [r7, #64]	; 0x40
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	b29a      	uxth	r2, r3
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	895b      	ldrh	r3, [r3, #10]
 8006540:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6959      	ldr	r1, [r3, #20]
 800654a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654e:	b29b      	uxth	r3, r3
 8006550:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006554:	1d38      	adds	r0, r7, #4
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	f000 ff03 	bl	8007362 <USB_WritePMA>
 800655c:	e1e2      	b.n	8006924 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006568:	1d3b      	adds	r3, r7, #4
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	663b      	str	r3, [r7, #96]	; 0x60
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c0:	4413      	add	r3, r2
 80065c2:	663b      	str	r3, [r7, #96]	; 0x60
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	00da      	lsls	r2, r3, #3
 80065cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ce:	4413      	add	r3, r2
 80065d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	891b      	ldrh	r3, [r3, #8]
 80065e6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ea:	463b      	mov	r3, r7
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6959      	ldr	r1, [r3, #20]
 80065f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065fa:	1d38      	adds	r0, r7, #4
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f000 feb0 	bl	8007362 <USB_WritePMA>
 8006602:	e18f      	b.n	8006924 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 808f 	beq.w	800673e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006620:	1d3b      	adds	r3, r7, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	67bb      	str	r3, [r7, #120]	; 0x78
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d164      	bne.n	80066fa <USB_EPStartXfer+0x834>
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	673b      	str	r3, [r7, #112]	; 0x70
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006644:	4413      	add	r3, r2
 8006646:	673b      	str	r3, [r7, #112]	; 0x70
 8006648:	463b      	mov	r3, r7
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	00da      	lsls	r2, r3, #3
 8006650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006652:	4413      	add	r3, r2
 8006654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800665a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d112      	bne.n	8006688 <USB_EPStartXfer+0x7c2>
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800666c:	b29a      	uxth	r2, r3
 800666e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006680:	b29a      	uxth	r2, r3
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e054      	b.n	8006732 <USB_EPStartXfer+0x86c>
 8006688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668c:	2b3e      	cmp	r3, #62	; 0x3e
 800668e:	d817      	bhi.n	80066c0 <USB_EPStartXfer+0x7fa>
 8006690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <USB_EPStartXfer+0x7ea>
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	3301      	adds	r3, #1
 80066ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	029b      	lsls	r3, r3, #10
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e038      	b.n	8006732 <USB_EPStartXfer+0x86c>
 80066c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <USB_EPStartXfer+0x81a>
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066da:	3b01      	subs	r3, #1
 80066dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e01b      	b.n	8006732 <USB_EPStartXfer+0x86c>
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d116      	bne.n	8006732 <USB_EPStartXfer+0x86c>
 8006704:	1d3b      	adds	r3, r7, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006712:	4413      	add	r3, r2
 8006714:	67bb      	str	r3, [r7, #120]	; 0x78
 8006716:	463b      	mov	r3, r7
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	00da      	lsls	r2, r3, #3
 800671e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006720:	4413      	add	r3, r2
 8006722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006726:	677b      	str	r3, [r7, #116]	; 0x74
 8006728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672c:	b29a      	uxth	r2, r3
 800672e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006730:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	895b      	ldrh	r3, [r3, #10]
 8006738:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800673c:	e097      	b.n	800686e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800673e:	463b      	mov	r3, r7
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d168      	bne.n	800681a <USB_EPStartXfer+0x954>
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006760:	4413      	add	r3, r2
 8006762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	00da      	lsls	r2, r3, #3
 800676e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006772:	4413      	add	r3, r2
 8006774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006778:	67fb      	str	r3, [r7, #124]	; 0x7c
 800677a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d112      	bne.n	80067a8 <USB_EPStartXfer+0x8e2>
 8006782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678c:	b29a      	uxth	r2, r3
 800678e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e05d      	b.n	8006864 <USB_EPStartXfer+0x99e>
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d817      	bhi.n	80067e0 <USB_EPStartXfer+0x91a>
 80067b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <USB_EPStartXfer+0x90a>
 80067c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067ca:	3301      	adds	r3, #1
 80067cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e041      	b.n	8006864 <USB_EPStartXfer+0x99e>
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <USB_EPStartXfer+0x93a>
 80067f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006800:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29b      	uxth	r3, r3
 800680a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006812:	b29a      	uxth	r2, r3
 8006814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e024      	b.n	8006864 <USB_EPStartXfer+0x99e>
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d11f      	bne.n	8006864 <USB_EPStartXfer+0x99e>
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800683c:	4413      	add	r3, r2
 800683e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006842:	463b      	mov	r3, r7
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	00da      	lsls	r2, r3, #3
 800684a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800684e:	4413      	add	r3, r2
 8006850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685c:	b29a      	uxth	r2, r3
 800685e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006862:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	891b      	ldrh	r3, [r3, #8]
 800686a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6959      	ldr	r1, [r3, #20]
 8006874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006878:	b29b      	uxth	r3, r3
 800687a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800687e:	1d38      	adds	r0, r7, #4
 8006880:	6800      	ldr	r0, [r0, #0]
 8006882:	f000 fd6e 	bl	8007362 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d122      	bne.n	80068d6 <USB_EPStartXfer+0xa10>
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068aa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
 80068d4:	e026      	b.n	8006924 <USB_EPStartXfer+0xa5e>
 80068d6:	463b      	mov	r3, r7
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d121      	bne.n	8006924 <USB_EPStartXfer+0xa5e>
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800691c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006920:	b29b      	uxth	r3, r3
 8006922:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f107 020e 	add.w	r2, r7, #14
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006942:	8013      	strh	r3, [r2, #0]
 8006944:	f107 030e 	add.w	r3, r7, #14
 8006948:	f107 020e 	add.w	r2, r7, #14
 800694c:	8812      	ldrh	r2, [r2, #0]
 800694e:	f082 0210 	eor.w	r2, r2, #16
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	f107 030e 	add.w	r3, r7, #14
 8006958:	f107 020e 	add.w	r2, r7, #14
 800695c:	8812      	ldrh	r2, [r2, #0]
 800695e:	f082 0220 	eor.w	r2, r2, #32
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	463b      	mov	r3, r7
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	f107 030e 	add.w	r3, r7, #14
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
 800698c:	e3b5      	b.n	80070fa <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800698e:	463b      	mov	r3, r7
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	7b1b      	ldrb	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8090 	bne.w	8006aba <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	463b      	mov	r3, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d90e      	bls.n	80069c8 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80069aa:	463b      	mov	r3, r7
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	463b      	mov	r3, r7
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	619a      	str	r2, [r3, #24]
 80069c6:	e008      	b.n	80069da <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80069c8:	463b      	mov	r3, r7
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80069d2:	463b      	mov	r3, r7
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069f8:	463b      	mov	r3, r7
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	00da      	lsls	r2, r3, #3
 8006a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <USB_EPStartXfer+0xb7e>
 8006a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e32c      	b.n	800709e <USB_EPStartXfer+0x11d8>
 8006a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a48:	2b3e      	cmp	r3, #62	; 0x3e
 8006a4a:	d818      	bhi.n	8006a7e <USB_EPStartXfer+0xbb8>
 8006a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USB_EPStartXfer+0xba6>
 8006a62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a66:	3301      	adds	r3, #1
 8006a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	029b      	lsls	r3, r3, #10
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e30f      	b.n	800709e <USB_EPStartXfer+0x11d8>
 8006a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <USB_EPStartXfer+0xbd8>
 8006a94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	029b      	lsls	r3, r3, #10
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e2f1      	b.n	800709e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	78db      	ldrb	r3, [r3, #3]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	f040 818f 	bne.w	8006de4 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d175      	bne.n	8006bbc <USB_EPStartXfer+0xcf6>
 8006ad0:	1d3b      	adds	r3, r7, #4
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ae8:	4413      	add	r3, r2
 8006aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00da      	lsls	r2, r3, #3
 8006af6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b04:	463b      	mov	r3, r7
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d116      	bne.n	8006b3c <USB_EPStartXfer+0xc76>
 8006b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e065      	b.n	8006c08 <USB_EPStartXfer+0xd42>
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b3e      	cmp	r3, #62	; 0x3e
 8006b44:	d81a      	bhi.n	8006b7c <USB_EPStartXfer+0xcb6>
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <USB_EPStartXfer+0xca4>
 8006b60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b64:	3301      	adds	r3, #1
 8006b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	e045      	b.n	8006c08 <USB_EPStartXfer+0xd42>
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b88:	463b      	mov	r3, r7
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <USB_EPStartXfer+0xcda>
 8006b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	e025      	b.n	8006c08 <USB_EPStartXfer+0xd42>
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d120      	bne.n	8006c08 <USB_EPStartXfer+0xd42>
 8006bc6:	1d3b      	adds	r3, r7, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bde:	4413      	add	r3, r2
 8006be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00da      	lsls	r2, r3, #3
 8006bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d175      	bne.n	8006d06 <USB_EPStartXfer+0xe40>
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c32:	4413      	add	r3, r2
 8006c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	00da      	lsls	r2, r3, #3
 8006c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d116      	bne.n	8006c86 <USB_EPStartXfer+0xdc0>
 8006c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e061      	b.n	8006d4a <USB_EPStartXfer+0xe84>
 8006c86:	463b      	mov	r3, r7
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c8e:	d81a      	bhi.n	8006cc6 <USB_EPStartXfer+0xe00>
 8006c90:	463b      	mov	r3, r7
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <USB_EPStartXfer+0xdee>
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e041      	b.n	8006d4a <USB_EPStartXfer+0xe84>
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <USB_EPStartXfer+0xe24>
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	e021      	b.n	8006d4a <USB_EPStartXfer+0xe84>
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d11c      	bne.n	8006d4a <USB_EPStartXfer+0xe84>
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d20:	4413      	add	r3, r2
 8006d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 81a4 	beq.w	800709e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <USB_EPStartXfer+0xebc>
 8006d76:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d82:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 8187 	bne.w	800709e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d90:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 8180 	bne.w	800709e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	463b      	mov	r3, r7
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006dbc:	1d3b      	adds	r3, r7, #4
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e15c      	b.n	800709e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	78db      	ldrb	r3, [r3, #3]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	f040 8155 	bne.w	800709a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d90e      	bls.n	8006e1e <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e14:	1ad2      	subs	r2, r2, r3
 8006e16:	463b      	mov	r3, r7
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	619a      	str	r2, [r3, #24]
 8006e1c:	e008      	b.n	8006e30 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e30:	463b      	mov	r3, r7
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d16f      	bne.n	8006f1a <USB_EPStartXfer+0x1054>
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e52:	4413      	add	r3, r2
 8006e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e58:	463b      	mov	r3, r7
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00da      	lsls	r2, r3, #3
 8006e60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e64:	4413      	add	r3, r2
 8006e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d116      	bne.n	8006ea4 <USB_EPStartXfer+0xfde>
 8006e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e05f      	b.n	8006f64 <USB_EPStartXfer+0x109e>
 8006ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eaa:	d818      	bhi.n	8006ede <USB_EPStartXfer+0x1018>
 8006eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <USB_EPStartXfer+0x1006>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e042      	b.n	8006f64 <USB_EPStartXfer+0x109e>
 8006ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <USB_EPStartXfer+0x1038>
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e024      	b.n	8006f64 <USB_EPStartXfer+0x109e>
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d11f      	bne.n	8006f64 <USB_EPStartXfer+0x109e>
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f2c:	1d3b      	adds	r3, r7, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	00da      	lsls	r2, r3, #3
 8006f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4e:	4413      	add	r3, r2
 8006f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d16f      	bne.n	8007056 <USB_EPStartXfer+0x1190>
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f8e:	4413      	add	r3, r2
 8006f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	00da      	lsls	r2, r3, #3
 8006f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d116      	bne.n	8006fe0 <USB_EPStartXfer+0x111a>
 8006fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e05e      	b.n	800709e <USB_EPStartXfer+0x11d8>
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8006fe6:	d818      	bhi.n	800701a <USB_EPStartXfer+0x1154>
 8006fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <USB_EPStartXfer+0x1142>
 8006ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007002:	3301      	adds	r3, #1
 8007004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700c:	b29b      	uxth	r3, r3
 800700e:	029b      	lsls	r3, r3, #10
 8007010:	b29a      	uxth	r2, r3
 8007012:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	e041      	b.n	800709e <USB_EPStartXfer+0x11d8>
 800701a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <USB_EPStartXfer+0x1174>
 8007030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007034:	3b01      	subs	r3, #1
 8007036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800703e:	b29b      	uxth	r3, r3
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	b29b      	uxth	r3, r3
 8007044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e023      	b.n	800709e <USB_EPStartXfer+0x11d8>
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d11e      	bne.n	800709e <USB_EPStartXfer+0x11d8>
 8007060:	1d3b      	adds	r3, r7, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007070:	4413      	add	r3, r2
 8007072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	00da      	lsls	r2, r3, #3
 800707e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007082:	4413      	add	r3, r2
 8007084:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e001      	b.n	800709e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e02e      	b.n	80070fc <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80070bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80070c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	463b      	mov	r3, r7
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712e:	81bb      	strh	r3, [r7, #12]
 8007130:	89bb      	ldrh	r3, [r7, #12]
 8007132:	f083 0310 	eor.w	r3, r3, #16
 8007136:	81bb      	strh	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	441a      	add	r2, r3
 8007142:	89bb      	ldrh	r3, [r7, #12]
 8007144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]
 8007158:	e01f      	b.n	800719a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	81fb      	strh	r3, [r7, #14]
 8007172:	89fb      	ldrh	r3, [r7, #14]
 8007174:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007178:	81fb      	strh	r3, [r7, #14]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	7b1b      	ldrb	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 809d 	bne.w	80072f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d04c      	beq.n	800725e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	823b      	strh	r3, [r7, #16]
 80071d2:	8a3b      	ldrh	r3, [r7, #16]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01b      	beq.n	8007214 <USB_EPClearStall+0x6c>
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	81fb      	strh	r3, [r7, #14]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	89fb      	ldrh	r3, [r7, #14]
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	78db      	ldrb	r3, [r3, #3]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d06c      	beq.n	80072f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007232:	81bb      	strh	r3, [r7, #12]
 8007234:	89bb      	ldrh	r3, [r7, #12]
 8007236:	f083 0320 	eor.w	r3, r3, #32
 800723a:	81bb      	strh	r3, [r7, #12]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	89bb      	ldrh	r3, [r7, #12]
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
 800725c:	e04b      	b.n	80072f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	82fb      	strh	r3, [r7, #22]
 800726c:	8afb      	ldrh	r3, [r7, #22]
 800726e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01b      	beq.n	80072ae <USB_EPClearStall+0x106>
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728c:	82bb      	strh	r3, [r7, #20]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	8abb      	ldrh	r3, [r7, #20]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	827b      	strh	r3, [r7, #18]
 80072c6:	8a7b      	ldrh	r3, [r7, #18]
 80072c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072cc:	827b      	strh	r3, [r7, #18]
 80072ce:	8a7b      	ldrh	r3, [r7, #18]
 80072d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072d4:	827b      	strh	r3, [r7, #18]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	8a7b      	ldrh	r3, [r7, #18]
 80072e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2280      	movs	r2, #128	; 0x80
 800731a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007350:	b29b      	uxth	r3, r3
 8007352:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007354:	68fb      	ldr	r3, [r7, #12]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007362:	b480      	push	{r7}
 8007364:	b08d      	sub	sp, #52	; 0x34
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	4611      	mov	r1, r2
 800736e:	461a      	mov	r2, r3
 8007370:	460b      	mov	r3, r1
 8007372:	80fb      	strh	r3, [r7, #6]
 8007374:	4613      	mov	r3, r2
 8007376:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007378:	88bb      	ldrh	r3, [r7, #4]
 800737a:	3301      	adds	r3, #1
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007398:	e01b      	b.n	80073d2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	3301      	adds	r3, #1
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	3302      	adds	r3, #2
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	3301      	adds	r3, #1
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	3b01      	subs	r3, #1
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e0      	bne.n	800739a <USB_WritePMA+0x38>
  }
}
 80073d8:	bf00      	nop
 80073da:	3734      	adds	r7, #52	; 0x34
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b08b      	sub	sp, #44	; 0x2c
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4611      	mov	r1, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	460b      	mov	r3, r1
 80073f4:	80fb      	strh	r3, [r7, #6]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073fa:	88bb      	ldrh	r3, [r7, #4]
 80073fc:	085b      	lsrs	r3, r3, #1
 80073fe:	b29b      	uxth	r3, r3
 8007400:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007414:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
 800741a:	e018      	b.n	800744e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	3302      	adds	r3, #2
 8007428:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	3301      	adds	r3, #1
 8007436:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	b2da      	uxtb	r2, r3
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3301      	adds	r3, #1
 8007446:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	3b01      	subs	r3, #1
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007454:	88bb      	ldrh	r3, [r7, #4]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	b2da      	uxtb	r2, r3
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	701a      	strb	r2, [r3, #0]
  }
}
 8007470:	bf00      	nop
 8007472:	372c      	adds	r7, #44	; 0x2c
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7c1b      	ldrb	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d115      	bne.n	80074c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007498:	2202      	movs	r2, #2
 800749a:	2181      	movs	r1, #129	; 0x81
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fe2c 	bl	80090fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ac:	2202      	movs	r2, #2
 80074ae:	2101      	movs	r1, #1
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fe22 	bl	80090fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80074be:	e012      	b.n	80074e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074c0:	2340      	movs	r3, #64	; 0x40
 80074c2:	2202      	movs	r2, #2
 80074c4:	2181      	movs	r1, #129	; 0x81
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fe17 	bl	80090fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	2202      	movs	r2, #2
 80074d6:	2101      	movs	r1, #1
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fe0e 	bl	80090fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074e6:	2308      	movs	r3, #8
 80074e8:	2203      	movs	r2, #3
 80074ea:	2182      	movs	r1, #130	; 0x82
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fe04 	bl	80090fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074fc:	f001 ff26 	bl	800934c <USBD_static_malloc>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
 8007516:	e026      	b.n	8007566 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800754c:	2101      	movs	r1, #1
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fec5 	bl	80092de <USBD_LL_PrepareReceive>
 8007554:	e007      	b.n	8007566 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 febc 	bl	80092de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007580:	2181      	movs	r1, #129	; 0x81
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fddf 	bl	8009146 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800758e:	2101      	movs	r1, #1
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fdd8 	bl	8009146 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800759e:	2182      	movs	r1, #130	; 0x82
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fdd0 	bl	8009146 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fece 	bl	8009368 <USBD_static_free>
    pdev->pClassData = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007604:	2b00      	cmp	r3, #0
 8007606:	d039      	beq.n	800767c <USBD_CDC_Setup+0x9e>
 8007608:	2b20      	cmp	r3, #32
 800760a:	d17c      	bne.n	8007706 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	88db      	ldrh	r3, [r3, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d029      	beq.n	8007668 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b25b      	sxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	da11      	bge.n	8007642 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800762a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	88d2      	ldrh	r2, [r2, #6]
 8007630:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007632:	6939      	ldr	r1, [r7, #16]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	88db      	ldrh	r3, [r3, #6]
 8007638:	461a      	mov	r2, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f9d4 	bl	80089e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007640:	e068      	b.n	8007714 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	785a      	ldrb	r2, [r3, #1]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007658:	6939      	ldr	r1, [r7, #16]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	88db      	ldrh	r3, [r3, #6]
 800765e:	461a      	mov	r2, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f9ef 	bl	8008a44 <USBD_CtlPrepareRx>
      break;
 8007666:	e055      	b.n	8007714 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	7850      	ldrb	r0, [r2, #1]
 8007674:	2200      	movs	r2, #0
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	4798      	blx	r3
      break;
 800767a:	e04b      	b.n	8007714 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b0a      	cmp	r3, #10
 8007682:	d017      	beq.n	80076b4 <USBD_CDC_Setup+0xd6>
 8007684:	2b0b      	cmp	r3, #11
 8007686:	d029      	beq.n	80076dc <USBD_CDC_Setup+0xfe>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d133      	bne.n	80076f4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007692:	2b03      	cmp	r3, #3
 8007694:	d107      	bne.n	80076a6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	2202      	movs	r2, #2
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f9a2 	bl	80089e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076a4:	e02e      	b.n	8007704 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f932 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	75fb      	strb	r3, [r7, #23]
          break;
 80076b2:	e027      	b.n	8007704 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d107      	bne.n	80076ce <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076be:	f107 030f 	add.w	r3, r7, #15
 80076c2:	2201      	movs	r2, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f98e 	bl	80089e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076cc:	e01a      	b.n	8007704 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f91e 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 80076d6:	2302      	movs	r3, #2
 80076d8:	75fb      	strb	r3, [r7, #23]
          break;
 80076da:	e013      	b.n	8007704 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d00d      	beq.n	8007702 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f912 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ee:	2302      	movs	r3, #2
 80076f0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076f2:	e006      	b.n	8007702 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 f90b 	bl	8008912 <USBD_CtlError>
          ret = USBD_FAIL;
 80076fc:	2302      	movs	r3, #2
 80076fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007700:	e000      	b.n	8007704 <USBD_CDC_Setup+0x126>
          break;
 8007702:	bf00      	nop
      }
      break;
 8007704:	e006      	b.n	8007714 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f902 	bl	8008912 <USBD_CtlError>
      ret = USBD_FAIL;
 800770e:	2302      	movs	r3, #2
 8007710:	75fb      	strb	r3, [r7, #23]
      break;
 8007712:	bf00      	nop
  }

  return ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007738:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d03a      	beq.n	80077ba <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	331c      	adds	r3, #28
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d029      	beq.n	80077ae <USBD_CDC_DataIn+0x90>
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	331c      	adds	r3, #28
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	78f9      	ldrb	r1, [r7, #3]
 800776e:	68b8      	ldr	r0, [r7, #8]
 8007770:	460b      	mov	r3, r1
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4403      	add	r3, r0
 800777a:	3338      	adds	r3, #56	; 0x38
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007782:	fb03 f301 	mul.w	r3, r3, r1
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d110      	bne.n	80077ae <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	331c      	adds	r3, #28
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077a0:	78f9      	ldrb	r1, [r7, #3]
 80077a2:	2300      	movs	r3, #0
 80077a4:	2200      	movs	r2, #0
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 fd76 	bl	8009298 <USBD_LL_Transmit>
 80077ac:	e003      	b.n	80077b6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fda1 	bl	8009324 <USBD_LL_GetRxDataSize>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007808:	4611      	mov	r1, r2
 800780a:	4798      	blx	r3

    return USBD_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007830:	2b00      	cmp	r3, #0
 8007832:	d015      	beq.n	8007860 <USBD_CDC_EP0_RxReady+0x46>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800783a:	2bff      	cmp	r3, #255	; 0xff
 800783c:	d010      	beq.n	8007860 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800784c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007854:	b292      	uxth	r2, r2
 8007856:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	22ff      	movs	r2, #255	; 0xff
 800785c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2243      	movs	r2, #67	; 0x43
 8007878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	20000094 	.word	0x20000094

0800788c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2243      	movs	r2, #67	; 0x43
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000050 	.word	0x20000050

080078ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2243      	movs	r2, #67	; 0x43
 80078b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078ba:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	200000d8 	.word	0x200000d8

080078cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220a      	movs	r2, #10
 80078d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80078da:	4b03      	ldr	r3, [pc, #12]	; (80078e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	2000000c 	.word	0x2000000c

080078ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	4613      	mov	r3, r2
 8007926:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d017      	beq.n	80079c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7c1b      	ldrb	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800799e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a2:	2101      	movs	r1, #1
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fc9a 	bl	80092de <USBD_LL_PrepareReceive>
 80079aa:	e007      	b.n	80079bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	2101      	movs	r1, #1
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fc91 	bl	80092de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80079c0:	2302      	movs	r3, #2
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079de:	2302      	movs	r3, #2
 80079e0:	e01a      	b.n	8007a18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	79fa      	ldrb	r2, [r7, #7]
 8007a0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f001 fafb 	bl	800900c <USBD_LL_Init>

  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	e001      	b.n	8007a46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a42:	2302      	movs	r3, #2
 8007a44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fb31 	bl	80090c4 <USBD_LL_Start>

  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fecd 	bl	8008898 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d00c      	beq.n	8007b3c <USBD_LL_SetupStage+0x56>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d302      	bcc.n	8007b2c <USBD_LL_SetupStage+0x46>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d010      	beq.n	8007b4c <USBD_LL_SetupStage+0x66>
 8007b2a:	e017      	b.n	8007b5c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9cd 	bl	8007ed4 <USBD_StdDevReq>
      break;
 8007b3a:	e01a      	b.n	8007b72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fa2f 	bl	8007fa8 <USBD_StdItfReq>
      break;
 8007b4a:	e012      	b.n	8007b72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa6d 	bl	8008034 <USBD_StdEPReq>
      break;
 8007b5a:	e00a      	b.n	8007b72 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fb0a 	bl	8009184 <USBD_LL_StallEP>
      break;
 8007b70:	bf00      	nop
  }

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	460b      	mov	r3, r1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d14b      	bne.n	8007c28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d134      	bne.n	8007c0c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d919      	bls.n	8007be2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d203      	bcs.n	8007bd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	e002      	b.n	8007bd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 ff50 	bl	8008a80 <USBD_CtlContinueRx>
 8007be0:	e038      	b.n	8007c54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d105      	bne.n	8007c04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 ff4d 	bl	8008aa4 <USBD_CtlSendStatus>
 8007c0a:	e023      	b.n	8007c54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d11e      	bne.n	8007c54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f001 faaf 	bl	8009184 <USBD_LL_StallEP>
 8007c26:	e015      	b.n	8007c54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00d      	beq.n	8007c50 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d108      	bne.n	8007c50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	7afa      	ldrb	r2, [r7, #11]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	4798      	blx	r3
 8007c4e:	e001      	b.n	8007c54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	e000      	b.n	8007c56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	460b      	mov	r3, r1
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d17f      	bne.n	8007d72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3314      	adds	r3, #20
 8007c76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d15c      	bne.n	8007d3c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d915      	bls.n	8007cba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 feba 	bl	8008a20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 fb13 	bl	80092de <USBD_LL_PrepareReceive>
 8007cb8:	e04e      	b.n	8007d58 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	6912      	ldr	r2, [r2, #16]
 8007cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cc6:	fb02 f201 	mul.w	r2, r2, r1
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11c      	bne.n	8007d0a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d316      	bcc.n	8007d0a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d20f      	bcs.n	8007d0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fe96 	bl	8008a20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f001 faeb 	bl	80092de <USBD_LL_PrepareReceive>
 8007d08:	e026      	b.n	8007d58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d105      	bne.n	8007d2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d2c:	2180      	movs	r1, #128	; 0x80
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f001 fa28 	bl	8009184 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fec8 	bl	8008aca <USBD_CtlReceiveStatus>
 8007d3a:	e00d      	b.n	8007d58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d004      	beq.n	8007d50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f001 fa16 	bl	8009184 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d11d      	bne.n	8007d9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fe82 	bl	8007a6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d70:	e015      	b.n	8007d9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d108      	bne.n	8007d9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	7afa      	ldrb	r2, [r7, #11]
 8007d92:	4611      	mov	r1, r2
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	4798      	blx	r3
 8007d98:	e001      	b.n	8007d9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e000      	b.n	8007da0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007db0:	2340      	movs	r3, #64	; 0x40
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 f99f 	bl	80090fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2240      	movs	r2, #64	; 0x40
 8007dc8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dcc:	2340      	movs	r3, #64	; 0x40
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f991 	bl	80090fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2240      	movs	r2, #64	; 0x40
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6852      	ldr	r2, [r2, #4]
 8007e18:	b2d2      	uxtb	r2, r2
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
  }

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2204      	movs	r2, #4
 8007e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d105      	bne.n	8007e92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d10b      	bne.n	8007eca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d004      	beq.n	8007ef8 <USBD_StdDevReq+0x24>
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d002      	beq.n	8007ef8 <USBD_StdDevReq+0x24>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <USBD_StdDevReq+0x34>
 8007ef6:	e04c      	b.n	8007f92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
      break;
 8007f06:	e049      	b.n	8007f9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	d83a      	bhi.n	8007f86 <USBD_StdDevReq+0xb2>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <USBD_StdDevReq+0x44>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f69 	.word	0x08007f69
 8007f1c:	08007f7d 	.word	0x08007f7d
 8007f20:	08007f87 	.word	0x08007f87
 8007f24:	08007f73 	.word	0x08007f73
 8007f28:	08007f87 	.word	0x08007f87
 8007f2c:	08007f4b 	.word	0x08007f4b
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f87 	.word	0x08007f87
 8007f38:	08007f5f 	.word	0x08007f5f
 8007f3c:	08007f55 	.word	0x08007f55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f9d4 	bl	80082f0 <USBD_GetDescriptor>
          break;
 8007f48:	e022      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fb37 	bl	80085c0 <USBD_SetAddress>
          break;
 8007f52:	e01d      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fb74 	bl	8008644 <USBD_SetConfig>
          break;
 8007f5c:	e018      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbfd 	bl	8008760 <USBD_GetConfig>
          break;
 8007f66:	e013      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fc2c 	bl	80087c8 <USBD_GetStatus>
          break;
 8007f70:	e00e      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc5a 	bl	800882e <USBD_SetFeature>
          break;
 8007f7a:	e009      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fc69 	bl	8008856 <USBD_ClrFeature>
          break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fcc2 	bl	8008912 <USBD_CtlError>
          break;
 8007f8e:	bf00      	nop
      }
      break;
 8007f90:	e004      	b.n	8007f9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fcbc 	bl	8008912 <USBD_CtlError>
      break;
 8007f9a:	bf00      	nop
  }

  return ret;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop

08007fa8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d003      	beq.n	8007fca <USBD_StdItfReq+0x22>
 8007fc2:	2b40      	cmp	r3, #64	; 0x40
 8007fc4:	d001      	beq.n	8007fca <USBD_StdItfReq+0x22>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d12a      	bne.n	8008020 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d81d      	bhi.n	8008012 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	889b      	ldrh	r3, [r3, #4]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d813      	bhi.n	8008008 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d110      	bne.n	800801c <USBD_StdItfReq+0x74>
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10d      	bne.n	800801c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fd4f 	bl	8008aa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008006:	e009      	b.n	800801c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fc81 	bl	8008912 <USBD_CtlError>
          break;
 8008010:	e004      	b.n	800801c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fc7c 	bl	8008912 <USBD_CtlError>
          break;
 800801a:	e000      	b.n	800801e <USBD_StdItfReq+0x76>
          break;
 800801c:	bf00      	nop
      }
      break;
 800801e:	e004      	b.n	800802a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fc75 	bl	8008912 <USBD_CtlError>
      break;
 8008028:	bf00      	nop
  }

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	889b      	ldrh	r3, [r3, #4]
 8008046:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008050:	2b20      	cmp	r3, #32
 8008052:	d004      	beq.n	800805e <USBD_StdEPReq+0x2a>
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d002      	beq.n	800805e <USBD_StdEPReq+0x2a>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <USBD_StdEPReq+0x3a>
 800805c:	e13d      	b.n	80082da <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
      break;
 800806c:	e13a      	b.n	80082e4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008076:	2b20      	cmp	r3, #32
 8008078:	d10a      	bne.n	8008090 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	e12a      	b.n	80082e6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d03e      	beq.n	8008116 <USBD_StdEPReq+0xe2>
 8008098:	2b03      	cmp	r3, #3
 800809a:	d002      	beq.n	80080a2 <USBD_StdEPReq+0x6e>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d070      	beq.n	8008182 <USBD_StdEPReq+0x14e>
 80080a0:	e115      	b.n	80082ce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <USBD_StdEPReq+0x7e>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d015      	beq.n	80080dc <USBD_StdEPReq+0xa8>
 80080b0:	e02b      	b.n	800810a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <USBD_StdEPReq+0x9e>
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b80      	cmp	r3, #128	; 0x80
 80080bc:	d009      	beq.n	80080d2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f85e 	bl	8009184 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f85a 	bl	8009184 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080d0:	e020      	b.n	8008114 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc1c 	bl	8008912 <USBD_CtlError>
              break;
 80080da:	e01b      	b.n	8008114 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10e      	bne.n	8008102 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00b      	beq.n	8008102 <USBD_StdEPReq+0xce>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b80      	cmp	r3, #128	; 0x80
 80080ee:	d008      	beq.n	8008102 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	88db      	ldrh	r3, [r3, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f841 	bl	8009184 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fcce 	bl	8008aa4 <USBD_CtlSendStatus>

              break;
 8008108:	e004      	b.n	8008114 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc00 	bl	8008912 <USBD_CtlError>
              break;
 8008112:	bf00      	nop
          }
          break;
 8008114:	e0e0      	b.n	80082d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811c:	2b02      	cmp	r3, #2
 800811e:	d002      	beq.n	8008126 <USBD_StdEPReq+0xf2>
 8008120:	2b03      	cmp	r3, #3
 8008122:	d015      	beq.n	8008150 <USBD_StdEPReq+0x11c>
 8008124:	e026      	b.n	8008174 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00c      	beq.n	8008146 <USBD_StdEPReq+0x112>
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b80      	cmp	r3, #128	; 0x80
 8008130:	d009      	beq.n	8008146 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 f824 	bl	8009184 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800813c:	2180      	movs	r1, #128	; 0x80
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f820 	bl	8009184 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008144:	e01c      	b.n	8008180 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fbe2 	bl	8008912 <USBD_CtlError>
              break;
 800814e:	e017      	b.n	8008180 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d112      	bne.n	800817e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f82b 	bl	80091c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc99 	bl	8008aa4 <USBD_CtlSendStatus>
              }
              break;
 8008172:	e004      	b.n	800817e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbcb 	bl	8008912 <USBD_CtlError>
              break;
 800817c:	e000      	b.n	8008180 <USBD_StdEPReq+0x14c>
              break;
 800817e:	bf00      	nop
          }
          break;
 8008180:	e0aa      	b.n	80082d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	2b02      	cmp	r3, #2
 800818a:	d002      	beq.n	8008192 <USBD_StdEPReq+0x15e>
 800818c:	2b03      	cmp	r3, #3
 800818e:	d032      	beq.n	80081f6 <USBD_StdEPReq+0x1c2>
 8008190:	e097      	b.n	80082c2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <USBD_StdEPReq+0x174>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b80      	cmp	r3, #128	; 0x80
 800819c:	d004      	beq.n	80081a8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fbb6 	bl	8008912 <USBD_CtlError>
                break;
 80081a6:	e091      	b.n	80082cc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da0b      	bge.n	80081c8 <USBD_StdEPReq+0x194>
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	3310      	adds	r3, #16
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	e00b      	b.n	80081e0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	3304      	adds	r3, #4
 80081e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2202      	movs	r2, #2
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fbfa 	bl	80089e8 <USBD_CtlSendData>
              break;
 80081f4:	e06a      	b.n	80082cc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da11      	bge.n	8008222 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3318      	adds	r3, #24
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d117      	bne.n	8008248 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb79 	bl	8008912 <USBD_CtlError>
                  break;
 8008220:	e054      	b.n	80082cc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fb66 	bl	8008912 <USBD_CtlError>
                  break;
 8008246:	e041      	b.n	80082cc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	da0b      	bge.n	8008268 <USBD_StdEPReq+0x234>
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	3310      	adds	r3, #16
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	3304      	adds	r3, #4
 8008266:	e00b      	b.n	8008280 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	3304      	adds	r3, #4
 8008280:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <USBD_StdEPReq+0x25a>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d103      	bne.n	8008296 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e00e      	b.n	80082b4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 ffb0 	bl	8009200 <USBD_LL_IsStallEP>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e002      	b.n	80082b4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2202      	movs	r2, #2
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb94 	bl	80089e8 <USBD_CtlSendData>
              break;
 80082c0:	e004      	b.n	80082cc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fb24 	bl	8008912 <USBD_CtlError>
              break;
 80082ca:	bf00      	nop
          }
          break;
 80082cc:	e004      	b.n	80082d8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fb1e 	bl	8008912 <USBD_CtlError>
          break;
 80082d6:	bf00      	nop
      }
      break;
 80082d8:	e004      	b.n	80082e4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb18 	bl	8008912 <USBD_CtlError>
      break;
 80082e2:	bf00      	nop
  }

  return ret;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	0a1b      	lsrs	r3, r3, #8
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	2b06      	cmp	r3, #6
 8008312:	f200 8128 	bhi.w	8008566 <USBD_GetDescriptor+0x276>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <USBD_GetDescriptor+0x2c>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008339 	.word	0x08008339
 8008320:	08008351 	.word	0x08008351
 8008324:	08008391 	.word	0x08008391
 8008328:	08008567 	.word	0x08008567
 800832c:	08008567 	.word	0x08008567
 8008330:	08008507 	.word	0x08008507
 8008334:	08008533 	.word	0x08008533
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      break;
 800834e:	e112      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7c1b      	ldrb	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10d      	bne.n	8008374 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f107 0208 	add.w	r2, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008372:	e100      	b.n	8008576 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	f107 0208 	add.w	r2, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	2202      	movs	r2, #2
 800838c:	701a      	strb	r2, [r3, #0]
      break;
 800838e:	e0f2      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b05      	cmp	r3, #5
 8008398:	f200 80ac 	bhi.w	80084f4 <USBD_GetDescriptor+0x204>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <USBD_GetDescriptor+0xb4>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083f1 	.word	0x080083f1
 80083ac:	08008425 	.word	0x08008425
 80083b0:	08008459 	.word	0x08008459
 80083b4:	0800848d 	.word	0x0800848d
 80083b8:	080084c1 	.word	0x080084c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7c12      	ldrb	r2, [r2, #16]
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083de:	e091      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa95 	bl	8008912 <USBD_CtlError>
            err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
          break;
 80083ee:	e089      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	7c12      	ldrb	r2, [r2, #16]
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008412:	e077      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa7b 	bl	8008912 <USBD_CtlError>
            err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
          break;
 8008422:	e06f      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008446:	e05d      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa61 	bl	8008912 <USBD_CtlError>
            err++;
 8008450:	7afb      	ldrb	r3, [r7, #11]
 8008452:	3301      	adds	r3, #1
 8008454:	72fb      	strb	r3, [r7, #11]
          break;
 8008456:	e055      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	7c12      	ldrb	r2, [r2, #16]
 8008470:	f107 0108 	add.w	r1, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847a:	e043      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa47 	bl	8008912 <USBD_CtlError>
            err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
          break;
 800848a:	e03b      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	7c12      	ldrb	r2, [r2, #16]
 80084a4:	f107 0108 	add.w	r1, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ae:	e029      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa2d 	bl	8008912 <USBD_CtlError>
            err++;
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	3301      	adds	r3, #1
 80084bc:	72fb      	strb	r3, [r7, #11]
          break;
 80084be:	e021      	b.n	8008504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e2:	e00f      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa13 	bl	8008912 <USBD_CtlError>
            err++;
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	3301      	adds	r3, #1
 80084f0:	72fb      	strb	r3, [r7, #11]
          break;
 80084f2:	e007      	b.n	8008504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa0b 	bl	8008912 <USBD_CtlError>
          err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008502:	e038      	b.n	8008576 <USBD_GetDescriptor+0x286>
 8008504:	e037      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7c1b      	ldrb	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008516:	f107 0208 	add.w	r2, r7, #8
 800851a:	4610      	mov	r0, r2
 800851c:	4798      	blx	r3
 800851e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008520:	e029      	b.n	8008576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9f4 	bl	8008912 <USBD_CtlError>
        err++;
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	3301      	adds	r3, #1
 800852e:	72fb      	strb	r3, [r7, #11]
      break;
 8008530:	e021      	b.n	8008576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7c1b      	ldrb	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f107 0208 	add.w	r2, r7, #8
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
 800854a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3301      	adds	r3, #1
 8008550:	2207      	movs	r2, #7
 8008552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008554:	e00f      	b.n	8008576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9da 	bl	8008912 <USBD_CtlError>
        err++;
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	3301      	adds	r3, #1
 8008562:	72fb      	strb	r3, [r7, #11]
      break;
 8008564:	e007      	b.n	8008576 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9d2 	bl	8008912 <USBD_CtlError>
      err++;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	3301      	adds	r3, #1
 8008572:	72fb      	strb	r3, [r7, #11]
      break;
 8008574:	bf00      	nop
  }

  if (err != 0U)
 8008576:	7afb      	ldrb	r3, [r7, #11]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11c      	bne.n	80085b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800857c:	893b      	ldrh	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <USBD_GetDescriptor+0x2b6>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	88db      	ldrh	r3, [r3, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	88da      	ldrh	r2, [r3, #6]
 800858e:	893b      	ldrh	r3, [r7, #8]
 8008590:	4293      	cmp	r3, r2
 8008592:	bf28      	it	cs
 8008594:	4613      	movcs	r3, r2
 8008596:	b29b      	uxth	r3, r3
 8008598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800859a:	893b      	ldrh	r3, [r7, #8]
 800859c:	461a      	mov	r2, r3
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa21 	bl	80089e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa78 	bl	8008aa4 <USBD_CtlSendStatus>
 80085b4:	e000      	b.n	80085b8 <USBD_GetDescriptor+0x2c8>
    return;
 80085b6:	bf00      	nop
    }
  }
}
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d130      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d12c      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	2b7f      	cmp	r3, #127	; 0x7f
 80085e0:	d828      	bhi.n	8008634 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d104      	bne.n	8008602 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f989 	bl	8008912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008600:	e01c      	b.n	800863c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7bfa      	ldrb	r2, [r7, #15]
 8008606:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fe23 	bl	800925a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa45 	bl	8008aa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008628:	e008      	b.n	800863c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008632:	e003      	b.n	800863c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f96b 	bl	8008912 <USBD_CtlError>
  }
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	b2da      	uxtb	r2, r3
 8008654:	4b41      	ldr	r3, [pc, #260]	; (800875c <USBD_SetConfig+0x118>)
 8008656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <USBD_SetConfig+0x118>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d904      	bls.n	800866a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f955 	bl	8008912 <USBD_CtlError>
 8008668:	e075      	b.n	8008756 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008670:	2b02      	cmp	r3, #2
 8008672:	d002      	beq.n	800867a <USBD_SetConfig+0x36>
 8008674:	2b03      	cmp	r3, #3
 8008676:	d023      	beq.n	80086c0 <USBD_SetConfig+0x7c>
 8008678:	e062      	b.n	8008740 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800867a:	4b38      	ldr	r3, [pc, #224]	; (800875c <USBD_SetConfig+0x118>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01a      	beq.n	80086b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008682:	4b36      	ldr	r3, [pc, #216]	; (800875c <USBD_SetConfig+0x118>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2203      	movs	r2, #3
 8008690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008694:	4b31      	ldr	r3, [pc, #196]	; (800875c <USBD_SetConfig+0x118>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f9f1 	bl	8007a82 <USBD_SetClassConfig>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d104      	bne.n	80086b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f932 	bl	8008912 <USBD_CtlError>
            return;
 80086ae:	e052      	b.n	8008756 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9f7 	bl	8008aa4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086b6:	e04e      	b.n	8008756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f9f3 	bl	8008aa4 <USBD_CtlSendStatus>
        break;
 80086be:	e04a      	b.n	8008756 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80086c0:	4b26      	ldr	r3, [pc, #152]	; (800875c <USBD_SetConfig+0x118>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d112      	bne.n	80086ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086d0:	4b22      	ldr	r3, [pc, #136]	; (800875c <USBD_SetConfig+0x118>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086da:	4b20      	ldr	r3, [pc, #128]	; (800875c <USBD_SetConfig+0x118>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f9ed 	bl	8007ac0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9dc 	bl	8008aa4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086ec:	e033      	b.n	8008756 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086ee:	4b1b      	ldr	r3, [pc, #108]	; (800875c <USBD_SetConfig+0x118>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d01d      	beq.n	8008738 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff f9db 	bl	8007ac0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800870a:	4b14      	ldr	r3, [pc, #80]	; (800875c <USBD_SetConfig+0x118>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008714:	4b11      	ldr	r3, [pc, #68]	; (800875c <USBD_SetConfig+0x118>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff f9b1 	bl	8007a82 <USBD_SetClassConfig>
 8008720:	4603      	mov	r3, r0
 8008722:	2b02      	cmp	r3, #2
 8008724:	d104      	bne.n	8008730 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f8f2 	bl	8008912 <USBD_CtlError>
            return;
 800872e:	e012      	b.n	8008756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9b7 	bl	8008aa4 <USBD_CtlSendStatus>
        break;
 8008736:	e00e      	b.n	8008756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f9b3 	bl	8008aa4 <USBD_CtlSendStatus>
        break;
 800873e:	e00a      	b.n	8008756 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f8e5 	bl	8008912 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <USBD_SetConfig+0x118>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff f9b6 	bl	8007ac0 <USBD_ClrClassConfig>
        break;
 8008754:	bf00      	nop
    }
  }
}
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000208 	.word	0x20000208

08008760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d004      	beq.n	800877c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8cc 	bl	8008912 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800877a:	e021      	b.n	80087c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	2b01      	cmp	r3, #1
 8008784:	db17      	blt.n	80087b6 <USBD_GetConfig+0x56>
 8008786:	2b02      	cmp	r3, #2
 8008788:	dd02      	ble.n	8008790 <USBD_GetConfig+0x30>
 800878a:	2b03      	cmp	r3, #3
 800878c:	d00b      	beq.n	80087a6 <USBD_GetConfig+0x46>
 800878e:	e012      	b.n	80087b6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3308      	adds	r3, #8
 800879a:	2201      	movs	r2, #1
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f922 	bl	80089e8 <USBD_CtlSendData>
        break;
 80087a4:	e00c      	b.n	80087c0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	3304      	adds	r3, #4
 80087aa:	2201      	movs	r2, #1
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f91a 	bl	80089e8 <USBD_CtlSendData>
        break;
 80087b4:	e004      	b.n	80087c0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f8aa 	bl	8008912 <USBD_CtlError>
        break;
 80087be:	bf00      	nop
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	3b01      	subs	r3, #1
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d81e      	bhi.n	800881c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d004      	beq.n	80087f0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f892 	bl	8008912 <USBD_CtlError>
        break;
 80087ee:	e01a      	b.n	8008826 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f043 0202 	orr.w	r2, r3, #2
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	330c      	adds	r3, #12
 8008810:	2202      	movs	r2, #2
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f8e7 	bl	80089e8 <USBD_CtlSendData>
      break;
 800881a:	e004      	b.n	8008826 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f877 	bl	8008912 <USBD_CtlError>
      break;
 8008824:	bf00      	nop
  }
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	885b      	ldrh	r3, [r3, #2]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d106      	bne.n	800884e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f92b 	bl	8008aa4 <USBD_CtlSendStatus>
  }
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008866:	3b01      	subs	r3, #1
 8008868:	2b02      	cmp	r3, #2
 800886a:	d80b      	bhi.n	8008884 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d10c      	bne.n	800888e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f911 	bl	8008aa4 <USBD_CtlSendStatus>
      }
      break;
 8008882:	e004      	b.n	800888e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f843 	bl	8008912 <USBD_CtlError>
      break;
 800888c:	e000      	b.n	8008890 <USBD_ClrFeature+0x3a>
      break;
 800888e:	bf00      	nop
  }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	785a      	ldrb	r2, [r3, #1]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	3302      	adds	r3, #2
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	3303      	adds	r3, #3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	3304      	adds	r3, #4
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	3305      	adds	r3, #5
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	3306      	adds	r3, #6
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	3307      	adds	r3, #7
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4413      	add	r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	80da      	strh	r2, [r3, #6]

}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800891c:	2180      	movs	r1, #128	; 0x80
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fc30 	bl	8009184 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008924:	2100      	movs	r1, #0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fc2c 	bl	8009184 <USBD_LL_StallEP>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d032      	beq.n	80089b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f834 	bl	80089b8 <USBD_GetLen>
 8008950:	4603      	mov	r3, r0
 8008952:	3301      	adds	r3, #1
 8008954:	b29b      	uxth	r3, r3
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	75fa      	strb	r2, [r7, #23]
 8008964:	461a      	mov	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4413      	add	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	7812      	ldrb	r2, [r2, #0]
 800896e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	75fa      	strb	r2, [r7, #23]
 8008976:	461a      	mov	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4413      	add	r3, r2
 800897c:	2203      	movs	r2, #3
 800897e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008980:	e012      	b.n	80089a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	60fa      	str	r2, [r7, #12]
 8008988:	7dfa      	ldrb	r2, [r7, #23]
 800898a:	1c51      	adds	r1, r2, #1
 800898c:	75f9      	strb	r1, [r7, #23]
 800898e:	4611      	mov	r1, r2
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	440a      	add	r2, r1
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	75fa      	strb	r2, [r7, #23]
 800899e:	461a      	mov	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4413      	add	r3, r2
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e8      	bne.n	8008982 <USBD_GetString+0x4e>
    }
  }
}
 80089b0:	bf00      	nop
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80089c4:	e005      	b.n	80089d2 <USBD_GetLen+0x1a>
  {
    len++;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	3301      	adds	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3301      	adds	r3, #1
 80089d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f5      	bne.n	80089c6 <USBD_GetLen+0xe>
  }

  return len;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a04:	88fa      	ldrh	r2, [r7, #6]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fc41 	bl	8009298 <USBD_LL_Transmit>

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	2100      	movs	r1, #0
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fc2f 	bl	8009298 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2203      	movs	r2, #3
 8008a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a5a:	88fa      	ldrh	r2, [r7, #6]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fc34 	bl	80092de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fc22 	bl	80092de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2204      	movs	r2, #4
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fbec 	bl	8009298 <USBD_LL_Transmit>

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2205      	movs	r2, #5
 8008ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ada:	2300      	movs	r3, #0
 8008adc:	2200      	movs	r2, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fbfc 	bl	80092de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008af4:	2200      	movs	r2, #0
 8008af6:	4912      	ldr	r1, [pc, #72]	; (8008b40 <MX_USB_DEVICE_Init+0x50>)
 8008af8:	4812      	ldr	r0, [pc, #72]	; (8008b44 <MX_USB_DEVICE_Init+0x54>)
 8008afa:	f7fe ff66 	bl	80079ca <USBD_Init>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b04:	f7f7 ffc8 	bl	8000a98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b08:	490f      	ldr	r1, [pc, #60]	; (8008b48 <MX_USB_DEVICE_Init+0x58>)
 8008b0a:	480e      	ldr	r0, [pc, #56]	; (8008b44 <MX_USB_DEVICE_Init+0x54>)
 8008b0c:	f7fe ff88 	bl	8007a20 <USBD_RegisterClass>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b16:	f7f7 ffbf 	bl	8000a98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b1a:	490c      	ldr	r1, [pc, #48]	; (8008b4c <MX_USB_DEVICE_Init+0x5c>)
 8008b1c:	4809      	ldr	r0, [pc, #36]	; (8008b44 <MX_USB_DEVICE_Init+0x54>)
 8008b1e:	f7fe fee5 	bl	80078ec <USBD_CDC_RegisterInterface>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b28:	f7f7 ffb6 	bl	8000a98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b2c:	4805      	ldr	r0, [pc, #20]	; (8008b44 <MX_USB_DEVICE_Init+0x54>)
 8008b2e:	f7fe ff91 	bl	8007a54 <USBD_Start>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b38:	f7f7 ffae 	bl	8000a98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b3c:	bf00      	nop
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	2000012c 	.word	0x2000012c
 8008b44:	200008f0 	.word	0x200008f0
 8008b48:	20000018 	.word	0x20000018
 8008b4c:	2000011c 	.word	0x2000011c

08008b50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b54:	2200      	movs	r2, #0
 8008b56:	4905      	ldr	r1, [pc, #20]	; (8008b6c <CDC_Init_FS+0x1c>)
 8008b58:	4805      	ldr	r0, [pc, #20]	; (8008b70 <CDC_Init_FS+0x20>)
 8008b5a:	f7fe fede 	bl	800791a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b5e:	4905      	ldr	r1, [pc, #20]	; (8008b74 <CDC_Init_FS+0x24>)
 8008b60:	4803      	ldr	r0, [pc, #12]	; (8008b70 <CDC_Init_FS+0x20>)
 8008b62:	f7fe fef4 	bl	800794e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000f9c 	.word	0x20000f9c
 8008b70:	200008f0 	.word	0x200008f0
 8008b74:	20000bb4 	.word	0x20000bb4

08008b78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	6039      	str	r1, [r7, #0]
 8008b92:	71fb      	strb	r3, [r7, #7]
 8008b94:	4613      	mov	r3, r2
 8008b96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b23      	cmp	r3, #35	; 0x23
 8008b9c:	d84a      	bhi.n	8008c34 <CDC_Control_FS+0xac>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <CDC_Control_FS+0x1c>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008c35 	.word	0x08008c35
 8008ba8:	08008c35 	.word	0x08008c35
 8008bac:	08008c35 	.word	0x08008c35
 8008bb0:	08008c35 	.word	0x08008c35
 8008bb4:	08008c35 	.word	0x08008c35
 8008bb8:	08008c35 	.word	0x08008c35
 8008bbc:	08008c35 	.word	0x08008c35
 8008bc0:	08008c35 	.word	0x08008c35
 8008bc4:	08008c35 	.word	0x08008c35
 8008bc8:	08008c35 	.word	0x08008c35
 8008bcc:	08008c35 	.word	0x08008c35
 8008bd0:	08008c35 	.word	0x08008c35
 8008bd4:	08008c35 	.word	0x08008c35
 8008bd8:	08008c35 	.word	0x08008c35
 8008bdc:	08008c35 	.word	0x08008c35
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008c35 	.word	0x08008c35
 8008be8:	08008c35 	.word	0x08008c35
 8008bec:	08008c35 	.word	0x08008c35
 8008bf0:	08008c35 	.word	0x08008c35
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
 8008bfc:	08008c35 	.word	0x08008c35
 8008c00:	08008c35 	.word	0x08008c35
 8008c04:	08008c35 	.word	0x08008c35
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c35 	.word	0x08008c35
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c35 	.word	0x08008c35
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c35 	.word	0x08008c35
 8008c2c:	08008c35 	.word	0x08008c35
 8008c30:	08008c35 	.word	0x08008c35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c34:	bf00      	nop
  }

  return (USBD_OK);
 8008c36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4805      	ldr	r0, [pc, #20]	; (8008c68 <CDC_Receive_FS+0x24>)
 8008c52:	f7fe fe7c 	bl	800794e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c56:	4804      	ldr	r0, [pc, #16]	; (8008c68 <CDC_Receive_FS+0x24>)
 8008c58:	f7fe fe8d 	bl	8007976 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	200008f0 	.word	0x200008f0

08008c6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2212      	movs	r2, #18
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	20000148 	.word	0x20000148

08008c90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2000015c 	.word	0x2000015c

08008cb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4907      	ldr	r1, [pc, #28]	; (8008ce8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cca:	4808      	ldr	r0, [pc, #32]	; (8008cec <USBD_FS_ProductStrDescriptor+0x38>)
 8008ccc:	f7ff fe32 	bl	8008934 <USBD_GetString>
 8008cd0:	e004      	b.n	8008cdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cd6:	4805      	ldr	r0, [pc, #20]	; (8008cec <USBD_FS_ProductStrDescriptor+0x38>)
 8008cd8:	f7ff fe2c 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001384 	.word	0x20001384
 8008cec:	08009ca4 	.word	0x08009ca4

08008cf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	4904      	ldr	r1, [pc, #16]	; (8008d10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d00:	4804      	ldr	r0, [pc, #16]	; (8008d14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d02:	f7ff fe17 	bl	8008934 <USBD_GetString>
  return USBD_StrDesc;
 8008d06:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20001384 	.word	0x20001384
 8008d14:	08009cbc 	.word	0x08009cbc

08008d18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	221a      	movs	r2, #26
 8008d28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d2a:	f000 f843 	bl	8008db4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d2e:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000160 	.word	0x20000160

08008d3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4907      	ldr	r1, [pc, #28]	; (8008d70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d52:	4808      	ldr	r0, [pc, #32]	; (8008d74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d54:	f7ff fdee 	bl	8008934 <USBD_GetString>
 8008d58:	e004      	b.n	8008d64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4904      	ldr	r1, [pc, #16]	; (8008d70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d60:	f7ff fde8 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20001384 	.word	0x20001384
 8008d74:	08009cd0 	.word	0x08009cd0

08008d78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d90:	f7ff fdd0 	bl	8008934 <USBD_GetString>
 8008d94:	e004      	b.n	8008da0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4904      	ldr	r1, [pc, #16]	; (8008dac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d9c:	f7ff fdca 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20001384 	.word	0x20001384
 8008db0:	08009cdc 	.word	0x08009cdc

08008db4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <Get_SerialNum+0x44>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <Get_SerialNum+0x48>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <Get_SerialNum+0x4c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dda:	2208      	movs	r2, #8
 8008ddc:	4909      	ldr	r1, [pc, #36]	; (8008e04 <Get_SerialNum+0x50>)
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f814 	bl	8008e0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008de4:	2204      	movs	r2, #4
 8008de6:	4908      	ldr	r1, [pc, #32]	; (8008e08 <Get_SerialNum+0x54>)
 8008de8:	68b8      	ldr	r0, [r7, #8]
 8008dea:	f000 f80f 	bl	8008e0c <IntToUnicode>
  }
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	1ffff7ac 	.word	0x1ffff7ac
 8008dfc:	1ffff7b0 	.word	0x1ffff7b0
 8008e00:	1ffff7b4 	.word	0x1ffff7b4
 8008e04:	20000162 	.word	0x20000162
 8008e08:	20000172 	.word	0x20000172

08008e0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]
 8008e22:	e027      	b.n	8008e74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	0f1b      	lsrs	r3, r3, #28
 8008e28:	2b09      	cmp	r3, #9
 8008e2a:	d80b      	bhi.n	8008e44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	0f1b      	lsrs	r3, r3, #28
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4619      	mov	r1, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3230      	adds	r2, #48	; 0x30
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	e00a      	b.n	8008e5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	0f1b      	lsrs	r3, r3, #28
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	440b      	add	r3, r1
 8008e54:	3237      	adds	r2, #55	; 0x37
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	3301      	adds	r3, #1
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4413      	add	r3, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	3301      	adds	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
 8008e74:	7dfa      	ldrb	r2, [r7, #23]
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3d3      	bcc.n	8008e24 <IntToUnicode+0x18>
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <HAL_PCD_MspInit+0x44>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d113      	bne.n	8008ec2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ea4:	61d3      	str	r3, [r2, #28]
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2014      	movs	r0, #20
 8008eb8:	f7f8 f8ad 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008ebc:	2014      	movs	r0, #20
 8008ebe:	f7f8 f8c6 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40005c00 	.word	0x40005c00
 8008ed0:	40021000 	.word	0x40021000

08008ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe fdfb 	bl	8007ae6 <USBD_LL_SetupStage>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f7fe fe2b 	bl	8007b7c <USBD_LL_DataOutStage>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	440b      	add	r3, r1
 8008f4e:	333c      	adds	r3, #60	; 0x3c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7fe fe82 	bl	8007c5e <USBD_LL_DataInStage>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe ff95 	bl	8007ea0 <USBD_LL_SOF>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d001      	beq.n	8008f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f92:	f7f7 fd81 	bl	8000a98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f9c:	7bfa      	ldrb	r2, [r7, #15]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe ff42 	bl	8007e2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fefb 	bl	8007da8 <USBD_LL_Reset>
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe ff3d 	bl	8007e4a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <HAL_PCD_SuspendCallback+0x30>)
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	4a03      	ldr	r2, [pc, #12]	; (8008fec <HAL_PCD_SuspendCallback+0x30>)
 8008fde:	f043 0306 	orr.w	r3, r3, #6
 8008fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe ff38 	bl	8007e74 <USBD_LL_Resume>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009014:	4a29      	ldr	r2, [pc, #164]	; (80090bc <USBD_LL_Init+0xb0>)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a27      	ldr	r2, [pc, #156]	; (80090bc <USBD_LL_Init+0xb0>)
 8009020:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009024:	4b25      	ldr	r3, [pc, #148]	; (80090bc <USBD_LL_Init+0xb0>)
 8009026:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <USBD_LL_Init+0xb4>)
 8009028:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <USBD_LL_Init+0xb0>)
 800902c:	2208      	movs	r2, #8
 800902e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009030:	4b22      	ldr	r3, [pc, #136]	; (80090bc <USBD_LL_Init+0xb0>)
 8009032:	2202      	movs	r2, #2
 8009034:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009036:	4b21      	ldr	r3, [pc, #132]	; (80090bc <USBD_LL_Init+0xb0>)
 8009038:	2202      	movs	r2, #2
 800903a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800903c:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <USBD_LL_Init+0xb0>)
 800903e:	2200      	movs	r2, #0
 8009040:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009042:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <USBD_LL_Init+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009048:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <USBD_LL_Init+0xb0>)
 800904a:	2200      	movs	r2, #0
 800904c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800904e:	481b      	ldr	r0, [pc, #108]	; (80090bc <USBD_LL_Init+0xb0>)
 8009050:	f7f8 ff2b 	bl	8001eaa <HAL_PCD_Init>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800905a:	f7f7 fd1d 	bl	8000a98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009064:	2318      	movs	r3, #24
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	f7fa f9b1 	bl	80033d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009074:	2358      	movs	r3, #88	; 0x58
 8009076:	2200      	movs	r2, #0
 8009078:	2180      	movs	r1, #128	; 0x80
 800907a:	f7fa f9a9 	bl	80033d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009084:	23c0      	movs	r3, #192	; 0xc0
 8009086:	2200      	movs	r2, #0
 8009088:	2181      	movs	r1, #129	; 0x81
 800908a:	f7fa f9a1 	bl	80033d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009094:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009098:	2200      	movs	r2, #0
 800909a:	2101      	movs	r1, #1
 800909c:	f7fa f998 	bl	80033d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090aa:	2200      	movs	r2, #0
 80090ac:	2182      	movs	r1, #130	; 0x82
 80090ae:	f7fa f98f 	bl	80033d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20001584 	.word	0x20001584
 80090c0:	40005c00 	.word	0x40005c00

080090c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f8 ffc3 	bl	8002066 <HAL_PCD_Start>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 f954 	bl	8009394 <USBD_Get_USB_Status>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	461a      	mov	r2, r3
 8009108:	4603      	mov	r3, r0
 800910a:	70fb      	strb	r3, [r7, #3]
 800910c:	460b      	mov	r3, r1
 800910e:	70bb      	strb	r3, [r7, #2]
 8009110:	4613      	mov	r3, r2
 8009112:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009122:	78bb      	ldrb	r3, [r7, #2]
 8009124:	883a      	ldrh	r2, [r7, #0]
 8009126:	78f9      	ldrb	r1, [r7, #3]
 8009128:	f7f9 f8df 	bl	80022ea <HAL_PCD_EP_Open>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f92e 	bl	8009394 <USBD_Get_USB_Status>
 8009138:	4603      	mov	r3, r0
 800913a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f7f9 f926 	bl	80023b6 <HAL_PCD_EP_Close>
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 f90f 	bl	8009394 <USBD_Get_USB_Status>
 8009176:	4603      	mov	r3, r0
 8009178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917a:	7bbb      	ldrb	r3, [r7, #14]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7f9 f9e7 	bl	8002576 <HAL_PCD_EP_SetStall>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f8f0 	bl	8009394 <USBD_Get_USB_Status>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091dc:	78fa      	ldrb	r2, [r7, #3]
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f9 fa1a 	bl	800261a <HAL_PCD_EP_ClrStall>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f8d1 	bl	8009394 <USBD_Get_USB_Status>
 80091f2:	4603      	mov	r3, r0
 80091f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009212:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009218:	2b00      	cmp	r3, #0
 800921a:	da0c      	bge.n	8009236 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	440b      	add	r3, r1
 8009230:	3302      	adds	r3, #2
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	e00b      	b.n	800924e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800923c:	68f9      	ldr	r1, [r7, #12]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	440b      	add	r3, r1
 8009248:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800924c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7f9 f811 	bl	80022a0 <HAL_PCD_SetAddress>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f885 	bl	8009394 <USBD_Get_USB_Status>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	461a      	mov	r2, r3
 80092a4:	460b      	mov	r3, r1
 80092a6:	72fb      	strb	r3, [r7, #11]
 80092a8:	4613      	mov	r3, r2
 80092aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ba:	893b      	ldrh	r3, [r7, #8]
 80092bc:	7af9      	ldrb	r1, [r7, #11]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	f7f9 f916 	bl	80024f0 <HAL_PCD_EP_Transmit>
 80092c4:	4603      	mov	r3, r0
 80092c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f862 	bl	8009394 <USBD_Get_USB_Status>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	461a      	mov	r2, r3
 80092ea:	460b      	mov	r3, r1
 80092ec:	72fb      	strb	r3, [r7, #11]
 80092ee:	4613      	mov	r3, r2
 80092f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009300:	893b      	ldrh	r3, [r7, #8]
 8009302:	7af9      	ldrb	r1, [r7, #11]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	f7f9 f89e 	bl	8002446 <HAL_PCD_EP_Receive>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f83f 	bl	8009394 <USBD_Get_USB_Status>
 8009316:	4603      	mov	r3, r0
 8009318:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800931a:	7dbb      	ldrb	r3, [r7, #22]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f9 f8c0 	bl	80024c0 <HAL_PCD_EP_GetRxCount>
 8009340:	4603      	mov	r3, r0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <USBD_static_malloc+0x18>)
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	2000020c 	.word	0x2000020c

08009368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d817      	bhi.n	80093d8 <USBD_Get_USB_Status+0x44>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBD_Get_USB_Status+0x1c>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093c7 	.word	0x080093c7
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093d3 	.word	0x080093d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
    break;
 80093c4:	e00b      	b.n	80093de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ca:	e008      	b.n	80093de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	e005      	b.n	80093de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
    break;
 80093d6:	e002      	b.n	80093de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	bf00      	nop
  }
  return usb_status;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <__errno>:
 80093ec:	4b01      	ldr	r3, [pc, #4]	; (80093f4 <__errno+0x8>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	2000017c 	.word	0x2000017c

080093f8 <__libc_init_array>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4e0d      	ldr	r6, [pc, #52]	; (8009430 <__libc_init_array+0x38>)
 80093fc:	4c0d      	ldr	r4, [pc, #52]	; (8009434 <__libc_init_array+0x3c>)
 80093fe:	1ba4      	subs	r4, r4, r6
 8009400:	10a4      	asrs	r4, r4, #2
 8009402:	2500      	movs	r5, #0
 8009404:	42a5      	cmp	r5, r4
 8009406:	d109      	bne.n	800941c <__libc_init_array+0x24>
 8009408:	4e0b      	ldr	r6, [pc, #44]	; (8009438 <__libc_init_array+0x40>)
 800940a:	4c0c      	ldr	r4, [pc, #48]	; (800943c <__libc_init_array+0x44>)
 800940c:	f000 fc26 	bl	8009c5c <_init>
 8009410:	1ba4      	subs	r4, r4, r6
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	2500      	movs	r5, #0
 8009416:	42a5      	cmp	r5, r4
 8009418:	d105      	bne.n	8009426 <__libc_init_array+0x2e>
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009420:	4798      	blx	r3
 8009422:	3501      	adds	r5, #1
 8009424:	e7ee      	b.n	8009404 <__libc_init_array+0xc>
 8009426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800942a:	4798      	blx	r3
 800942c:	3501      	adds	r5, #1
 800942e:	e7f2      	b.n	8009416 <__libc_init_array+0x1e>
 8009430:	08009d58 	.word	0x08009d58
 8009434:	08009d58 	.word	0x08009d58
 8009438:	08009d58 	.word	0x08009d58
 800943c:	08009d5c 	.word	0x08009d5c

08009440 <memset>:
 8009440:	4402      	add	r2, r0
 8009442:	4603      	mov	r3, r0
 8009444:	4293      	cmp	r3, r2
 8009446:	d100      	bne.n	800944a <memset+0xa>
 8009448:	4770      	bx	lr
 800944a:	f803 1b01 	strb.w	r1, [r3], #1
 800944e:	e7f9      	b.n	8009444 <memset+0x4>

08009450 <siprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b500      	push	{lr}
 8009454:	b09c      	sub	sp, #112	; 0x70
 8009456:	ab1d      	add	r3, sp, #116	; 0x74
 8009458:	9002      	str	r0, [sp, #8]
 800945a:	9006      	str	r0, [sp, #24]
 800945c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009460:	4809      	ldr	r0, [pc, #36]	; (8009488 <siprintf+0x38>)
 8009462:	9107      	str	r1, [sp, #28]
 8009464:	9104      	str	r1, [sp, #16]
 8009466:	4909      	ldr	r1, [pc, #36]	; (800948c <siprintf+0x3c>)
 8009468:	f853 2b04 	ldr.w	r2, [r3], #4
 800946c:	9105      	str	r1, [sp, #20]
 800946e:	6800      	ldr	r0, [r0, #0]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	a902      	add	r1, sp, #8
 8009474:	f000 f866 	bl	8009544 <_svfiprintf_r>
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	b01c      	add	sp, #112	; 0x70
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	2000017c 	.word	0x2000017c
 800948c:	ffff0208 	.word	0xffff0208

08009490 <__ssputs_r>:
 8009490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009494:	688e      	ldr	r6, [r1, #8]
 8009496:	429e      	cmp	r6, r3
 8009498:	4682      	mov	sl, r0
 800949a:	460c      	mov	r4, r1
 800949c:	4690      	mov	r8, r2
 800949e:	4699      	mov	r9, r3
 80094a0:	d837      	bhi.n	8009512 <__ssputs_r+0x82>
 80094a2:	898a      	ldrh	r2, [r1, #12]
 80094a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094a8:	d031      	beq.n	800950e <__ssputs_r+0x7e>
 80094aa:	6825      	ldr	r5, [r4, #0]
 80094ac:	6909      	ldr	r1, [r1, #16]
 80094ae:	1a6f      	subs	r7, r5, r1
 80094b0:	6965      	ldr	r5, [r4, #20]
 80094b2:	2302      	movs	r3, #2
 80094b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80094bc:	f109 0301 	add.w	r3, r9, #1
 80094c0:	443b      	add	r3, r7
 80094c2:	429d      	cmp	r5, r3
 80094c4:	bf38      	it	cc
 80094c6:	461d      	movcc	r5, r3
 80094c8:	0553      	lsls	r3, r2, #21
 80094ca:	d530      	bpl.n	800952e <__ssputs_r+0x9e>
 80094cc:	4629      	mov	r1, r5
 80094ce:	f000 fb2b 	bl	8009b28 <_malloc_r>
 80094d2:	4606      	mov	r6, r0
 80094d4:	b950      	cbnz	r0, 80094ec <__ssputs_r+0x5c>
 80094d6:	230c      	movs	r3, #12
 80094d8:	f8ca 3000 	str.w	r3, [sl]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	463a      	mov	r2, r7
 80094ee:	6921      	ldr	r1, [r4, #16]
 80094f0:	f000 faa8 	bl	8009a44 <memcpy>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	6126      	str	r6, [r4, #16]
 8009502:	6165      	str	r5, [r4, #20]
 8009504:	443e      	add	r6, r7
 8009506:	1bed      	subs	r5, r5, r7
 8009508:	6026      	str	r6, [r4, #0]
 800950a:	60a5      	str	r5, [r4, #8]
 800950c:	464e      	mov	r6, r9
 800950e:	454e      	cmp	r6, r9
 8009510:	d900      	bls.n	8009514 <__ssputs_r+0x84>
 8009512:	464e      	mov	r6, r9
 8009514:	4632      	mov	r2, r6
 8009516:	4641      	mov	r1, r8
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	f000 fa9e 	bl	8009a5a <memmove>
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	1b9b      	subs	r3, r3, r6
 8009522:	60a3      	str	r3, [r4, #8]
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	441e      	add	r6, r3
 8009528:	6026      	str	r6, [r4, #0]
 800952a:	2000      	movs	r0, #0
 800952c:	e7dc      	b.n	80094e8 <__ssputs_r+0x58>
 800952e:	462a      	mov	r2, r5
 8009530:	f000 fb54 	bl	8009bdc <_realloc_r>
 8009534:	4606      	mov	r6, r0
 8009536:	2800      	cmp	r0, #0
 8009538:	d1e2      	bne.n	8009500 <__ssputs_r+0x70>
 800953a:	6921      	ldr	r1, [r4, #16]
 800953c:	4650      	mov	r0, sl
 800953e:	f000 faa5 	bl	8009a8c <_free_r>
 8009542:	e7c8      	b.n	80094d6 <__ssputs_r+0x46>

08009544 <_svfiprintf_r>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	461d      	mov	r5, r3
 800954a:	898b      	ldrh	r3, [r1, #12]
 800954c:	061f      	lsls	r7, r3, #24
 800954e:	b09d      	sub	sp, #116	; 0x74
 8009550:	4680      	mov	r8, r0
 8009552:	460c      	mov	r4, r1
 8009554:	4616      	mov	r6, r2
 8009556:	d50f      	bpl.n	8009578 <_svfiprintf_r+0x34>
 8009558:	690b      	ldr	r3, [r1, #16]
 800955a:	b96b      	cbnz	r3, 8009578 <_svfiprintf_r+0x34>
 800955c:	2140      	movs	r1, #64	; 0x40
 800955e:	f000 fae3 	bl	8009b28 <_malloc_r>
 8009562:	6020      	str	r0, [r4, #0]
 8009564:	6120      	str	r0, [r4, #16]
 8009566:	b928      	cbnz	r0, 8009574 <_svfiprintf_r+0x30>
 8009568:	230c      	movs	r3, #12
 800956a:	f8c8 3000 	str.w	r3, [r8]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	e0c8      	b.n	8009706 <_svfiprintf_r+0x1c2>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	2300      	movs	r3, #0
 800957a:	9309      	str	r3, [sp, #36]	; 0x24
 800957c:	2320      	movs	r3, #32
 800957e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009582:	2330      	movs	r3, #48	; 0x30
 8009584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009588:	9503      	str	r5, [sp, #12]
 800958a:	f04f 0b01 	mov.w	fp, #1
 800958e:	4637      	mov	r7, r6
 8009590:	463d      	mov	r5, r7
 8009592:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009596:	b10b      	cbz	r3, 800959c <_svfiprintf_r+0x58>
 8009598:	2b25      	cmp	r3, #37	; 0x25
 800959a:	d13e      	bne.n	800961a <_svfiprintf_r+0xd6>
 800959c:	ebb7 0a06 	subs.w	sl, r7, r6
 80095a0:	d00b      	beq.n	80095ba <_svfiprintf_r+0x76>
 80095a2:	4653      	mov	r3, sl
 80095a4:	4632      	mov	r2, r6
 80095a6:	4621      	mov	r1, r4
 80095a8:	4640      	mov	r0, r8
 80095aa:	f7ff ff71 	bl	8009490 <__ssputs_r>
 80095ae:	3001      	adds	r0, #1
 80095b0:	f000 80a4 	beq.w	80096fc <_svfiprintf_r+0x1b8>
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	4453      	add	r3, sl
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	783b      	ldrb	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 809d 	beq.w	80096fc <_svfiprintf_r+0x1b8>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	9307      	str	r3, [sp, #28]
 80095d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095d4:	931a      	str	r3, [sp, #104]	; 0x68
 80095d6:	462f      	mov	r7, r5
 80095d8:	2205      	movs	r2, #5
 80095da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80095de:	4850      	ldr	r0, [pc, #320]	; (8009720 <_svfiprintf_r+0x1dc>)
 80095e0:	f7f6 fe06 	bl	80001f0 <memchr>
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	b9d0      	cbnz	r0, 800961e <_svfiprintf_r+0xda>
 80095e8:	06d9      	lsls	r1, r3, #27
 80095ea:	bf44      	itt	mi
 80095ec:	2220      	movmi	r2, #32
 80095ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095f2:	071a      	lsls	r2, r3, #28
 80095f4:	bf44      	itt	mi
 80095f6:	222b      	movmi	r2, #43	; 0x2b
 80095f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095fc:	782a      	ldrb	r2, [r5, #0]
 80095fe:	2a2a      	cmp	r2, #42	; 0x2a
 8009600:	d015      	beq.n	800962e <_svfiprintf_r+0xea>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	462f      	mov	r7, r5
 8009606:	2000      	movs	r0, #0
 8009608:	250a      	movs	r5, #10
 800960a:	4639      	mov	r1, r7
 800960c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009610:	3b30      	subs	r3, #48	; 0x30
 8009612:	2b09      	cmp	r3, #9
 8009614:	d94d      	bls.n	80096b2 <_svfiprintf_r+0x16e>
 8009616:	b1b8      	cbz	r0, 8009648 <_svfiprintf_r+0x104>
 8009618:	e00f      	b.n	800963a <_svfiprintf_r+0xf6>
 800961a:	462f      	mov	r7, r5
 800961c:	e7b8      	b.n	8009590 <_svfiprintf_r+0x4c>
 800961e:	4a40      	ldr	r2, [pc, #256]	; (8009720 <_svfiprintf_r+0x1dc>)
 8009620:	1a80      	subs	r0, r0, r2
 8009622:	fa0b f000 	lsl.w	r0, fp, r0
 8009626:	4318      	orrs	r0, r3
 8009628:	9004      	str	r0, [sp, #16]
 800962a:	463d      	mov	r5, r7
 800962c:	e7d3      	b.n	80095d6 <_svfiprintf_r+0x92>
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	1d11      	adds	r1, r2, #4
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	9103      	str	r1, [sp, #12]
 8009636:	2a00      	cmp	r2, #0
 8009638:	db01      	blt.n	800963e <_svfiprintf_r+0xfa>
 800963a:	9207      	str	r2, [sp, #28]
 800963c:	e004      	b.n	8009648 <_svfiprintf_r+0x104>
 800963e:	4252      	negs	r2, r2
 8009640:	f043 0302 	orr.w	r3, r3, #2
 8009644:	9207      	str	r2, [sp, #28]
 8009646:	9304      	str	r3, [sp, #16]
 8009648:	783b      	ldrb	r3, [r7, #0]
 800964a:	2b2e      	cmp	r3, #46	; 0x2e
 800964c:	d10c      	bne.n	8009668 <_svfiprintf_r+0x124>
 800964e:	787b      	ldrb	r3, [r7, #1]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d133      	bne.n	80096bc <_svfiprintf_r+0x178>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1d1a      	adds	r2, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	9203      	str	r2, [sp, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	bfb8      	it	lt
 8009660:	f04f 33ff 	movlt.w	r3, #4294967295
 8009664:	3702      	adds	r7, #2
 8009666:	9305      	str	r3, [sp, #20]
 8009668:	4d2e      	ldr	r5, [pc, #184]	; (8009724 <_svfiprintf_r+0x1e0>)
 800966a:	7839      	ldrb	r1, [r7, #0]
 800966c:	2203      	movs	r2, #3
 800966e:	4628      	mov	r0, r5
 8009670:	f7f6 fdbe 	bl	80001f0 <memchr>
 8009674:	b138      	cbz	r0, 8009686 <_svfiprintf_r+0x142>
 8009676:	2340      	movs	r3, #64	; 0x40
 8009678:	1b40      	subs	r0, r0, r5
 800967a:	fa03 f000 	lsl.w	r0, r3, r0
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	4303      	orrs	r3, r0
 8009682:	3701      	adds	r7, #1
 8009684:	9304      	str	r3, [sp, #16]
 8009686:	7839      	ldrb	r1, [r7, #0]
 8009688:	4827      	ldr	r0, [pc, #156]	; (8009728 <_svfiprintf_r+0x1e4>)
 800968a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800968e:	2206      	movs	r2, #6
 8009690:	1c7e      	adds	r6, r7, #1
 8009692:	f7f6 fdad 	bl	80001f0 <memchr>
 8009696:	2800      	cmp	r0, #0
 8009698:	d038      	beq.n	800970c <_svfiprintf_r+0x1c8>
 800969a:	4b24      	ldr	r3, [pc, #144]	; (800972c <_svfiprintf_r+0x1e8>)
 800969c:	bb13      	cbnz	r3, 80096e4 <_svfiprintf_r+0x1a0>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	3307      	adds	r3, #7
 80096a2:	f023 0307 	bic.w	r3, r3, #7
 80096a6:	3308      	adds	r3, #8
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ac:	444b      	add	r3, r9
 80096ae:	9309      	str	r3, [sp, #36]	; 0x24
 80096b0:	e76d      	b.n	800958e <_svfiprintf_r+0x4a>
 80096b2:	fb05 3202 	mla	r2, r5, r2, r3
 80096b6:	2001      	movs	r0, #1
 80096b8:	460f      	mov	r7, r1
 80096ba:	e7a6      	b.n	800960a <_svfiprintf_r+0xc6>
 80096bc:	2300      	movs	r3, #0
 80096be:	3701      	adds	r7, #1
 80096c0:	9305      	str	r3, [sp, #20]
 80096c2:	4619      	mov	r1, r3
 80096c4:	250a      	movs	r5, #10
 80096c6:	4638      	mov	r0, r7
 80096c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096cc:	3a30      	subs	r2, #48	; 0x30
 80096ce:	2a09      	cmp	r2, #9
 80096d0:	d903      	bls.n	80096da <_svfiprintf_r+0x196>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0c8      	beq.n	8009668 <_svfiprintf_r+0x124>
 80096d6:	9105      	str	r1, [sp, #20]
 80096d8:	e7c6      	b.n	8009668 <_svfiprintf_r+0x124>
 80096da:	fb05 2101 	mla	r1, r5, r1, r2
 80096de:	2301      	movs	r3, #1
 80096e0:	4607      	mov	r7, r0
 80096e2:	e7f0      	b.n	80096c6 <_svfiprintf_r+0x182>
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4622      	mov	r2, r4
 80096ea:	4b11      	ldr	r3, [pc, #68]	; (8009730 <_svfiprintf_r+0x1ec>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	4640      	mov	r0, r8
 80096f0:	f3af 8000 	nop.w
 80096f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096f8:	4681      	mov	r9, r0
 80096fa:	d1d6      	bne.n	80096aa <_svfiprintf_r+0x166>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	065b      	lsls	r3, r3, #25
 8009700:	f53f af35 	bmi.w	800956e <_svfiprintf_r+0x2a>
 8009704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009706:	b01d      	add	sp, #116	; 0x74
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	ab03      	add	r3, sp, #12
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4622      	mov	r2, r4
 8009712:	4b07      	ldr	r3, [pc, #28]	; (8009730 <_svfiprintf_r+0x1ec>)
 8009714:	a904      	add	r1, sp, #16
 8009716:	4640      	mov	r0, r8
 8009718:	f000 f882 	bl	8009820 <_printf_i>
 800971c:	e7ea      	b.n	80096f4 <_svfiprintf_r+0x1b0>
 800971e:	bf00      	nop
 8009720:	08009d24 	.word	0x08009d24
 8009724:	08009d2a 	.word	0x08009d2a
 8009728:	08009d2e 	.word	0x08009d2e
 800972c:	00000000 	.word	0x00000000
 8009730:	08009491 	.word	0x08009491

08009734 <_printf_common>:
 8009734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009738:	4691      	mov	r9, r2
 800973a:	461f      	mov	r7, r3
 800973c:	688a      	ldr	r2, [r1, #8]
 800973e:	690b      	ldr	r3, [r1, #16]
 8009740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009744:	4293      	cmp	r3, r2
 8009746:	bfb8      	it	lt
 8009748:	4613      	movlt	r3, r2
 800974a:	f8c9 3000 	str.w	r3, [r9]
 800974e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009752:	4606      	mov	r6, r0
 8009754:	460c      	mov	r4, r1
 8009756:	b112      	cbz	r2, 800975e <_printf_common+0x2a>
 8009758:	3301      	adds	r3, #1
 800975a:	f8c9 3000 	str.w	r3, [r9]
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	0699      	lsls	r1, r3, #26
 8009762:	bf42      	ittt	mi
 8009764:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009768:	3302      	addmi	r3, #2
 800976a:	f8c9 3000 	strmi.w	r3, [r9]
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	f015 0506 	ands.w	r5, r5, #6
 8009774:	d107      	bne.n	8009786 <_printf_common+0x52>
 8009776:	f104 0a19 	add.w	sl, r4, #25
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	f8d9 2000 	ldr.w	r2, [r9]
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	42ab      	cmp	r3, r5
 8009784:	dc28      	bgt.n	80097d8 <_printf_common+0xa4>
 8009786:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	3300      	adds	r3, #0
 800978e:	bf18      	it	ne
 8009790:	2301      	movne	r3, #1
 8009792:	0692      	lsls	r2, r2, #26
 8009794:	d42d      	bmi.n	80097f2 <_printf_common+0xbe>
 8009796:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800979a:	4639      	mov	r1, r7
 800979c:	4630      	mov	r0, r6
 800979e:	47c0      	blx	r8
 80097a0:	3001      	adds	r0, #1
 80097a2:	d020      	beq.n	80097e6 <_printf_common+0xb2>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	68e5      	ldr	r5, [r4, #12]
 80097a8:	f8d9 2000 	ldr.w	r2, [r9]
 80097ac:	f003 0306 	and.w	r3, r3, #6
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	bf08      	it	eq
 80097b4:	1aad      	subeq	r5, r5, r2
 80097b6:	68a3      	ldr	r3, [r4, #8]
 80097b8:	6922      	ldr	r2, [r4, #16]
 80097ba:	bf0c      	ite	eq
 80097bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097c0:	2500      	movne	r5, #0
 80097c2:	4293      	cmp	r3, r2
 80097c4:	bfc4      	itt	gt
 80097c6:	1a9b      	subgt	r3, r3, r2
 80097c8:	18ed      	addgt	r5, r5, r3
 80097ca:	f04f 0900 	mov.w	r9, #0
 80097ce:	341a      	adds	r4, #26
 80097d0:	454d      	cmp	r5, r9
 80097d2:	d11a      	bne.n	800980a <_printf_common+0xd6>
 80097d4:	2000      	movs	r0, #0
 80097d6:	e008      	b.n	80097ea <_printf_common+0xb6>
 80097d8:	2301      	movs	r3, #1
 80097da:	4652      	mov	r2, sl
 80097dc:	4639      	mov	r1, r7
 80097de:	4630      	mov	r0, r6
 80097e0:	47c0      	blx	r8
 80097e2:	3001      	adds	r0, #1
 80097e4:	d103      	bne.n	80097ee <_printf_common+0xba>
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	3501      	adds	r5, #1
 80097f0:	e7c3      	b.n	800977a <_printf_common+0x46>
 80097f2:	18e1      	adds	r1, r4, r3
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	2030      	movs	r0, #48	; 0x30
 80097f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097fc:	4422      	add	r2, r4
 80097fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009802:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009806:	3302      	adds	r3, #2
 8009808:	e7c5      	b.n	8009796 <_printf_common+0x62>
 800980a:	2301      	movs	r3, #1
 800980c:	4622      	mov	r2, r4
 800980e:	4639      	mov	r1, r7
 8009810:	4630      	mov	r0, r6
 8009812:	47c0      	blx	r8
 8009814:	3001      	adds	r0, #1
 8009816:	d0e6      	beq.n	80097e6 <_printf_common+0xb2>
 8009818:	f109 0901 	add.w	r9, r9, #1
 800981c:	e7d8      	b.n	80097d0 <_printf_common+0x9c>
	...

08009820 <_printf_i>:
 8009820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009824:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009828:	460c      	mov	r4, r1
 800982a:	7e09      	ldrb	r1, [r1, #24]
 800982c:	b085      	sub	sp, #20
 800982e:	296e      	cmp	r1, #110	; 0x6e
 8009830:	4617      	mov	r7, r2
 8009832:	4606      	mov	r6, r0
 8009834:	4698      	mov	r8, r3
 8009836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009838:	f000 80b3 	beq.w	80099a2 <_printf_i+0x182>
 800983c:	d822      	bhi.n	8009884 <_printf_i+0x64>
 800983e:	2963      	cmp	r1, #99	; 0x63
 8009840:	d036      	beq.n	80098b0 <_printf_i+0x90>
 8009842:	d80a      	bhi.n	800985a <_printf_i+0x3a>
 8009844:	2900      	cmp	r1, #0
 8009846:	f000 80b9 	beq.w	80099bc <_printf_i+0x19c>
 800984a:	2958      	cmp	r1, #88	; 0x58
 800984c:	f000 8083 	beq.w	8009956 <_printf_i+0x136>
 8009850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009854:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009858:	e032      	b.n	80098c0 <_printf_i+0xa0>
 800985a:	2964      	cmp	r1, #100	; 0x64
 800985c:	d001      	beq.n	8009862 <_printf_i+0x42>
 800985e:	2969      	cmp	r1, #105	; 0x69
 8009860:	d1f6      	bne.n	8009850 <_printf_i+0x30>
 8009862:	6820      	ldr	r0, [r4, #0]
 8009864:	6813      	ldr	r3, [r2, #0]
 8009866:	0605      	lsls	r5, r0, #24
 8009868:	f103 0104 	add.w	r1, r3, #4
 800986c:	d52a      	bpl.n	80098c4 <_printf_i+0xa4>
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6011      	str	r1, [r2, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	da03      	bge.n	800987e <_printf_i+0x5e>
 8009876:	222d      	movs	r2, #45	; 0x2d
 8009878:	425b      	negs	r3, r3
 800987a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800987e:	486f      	ldr	r0, [pc, #444]	; (8009a3c <_printf_i+0x21c>)
 8009880:	220a      	movs	r2, #10
 8009882:	e039      	b.n	80098f8 <_printf_i+0xd8>
 8009884:	2973      	cmp	r1, #115	; 0x73
 8009886:	f000 809d 	beq.w	80099c4 <_printf_i+0x1a4>
 800988a:	d808      	bhi.n	800989e <_printf_i+0x7e>
 800988c:	296f      	cmp	r1, #111	; 0x6f
 800988e:	d020      	beq.n	80098d2 <_printf_i+0xb2>
 8009890:	2970      	cmp	r1, #112	; 0x70
 8009892:	d1dd      	bne.n	8009850 <_printf_i+0x30>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	f043 0320 	orr.w	r3, r3, #32
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	e003      	b.n	80098a6 <_printf_i+0x86>
 800989e:	2975      	cmp	r1, #117	; 0x75
 80098a0:	d017      	beq.n	80098d2 <_printf_i+0xb2>
 80098a2:	2978      	cmp	r1, #120	; 0x78
 80098a4:	d1d4      	bne.n	8009850 <_printf_i+0x30>
 80098a6:	2378      	movs	r3, #120	; 0x78
 80098a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098ac:	4864      	ldr	r0, [pc, #400]	; (8009a40 <_printf_i+0x220>)
 80098ae:	e055      	b.n	800995c <_printf_i+0x13c>
 80098b0:	6813      	ldr	r3, [r2, #0]
 80098b2:	1d19      	adds	r1, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6011      	str	r1, [r2, #0]
 80098b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c0:	2301      	movs	r3, #1
 80098c2:	e08c      	b.n	80099de <_printf_i+0x1be>
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6011      	str	r1, [r2, #0]
 80098c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098cc:	bf18      	it	ne
 80098ce:	b21b      	sxthne	r3, r3
 80098d0:	e7cf      	b.n	8009872 <_printf_i+0x52>
 80098d2:	6813      	ldr	r3, [r2, #0]
 80098d4:	6825      	ldr	r5, [r4, #0]
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	6010      	str	r0, [r2, #0]
 80098da:	0628      	lsls	r0, r5, #24
 80098dc:	d501      	bpl.n	80098e2 <_printf_i+0xc2>
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	e002      	b.n	80098e8 <_printf_i+0xc8>
 80098e2:	0668      	lsls	r0, r5, #25
 80098e4:	d5fb      	bpl.n	80098de <_printf_i+0xbe>
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	4854      	ldr	r0, [pc, #336]	; (8009a3c <_printf_i+0x21c>)
 80098ea:	296f      	cmp	r1, #111	; 0x6f
 80098ec:	bf14      	ite	ne
 80098ee:	220a      	movne	r2, #10
 80098f0:	2208      	moveq	r2, #8
 80098f2:	2100      	movs	r1, #0
 80098f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098f8:	6865      	ldr	r5, [r4, #4]
 80098fa:	60a5      	str	r5, [r4, #8]
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	f2c0 8095 	blt.w	8009a2c <_printf_i+0x20c>
 8009902:	6821      	ldr	r1, [r4, #0]
 8009904:	f021 0104 	bic.w	r1, r1, #4
 8009908:	6021      	str	r1, [r4, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d13d      	bne.n	800998a <_printf_i+0x16a>
 800990e:	2d00      	cmp	r5, #0
 8009910:	f040 808e 	bne.w	8009a30 <_printf_i+0x210>
 8009914:	4665      	mov	r5, ip
 8009916:	2a08      	cmp	r2, #8
 8009918:	d10b      	bne.n	8009932 <_printf_i+0x112>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	07db      	lsls	r3, r3, #31
 800991e:	d508      	bpl.n	8009932 <_printf_i+0x112>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	6862      	ldr	r2, [r4, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	bfde      	ittt	le
 8009928:	2330      	movle	r3, #48	; 0x30
 800992a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800992e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009932:	ebac 0305 	sub.w	r3, ip, r5
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	f8cd 8000 	str.w	r8, [sp]
 800993c:	463b      	mov	r3, r7
 800993e:	aa03      	add	r2, sp, #12
 8009940:	4621      	mov	r1, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff fef6 	bl	8009734 <_printf_common>
 8009948:	3001      	adds	r0, #1
 800994a:	d14d      	bne.n	80099e8 <_printf_i+0x1c8>
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	b005      	add	sp, #20
 8009952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009956:	4839      	ldr	r0, [pc, #228]	; (8009a3c <_printf_i+0x21c>)
 8009958:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800995c:	6813      	ldr	r3, [r2, #0]
 800995e:	6821      	ldr	r1, [r4, #0]
 8009960:	1d1d      	adds	r5, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6015      	str	r5, [r2, #0]
 8009966:	060a      	lsls	r2, r1, #24
 8009968:	d50b      	bpl.n	8009982 <_printf_i+0x162>
 800996a:	07ca      	lsls	r2, r1, #31
 800996c:	bf44      	itt	mi
 800996e:	f041 0120 	orrmi.w	r1, r1, #32
 8009972:	6021      	strmi	r1, [r4, #0]
 8009974:	b91b      	cbnz	r3, 800997e <_printf_i+0x15e>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	f022 0220 	bic.w	r2, r2, #32
 800997c:	6022      	str	r2, [r4, #0]
 800997e:	2210      	movs	r2, #16
 8009980:	e7b7      	b.n	80098f2 <_printf_i+0xd2>
 8009982:	064d      	lsls	r5, r1, #25
 8009984:	bf48      	it	mi
 8009986:	b29b      	uxthmi	r3, r3
 8009988:	e7ef      	b.n	800996a <_printf_i+0x14a>
 800998a:	4665      	mov	r5, ip
 800998c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009990:	fb02 3311 	mls	r3, r2, r1, r3
 8009994:	5cc3      	ldrb	r3, [r0, r3]
 8009996:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800999a:	460b      	mov	r3, r1
 800999c:	2900      	cmp	r1, #0
 800999e:	d1f5      	bne.n	800998c <_printf_i+0x16c>
 80099a0:	e7b9      	b.n	8009916 <_printf_i+0xf6>
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	6825      	ldr	r5, [r4, #0]
 80099a6:	6961      	ldr	r1, [r4, #20]
 80099a8:	1d18      	adds	r0, r3, #4
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	0628      	lsls	r0, r5, #24
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	d501      	bpl.n	80099b6 <_printf_i+0x196>
 80099b2:	6019      	str	r1, [r3, #0]
 80099b4:	e002      	b.n	80099bc <_printf_i+0x19c>
 80099b6:	066a      	lsls	r2, r5, #25
 80099b8:	d5fb      	bpl.n	80099b2 <_printf_i+0x192>
 80099ba:	8019      	strh	r1, [r3, #0]
 80099bc:	2300      	movs	r3, #0
 80099be:	6123      	str	r3, [r4, #16]
 80099c0:	4665      	mov	r5, ip
 80099c2:	e7b9      	b.n	8009938 <_printf_i+0x118>
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	1d19      	adds	r1, r3, #4
 80099c8:	6011      	str	r1, [r2, #0]
 80099ca:	681d      	ldr	r5, [r3, #0]
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	2100      	movs	r1, #0
 80099d0:	4628      	mov	r0, r5
 80099d2:	f7f6 fc0d 	bl	80001f0 <memchr>
 80099d6:	b108      	cbz	r0, 80099dc <_printf_i+0x1bc>
 80099d8:	1b40      	subs	r0, r0, r5
 80099da:	6060      	str	r0, [r4, #4]
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	2300      	movs	r3, #0
 80099e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099e6:	e7a7      	b.n	8009938 <_printf_i+0x118>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4639      	mov	r1, r7
 80099ee:	4630      	mov	r0, r6
 80099f0:	47c0      	blx	r8
 80099f2:	3001      	adds	r0, #1
 80099f4:	d0aa      	beq.n	800994c <_printf_i+0x12c>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	079b      	lsls	r3, r3, #30
 80099fa:	d413      	bmi.n	8009a24 <_printf_i+0x204>
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	4298      	cmp	r0, r3
 8009a02:	bfb8      	it	lt
 8009a04:	4618      	movlt	r0, r3
 8009a06:	e7a3      	b.n	8009950 <_printf_i+0x130>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	47c0      	blx	r8
 8009a12:	3001      	adds	r0, #1
 8009a14:	d09a      	beq.n	800994c <_printf_i+0x12c>
 8009a16:	3501      	adds	r5, #1
 8009a18:	68e3      	ldr	r3, [r4, #12]
 8009a1a:	9a03      	ldr	r2, [sp, #12]
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	42ab      	cmp	r3, r5
 8009a20:	dcf2      	bgt.n	8009a08 <_printf_i+0x1e8>
 8009a22:	e7eb      	b.n	80099fc <_printf_i+0x1dc>
 8009a24:	2500      	movs	r5, #0
 8009a26:	f104 0919 	add.w	r9, r4, #25
 8009a2a:	e7f5      	b.n	8009a18 <_printf_i+0x1f8>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1ac      	bne.n	800998a <_printf_i+0x16a>
 8009a30:	7803      	ldrb	r3, [r0, #0]
 8009a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a3a:	e76c      	b.n	8009916 <_printf_i+0xf6>
 8009a3c:	08009d35 	.word	0x08009d35
 8009a40:	08009d46 	.word	0x08009d46

08009a44 <memcpy>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	1e43      	subs	r3, r0, #1
 8009a48:	440a      	add	r2, r1
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xc>
 8009a4e:	bd10      	pop	{r4, pc}
 8009a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a58:	e7f7      	b.n	8009a4a <memcpy+0x6>

08009a5a <memmove>:
 8009a5a:	4288      	cmp	r0, r1
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	eb01 0302 	add.w	r3, r1, r2
 8009a62:	d807      	bhi.n	8009a74 <memmove+0x1a>
 8009a64:	1e42      	subs	r2, r0, #1
 8009a66:	4299      	cmp	r1, r3
 8009a68:	d00a      	beq.n	8009a80 <memmove+0x26>
 8009a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a72:	e7f8      	b.n	8009a66 <memmove+0xc>
 8009a74:	4283      	cmp	r3, r0
 8009a76:	d9f5      	bls.n	8009a64 <memmove+0xa>
 8009a78:	1881      	adds	r1, r0, r2
 8009a7a:	1ad2      	subs	r2, r2, r3
 8009a7c:	42d3      	cmn	r3, r2
 8009a7e:	d100      	bne.n	8009a82 <memmove+0x28>
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a8a:	e7f7      	b.n	8009a7c <memmove+0x22>

08009a8c <_free_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4605      	mov	r5, r0
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d045      	beq.n	8009b20 <_free_r+0x94>
 8009a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a98:	1f0c      	subs	r4, r1, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bfb8      	it	lt
 8009a9e:	18e4      	addlt	r4, r4, r3
 8009aa0:	f000 f8d2 	bl	8009c48 <__malloc_lock>
 8009aa4:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <_free_r+0x98>)
 8009aa6:	6813      	ldr	r3, [r2, #0]
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	b933      	cbnz	r3, 8009aba <_free_r+0x2e>
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	6014      	str	r4, [r2, #0]
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab6:	f000 b8c8 	b.w	8009c4a <__malloc_unlock>
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	d90c      	bls.n	8009ad8 <_free_r+0x4c>
 8009abe:	6821      	ldr	r1, [r4, #0]
 8009ac0:	1862      	adds	r2, r4, r1
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	bf04      	itt	eq
 8009ac6:	681a      	ldreq	r2, [r3, #0]
 8009ac8:	685b      	ldreq	r3, [r3, #4]
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	bf04      	itt	eq
 8009ace:	1852      	addeq	r2, r2, r1
 8009ad0:	6022      	streq	r2, [r4, #0]
 8009ad2:	6004      	str	r4, [r0, #0]
 8009ad4:	e7ec      	b.n	8009ab0 <_free_r+0x24>
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	b10a      	cbz	r2, 8009ae0 <_free_r+0x54>
 8009adc:	42a2      	cmp	r2, r4
 8009ade:	d9fa      	bls.n	8009ad6 <_free_r+0x4a>
 8009ae0:	6819      	ldr	r1, [r3, #0]
 8009ae2:	1858      	adds	r0, r3, r1
 8009ae4:	42a0      	cmp	r0, r4
 8009ae6:	d10b      	bne.n	8009b00 <_free_r+0x74>
 8009ae8:	6820      	ldr	r0, [r4, #0]
 8009aea:	4401      	add	r1, r0
 8009aec:	1858      	adds	r0, r3, r1
 8009aee:	4282      	cmp	r2, r0
 8009af0:	6019      	str	r1, [r3, #0]
 8009af2:	d1dd      	bne.n	8009ab0 <_free_r+0x24>
 8009af4:	6810      	ldr	r0, [r2, #0]
 8009af6:	6852      	ldr	r2, [r2, #4]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	4401      	add	r1, r0
 8009afc:	6019      	str	r1, [r3, #0]
 8009afe:	e7d7      	b.n	8009ab0 <_free_r+0x24>
 8009b00:	d902      	bls.n	8009b08 <_free_r+0x7c>
 8009b02:	230c      	movs	r3, #12
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	e7d3      	b.n	8009ab0 <_free_r+0x24>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	1821      	adds	r1, r4, r0
 8009b0c:	428a      	cmp	r2, r1
 8009b0e:	bf04      	itt	eq
 8009b10:	6811      	ldreq	r1, [r2, #0]
 8009b12:	6852      	ldreq	r2, [r2, #4]
 8009b14:	6062      	str	r2, [r4, #4]
 8009b16:	bf04      	itt	eq
 8009b18:	1809      	addeq	r1, r1, r0
 8009b1a:	6021      	streq	r1, [r4, #0]
 8009b1c:	605c      	str	r4, [r3, #4]
 8009b1e:	e7c7      	b.n	8009ab0 <_free_r+0x24>
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	2000042c 	.word	0x2000042c

08009b28 <_malloc_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	1ccd      	adds	r5, r1, #3
 8009b2c:	f025 0503 	bic.w	r5, r5, #3
 8009b30:	3508      	adds	r5, #8
 8009b32:	2d0c      	cmp	r5, #12
 8009b34:	bf38      	it	cc
 8009b36:	250c      	movcc	r5, #12
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	db01      	blt.n	8009b42 <_malloc_r+0x1a>
 8009b3e:	42a9      	cmp	r1, r5
 8009b40:	d903      	bls.n	8009b4a <_malloc_r+0x22>
 8009b42:	230c      	movs	r3, #12
 8009b44:	6033      	str	r3, [r6, #0]
 8009b46:	2000      	movs	r0, #0
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	f000 f87d 	bl	8009c48 <__malloc_lock>
 8009b4e:	4a21      	ldr	r2, [pc, #132]	; (8009bd4 <_malloc_r+0xac>)
 8009b50:	6814      	ldr	r4, [r2, #0]
 8009b52:	4621      	mov	r1, r4
 8009b54:	b991      	cbnz	r1, 8009b7c <_malloc_r+0x54>
 8009b56:	4c20      	ldr	r4, [pc, #128]	; (8009bd8 <_malloc_r+0xb0>)
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	b91b      	cbnz	r3, 8009b64 <_malloc_r+0x3c>
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 f863 	bl	8009c28 <_sbrk_r>
 8009b62:	6020      	str	r0, [r4, #0]
 8009b64:	4629      	mov	r1, r5
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 f85e 	bl	8009c28 <_sbrk_r>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d124      	bne.n	8009bba <_malloc_r+0x92>
 8009b70:	230c      	movs	r3, #12
 8009b72:	6033      	str	r3, [r6, #0]
 8009b74:	4630      	mov	r0, r6
 8009b76:	f000 f868 	bl	8009c4a <__malloc_unlock>
 8009b7a:	e7e4      	b.n	8009b46 <_malloc_r+0x1e>
 8009b7c:	680b      	ldr	r3, [r1, #0]
 8009b7e:	1b5b      	subs	r3, r3, r5
 8009b80:	d418      	bmi.n	8009bb4 <_malloc_r+0x8c>
 8009b82:	2b0b      	cmp	r3, #11
 8009b84:	d90f      	bls.n	8009ba6 <_malloc_r+0x7e>
 8009b86:	600b      	str	r3, [r1, #0]
 8009b88:	50cd      	str	r5, [r1, r3]
 8009b8a:	18cc      	adds	r4, r1, r3
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 f85c 	bl	8009c4a <__malloc_unlock>
 8009b92:	f104 000b 	add.w	r0, r4, #11
 8009b96:	1d23      	adds	r3, r4, #4
 8009b98:	f020 0007 	bic.w	r0, r0, #7
 8009b9c:	1ac3      	subs	r3, r0, r3
 8009b9e:	d0d3      	beq.n	8009b48 <_malloc_r+0x20>
 8009ba0:	425a      	negs	r2, r3
 8009ba2:	50e2      	str	r2, [r4, r3]
 8009ba4:	e7d0      	b.n	8009b48 <_malloc_r+0x20>
 8009ba6:	428c      	cmp	r4, r1
 8009ba8:	684b      	ldr	r3, [r1, #4]
 8009baa:	bf16      	itet	ne
 8009bac:	6063      	strne	r3, [r4, #4]
 8009bae:	6013      	streq	r3, [r2, #0]
 8009bb0:	460c      	movne	r4, r1
 8009bb2:	e7eb      	b.n	8009b8c <_malloc_r+0x64>
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	6849      	ldr	r1, [r1, #4]
 8009bb8:	e7cc      	b.n	8009b54 <_malloc_r+0x2c>
 8009bba:	1cc4      	adds	r4, r0, #3
 8009bbc:	f024 0403 	bic.w	r4, r4, #3
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d005      	beq.n	8009bd0 <_malloc_r+0xa8>
 8009bc4:	1a21      	subs	r1, r4, r0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f000 f82e 	bl	8009c28 <_sbrk_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d0cf      	beq.n	8009b70 <_malloc_r+0x48>
 8009bd0:	6025      	str	r5, [r4, #0]
 8009bd2:	e7db      	b.n	8009b8c <_malloc_r+0x64>
 8009bd4:	2000042c 	.word	0x2000042c
 8009bd8:	20000430 	.word	0x20000430

08009bdc <_realloc_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	4607      	mov	r7, r0
 8009be0:	4614      	mov	r4, r2
 8009be2:	460e      	mov	r6, r1
 8009be4:	b921      	cbnz	r1, 8009bf0 <_realloc_r+0x14>
 8009be6:	4611      	mov	r1, r2
 8009be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bec:	f7ff bf9c 	b.w	8009b28 <_malloc_r>
 8009bf0:	b922      	cbnz	r2, 8009bfc <_realloc_r+0x20>
 8009bf2:	f7ff ff4b 	bl	8009a8c <_free_r>
 8009bf6:	4625      	mov	r5, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bfc:	f000 f826 	bl	8009c4c <_malloc_usable_size_r>
 8009c00:	42a0      	cmp	r0, r4
 8009c02:	d20f      	bcs.n	8009c24 <_realloc_r+0x48>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4638      	mov	r0, r7
 8009c08:	f7ff ff8e 	bl	8009b28 <_malloc_r>
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d0f2      	beq.n	8009bf8 <_realloc_r+0x1c>
 8009c12:	4631      	mov	r1, r6
 8009c14:	4622      	mov	r2, r4
 8009c16:	f7ff ff15 	bl	8009a44 <memcpy>
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff ff35 	bl	8009a8c <_free_r>
 8009c22:	e7e9      	b.n	8009bf8 <_realloc_r+0x1c>
 8009c24:	4635      	mov	r5, r6
 8009c26:	e7e7      	b.n	8009bf8 <_realloc_r+0x1c>

08009c28 <_sbrk_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4c06      	ldr	r4, [pc, #24]	; (8009c44 <_sbrk_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4605      	mov	r5, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	f7f7 f81a 	bl	8000c6c <_sbrk>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_sbrk_r+0x1a>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_sbrk_r+0x1a>
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20001870 	.word	0x20001870

08009c48 <__malloc_lock>:
 8009c48:	4770      	bx	lr

08009c4a <__malloc_unlock>:
 8009c4a:	4770      	bx	lr

08009c4c <_malloc_usable_size_r>:
 8009c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c50:	1f18      	subs	r0, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfbc      	itt	lt
 8009c56:	580b      	ldrlt	r3, [r1, r0]
 8009c58:	18c0      	addlt	r0, r0, r3
 8009c5a:	4770      	bx	lr

08009c5c <_init>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr

08009c68 <_fini>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr
