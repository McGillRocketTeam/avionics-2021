
cubeide-sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007a80  08007a80  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a80  08007a80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  20000088  08007b10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08007b10  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8f9  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022e3  00000000  00000000  0002e9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  00030c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e263  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bce5  00000000  00000000  00050563  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aac20  00000000  00000000  0005c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000326c  00000000  00000000  00106ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800776c 	.word	0x0800776c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800776c 	.word	0x0800776c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <myprintf+0x44>)
 80002a8:	f006 fe6c 	bl	8006f84 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <myprintf+0x48>)
 80002c2:	f002 fe5f 	bl	8002f84 <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200000a4 	.word	0x200000a4
 80002d8:	20000244 	.word	0x20000244

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b5b0      	push	{r4, r5, r7, lr}
 80002de:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fbaa 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f90a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f9d4 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002f0:	f000 f9a2 	bl	8000638 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80002f4:	f000 f962 	bl	80005bc <MX_SPI2_Init>
  MX_FATFS_Init();
 80002f8:	f003 fa54 	bl	80037a4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80002fc:	4871      	ldr	r0, [pc, #452]	; (80004c4 <main+0x1e8>)
 80002fe:	f7ff ffc7 	bl	8000290 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f000 fbff 	bl	8000b08 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 800030a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800030e:	2201      	movs	r2, #1
 8000310:	496d      	ldr	r1, [pc, #436]	; (80004c8 <main+0x1ec>)
 8000312:	4618      	mov	r0, r3
 8000314:	f005 fe24 	bl	8005f60 <f_mount>
 8000318:	4603      	mov	r3, r0
 800031a:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    if (fres != FR_OK) {
 800031e:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8000322:	2b00      	cmp	r3, #0
 8000324:	d006      	beq.n	8000334 <main+0x58>
  	myprintf("f_mount error (%i)\r\n", fres);
 8000326:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800032a:	4619      	mov	r1, r3
 800032c:	4867      	ldr	r0, [pc, #412]	; (80004cc <main+0x1f0>)
 800032e:	f7ff ffaf 	bl	8000290 <myprintf>
  	while(1);
 8000332:	e7fe      	b.n	8000332 <main+0x56>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000334:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800033c:	4619      	mov	r1, r3
 800033e:	4862      	ldr	r0, [pc, #392]	; (80004c8 <main+0x1ec>)
 8000340:	f006 fc5b 	bl	8006bfa <f_getfree>
 8000344:	4603      	mov	r3, r0
 8000346:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    if (fres != FR_OK) {
 800034a:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800034e:	2b00      	cmp	r3, #0
 8000350:	d006      	beq.n	8000360 <main+0x84>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8000352:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8000356:	4619      	mov	r1, r3
 8000358:	485d      	ldr	r0, [pc, #372]	; (80004d0 <main+0x1f4>)
 800035a:	f7ff ff99 	bl	8000290 <myprintf>
  	while(1);
 800035e:	e7fe      	b.n	800035e <main+0x82>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800036a:	3b02      	subs	r3, #2
 800036c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
    free_sectors = free_clusters * getFreeFs->csize;
 800037e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000388:	461a      	mov	r2, r3
 800038a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	fb03 f302 	mul.w	r3, r3, r2
 8000394:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000398:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800039c:	0859      	lsrs	r1, r3, #1
 800039e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80003a2:	085b      	lsrs	r3, r3, #1
 80003a4:	461a      	mov	r2, r3
 80003a6:	484b      	ldr	r0, [pc, #300]	; (80004d4 <main+0x1f8>)
 80003a8:	f7ff ff72 	bl	8000290 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 80003ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b0:	2201      	movs	r2, #1
 80003b2:	4949      	ldr	r1, [pc, #292]	; (80004d8 <main+0x1fc>)
 80003b4:	4618      	mov	r0, r3
 80003b6:	f005 fe1b 	bl	8005ff0 <f_open>
 80003ba:	4603      	mov	r3, r0
 80003bc:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    if (fres != FR_OK) {
 80003c0:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d003      	beq.n	80003d0 <main+0xf4>
  	myprintf("f_open error (%i)\r\n");
 80003c8:	4844      	ldr	r0, [pc, #272]	; (80004dc <main+0x200>)
 80003ca:	f7ff ff61 	bl	8000290 <myprintf>
  	while(1);
 80003ce:	e7fe      	b.n	80003ce <main+0xf2>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 80003d0:	4843      	ldr	r0, [pc, #268]	; (80004e0 <main+0x204>)
 80003d2:	f7ff ff5d 	bl	8000290 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[50];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 50, &fil);
 80003d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	2132      	movs	r1, #50	; 0x32
 80003e0:	4618      	mov	r0, r3
 80003e2:	f006 fcd7 	bl	8006d94 <f_gets>
 80003e6:	f8c7 04a0 	str.w	r0, [r7, #1184]	; 0x4a0
    if(rres != 0) {
 80003ea:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d006      	beq.n	8000400 <main+0x124>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	483a      	ldr	r0, [pc, #232]	; (80004e4 <main+0x208>)
 80003fa:	f7ff ff49 	bl	8000290 <myprintf>
 80003fe:	e005      	b.n	800040c <main+0x130>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8000400:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8000404:	4619      	mov	r1, r3
 8000406:	4838      	ldr	r0, [pc, #224]	; (80004e8 <main+0x20c>)
 8000408:	f7ff ff42 	bl	8000290 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800040c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000410:	4618      	mov	r0, r3
 8000412:	f006 fbca 	bl	8006baa <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write2.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000416:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800041a:	221a      	movs	r2, #26
 800041c:	4933      	ldr	r1, [pc, #204]	; (80004ec <main+0x210>)
 800041e:	4618      	mov	r0, r3
 8000420:	f005 fde6 	bl	8005ff0 <f_open>
 8000424:	4603      	mov	r3, r0
 8000426:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    if(fres == FR_OK) {
 800042a:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800042e:	2b00      	cmp	r3, #0
 8000430:	d103      	bne.n	800043a <main+0x15e>
  	myprintf("I was able to open 'write2.txt' for writing\r\n");
 8000432:	482f      	ldr	r0, [pc, #188]	; (80004f0 <main+0x214>)
 8000434:	f7ff ff2c 	bl	8000290 <myprintf>
 8000438:	e005      	b.n	8000446 <main+0x16a>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 800043a:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800043e:	4619      	mov	r1, r3
 8000440:	4826      	ldr	r0, [pc, #152]	; (80004dc <main+0x200>)
 8000442:	f7ff ff25 	bl	8000290 <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made! 2021-03-18_04:21 PM", 39);
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <main+0x218>)
 800044c:	461c      	mov	r4, r3
 800044e:	4615      	mov	r5, r2
 8000450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000458:	e895 0003 	ldmia.w	r5, {r0, r1}
 800045c:	6020      	str	r0, [r4, #0]
 800045e:	3404      	adds	r4, #4
 8000460:	8021      	strh	r1, [r4, #0]
 8000462:	3402      	adds	r4, #2
 8000464:	0c0b      	lsrs	r3, r1, #16
 8000466:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 39, &bytesWrote);
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	f107 0108 	add.w	r1, r7, #8
 800046e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000472:	2227      	movs	r2, #39	; 0x27
 8000474:	f006 f932 	bl	80066dc <f_write>
 8000478:	4603      	mov	r3, r0
 800047a:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    if(fres == FR_OK) {
 800047e:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8000482:	2b00      	cmp	r3, #0
 8000484:	d106      	bne.n	8000494 <main+0x1b8>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4619      	mov	r1, r3
 800048c:	481a      	ldr	r0, [pc, #104]	; (80004f8 <main+0x21c>)
 800048e:	f7ff feff 	bl	8000290 <myprintf>
 8000492:	e002      	b.n	800049a <main+0x1be>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000494:	4819      	ldr	r0, [pc, #100]	; (80004fc <main+0x220>)
 8000496:	f7ff fefb 	bl	8000290 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800049a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800049e:	4618      	mov	r0, r3
 80004a0:	f006 fb83 	bl	8006baa <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	4908      	ldr	r1, [pc, #32]	; (80004c8 <main+0x1ec>)
 80004a8:	2000      	movs	r0, #0
 80004aa:	f005 fd59 	bl	8005f60 <f_mount>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
        //Blink the LED every second
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ae:	2120      	movs	r1, #32
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fdd2 	bl	800105c <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 80004b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004bc:	f000 fb24 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004c0:	e7f5      	b.n	80004ae <main+0x1d2>
 80004c2:	bf00      	nop
 80004c4:	08007784 	.word	0x08007784
 80004c8:	080077a4 	.word	0x080077a4
 80004cc:	080077a8 	.word	0x080077a8
 80004d0:	080077c0 	.word	0x080077c0
 80004d4:	080077d8 	.word	0x080077d8
 80004d8:	08007820 	.word	0x08007820
 80004dc:	0800782c 	.word	0x0800782c
 80004e0:	08007840 	.word	0x08007840
 80004e4:	08007870 	.word	0x08007870
 80004e8:	0800789c 	.word	0x0800789c
 80004ec:	080078b0 	.word	0x080078b0
 80004f0:	080078bc 	.word	0x080078bc
 80004f4:	080078ec 	.word	0x080078ec
 80004f8:	08007914 	.word	0x08007914
 80004fc:	08007938 	.word	0x08007938

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0a6      	sub	sp, #152	; 0x98
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800050a:	2228      	movs	r2, #40	; 0x28
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f006 fd04 	bl	8006f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2258      	movs	r2, #88	; 0x58
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fcf6 	bl	8006f1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2310      	movs	r3, #16
 800053a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fd96 	bl	8001090 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800056a:	f000 f911 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fc96 	bl	8001ebc <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000596:	f000 f8fb 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800059a:	2302      	movs	r3, #2
 800059c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 febf 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b0:	f000 f8ee 	bl	8000790 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3798      	adds	r7, #152	; 0x98
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_SPI2_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_SPI2_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_SPI2_Init+0x74>)
 80005c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_SPI2_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_SPI2_Init+0x74>)
 80005d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_SPI2_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_SPI2_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_SPI2_Init+0x74>)
 80005ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_SPI2_Init+0x74>)
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_SPI2_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SPI2_Init+0x74>)
 800060a:	2207      	movs	r2, #7
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_SPI2_Init+0x74>)
 8000616:	2208      	movs	r2, #8
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_SPI2_Init+0x74>)
 800061c:	f002 f8a2 	bl	8002764 <HAL_SPI_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f8b3 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200001e0 	.word	0x200001e0
 8000634:	40003800 	.word	0x40003800

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_USART2_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000644:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x58>)
 800067c:	f002 fc34 	bl	8002ee8 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f883 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000244 	.word	0x20000244
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a27      	ldr	r2, [pc, #156]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_GPIO_Init+0xe8>)
 80006fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xe8>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 fc89 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <MX_GPIO_Init+0xec>)
 8000720:	f000 fc84 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_GPIO_Init+0xf0>)
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_GPIO_Init+0xf4>)
 800073a:	f000 faed 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800073e:	2320      	movs	r3, #32
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 fade 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xec>)
 8000774:	f000 fad0 	bl	8000d18 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400
 8000788:	10210000 	.word	0x10210000
 800078c:	48000800 	.word	0x48000800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d6:	2007      	movs	r0, #7
 80007d8:	f000 fa6a 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_SPI_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d128      	bne.n	800085c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_SPI_MspInit+0x80>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <HAL_SPI_MspInit+0x80>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_SPI_MspInit+0x80>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_SPI_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_SPI_MspInit+0x80>)
 8000828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_SPI_MspInit+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800083e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084c:	2305      	movs	r3, #5
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_SPI_MspInit+0x84>)
 8000858:	f000 fa5e 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40003800 	.word	0x40003800
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_UART_MspInit+0x7c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d128      	bne.n	80008e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x80>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_UART_MspInit+0x80>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_UART_MspInit+0x80>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_UART_MspInit+0x80>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x80>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UART_MspInit+0x80>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 fa1a 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40021000 	.word	0x40021000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8be 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f006 faa2 	bl	8006ec8 <__errno>
 8000984:	4602      	mov	r2, r0
 8000986:	230c      	movs	r3, #12
 8000988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20010000 	.word	0x20010000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	200001a4 	.word	0x200001a4
 80009b8:	20000738 	.word	0x20000738

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x28>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x28>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0x28>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	609a      	str	r2, [r3, #8]
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ee:	e003      	b.n	80009f8 <LoopCopyDataInit>

080009f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009f6:	3104      	adds	r1, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <LoopForever+0xe>)
	adds	r2, r0, r1
 80009fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a00:	d3f6      	bcc.n	80009f0 <CopyDataInit>
	ldr	r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a04:	e002      	b.n	8000a0c <LoopFillZerobss>

08000a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a08:	f842 3b04 	str.w	r3, [r2], #4

08000a0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <LoopForever+0x16>)
	cmp	r2, r3
 8000a0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a10:	d3f9      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffd3 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f006 fa5d 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fc5f 	bl	80002dc <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a24:	08007a88 	.word	0x08007a88
	ldr	r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a2c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8000a30:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8000a34:	20000738 	.word	0x20000738

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f92f 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fea2 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f939 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f90f 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200002c4 	.word	0x200002c4

08000af0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200002c4 	.word	0x200002c4

08000b08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_Delay+0x40>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e160      	b.n	8000fea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8152 	beq.w	8000fe4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x38>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d00b      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de0:	2b11      	cmp	r3, #17
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b12      	cmp	r3, #18
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80ac 	beq.w	8000fe4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a5d      	ldr	r2, [pc, #372]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a59      	ldr	r2, [pc, #356]	; (800100c <HAL_GPIO_Init+0x2f4>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ece:	d025      	beq.n	8000f1c <HAL_GPIO_Init+0x204>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_GPIO_Init+0x2f8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d01f      	beq.n	8000f18 <HAL_GPIO_Init+0x200>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a4e      	ldr	r2, [pc, #312]	; (8001014 <HAL_GPIO_Init+0x2fc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d019      	beq.n	8000f14 <HAL_GPIO_Init+0x1fc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4d      	ldr	r2, [pc, #308]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d013      	beq.n	8000f10 <HAL_GPIO_Init+0x1f8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_GPIO_Init+0x304>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_Init+0x1f4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4b      	ldr	r2, [pc, #300]	; (8001020 <HAL_GPIO_Init+0x308>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <HAL_GPIO_Init+0x30c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000f00:	2306      	movs	r3, #6
 8000f02:	e00c      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f04:	2307      	movs	r3, #7
 8000f06:	e00a      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f08:	2305      	movs	r3, #5
 8000f0a:	e008      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f2e:	4937      	ldr	r1, [pc, #220]	; (800100c <HAL_GPIO_Init+0x2f4>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f60:	4a31      	ldr	r2, [pc, #196]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8a:	4a27      	ldr	r2, [pc, #156]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f47f ae97 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	48001000 	.word	0x48001000
 8001020:	48001400 	.word	0x48001400
 8001024:	48001800 	.word	0x48001800
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001096:	af00      	add	r7, sp, #0
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f000 bf01 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8160 	beq.w	800137a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ba:	4bae      	ldr	r3, [pc, #696]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d00c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c6:	4bab      	ldr	r3, [pc, #684]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d159      	bne.n	8001186 <HAL_RCC_OscConfig+0xf6>
 80010d2:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010de:	d152      	bne.n	8001186 <HAL_RCC_OscConfig+0xf6>
 80010e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <HAL_RCC_OscConfig+0x82>
 800110c:	4b99      	ldr	r3, [pc, #612]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0xae>
 8001112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001116:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800112e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800113a:	4b8e      	ldr	r3, [pc, #568]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001142:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001146:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001152:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f042 0220 	orr.w	r2, r2, #32
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f002 021f 	and.w	r2, r2, #31
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8102 	beq.w	8001378 <HAL_RCC_OscConfig+0x2e8>
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 80fc 	bne.w	8001378 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	f000 be93 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d106      	bne.n	80011a0 <HAL_RCC_OscConfig+0x110>
 8001192:	4b78      	ldr	r3, [pc, #480]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a77      	ldr	r2, [pc, #476]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e030      	b.n	8001202 <HAL_RCC_OscConfig+0x172>
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x134>
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a71      	ldr	r2, [pc, #452]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6e      	ldr	r2, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01e      	b.n	8001202 <HAL_RCC_OscConfig+0x172>
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ce:	d10c      	bne.n	80011ea <HAL_RCC_OscConfig+0x15a>
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a67      	ldr	r2, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a64      	ldr	r2, [pc, #400]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x172>
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 80011fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d059      	beq.n	80012c0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fc70 	bl	8000af0 <HAL_GetTick>
 8001210:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001216:	f7ff fc6b 	bl	8000af0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d902      	bls.n	800122c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	f000 be40 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
 800122c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001230:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001240:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d102      	bne.n	800125e <HAL_RCC_OscConfig+0x1ce>
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x1fa>
 800125e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001262:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001276:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800127a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800128e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001292:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800129e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f002 021f 	and.w	r2, r2, #31
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ab      	beq.n	8001216 <HAL_RCC_OscConfig+0x186>
 80012be:	e05c      	b.n	800137a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc16 	bl	8000af0 <HAL_GetTick>
 80012c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ca:	f7ff fc11 	bl	8000af0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d902      	bls.n	80012e0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	f000 bde6 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
 80012e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d102      	bne.n	8001312 <HAL_RCC_OscConfig+0x282>
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x2ae>
 8001312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001316:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800132e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_RCC_OscConfig+0x2e4>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001342:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001346:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800134a:	fa92 f2a2 	rbit	r2, r2
 800134e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001352:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001356:	fab2 f282 	clz	r2, r2
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	f042 0220 	orr.w	r2, r2, #32
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f002 021f 	and.w	r2, r2, #31
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ab      	bne.n	80012ca <HAL_RCC_OscConfig+0x23a>
 8001372:	e002      	b.n	800137a <HAL_RCC_OscConfig+0x2ea>
 8001374:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8170 	beq.w	800166a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800138a:	4bd0      	ldr	r3, [pc, #832]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001396:	4bcd      	ldr	r3, [pc, #820]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d16d      	bne.n	800147e <HAL_RCC_OscConfig+0x3ee>
 80013a2:	4bca      	ldr	r3, [pc, #808]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ae:	d166      	bne.n	800147e <HAL_RCC_OscConfig+0x3ee>
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	095b      	lsrs	r3, r3, #5
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x350>
 80013da:	4bbc      	ldr	r3, [pc, #752]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	e013      	b.n	8001408 <HAL_RCC_OscConfig+0x378>
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001404:	4bb1      	ldr	r3, [pc, #708]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	2202      	movs	r2, #2
 800140a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800140e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800141a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	f002 021f 	and.w	r2, r2, #31
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_RCC_OscConfig+0x3ba>
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d002      	beq.n	800144a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	f000 bd31 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	21f8      	movs	r1, #248	; 0xf8
 800145a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001462:	fa91 f1a1 	rbit	r1, r1
 8001466:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800146a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800146e:	fab1 f181 	clz	r1, r1
 8001472:	b2c9      	uxtb	r1, r1
 8001474:	408b      	lsls	r3, r1
 8001476:	4995      	ldr	r1, [pc, #596]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147c:	e0f5      	b.n	800166a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8085 	beq.w	8001594 <HAL_RCC_OscConfig+0x504>
 800148a:	2301      	movs	r3, #1
 800148c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800149c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	461a      	mov	r2, r3
 80014b2:	2301      	movs	r3, #1
 80014b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb1b 	bl	8000af0 <HAL_GetTick>
 80014ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb16 	bl	8000af0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d902      	bls.n	80014d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f000 bceb 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x476>
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	e013      	b.n	800152e <HAL_RCC_OscConfig+0x49e>
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800151e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800152a:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	2202      	movs	r2, #2
 8001530:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001534:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001538:	fa92 f2a2 	rbit	r2, r2
 800153c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001540:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f042 0220 	orr.w	r2, r2, #32
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f002 021f 	and.w	r2, r2, #31
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0af      	beq.n	80014c0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	21f8      	movs	r1, #248	; 0xf8
 8001570:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001578:	fa91 f1a1 	rbit	r1, r1
 800157c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001580:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001584:	fab1 f181 	clz	r1, r1
 8001588:	b2c9      	uxtb	r1, r1
 800158a:	408b      	lsls	r3, r1
 800158c:	494f      	ldr	r1, [pc, #316]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e06a      	b.n	800166a <HAL_RCC_OscConfig+0x5da>
 8001594:	2301      	movs	r3, #1
 8001596:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	461a      	mov	r2, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa96 	bl	8000af0 <HAL_GetTick>
 80015c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fa91 	bl	8000af0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d902      	bls.n	80015e0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	f000 bc66 	b.w	8001eac <HAL_RCC_OscConfig+0xe1c>
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x580>
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	e013      	b.n	8001638 <HAL_RCC_OscConfig+0x5a8>
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001628:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCC_OscConfig+0x63c>)
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	2202      	movs	r2, #2
 800163a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800163e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001642:	fa92 f2a2 	rbit	r2, r2
 8001646:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800164a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800164e:	fab2 f282 	clz	r2, r2
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	f002 021f 	and.w	r2, r2, #31
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f202 	lsl.w	r2, r1, r2
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1af      	bne.n	80015ca <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80da 	beq.w	800182e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d069      	beq.n	8001758 <HAL_RCC_OscConfig+0x6c8>
 8001684:	2301      	movs	r3, #1
 8001686:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001696:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x640>)
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	461a      	mov	r2, r3
 80016aa:	2301      	movs	r3, #1
 80016ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fa1f 	bl	8000af0 <HAL_GetTick>
 80016b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e00d      	b.n	80016d4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fa1a 	bl	8000af0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d905      	bls.n	80016d4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e3ef      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	10908120 	.word	0x10908120
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001704:	2202      	movs	r2, #2
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001716:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4ba4      	ldr	r3, [pc, #656]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800171a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800171c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001720:	2102      	movs	r1, #2
 8001722:	6019      	str	r1, [r3, #0]
 8001724:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f1a3 	rbit	r1, r3
 800172e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001732:	6019      	str	r1, [r3, #0]
  return result;
 8001734:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0b0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x628>
 8001756:	e06a      	b.n	800182e <HAL_RCC_OscConfig+0x79e>
 8001758:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800176e:	601a      	str	r2, [r3, #0]
  return result;
 8001770:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001774:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x920>)
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	461a      	mov	r2, r3
 8001786:	2300      	movs	r3, #0
 8001788:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff f9b1 	bl	8000af0 <HAL_GetTick>
 800178e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	e009      	b.n	80017a8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff f9ac 	bl	8000af0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e381      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 80017a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80017f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f8:	2102      	movs	r1, #2
 80017fa:	6019      	str	r1, [r3, #0]
 80017fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f1a3 	rbit	r1, r3
 8001806:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800180a:	6019      	str	r1, [r3, #0]
  return result;
 800180c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1b2      	bne.n	8001794 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8157 	beq.w	8001aec <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d112      	bne.n	8001876 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b56      	ldr	r3, [pc, #344]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a55      	ldr	r2, [pc, #340]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_RCC_OscConfig+0x924>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <HAL_RCC_OscConfig+0x924>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x924>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff f92f 	bl	8000af0 <HAL_GetTick>
 8001892:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	e009      	b.n	80018ac <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001898:	f7ff f92a 	bl	8000af0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2ff      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x924>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ef      	beq.n	8001898 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d106      	bne.n	80018d0 <HAL_RCC_OscConfig+0x840>
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a39      	ldr	r2, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e02f      	b.n	8001930 <HAL_RCC_OscConfig+0x8a0>
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x864>
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b31      	ldr	r3, [pc, #196]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a30      	ldr	r2, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0x8a0>
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x888>
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x8a0>
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a23      	ldr	r2, [pc, #140]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d06a      	beq.n	8001a10 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f8d9 	bl	8000af0 <HAL_GetTick>
 800193e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f8d4 	bl	8000af0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e2a7      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 800195c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001978:	2202      	movs	r2, #2
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001990:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x928>
 80019a6:	4b01      	ldr	r3, [pc, #4]	; (80019ac <HAL_RCC_OscConfig+0x91c>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x944>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	10908120 	.word	0x10908120
 80019b4:	40007000 	.word	0x40007000
 80019b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4bc0      	ldr	r3, [pc, #768]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019d8:	2102      	movs	r1, #2
 80019da:	6011      	str	r1, [r2, #0]
 80019dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	fa92 f1a2 	rbit	r1, r2
 80019e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019ea:	6011      	str	r1, [r2, #0]
  return result;
 80019ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d09a      	beq.n	8001944 <HAL_RCC_OscConfig+0x8b4>
 8001a0e:	e063      	b.n	8001ad8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f86e 	bl	8000af0 <HAL_GetTick>
 8001a14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f869 	bl	8000af0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e23c      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 8001a32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a60:	601a      	str	r2, [r3, #0]
  return result;
 8001a62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x9f2>
 8001a7c:	4b95      	ldr	r3, [pc, #596]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	e00d      	b.n	8001a9e <HAL_RCC_OscConfig+0xa0e>
 8001a82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a86:	2202      	movs	r2, #2
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	6011      	str	r1, [r2, #0]
 8001aa6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fa92 f1a2 	rbit	r1, r2
 8001ab0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ab4:	6011      	str	r1, [r2, #0]
  return result;
 8001ab6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fab2 f282 	clz	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f002 021f 	and.w	r2, r2, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1a0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	4a7b      	ldr	r2, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 81d9 	beq.w	8001eaa <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f000 81a6 	beq.w	8001e52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	f040 811e 	bne.w	8001d4e <HAL_RCC_OscConfig+0xcbe>
 8001b12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe ffd2 	bl	8000af0 <HAL_GetTick>
 8001b4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7fe ffcd 	bl	8000af0 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1a2      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 8001b66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xb10>
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb48>
 8001ba0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be0:	6011      	str	r1, [r2, #0]
 8001be2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	fa92 f1a2 	rbit	r1, r2
 8001bec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bf0:	6011      	str	r1, [r2, #0]
  return result;
 8001bf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d19e      	bne.n	8001b52 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	f023 020f 	bic.w	r2, r3, #15
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	492c      	ldr	r1, [pc, #176]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a19      	ldr	r1, [r3, #32]
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	4925      	ldr	r1, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c5c:	601a      	str	r2, [r3, #0]
  return result;
 8001c5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c62:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	2301      	movs	r3, #1
 8001c78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ff39 	bl	8000af0 <HAL_GetTick>
 8001c7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c82:	e009      	b.n	8001c98 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe ff34 	bl	8000af0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e109      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 8001c98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cb0:	601a      	str	r2, [r3, #0]
  return result;
 8001cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xc48>
 8001ccc:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <HAL_RCC_OscConfig+0xc44>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e01e      	b.n	8001d10 <HAL_RCC_OscConfig+0xc80>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0xe28>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	fa92 f1a2 	rbit	r1, r2
 8001d24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d28:	6011      	str	r1, [r2, #0]
  return result;
 8001d2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d09b      	beq.n	8001c84 <HAL_RCC_OscConfig+0xbf4>
 8001d4c:	e0ad      	b.n	8001eaa <HAL_RCC_OscConfig+0xe1a>
 8001d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe feb4 	bl	8000af0 <HAL_GetTick>
 8001d88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe feaf 	bl	8000af0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e084      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_OscConfig+0xd4c>
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_RCC_OscConfig+0xe28>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e01b      	b.n	8001e14 <HAL_RCC_OscConfig+0xd84>
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0xe28>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f107 0214 	add.w	r2, r7, #20
 8001e18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	f107 0214 	add.w	r2, r7, #20
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f107 0210 	add.w	r2, r7, #16
 8001e2c:	6011      	str	r1, [r2, #0]
  return result;
 8001e2e:	f107 0210 	add.w	r2, r7, #16
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d19e      	bne.n	8001d8e <HAL_RCC_OscConfig+0xcfe>
 8001e50:	e02b      	b.n	8001eaa <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e025      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_RCC_OscConfig+0xe28>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_RCC_OscConfig+0xe28>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e74:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d111      	bne.n	8001ea6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d108      	bne.n	8001ea6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b09e      	sub	sp, #120	; 0x78
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e162      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b90      	ldr	r3, [pc, #576]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	498b      	ldr	r1, [pc, #556]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e14a      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b82      	ldr	r3, [pc, #520]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	497f      	ldr	r1, [pc, #508]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80dc 	beq.w	80020e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d13c      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xf6>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xa6>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e00f      	b.n	8001f82 <HAL_RCC_ClockConfig+0xc6>
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	663b      	str	r3, [r7, #96]	; 0x60
 8001f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f8a:	fa92 f2a2 	rbit	r2, r2
 8001f8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d17b      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0f3      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d13c      	bne.n	8002034 <HAL_RCC_ClockConfig+0x178>
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x128>
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_ClockConfig+0x148>
 8001fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	63ba      	str	r2, [r7, #56]	; 0x38
 800200a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13a      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b2      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d102      	bne.n	800205c <HAL_RCC_ClockConfig+0x1a0>
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e00d      	b.n	8002078 <HAL_RCC_ClockConfig+0x1bc>
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	61ba      	str	r2, [r7, #24]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	617a      	str	r2, [r7, #20]
  return result;
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e079      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	491a      	ldr	r1, [pc, #104]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fd1a 	bl	8000af0 <HAL_GetTick>
 80020bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fd16 	bl	8000af0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e061      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d214      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4906      	ldr	r1, [pc, #24]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e040      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	491a      	ldr	r1, [pc, #104]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800215e:	f000 f829 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216c:	22f0      	movs	r2, #240	; 0xf0
 800216e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	fa92 f2a2 	rbit	r2, r2
 8002176:	60fa      	str	r2, [r7, #12]
  return result;
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	40d3      	lsrs	r3, r2
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	fa21 f303 	lsr.w	r3, r1, r3
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_RCC_ClockConfig+0x2f0>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fc68 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3778      	adds	r7, #120	; 0x78
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08007994 	.word	0x08007994
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x30>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x36>
 80021e2:	e03f      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_GetSysClockFreq+0xc8>)
 80021e6:	623b      	str	r3, [r7, #32]
      break;
 80021e8:	e03f      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	607a      	str	r2, [r7, #4]
  return result;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	40d3      	lsrs	r3, r2
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_RCC_GetSysClockFreq+0xcc>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	220f      	movs	r2, #15
 8002218:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	60fa      	str	r2, [r7, #12]
  return result;
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <HAL_RCC_GetSysClockFreq+0xd0>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_RCC_GetSysClockFreq+0xc8>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fbb2 f2f3 	udiv	r2, r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	e007      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fbb2 f2f3 	udiv	r2, r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	623b      	str	r3, [r7, #32]
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002266:	623b      	str	r3, [r7, #32]
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6a3b      	ldr	r3, [r7, #32]
}
 800226c:	4618      	mov	r0, r3
 800226e:	372c      	adds	r7, #44	; 0x2c
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000
 800227c:	007a1200 	.word	0x007a1200
 8002280:	080079ac 	.word	0x080079ac
 8002284:	080079bc 	.word	0x080079bc

08002288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_GetHCLKFreq+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000000 	.word	0x20000000

080022a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022a6:	f7ff ffef 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022aa:	4601      	mov	r1, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	603a      	str	r2, [r7, #0]
  return result;
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	40d3      	lsrs	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	080079a4 	.word	0x080079a4

080022e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022ea:	f7ff ffcd 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	603a      	str	r2, [r7, #0]
  return result;
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	40d3      	lsrs	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080079a4 	.word	0x080079a4

08002328 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b092      	sub	sp, #72	; 0x48
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80d7 	beq.w	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234c:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10e      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	4b48      	ldr	r3, [pc, #288]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a41      	ldr	r2, [pc, #260]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe fbaf 	bl	8000af0 <HAL_GetTick>
 8002392:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe fbab 	bl	8000af0 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1d6      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8084 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d07c      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2300      	movs	r3, #0
 8002424:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d04b      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fb5b 	bl	8000af0 <HAL_GetTick>
 800243a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fb57 	bl	8000af0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e180      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	2302      	movs	r3, #2
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	61fb      	str	r3, [r7, #28]
  return result;
 800246c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d108      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002482:	4b01      	ldr	r3, [pc, #4]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	e00d      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	10908100 	.word	0x10908100
 8002494:	2302      	movs	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2202      	movs	r2, #2
 80024a6:	613a      	str	r2, [r7, #16]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	60fa      	str	r2, [r7, #12]
  return result;
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	fab2 f282 	clz	r2, r2
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f002 021f 	and.w	r2, r2, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f202 	lsl.w	r2, r1, r2
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0b7      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024ce:	4b95      	ldr	r3, [pc, #596]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4992      	ldr	r1, [pc, #584]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a8d      	ldr	r2, [pc, #564]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002500:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f023 0203 	bic.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4985      	ldr	r1, [pc, #532]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	497e      	ldr	r1, [pc, #504]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253c:	4b79      	ldr	r3, [pc, #484]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4976      	ldr	r1, [pc, #472]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	496f      	ldr	r1, [pc, #444]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002578:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	4967      	ldr	r1, [pc, #412]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f023 0220 	bic.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4960      	ldr	r1, [pc, #384]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	4958      	ldr	r1, [pc, #352]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4951      	ldr	r1, [pc, #324]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4949      	ldr	r1, [pc, #292]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800260e:	4b45      	ldr	r3, [pc, #276]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4942      	ldr	r1, [pc, #264]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	493a      	ldr	r1, [pc, #232]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	4933      	ldr	r1, [pc, #204]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	492b      	ldr	r1, [pc, #172]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4924      	ldr	r1, [pc, #144]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	491c      	ldr	r1, [pc, #112]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	4915      	ldr	r1, [pc, #84]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	490d      	ldr	r1, [pc, #52]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800271c:	4b01      	ldr	r3, [pc, #4]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	e002      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	490b      	ldr	r1, [pc, #44]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002732:	4313      	orrs	r3, r2
 8002734:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002750:	4313      	orrs	r3, r2
 8002752:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3748      	adds	r7, #72	; 0x48
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000

08002764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e084      	b.n	8002880 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe f829 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b6:	d902      	bls.n	80027be <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027cc:	d007      	beq.n	80027de <HAL_SPI_Init+0x7a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027d6:	d002      	beq.n	80027de <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027ee:	d903      	bls.n	80027f8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
 80027f6:	e002      	b.n	80027fe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	ea42 0103 	orr.w	r1, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0204 	and.w	r2, r3, #4
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x26>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e1fb      	b.n	8002ca6 <HAL_SPI_TransmitReceive+0x41e>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b6:	f7fe f91b 	bl	8000af0 <HAL_GetTick>
 80028ba:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028c2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028d2:	7efb      	ldrb	r3, [r7, #27]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d00e      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x6e>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028de:	d106      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x66>
 80028e8:	7efb      	ldrb	r3, [r7, #27]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028f4:	e1cd      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x80>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x80>
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800290e:	e1c0      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b04      	cmp	r3, #4
 800291a:	d003      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2205      	movs	r2, #5
 8002920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002966:	d802      	bhi.n	800296e <HAL_SPI_TransmitReceive+0xe6>
 8002968:	8a3b      	ldrh	r3, [r7, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d908      	bls.n	8002980 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	e007      	b.n	8002990 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800298e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d007      	beq.n	80029ae <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b6:	d97c      	bls.n	8002ab2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_SPI_TransmitReceive+0x13e>
 80029c0:	8a7b      	ldrh	r3, [r7, #18]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d169      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	1c9a      	adds	r2, r3, #2
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ea:	e056      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d11b      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x1aa>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d016      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x1aa>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d113      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	1c9a      	adds	r2, r3, #2
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d11c      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x1f2>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	b292      	uxth	r2, r2
 8002a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a7a:	f7fe f839 	bl	8000af0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d807      	bhi.n	8002a9a <HAL_SPI_TransmitReceive+0x212>
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d003      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a98:	e0fb      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1a3      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x164>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d19d      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x164>
 8002ab0:	e0df      	b.n	8002c72 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x23a>
 8002aba:	8a7b      	ldrh	r3, [r7, #18]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80cb 	bne.w	8002c58 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d912      	bls.n	8002af2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002af0:	e0b2      	b.n	8002c58 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b18:	e09e      	b.n	8002c58 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d134      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x30a>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d02f      	beq.n	8002b92 <HAL_SPI_TransmitReceive+0x30a>
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d12c      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d912      	bls.n	8002b68 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b02      	subs	r3, #2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b66:	e012      	b.n	8002b8e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d148      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x3aa>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d042      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d923      	bls.n	8002c00 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b02      	subs	r3, #2
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d81f      	bhi.n	8002c2e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e016      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f103 020c 	add.w	r2, r3, #12
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c32:	f7fd ff5d 	bl	8000af0 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d803      	bhi.n	8002c4a <HAL_SPI_TransmitReceive+0x3c2>
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d102      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x3c8>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c56:	e01c      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f af5b 	bne.w	8002b1a <HAL_SPI_TransmitReceive+0x292>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af54 	bne.w	8002b1a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8f0 	bl	8002e5c <SPI_EndRxTxTransaction>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60
 8002c8e:	e000      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3728      	adds	r7, #40	; 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cbe:	e04c      	b.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d048      	beq.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cc8:	f7fd ff12 	bl	8000af0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d902      	bls.n	8002cde <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d13d      	bne.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d111      	bne.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d00:	d004      	beq.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d107      	bne.n	8002d1c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d24:	d10f      	bne.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e00f      	b.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1a3      	bne.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d90:	e057      	b.n	8002e42 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d98:	d106      	bne.n	8002da8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d048      	beq.n	8002e42 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002db0:	f7fd fe9e 	bl	8000af0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d13d      	bne.n	8002e42 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d111      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d004      	beq.n	8002df4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0c:	d10f      	bne.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e008      	b.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d19f      	bne.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff ff84 	bl	8002d82 <SPI_WaitFifoStateUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e027      	b.n	8002ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff ff07 	bl	8002cae <SPI_WaitFlagStateUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e014      	b.n	8002ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff ff5d 	bl	8002d82 <SPI_WaitFifoStateUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e000      	b.n	8002ee0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fcb0 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8c0 	bl	80030ac <UART_SetConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 face 	bl	80034e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb55 	bl	8003624 <UART_CheckIdleState>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	f040 8081 	bne.w	80030a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Transmit+0x26>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e079      	b.n	80030a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit+0x38>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e072      	b.n	80030a2 <HAL_UART_Transmit+0x11e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2221      	movs	r2, #33	; 0x21
 8002fce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fd0:	f7fd fd8e 	bl	8000af0 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	d108      	bne.n	8003002 <HAL_UART_Transmit+0x7e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e003      	b.n	800300a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800300a:	e02d      	b.n	8003068 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fb49 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e03d      	b.n	80030a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003038:	b292      	uxth	r2, r2
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	3302      	adds	r3, #2
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e008      	b.n	8003056 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b292      	uxth	r2, r2
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3301      	adds	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1cb      	bne.n	800300c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fb15 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e009      	b.n	80030a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4bac      	ldr	r3, [pc, #688]	; (800338c <UART_SetConfig+0x2e0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6939      	ldr	r1, [r7, #16]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a9a      	ldr	r2, [pc, #616]	; (8003390 <UART_SetConfig+0x2e4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d121      	bne.n	8003170 <UART_SetConfig+0xc4>
 800312c:	4b99      	ldr	r3, [pc, #612]	; (8003394 <UART_SetConfig+0x2e8>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d817      	bhi.n	8003168 <UART_SetConfig+0xbc>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0x94>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003163 	.word	0x08003163
 800314c:	08003157 	.word	0x08003157
 8003150:	2301      	movs	r3, #1
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e0b2      	b.n	80032bc <UART_SetConfig+0x210>
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e0af      	b.n	80032bc <UART_SetConfig+0x210>
 800315c:	2304      	movs	r3, #4
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e0ac      	b.n	80032bc <UART_SetConfig+0x210>
 8003162:	2308      	movs	r3, #8
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e0a9      	b.n	80032bc <UART_SetConfig+0x210>
 8003168:	2310      	movs	r3, #16
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	bf00      	nop
 800316e:	e0a5      	b.n	80032bc <UART_SetConfig+0x210>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a88      	ldr	r2, [pc, #544]	; (8003398 <UART_SetConfig+0x2ec>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d123      	bne.n	80031c2 <UART_SetConfig+0x116>
 800317a:	4b86      	ldr	r3, [pc, #536]	; (8003394 <UART_SetConfig+0x2e8>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d012      	beq.n	80031ae <UART_SetConfig+0x102>
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d802      	bhi.n	8003194 <UART_SetConfig+0xe8>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <UART_SetConfig+0xf6>
 8003192:	e012      	b.n	80031ba <UART_SetConfig+0x10e>
 8003194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003198:	d00c      	beq.n	80031b4 <UART_SetConfig+0x108>
 800319a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800319e:	d003      	beq.n	80031a8 <UART_SetConfig+0xfc>
 80031a0:	e00b      	b.n	80031ba <UART_SetConfig+0x10e>
 80031a2:	2300      	movs	r3, #0
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e089      	b.n	80032bc <UART_SetConfig+0x210>
 80031a8:	2302      	movs	r3, #2
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e086      	b.n	80032bc <UART_SetConfig+0x210>
 80031ae:	2304      	movs	r3, #4
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e083      	b.n	80032bc <UART_SetConfig+0x210>
 80031b4:	2308      	movs	r3, #8
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e080      	b.n	80032bc <UART_SetConfig+0x210>
 80031ba:	2310      	movs	r3, #16
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	bf00      	nop
 80031c0:	e07c      	b.n	80032bc <UART_SetConfig+0x210>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <UART_SetConfig+0x2f0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d123      	bne.n	8003214 <UART_SetConfig+0x168>
 80031cc:	4b71      	ldr	r3, [pc, #452]	; (8003394 <UART_SetConfig+0x2e8>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d8:	d012      	beq.n	8003200 <UART_SetConfig+0x154>
 80031da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031de:	d802      	bhi.n	80031e6 <UART_SetConfig+0x13a>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <UART_SetConfig+0x148>
 80031e4:	e012      	b.n	800320c <UART_SetConfig+0x160>
 80031e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031ea:	d00c      	beq.n	8003206 <UART_SetConfig+0x15a>
 80031ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f0:	d003      	beq.n	80031fa <UART_SetConfig+0x14e>
 80031f2:	e00b      	b.n	800320c <UART_SetConfig+0x160>
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e060      	b.n	80032bc <UART_SetConfig+0x210>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e05d      	b.n	80032bc <UART_SetConfig+0x210>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e05a      	b.n	80032bc <UART_SetConfig+0x210>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e057      	b.n	80032bc <UART_SetConfig+0x210>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	bf00      	nop
 8003212:	e053      	b.n	80032bc <UART_SetConfig+0x210>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a61      	ldr	r2, [pc, #388]	; (80033a0 <UART_SetConfig+0x2f4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d123      	bne.n	8003266 <UART_SetConfig+0x1ba>
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <UART_SetConfig+0x2e8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322a:	d012      	beq.n	8003252 <UART_SetConfig+0x1a6>
 800322c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003230:	d802      	bhi.n	8003238 <UART_SetConfig+0x18c>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <UART_SetConfig+0x19a>
 8003236:	e012      	b.n	800325e <UART_SetConfig+0x1b2>
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323c:	d00c      	beq.n	8003258 <UART_SetConfig+0x1ac>
 800323e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003242:	d003      	beq.n	800324c <UART_SetConfig+0x1a0>
 8003244:	e00b      	b.n	800325e <UART_SetConfig+0x1b2>
 8003246:	2300      	movs	r3, #0
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e037      	b.n	80032bc <UART_SetConfig+0x210>
 800324c:	2302      	movs	r3, #2
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e034      	b.n	80032bc <UART_SetConfig+0x210>
 8003252:	2304      	movs	r3, #4
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e031      	b.n	80032bc <UART_SetConfig+0x210>
 8003258:	2308      	movs	r3, #8
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e02e      	b.n	80032bc <UART_SetConfig+0x210>
 800325e:	2310      	movs	r3, #16
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	bf00      	nop
 8003264:	e02a      	b.n	80032bc <UART_SetConfig+0x210>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <UART_SetConfig+0x2f8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d123      	bne.n	80032b8 <UART_SetConfig+0x20c>
 8003270:	4b48      	ldr	r3, [pc, #288]	; (8003394 <UART_SetConfig+0x2e8>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327c:	d012      	beq.n	80032a4 <UART_SetConfig+0x1f8>
 800327e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003282:	d802      	bhi.n	800328a <UART_SetConfig+0x1de>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <UART_SetConfig+0x1ec>
 8003288:	e012      	b.n	80032b0 <UART_SetConfig+0x204>
 800328a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800328e:	d00c      	beq.n	80032aa <UART_SetConfig+0x1fe>
 8003290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003294:	d003      	beq.n	800329e <UART_SetConfig+0x1f2>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x204>
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e00e      	b.n	80032bc <UART_SetConfig+0x210>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x210>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e008      	b.n	80032bc <UART_SetConfig+0x210>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e005      	b.n	80032bc <UART_SetConfig+0x210>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	bf00      	nop
 80032b6:	e001      	b.n	80032bc <UART_SetConfig+0x210>
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	f040 8090 	bne.w	80033e8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d86c      	bhi.n	80033a8 <UART_SetConfig+0x2fc>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x228>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003319 	.word	0x08003319
 80032dc:	08003339 	.word	0x08003339
 80032e0:	080033a9 	.word	0x080033a9
 80032e4:	08003355 	.word	0x08003355
 80032e8:	080033a9 	.word	0x080033a9
 80032ec:	080033a9 	.word	0x080033a9
 80032f0:	080033a9 	.word	0x080033a9
 80032f4:	08003375 	.word	0x08003375
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe ffd2 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	005a      	lsls	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e04a      	b.n	80033ae <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7fe ffe4 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 800331c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	005a      	lsls	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	b29b      	uxth	r3, r3
 8003334:	61bb      	str	r3, [r7, #24]
        break;
 8003336:	e03a      	b.n	80033ae <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003342:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6852      	ldr	r2, [r2, #4]
 800334a:	fbb3 f3f2 	udiv	r3, r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	61bb      	str	r3, [r7, #24]
        break;
 8003352:	e02c      	b.n	80033ae <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003354:	f7fe ff2e 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8003358:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	005a      	lsls	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	61bb      	str	r3, [r7, #24]
        break;
 8003372:	e01c      	b.n	80033ae <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	61bb      	str	r3, [r7, #24]
        break;
 800338a:	e010      	b.n	80033ae <UART_SetConfig+0x302>
 800338c:	efff69f3 	.word	0xefff69f3
 8003390:	40013800 	.word	0x40013800
 8003394:	40021000 	.word	0x40021000
 8003398:	40004400 	.word	0x40004400
 800339c:	40004800 	.word	0x40004800
 80033a0:	40004c00 	.word	0x40004c00
 80033a4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
        break;
 80033ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d916      	bls.n	80033e2 <UART_SetConfig+0x336>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d212      	bcs.n	80033e2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	897a      	ldrh	r2, [r7, #10]
 80033de:	60da      	str	r2, [r3, #12]
 80033e0:	e072      	b.n	80034c8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	e06f      	b.n	80034c8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d85b      	bhi.n	80034a6 <UART_SetConfig+0x3fa>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x348>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003437 	.word	0x08003437
 80033fc:	08003455 	.word	0x08003455
 8003400:	080034a7 	.word	0x080034a7
 8003404:	08003471 	.word	0x08003471
 8003408:	080034a7 	.word	0x080034a7
 800340c:	080034a7 	.word	0x080034a7
 8003410:	080034a7 	.word	0x080034a7
 8003414:	0800348f 	.word	0x0800348f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe ff42 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 800341c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085a      	lsrs	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	b29b      	uxth	r3, r3
 8003432:	61bb      	str	r3, [r7, #24]
        break;
 8003434:	e03a      	b.n	80034ac <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003436:	f7fe ff55 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 800343a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	085a      	lsrs	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	61bb      	str	r3, [r7, #24]
        break;
 8003452:	e02b      	b.n	80034ac <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800345e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6852      	ldr	r2, [r2, #4]
 8003466:	fbb3 f3f2 	udiv	r3, r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	61bb      	str	r3, [r7, #24]
        break;
 800346e:	e01d      	b.n	80034ac <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003470:	f7fe fea0 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8003474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	085a      	lsrs	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e00e      	b.n	80034ac <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	61bb      	str	r3, [r7, #24]
        break;
 80034a4:	e002      	b.n	80034ac <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
        break;
 80034aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	d908      	bls.n	80034c4 <UART_SetConfig+0x418>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d204      	bcs.n	80034c4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e001      	b.n	80034c8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop

080034e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d10a      	bne.n	80035f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003632:	f7fd fa5d 	bl	8000af0 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d10e      	bne.n	8003664 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003646:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f82a 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e020      	b.n	80036a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d10e      	bne.n	8003690 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f814 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e00a      	b.n	80036a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036be:	e05d      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d059      	beq.n	800377c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fd fa12 	bl	8000af0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <UART_WaitOnFlagUntilTimeout+0x30>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11b      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e042      	b.n	800379c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02b      	beq.n	800377c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003732:	d123      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800374c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e00f      	b.n	800379c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	429a      	cmp	r2, r3
 8003798:	d092      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80037a8:	4904      	ldr	r1, [pc, #16]	; (80037bc <MX_FATFS_Init+0x18>)
 80037aa:	4805      	ldr	r0, [pc, #20]	; (80037c0 <MX_FATFS_Init+0x1c>)
 80037ac:	f003 fb7c 	bl	8006ea8 <FATFS_LinkDriver>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <MX_FATFS_Init+0x20>)
 80037b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200002c8 	.word	0x200002c8
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	200002cc 	.word	0x200002cc

080037c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80037cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f9d7 	bl	8003b98 <USER_SPI_initialize>
 80037ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fab5 	bl	8003d70 <USER_SPI_status>
 8003806:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003820:	7bf8      	ldrb	r0, [r7, #15]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	f000 fab8 	bl	8003d9c <USER_SPI_read>
 800382c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003846:	7bf8      	ldrb	r0, [r7, #15]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	f000 fb0b 	bl	8003e68 <USER_SPI_write>
 8003852:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	603a      	str	r2, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
 8003868:	460b      	mov	r3, r1
 800386a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800386c:	79b9      	ldrb	r1, [r7, #6]
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb74 	bl	8003f60 <USER_SPI_ioctl>
 8003878:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800388c:	f7fd f930 	bl	8000af0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SPI_Timer_On+0x20>)
 8003894:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <SPI_Timer_On+0x24>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000072c 	.word	0x2000072c
 80038a8:	20000730 	.word	0x20000730

080038ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80038b0:	f7fd f91e 	bl	8000af0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SPI_Timer_Status+0x24>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SPI_Timer_Status+0x28>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	bf34      	ite	cc
 80038c4:	2301      	movcc	r3, #1
 80038c6:	2300      	movcs	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000072c 	.word	0x2000072c
 80038d4:	20000730 	.word	0x20000730

080038d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80038e2:	f107 020f 	add.w	r2, r7, #15
 80038e6:	1df9      	adds	r1, r7, #7
 80038e8:	2332      	movs	r3, #50	; 0x32
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2301      	movs	r3, #1
 80038ee:	4804      	ldr	r0, [pc, #16]	; (8003900 <xchg_spi+0x28>)
 80038f0:	f7fe ffca 	bl	8002888 <HAL_SPI_TransmitReceive>
    return rxDat;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200001e0 	.word	0x200001e0

08003904 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e00a      	b.n	800392a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	18d4      	adds	r4, r2, r3
 800391a:	20ff      	movs	r0, #255	; 0xff
 800391c:	f7ff ffdc 	bl	80038d8 <xchg_spi>
 8003920:	4603      	mov	r3, r0
 8003922:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d3f0      	bcc.n	8003914 <rcvr_spi_multi+0x10>
	}
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}

0800393a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e009      	b.n	800395e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffc0 	bl	80038d8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3f1      	bcc.n	800394a <xmit_spi_multi+0x10>
	}
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003976:	f7fd f8bb 	bl	8000af0 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003980:	20ff      	movs	r0, #255	; 0xff
 8003982:	f7ff ffa9 	bl	80038d8 <xchg_spi>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2bff      	cmp	r3, #255	; 0xff
 800398e:	d007      	beq.n	80039a0 <wait_ready+0x32>
 8003990:	f7fd f8ae 	bl	8000af0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	429a      	cmp	r2, r3
 800399e:	d8ef      	bhi.n	8003980 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2bff      	cmp	r3, #255	; 0xff
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80039b8:	2201      	movs	r2, #1
 80039ba:	2102      	movs	r1, #2
 80039bc:	4803      	ldr	r0, [pc, #12]	; (80039cc <despiselect+0x18>)
 80039be:	f7fd fb35 	bl	800102c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80039c2:	20ff      	movs	r0, #255	; 0xff
 80039c4:	f7ff ff88 	bl	80038d8 <xchg_spi>

}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	48000400 	.word	0x48000400

080039d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80039d4:	2200      	movs	r2, #0
 80039d6:	2102      	movs	r1, #2
 80039d8:	4809      	ldr	r0, [pc, #36]	; (8003a00 <spiselect+0x30>)
 80039da:	f7fd fb27 	bl	800102c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80039de:	20ff      	movs	r0, #255	; 0xff
 80039e0:	f7ff ff7a 	bl	80038d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80039e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039e8:	f7ff ffc1 	bl	800396e <wait_ready>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <spiselect+0x26>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e002      	b.n	80039fc <spiselect+0x2c>

	despiselect();
 80039f6:	f7ff ffdd 	bl	80039b4 <despiselect>
	return 0;	/* Timeout */
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	48000400 	.word	0x48000400

08003a04 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a0e:	20c8      	movs	r0, #200	; 0xc8
 8003a10:	f7ff ff38 	bl	8003884 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a14:	20ff      	movs	r0, #255	; 0xff
 8003a16:	f7ff ff5f 	bl	80038d8 <xchg_spi>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2bff      	cmp	r3, #255	; 0xff
 8003a22:	d104      	bne.n	8003a2e <rcvr_datablock+0x2a>
 8003a24:	f7ff ff42 	bl	80038ac <SPI_Timer_Status>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f2      	bne.n	8003a14 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2bfe      	cmp	r3, #254	; 0xfe
 8003a32:	d001      	beq.n	8003a38 <rcvr_datablock+0x34>
 8003a34:	2300      	movs	r3, #0
 8003a36:	e00a      	b.n	8003a4e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff62 	bl	8003904 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a40:	20ff      	movs	r0, #255	; 0xff
 8003a42:	f7ff ff49 	bl	80038d8 <xchg_spi>
 8003a46:	20ff      	movs	r0, #255	; 0xff
 8003a48:	f7ff ff46 	bl	80038d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8003a4c:	2301      	movs	r3, #1
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a66:	f7ff ff82 	bl	800396e <wait_ready>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <xmit_datablock+0x1e>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e01e      	b.n	8003ab2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff2e 	bl	80038d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	2bfd      	cmp	r3, #253	; 0xfd
 8003a80:	d016      	beq.n	8003ab0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff57 	bl	800393a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003a8c:	20ff      	movs	r0, #255	; 0xff
 8003a8e:	f7ff ff23 	bl	80038d8 <xchg_spi>
 8003a92:	20ff      	movs	r0, #255	; 0xff
 8003a94:	f7ff ff20 	bl	80038d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003a98:	20ff      	movs	r0, #255	; 0xff
 8003a9a:	f7ff ff1d 	bl	80038d8 <xchg_spi>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d001      	beq.n	8003ab0 <xmit_datablock+0x5a>
 8003aac:	2300      	movs	r3, #0
 8003aae:	e000      	b.n	8003ab2 <xmit_datablock+0x5c>
	}
	return 1;
 8003ab0:	2301      	movs	r3, #1
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	6039      	str	r1, [r7, #0]
 8003ac4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da0e      	bge.n	8003aec <send_cmd+0x32>
		cmd &= 0x7F;
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2037      	movs	r0, #55	; 0x37
 8003ada:	f7ff ffee 	bl	8003aba <send_cmd>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d901      	bls.n	8003aec <send_cmd+0x32>
 8003ae8:	7bbb      	ldrb	r3, [r7, #14]
 8003aea:	e051      	b.n	8003b90 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d008      	beq.n	8003b04 <send_cmd+0x4a>
		despiselect();
 8003af2:	f7ff ff5f 	bl	80039b4 <despiselect>
		if (!spiselect()) return 0xFF;
 8003af6:	f7ff ff6b 	bl	80039d0 <spiselect>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <send_cmd+0x4a>
 8003b00:	23ff      	movs	r3, #255	; 0xff
 8003b02:	e045      	b.n	8003b90 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fee3 	bl	80038d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fedd 	bl	80038d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fed7 	bl	80038d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fed1 	bl	80038d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fecc 	bl	80038d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <send_cmd+0x94>
 8003b4a:	2395      	movs	r3, #149	; 0x95
 8003b4c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d101      	bne.n	8003b58 <send_cmd+0x9e>
 8003b54:	2387      	movs	r3, #135	; 0x87
 8003b56:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff febc 	bl	80038d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d102      	bne.n	8003b6c <send_cmd+0xb2>
 8003b66:	20ff      	movs	r0, #255	; 0xff
 8003b68:	f7ff feb6 	bl	80038d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003b6c:	230a      	movs	r3, #10
 8003b6e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003b70:	20ff      	movs	r0, #255	; 0xff
 8003b72:	f7ff feb1 	bl	80038d8 <xchg_spi>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da05      	bge.n	8003b8e <send_cmd+0xd4>
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <USER_SPI_initialize+0x14>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0d6      	b.n	8003d5a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003bac:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <USER_SPI_initialize+0x2a>
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e0cb      	b.n	8003d5a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003bc2:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <USER_SPI_initialize+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bcc:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <USER_SPI_initialize+0x1d0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003bd4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	e005      	b.n	8003be8 <USER_SPI_initialize+0x50>
 8003bdc:	20ff      	movs	r0, #255	; 0xff
 8003bde:	f7ff fe7b 	bl	80038d8 <xchg_spi>
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f6      	bne.n	8003bdc <USER_SPI_initialize+0x44>

	ty = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7ff ff60 	bl	8003aba <send_cmd>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 808b 	bne.w	8003d18 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c06:	f7ff fe3d 	bl	8003884 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003c0a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c0e:	2008      	movs	r0, #8
 8003c10:	f7ff ff53 	bl	8003aba <send_cmd>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d151      	bne.n	8003cbe <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e00d      	b.n	8003c3c <USER_SPI_initialize+0xa4>
 8003c20:	7bfc      	ldrb	r4, [r7, #15]
 8003c22:	20ff      	movs	r0, #255	; 0xff
 8003c24:	f7ff fe58 	bl	80038d8 <xchg_spi>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f107 0310 	add.w	r3, r7, #16
 8003c30:	4423      	add	r3, r4
 8003c32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d9ee      	bls.n	8003c20 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003c42:	7abb      	ldrb	r3, [r7, #10]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d167      	bne.n	8003d18 <USER_SPI_initialize+0x180>
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	2baa      	cmp	r3, #170	; 0xaa
 8003c4c:	d164      	bne.n	8003d18 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003c4e:	bf00      	nop
 8003c50:	f7ff fe2c 	bl	80038ac <SPI_Timer_Status>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <USER_SPI_initialize+0xd2>
 8003c5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c5e:	20a9      	movs	r0, #169	; 0xa9
 8003c60:	f7ff ff2b 	bl	8003aba <send_cmd>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f2      	bne.n	8003c50 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003c6a:	f7ff fe1f 	bl	80038ac <SPI_Timer_Status>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d051      	beq.n	8003d18 <USER_SPI_initialize+0x180>
 8003c74:	2100      	movs	r1, #0
 8003c76:	203a      	movs	r0, #58	; 0x3a
 8003c78:	f7ff ff1f 	bl	8003aba <send_cmd>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d14a      	bne.n	8003d18 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e00d      	b.n	8003ca4 <USER_SPI_initialize+0x10c>
 8003c88:	7bfc      	ldrb	r4, [r7, #15]
 8003c8a:	20ff      	movs	r0, #255	; 0xff
 8003c8c:	f7ff fe24 	bl	80038d8 <xchg_spi>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	f107 0310 	add.w	r3, r7, #16
 8003c98:	4423      	add	r3, r4
 8003c9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d9ee      	bls.n	8003c88 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003caa:	7a3b      	ldrb	r3, [r7, #8]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <USER_SPI_initialize+0x120>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	e000      	b.n	8003cba <USER_SPI_initialize+0x122>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	737b      	strb	r3, [r7, #13]
 8003cbc:	e02c      	b.n	8003d18 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	20a9      	movs	r0, #169	; 0xa9
 8003cc2:	f7ff fefa 	bl	8003aba <send_cmd>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d804      	bhi.n	8003cd6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	737b      	strb	r3, [r7, #13]
 8003cd0:	23a9      	movs	r3, #169	; 0xa9
 8003cd2:	73bb      	strb	r3, [r7, #14]
 8003cd4:	e003      	b.n	8003cde <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	737b      	strb	r3, [r7, #13]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003cde:	bf00      	nop
 8003ce0:	f7ff fde4 	bl	80038ac <SPI_Timer_Status>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <USER_SPI_initialize+0x162>
 8003cea:	7bbb      	ldrb	r3, [r7, #14]
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fee3 	bl	8003aba <send_cmd>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003cfa:	f7ff fdd7 	bl	80038ac <SPI_Timer_Status>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <USER_SPI_initialize+0x17c>
 8003d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d08:	2010      	movs	r0, #16
 8003d0a:	f7ff fed6 	bl	8003aba <send_cmd>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <USER_SPI_initialize+0x180>
				ty = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <USER_SPI_initialize+0x1d4>)
 8003d1a:	7b7b      	ldrb	r3, [r7, #13]
 8003d1c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d1e:	f7ff fe49 	bl	80039b4 <despiselect>

	if (ty) {			/* OK */
 8003d22:	7b7b      	ldrb	r3, [r7, #13]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <USER_SPI_initialize+0x1d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <USER_SPI_initialize+0x1d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0210 	orr.w	r2, r2, #16
 8003d3a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e002      	b.n	8003d54 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <USER_SPI_initialize+0x1cc>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000020 	.word	0x20000020
 8003d68:	200001e0 	.word	0x200001e0
 8003d6c:	200001a8 	.word	0x200001a8

08003d70 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <USER_SPI_status+0x14>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e002      	b.n	8003d8a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <USER_SPI_status+0x28>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000020 	.word	0x20000020

08003d9c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <USER_SPI_read+0x1c>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <USER_SPI_read+0x20>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e04d      	b.n	8003e58 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003dbc:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <USER_SPI_read+0xc4>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <USER_SPI_read+0x32>
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e044      	b.n	8003e58 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003dce:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <USER_SPI_read+0xc8>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <USER_SPI_read+0x44>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	025b      	lsls	r3, r3, #9
 8003dde:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d111      	bne.n	8003e0a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	2011      	movs	r0, #17
 8003dea:	f7ff fe66 	bl	8003aba <send_cmd>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d129      	bne.n	8003e48 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	f7ff fe03 	bl	8003a04 <rcvr_datablock>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d021      	beq.n	8003e48 <USER_SPI_read+0xac>
			count = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	e01e      	b.n	8003e48 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	2012      	movs	r0, #18
 8003e0e:	f7ff fe54 	bl	8003aba <send_cmd>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d117      	bne.n	8003e48 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f7ff fdf1 	bl	8003a04 <rcvr_datablock>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <USER_SPI_read+0xa2>
				buff += 512;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e2e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ed      	bne.n	8003e18 <USER_SPI_read+0x7c>
 8003e3c:	e000      	b.n	8003e40 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e3e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003e40:	2100      	movs	r1, #0
 8003e42:	200c      	movs	r0, #12
 8003e44:	f7ff fe39 	bl	8003aba <send_cmd>
		}
	}
	despiselect();
 8003e48:	f7ff fdb4 	bl	80039b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000020 	.word	0x20000020
 8003e64:	200001a8 	.word	0x200001a8

08003e68 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <USER_SPI_write+0x1c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <USER_SPI_write+0x20>
 8003e84:	2304      	movs	r3, #4
 8003e86:	e063      	b.n	8003f50 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003e88:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <USER_SPI_write+0xf0>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <USER_SPI_write+0x32>
 8003e96:	2303      	movs	r3, #3
 8003e98:	e05a      	b.n	8003f50 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <USER_SPI_write+0xf0>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <USER_SPI_write+0x44>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e051      	b.n	8003f50 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <USER_SPI_write+0xf4>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <USER_SPI_write+0x56>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	025b      	lsls	r3, r3, #9
 8003ebc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d110      	bne.n	8003ee6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	2018      	movs	r0, #24
 8003ec8:	f7ff fdf7 	bl	8003aba <send_cmd>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d136      	bne.n	8003f40 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003ed2:	21fe      	movs	r1, #254	; 0xfe
 8003ed4:	68b8      	ldr	r0, [r7, #8]
 8003ed6:	f7ff fdbe 	bl	8003a56 <xmit_datablock>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02f      	beq.n	8003f40 <USER_SPI_write+0xd8>
			count = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	e02c      	b.n	8003f40 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <USER_SPI_write+0xf4>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <USER_SPI_write+0x92>
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	2097      	movs	r0, #151	; 0x97
 8003ef6:	f7ff fde0 	bl	8003aba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	2019      	movs	r0, #25
 8003efe:	f7ff fddc 	bl	8003aba <send_cmd>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11b      	bne.n	8003f40 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f08:	21fc      	movs	r1, #252	; 0xfc
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f7ff fda3 	bl	8003a56 <xmit_datablock>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <USER_SPI_write+0xc4>
				buff += 512;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ee      	bne.n	8003f08 <USER_SPI_write+0xa0>
 8003f2a:	e000      	b.n	8003f2e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f2c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f2e:	21fd      	movs	r1, #253	; 0xfd
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7ff fd90 	bl	8003a56 <xmit_datablock>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <USER_SPI_write+0xd8>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003f40:	f7ff fd38 	bl	80039b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000020 	.word	0x20000020
 8003f5c:	200001a8 	.word	0x200001a8

08003f60 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08c      	sub	sp, #48	; 0x30
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	603a      	str	r2, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <USER_SPI_ioctl+0x1a>
 8003f76:	2304      	movs	r3, #4
 8003f78:	e15a      	b.n	8004230 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f7a:	4baf      	ldr	r3, [pc, #700]	; (8004238 <USER_SPI_ioctl+0x2d8>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <USER_SPI_ioctl+0x2c>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e151      	b.n	8004230 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	f200 8136 	bhi.w	8004206 <USER_SPI_ioctl+0x2a6>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <USER_SPI_ioctl+0x40>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08004207 	.word	0x08004207
 8003fac:	08004075 	.word	0x08004075
 8003fb0:	0800416b 	.word	0x0800416b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003fb4:	f7ff fd0c 	bl	80039d0 <spiselect>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8127 	beq.w	800420e <USER_SPI_ioctl+0x2ae>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003fc6:	e122      	b.n	800420e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2009      	movs	r0, #9
 8003fcc:	f7ff fd75 	bl	8003aba <send_cmd>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 811d 	bne.w	8004212 <USER_SPI_ioctl+0x2b2>
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	2110      	movs	r1, #16
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fd10 	bl	8003a04 <rcvr_datablock>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8113 	beq.w	8004212 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003fec:	7b3b      	ldrb	r3, [r7, #12]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d111      	bne.n	800401a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003ff6:	7d7b      	ldrb	r3, [r7, #21]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	7d3b      	ldrb	r3, [r7, #20]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	4413      	add	r3, r2
 8004000:	461a      	mov	r2, r3
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800400a:	4413      	add	r3, r2
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	029a      	lsls	r2, r3, #10
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e028      	b.n	800406c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800401a:	7c7b      	ldrb	r3, [r7, #17]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2da      	uxtb	r2, r3
 8004022:	7dbb      	ldrb	r3, [r7, #22]
 8004024:	09db      	lsrs	r3, r3, #7
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4413      	add	r3, r2
 800402a:	b2da      	uxtb	r2, r3
 800402c:	7d7b      	ldrb	r3, [r7, #21]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 0306 	and.w	r3, r3, #6
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4413      	add	r3, r2
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3302      	adds	r3, #2
 800403e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004042:	7d3b      	ldrb	r3, [r7, #20]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	7cbb      	ldrb	r3, [r7, #18]
 8004052:	029b      	lsls	r3, r3, #10
 8004054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004058:	4413      	add	r3, r2
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800405e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004062:	3b09      	subs	r3, #9
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	409a      	lsls	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004072:	e0ce      	b.n	8004212 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004074:	4b71      	ldr	r3, [pc, #452]	; (800423c <USER_SPI_ioctl+0x2dc>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d031      	beq.n	80040e4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004080:	2100      	movs	r1, #0
 8004082:	208d      	movs	r0, #141	; 0x8d
 8004084:	f7ff fd19 	bl	8003aba <send_cmd>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 80c3 	bne.w	8004216 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004090:	20ff      	movs	r0, #255	; 0xff
 8004092:	f7ff fc21 	bl	80038d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	2110      	movs	r1, #16
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fcb1 	bl	8003a04 <rcvr_datablock>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80b6 	beq.w	8004216 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80040aa:	2330      	movs	r3, #48	; 0x30
 80040ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040b0:	e007      	b.n	80040c2 <USER_SPI_ioctl+0x162>
 80040b2:	20ff      	movs	r0, #255	; 0xff
 80040b4:	f7ff fc10 	bl	80038d8 <xchg_spi>
 80040b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040bc:	3b01      	subs	r3, #1
 80040be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f3      	bne.n	80040b2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80040ca:	7dbb      	ldrb	r3, [r7, #22]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	2310      	movs	r3, #16
 80040d4:	fa03 f202 	lsl.w	r2, r3, r2
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80040e2:	e098      	b.n	8004216 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80040e4:	2100      	movs	r1, #0
 80040e6:	2009      	movs	r0, #9
 80040e8:	f7ff fce7 	bl	8003aba <send_cmd>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f040 8091 	bne.w	8004216 <USER_SPI_ioctl+0x2b6>
 80040f4:	f107 030c 	add.w	r3, r7, #12
 80040f8:	2110      	movs	r1, #16
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fc82 	bl	8003a04 <rcvr_datablock>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8087 	beq.w	8004216 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <USER_SPI_ioctl+0x2dc>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004114:	7dbb      	ldrb	r3, [r7, #22]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800411c:	7dfa      	ldrb	r2, [r7, #23]
 800411e:	09d2      	lsrs	r2, r2, #7
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	4413      	add	r3, r2
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	7e7b      	ldrb	r3, [r7, #25]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	461a      	mov	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e013      	b.n	8004162 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	109b      	asrs	r3, r3, #2
 800413e:	b29b      	uxth	r3, r3
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	3301      	adds	r3, #1
 8004146:	7dfa      	ldrb	r2, [r7, #23]
 8004148:	00d2      	lsls	r2, r2, #3
 800414a:	f002 0218 	and.w	r2, r2, #24
 800414e:	7df9      	ldrb	r1, [r7, #23]
 8004150:	0949      	lsrs	r1, r1, #5
 8004152:	b2c9      	uxtb	r1, r1
 8004154:	440a      	add	r2, r1
 8004156:	3201      	adds	r2, #1
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	461a      	mov	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004168:	e055      	b.n	8004216 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <USER_SPI_ioctl+0x2dc>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	2b00      	cmp	r3, #0
 8004174:	d051      	beq.n	800421a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004176:	f107 020c 	add.w	r2, r7, #12
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	210b      	movs	r1, #11
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff feee 	bl	8003f60 <USER_SPI_ioctl>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d149      	bne.n	800421e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800418a:	7b3b      	ldrb	r3, [r7, #12]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <USER_SPI_ioctl+0x23e>
 8004194:	7dbb      	ldrb	r3, [r7, #22]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d041      	beq.n	8004222 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <USER_SPI_ioctl+0x2dc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	2020      	movs	r0, #32
 80041ca:	f7ff fc76 	bl	8003aba <send_cmd>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d128      	bne.n	8004226 <USER_SPI_ioctl+0x2c6>
 80041d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041d6:	2021      	movs	r0, #33	; 0x21
 80041d8:	f7ff fc6f 	bl	8003aba <send_cmd>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d121      	bne.n	8004226 <USER_SPI_ioctl+0x2c6>
 80041e2:	2100      	movs	r1, #0
 80041e4:	2026      	movs	r0, #38	; 0x26
 80041e6:	f7ff fc68 	bl	8003aba <send_cmd>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11a      	bne.n	8004226 <USER_SPI_ioctl+0x2c6>
 80041f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80041f4:	f7ff fbbb 	bl	800396e <wait_ready>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004204:	e00f      	b.n	8004226 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004206:	2304      	movs	r3, #4
 8004208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800420c:	e00c      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		break;
 800420e:	bf00      	nop
 8004210:	e00a      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		break;
 8004212:	bf00      	nop
 8004214:	e008      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		break;
 8004216:	bf00      	nop
 8004218:	e006      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <USER_SPI_ioctl+0x2c8>
		break;
 8004226:	bf00      	nop
	}

	despiselect();
 8004228:	f7ff fbc4 	bl	80039b4 <despiselect>

	return res;
 800422c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004230:	4618      	mov	r0, r3
 8004232:	3730      	adds	r7, #48	; 0x30
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000020 	.word	0x20000020
 800423c:	200001a8 	.word	0x200001a8

08004240 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <disk_status+0x30>)
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	79fa      	ldrb	r2, [r7, #7]
 8004258:	4905      	ldr	r1, [pc, #20]	; (8004270 <disk_status+0x30>)
 800425a:	440a      	add	r2, r1
 800425c:	7a12      	ldrb	r2, [r2, #8]
 800425e:	4610      	mov	r0, r2
 8004260:	4798      	blx	r3
 8004262:	4603      	mov	r3, r0
 8004264:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200001cc 	.word	0x200001cc

08004274 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <disk_initialize+0x48>)
 8004286:	5cd3      	ldrb	r3, [r2, r3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <disk_initialize+0x48>)
 8004290:	2101      	movs	r1, #1
 8004292:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <disk_initialize+0x48>)
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	79fa      	ldrb	r2, [r7, #7]
 80042a2:	4906      	ldr	r1, [pc, #24]	; (80042bc <disk_initialize+0x48>)
 80042a4:	440a      	add	r2, r1
 80042a6:	7a12      	ldrb	r2, [r2, #8]
 80042a8:	4610      	mov	r0, r2
 80042aa:	4798      	blx	r3
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200001cc 	.word	0x200001cc

080042c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <disk_read+0x3c>)
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	689c      	ldr	r4, [r3, #8]
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <disk_read+0x3c>)
 80042e0:	4413      	add	r3, r2
 80042e2:	7a18      	ldrb	r0, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	47a0      	blx	r4
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200001cc 	.word	0x200001cc

08004300 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <disk_write+0x3c>)
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68dc      	ldr	r4, [r3, #12]
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <disk_write+0x3c>)
 8004320:	4413      	add	r3, r2
 8004322:	7a18      	ldrb	r0, [r3, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	47a0      	blx	r4
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
}
 8004332:	4618      	mov	r0, r3
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd90      	pop	{r4, r7, pc}
 800433a:	bf00      	nop
 800433c:	200001cc 	.word	0x200001cc

08004340 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	603a      	str	r2, [r7, #0]
 800434a:	71fb      	strb	r3, [r7, #7]
 800434c:	460b      	mov	r3, r1
 800434e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <disk_ioctl+0x38>)
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	79fa      	ldrb	r2, [r7, #7]
 800435e:	4906      	ldr	r1, [pc, #24]	; (8004378 <disk_ioctl+0x38>)
 8004360:	440a      	add	r2, r1
 8004362:	7a10      	ldrb	r0, [r2, #8]
 8004364:	79b9      	ldrb	r1, [r7, #6]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4798      	blx	r3
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
  return res;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200001cc 	.word	0x200001cc

0800437c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004390:	e007      	b.n	80043a2 <mem_cpy+0x26>
		*d++ = *s++;
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	1c53      	adds	r3, r2, #1
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	6179      	str	r1, [r7, #20]
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	1e5a      	subs	r2, r3, #1
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f2      	bne.n	8004392 <mem_cpy+0x16>
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80043c8:	e005      	b.n	80043d6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	617a      	str	r2, [r7, #20]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f4      	bne.n	80043ca <mem_set+0x12>
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004404:	bf00      	nop
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <mem_cmp+0x40>
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	61fa      	str	r2, [r7, #28]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	61ba      	str	r2, [r7, #24]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ec      	beq.n	8004406 <mem_cmp+0x1a>
	return r;
 800442c:	697b      	ldr	r3, [r7, #20]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004444:	e002      	b.n	800444c <chk_chr+0x12>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3301      	adds	r3, #1
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <chk_chr+0x26>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4293      	cmp	r3, r2
 800445e:	d1f2      	bne.n	8004446 <chk_chr+0xc>
	return *str;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	781b      	ldrb	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e038      	b.n	80044f6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004484:	4930      	ldr	r1, [pc, #192]	; (8004548 <chk_lock+0xd8>)
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d029      	beq.n	80044ec <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004498:	492b      	ldr	r1, [pc, #172]	; (8004548 <chk_lock+0xd8>)
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d11e      	bne.n	80044f0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80044b2:	4925      	ldr	r1, [pc, #148]	; (8004548 <chk_lock+0xd8>)
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3304      	adds	r3, #4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d110      	bne.n	80044f0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80044ce:	491e      	ldr	r1, [pc, #120]	; (8004548 <chk_lock+0xd8>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3308      	adds	r3, #8
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d102      	bne.n	80044f0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80044ea:	e007      	b.n	80044fc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80044ec:	2301      	movs	r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d9c3      	bls.n	8004484 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d109      	bne.n	8004516 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <chk_lock+0x9e>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d101      	bne.n	8004512 <chk_lock+0xa2>
 800450e:	2300      	movs	r3, #0
 8004510:	e013      	b.n	800453a <chk_lock+0xca>
 8004512:	2312      	movs	r3, #18
 8004514:	e011      	b.n	800453a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <chk_lock+0xc4>
 800451c:	490a      	ldr	r1, [pc, #40]	; (8004548 <chk_lock+0xd8>)
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	330a      	adds	r3, #10
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004532:	d101      	bne.n	8004538 <chk_lock+0xc8>
 8004534:	2310      	movs	r3, #16
 8004536:	e000      	b.n	800453a <chk_lock+0xca>
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200001b4 	.word	0x200001b4

0800454c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	e002      	b.n	800455e <enq_lock+0x12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d809      	bhi.n	8004578 <enq_lock+0x2c>
 8004564:	490a      	ldr	r1, [pc, #40]	; (8004590 <enq_lock+0x44>)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ef      	bne.n	8004558 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	200001b4 	.word	0x200001b4

08004594 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e02b      	b.n	80045fc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80045a4:	4956      	ldr	r1, [pc, #344]	; (8004700 <inc_lock+0x16c>)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11b      	bne.n	80045f6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80045be:	4950      	ldr	r1, [pc, #320]	; (8004700 <inc_lock+0x16c>)
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3304      	adds	r3, #4
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d10d      	bne.n	80045f6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80045da:	4949      	ldr	r1, [pc, #292]	; (8004700 <inc_lock+0x16c>)
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3308      	adds	r3, #8
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d006      	beq.n	8004604 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d9d0      	bls.n	80045a4 <inc_lock+0x10>
 8004602:	e000      	b.n	8004606 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d145      	bne.n	8004698 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <inc_lock+0x84>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d809      	bhi.n	8004632 <inc_lock+0x9e>
 800461e:	4938      	ldr	r1, [pc, #224]	; (8004700 <inc_lock+0x16c>)
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d101      	bne.n	800463c <inc_lock+0xa8>
 8004638:	2300      	movs	r3, #0
 800463a:	e05a      	b.n	80046f2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004642:	482f      	ldr	r0, [pc, #188]	; (8004700 <inc_lock+0x16c>)
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4403      	add	r3, r0
 8004650:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004658:	4829      	ldr	r0, [pc, #164]	; (8004700 <inc_lock+0x16c>)
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4403      	add	r3, r0
 8004666:	3304      	adds	r3, #4
 8004668:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004670:	4923      	ldr	r1, [pc, #140]	; (8004700 <inc_lock+0x16c>)
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	3308      	adds	r3, #8
 8004680:	4602      	mov	r2, r0
 8004682:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004684:	491e      	ldr	r1, [pc, #120]	; (8004700 <inc_lock+0x16c>)
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	330a      	adds	r3, #10
 8004694:	2200      	movs	r2, #0
 8004696:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <inc_lock+0x124>
 800469e:	4918      	ldr	r1, [pc, #96]	; (8004700 <inc_lock+0x16c>)
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	330a      	adds	r3, #10
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <inc_lock+0x124>
 80046b4:	2300      	movs	r3, #0
 80046b6:	e01c      	b.n	80046f2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <inc_lock+0x142>
 80046be:	4910      	ldr	r1, [pc, #64]	; (8004700 <inc_lock+0x16c>)
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	330a      	adds	r3, #10
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	b299      	uxth	r1, r3
 80046d4:	e001      	b.n	80046da <inc_lock+0x146>
 80046d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046da:	4809      	ldr	r0, [pc, #36]	; (8004700 <inc_lock+0x16c>)
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4403      	add	r3, r0
 80046e8:	330a      	adds	r3, #10
 80046ea:	460a      	mov	r2, r1
 80046ec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	200001b4 	.word	0x200001b4

08004704 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d82e      	bhi.n	8004776 <dec_lock+0x72>
		n = Files[i].ctr;
 8004718:	491b      	ldr	r1, [pc, #108]	; (8004788 <dec_lock+0x84>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	330a      	adds	r3, #10
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800472c:	89fb      	ldrh	r3, [r7, #14]
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d101      	bne.n	8004738 <dec_lock+0x34>
 8004734:	2300      	movs	r3, #0
 8004736:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <dec_lock+0x40>
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	3b01      	subs	r3, #1
 8004742:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004744:	4910      	ldr	r1, [pc, #64]	; (8004788 <dec_lock+0x84>)
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	330a      	adds	r3, #10
 8004754:	89fa      	ldrh	r2, [r7, #14]
 8004756:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <dec_lock+0x6c>
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <dec_lock+0x84>)
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	737b      	strb	r3, [r7, #13]
 8004774:	e001      	b.n	800477a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004776:	2302      	movs	r3, #2
 8004778:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800477a:	7b7b      	ldrb	r3, [r7, #13]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	200001b4 	.word	0x200001b4

0800478c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e016      	b.n	80047c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800479a:	4910      	ldr	r1, [pc, #64]	; (80047dc <clear_lock+0x50>)
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d108      	bne.n	80047c2 <clear_lock+0x36>
 80047b0:	490a      	ldr	r1, [pc, #40]	; (80047dc <clear_lock+0x50>)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d9e5      	bls.n	800479a <clear_lock+0xe>
	}
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200001b4 	.word	0x200001b4

080047e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d038      	beq.n	8004868 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80047fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	2301      	movs	r3, #1
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	f7ff fd79 	bl	8004300 <disk_write>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e026      	b.n	8004868 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004832:	429a      	cmp	r2, r3
 8004834:	d218      	bcs.n	8004868 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e010      	b.n	8004862 <sync_window+0x82>
					wsect += fs->fsize;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	2301      	movs	r3, #1
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	f7ff fd52 	bl	8004300 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3b01      	subs	r3, #1
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d8eb      	bhi.n	8004840 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d01b      	beq.n	80048c4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ffa7 	bl	80047e0 <sync_window>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d113      	bne.n	80048c4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	2301      	movs	r3, #1
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	f7ff fd0a 	bl	80042c0 <disk_read>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff82 	bl	80047e0 <sync_window>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 809b 	bne.w	8004a1e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	f040 8088 	bne.w	8004a04 <sync_fs+0x136>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	f040 8082 	bne.w	8004a04 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fd55 	bl	80043b8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2255      	movs	r2, #85	; 0x55
 8004912:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	22aa      	movs	r2, #170	; 0xaa
 800491a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2252      	movs	r2, #82	; 0x52
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2252      	movs	r2, #82	; 0x52
 8004928:	705a      	strb	r2, [r3, #1]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2261      	movs	r2, #97	; 0x61
 800492e:	709a      	strb	r2, [r3, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2241      	movs	r2, #65	; 0x41
 8004934:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2272      	movs	r2, #114	; 0x72
 800493a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2272      	movs	r2, #114	; 0x72
 8004942:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2241      	movs	r2, #65	; 0x41
 800494a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2261      	movs	r2, #97	; 0x61
 8004952:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800495c:	b2da      	uxtb	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800496a:	b29b      	uxth	r3, r3
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	b29b      	uxth	r3, r3
 8004970:	b2da      	uxtb	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	b2da      	uxtb	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	b2da      	uxtb	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049d0:	0e1b      	lsrs	r3, r3, #24
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80049f6:	2301      	movs	r3, #1
 80049f8:	f7ff fc82 	bl	8004300 <disk_write>
			fs->fsi_flag = 0;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fc96 	bl	8004340 <disk_ioctl>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3b02      	subs	r3, #2
 8004a36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a3e:	3b02      	subs	r3, #2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d301      	bcc.n	8004a4a <clust2sect+0x22>
 8004a46:	2300      	movs	r3, #0
 8004a48:	e00a      	b.n	8004a60 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004a50:	461a      	mov	r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	fb03 f202 	mul.w	r2, r3, r2
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004a5e:	4413      	add	r3, r2
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d905      	bls.n	8004a88 <get_fat+0x1c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <get_fat+0x22>
		val = 1;	/* Internal error */
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e0a0      	b.n	8004bd0 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a92:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d044      	beq.n	8004b28 <get_fat+0xbc>
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d063      	beq.n	8004b6a <get_fat+0xfe>
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 808a 	bne.w	8004bbc <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	0a5b      	lsrs	r3, r3, #9
 8004ac0:	4413      	add	r3, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fed4 	bl	8004872 <move_window>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d178      	bne.n	8004bc2 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	60fa      	str	r2, [r7, #12]
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	5cd3      	ldrb	r3, [r2, r3]
 8004ade:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	4413      	add	r3, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff febf 	bl	8004872 <move_window>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d165      	bne.n	8004bc6 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <get_fat+0xb2>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	e002      	b.n	8004b24 <get_fat+0xb8>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	617b      	str	r3, [r7, #20]
			break;
 8004b26:	e053      	b.n	8004bd0 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	4413      	add	r3, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe9b 	bl	8004872 <move_window>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d143      	bne.n	8004bca <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	3301      	adds	r3, #1
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	b21a      	sxth	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	4313      	orrs	r3, r2
 8004b62:	b21b      	sxth	r3, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	617b      	str	r3, [r7, #20]
			break;
 8004b68:	e032      	b.n	8004bd0 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	4413      	add	r3, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fe7a 	bl	8004872 <move_window>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d124      	bne.n	8004bce <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3303      	adds	r3, #3
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	061a      	lsls	r2, r3, #24
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	0212      	lsls	r2, r2, #8
 8004bac:	4313      	orrs	r3, r2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bb8:	617b      	str	r3, [r7, #20]
			break;
 8004bba:	e009      	b.n	8004bd0 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e006      	b.n	8004bd0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bc2:	bf00      	nop
 8004bc4:	e004      	b.n	8004bd0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bce:	bf00      	nop
		}
	}

	return val;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d905      	bls.n	8004bf8 <put_fat+0x1e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <put_fat+0x24>
		res = FR_INT_ERR;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e0f3      	b.n	8004de6 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d074      	beq.n	8004cf2 <put_fat+0x118>
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	f000 8099 	beq.w	8004d40 <put_fat+0x166>
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 80df 	bne.w	8004dd2 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fe1e 	bl	8004872 <move_window>
 8004c36:	4603      	mov	r3, r0
 8004c38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 80cb 	bne.w	8004dd8 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	617a      	str	r2, [r7, #20]
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <put_fat+0x9e>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	b25a      	sxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e001      	b.n	8004c7c <put_fat+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	0a5b      	lsrs	r3, r3, #9
 8004c92:	4413      	add	r3, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff fdeb 	bl	8004872 <move_window>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 809a 	bne.w	8004ddc <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <put_fat+0xec>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	e00e      	b.n	8004ce4 <put_fat+0x10a>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	f023 030f 	bic.w	r3, r3, #15
 8004cd0:	b25a      	sxtb	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004cf0:	e079      	b.n	8004de6 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fdb6 	bl	8004872 <move_window>
 8004d06:	4603      	mov	r3, r0
 8004d08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d167      	bne.n	8004de0 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	3301      	adds	r3, #1
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004d3e:	e052      	b.n	8004de6 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	09db      	lsrs	r3, r3, #7
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff fd8f 	bl	8004872 <move_window>
 8004d54:	4603      	mov	r3, r0
 8004d56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d58:	7ffb      	ldrb	r3, [r7, #31]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d142      	bne.n	8004de4 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	3303      	adds	r3, #3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	061a      	lsls	r2, r3, #24
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3302      	adds	r3, #2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	3201      	adds	r2, #1
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	0212      	lsls	r2, r2, #8
 8004d86:	4313      	orrs	r3, r2
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	3301      	adds	r3, #1
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0c1a      	lsrs	r2, r3, #16
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	3302      	adds	r3, #2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	0e1a      	lsrs	r2, r3, #24
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	3303      	adds	r3, #3
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004dd0:	e009      	b.n	8004de6 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e006      	b.n	8004de6 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004dd8:	bf00      	nop
 8004dda:	e004      	b.n	8004de6 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004de4:	bf00      	nop
		}
	}

	return res;
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d905      	bls.n	8004e0c <remove_chain+0x1c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <remove_chain+0x22>
		res = FR_INT_ERR;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e043      	b.n	8004e9a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e16:	e036      	b.n	8004e86 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe26 	bl	8004a6c <get_fat>
 8004e20:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d035      	beq.n	8004e94 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <remove_chain+0x44>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	73fb      	strb	r3, [r7, #15]
 8004e32:	e032      	b.n	8004e9a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d102      	bne.n	8004e42 <remove_chain+0x52>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e02b      	b.n	8004e9a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004e42:	2200      	movs	r2, #0
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fec7 	bl	8004bda <put_fat>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d120      	bne.n	8004e98 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d00f      	beq.n	8004e82 <remove_chain+0x92>
				fs->free_clust++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3c2      	bcc.n	8004e18 <remove_chain+0x28>
 8004e92:	e002      	b.n	8004e9a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004e98:	bf00      	nop
		}
	}

	return res;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004eba:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <create_chain+0x2a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d31c      	bcc.n	8004f08 <create_chain+0x64>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	e019      	b.n	8004f08 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff fdc8 	bl	8004a6c <get_fat>
 8004edc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d801      	bhi.n	8004ee8 <create_chain+0x44>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e076      	b.n	8004fd6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d101      	bne.n	8004ef4 <create_chain+0x50>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	e070      	b.n	8004fd6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d201      	bcs.n	8004f04 <create_chain+0x60>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	e068      	b.n	8004fd6 <create_chain+0x132>
		scl = clst;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d307      	bcc.n	8004f2e <create_chain+0x8a>
			ncl = 2;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d901      	bls.n	8004f2e <create_chain+0x8a>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e053      	b.n	8004fd6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fd9b 	bl	8004a6c <get_fat>
 8004f36:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d002      	beq.n	8004f4c <create_chain+0xa8>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <create_chain+0xac>
			return cs;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	e042      	b.n	8004fd6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1d9      	bne.n	8004f0c <create_chain+0x68>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e03c      	b.n	8004fd6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004f5c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004f5e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fe38 	bl	8004bda <put_fat>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <create_chain+0xe4>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe2b 	bl	8004bda <put_fat>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11a      	bne.n	8004fc4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d018      	beq.n	8004fd4 <create_chain+0x130>
			fs->free_clust--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004fc2:	e007      	b.n	8004fd4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d102      	bne.n	8004fd0 <create_chain+0x12c>
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	e000      	b.n	8004fd2 <create_chain+0x12e>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b087      	sub	sp, #28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004fee:	3304      	adds	r3, #4
 8004ff0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004ffc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005000:	fbb3 f3f2 	udiv	r3, r3, r2
 8005004:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	613a      	str	r2, [r7, #16]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <clmt_clust+0x3c>
 8005016:	2300      	movs	r3, #0
 8005018:	e010      	b.n	800503c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	429a      	cmp	r2, r3
 8005020:	d307      	bcc.n	8005032 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3304      	adds	r3, #4
 800502e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005030:	e7e9      	b.n	8005006 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005032:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
}
 800503c:	4618      	mov	r0, r3
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005062:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d007      	beq.n	800507a <dir_sdi+0x32>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005070:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	429a      	cmp	r2, r3
 8005078:	d301      	bcc.n	800507e <dir_sdi+0x36>
		return FR_INT_ERR;
 800507a:	2302      	movs	r3, #2
 800507c:	e074      	b.n	8005168 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10c      	bne.n	800509e <dir_sdi+0x56>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800508a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800508e:	2b03      	cmp	r3, #3
 8005090:	d105      	bne.n	800509e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005098:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800509c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d111      	bne.n	80050c8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050aa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80050ae:	461a      	mov	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d301      	bcc.n	80050ba <dir_sdi+0x72>
			return FR_INT_ERR;
 80050b6:	2302      	movs	r3, #2
 80050b8:	e056      	b.n	8005168 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050c0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e032      	b.n	800512e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ce:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80050d6:	e01e      	b.n	8005116 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fcc3 	bl	8004a6c <get_fat>
 80050e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d101      	bne.n	80050f4 <dir_sdi+0xac>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e039      	b.n	8005168 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d907      	bls.n	800510a <dir_sdi+0xc2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	429a      	cmp	r2, r3
 8005108:	d301      	bcc.n	800510e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800510a:	2302      	movs	r3, #2
 800510c:	e02c      	b.n	8005168 <dir_sdi+0x120>
			idx -= ic;
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	429a      	cmp	r2, r3
 800511c:	d2dc      	bcs.n	80050d8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005124:	6979      	ldr	r1, [r7, #20]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fc7e 	bl	8004a28 <clust2sect>
 800512c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <dir_sdi+0xf8>
 800513c:	2302      	movs	r3, #2
 800513e:	e013      	b.n	8005168 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	091a      	lsrs	r2, r3, #4
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005154:	461a      	mov	r2, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	015b      	lsls	r3, r3, #5
 800515e:	441a      	add	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <dir_next+0x26>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <dir_next+0x2a>
		return FR_NO_FILE;
 8005196:	2304      	movs	r3, #4
 8005198:	e0dd      	b.n	8005356 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 80c6 	bne.w	8005332 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051c4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80051c8:	461a      	mov	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	f0c0 80b0 	bcc.w	8005332 <dir_next+0x1c2>
				return FR_NO_FILE;
 80051d2:	2304      	movs	r3, #4
 80051d4:	e0bf      	b.n	8005356 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80051e0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80051e4:	3a01      	subs	r2, #1
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 80a2 	bne.w	8005332 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7ff fc35 	bl	8004a6c <get_fat>
 8005202:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d801      	bhi.n	800520e <dir_next+0x9e>
 800520a:	2302      	movs	r3, #2
 800520c:	e0a3      	b.n	8005356 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d101      	bne.n	800521a <dir_next+0xaa>
 8005216:	2301      	movs	r3, #1
 8005218:	e09d      	b.n	8005356 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	d374      	bcc.n	8005314 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <dir_next+0xc4>
 8005230:	2304      	movs	r3, #4
 8005232:	e090      	b.n	8005356 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7ff fe2e 	bl	8004ea4 <create_chain>
 8005248:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <dir_next+0xe4>
 8005250:	2307      	movs	r3, #7
 8005252:	e080      	b.n	8005356 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <dir_next+0xee>
 800525a:	2302      	movs	r3, #2
 800525c:	e07b      	b.n	8005356 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d101      	bne.n	800526a <dir_next+0xfa>
 8005266:	2301      	movs	r3, #1
 8005268:	e075      	b.n	8005356 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fab5 	bl	80047e0 <sync_window>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <dir_next+0x110>
 800527c:	2301      	movs	r3, #1
 800527e:	e06a      	b.n	8005356 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f893 	bl	80043b8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800529e:	6979      	ldr	r1, [r7, #20]
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7ff fbc1 	bl	8004a28 <clust2sect>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e01b      	b.n	80052ea <dir_next+0x17a>
						dp->fs->wflag = 1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fa8b 	bl	80047e0 <sync_window>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <dir_next+0x164>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e040      	b.n	8005356 <dir_next+0x1e6>
						dp->fs->winsect++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052da:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80052de:	3201      	adds	r2, #1
 80052e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3301      	adds	r3, #1
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80052f4:	461a      	mov	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d3da      	bcc.n	80052b2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005302:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	1a8a      	subs	r2, r1, r2
 8005310:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fb7f 	bl	8004a28 <clust2sect>
 800532a:	4602      	mov	r2, r0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}

0800535e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005368:	2100      	movs	r1, #0
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff fe6c 	bl	8005048 <dir_sdi>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d131      	bne.n	80053de <dir_alloc+0x80>
		n = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7ff fa70 	bl	8004872 <move_window>
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11f      	bne.n	80053dc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2be5      	cmp	r3, #229	; 0xe5
 80053a6:	d005      	beq.n	80053b4 <dir_alloc+0x56>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d107      	bne.n	80053c4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d102      	bne.n	80053c8 <dir_alloc+0x6a>
 80053c2:	e00c      	b.n	80053de <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80053c8:	2101      	movs	r1, #1
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fed0 	bl	8005170 <dir_next>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0d1      	beq.n	800537e <dir_alloc+0x20>
 80053da:	e000      	b.n	80053de <dir_alloc+0x80>
			if (res != FR_OK) break;
 80053dc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d101      	bne.n	80053e8 <dir_alloc+0x8a>
 80053e4:	2307      	movs	r3, #7
 80053e6:	73fb      	strb	r3, [r7, #15]
	return res;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	331b      	adds	r3, #27
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	b21a      	sxth	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	331a      	adds	r3, #26
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b21b      	sxth	r3, r3
 800540e:	4313      	orrs	r3, r2
 8005410:	b21b      	sxth	r3, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800541c:	2b03      	cmp	r3, #3
 800541e:	d10f      	bne.n	8005440 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3315      	adds	r3, #21
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	b21a      	sxth	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b21b      	sxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b21b      	sxth	r3, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

	return cl;
 8005440:	68fb      	ldr	r3, [r7, #12]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	331a      	adds	r3, #26
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	331b      	adds	r3, #27
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	0c1a      	lsrs	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3314      	adds	r3, #20
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	b29b      	uxth	r3, r3
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3315      	adds	r3, #21
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fdce 	bl	8005048 <dir_sdi>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <dir_find+0x1e>
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	e03b      	b.n	8005532 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7ff f9d2 	bl	8004872 <move_window>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d128      	bne.n	800552a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054de:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <dir_find+0x56>
 80054ec:	2304      	movs	r3, #4
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e01e      	b.n	8005530 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	330b      	adds	r3, #11
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <dir_find+0x7a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005506:	220b      	movs	r2, #11
 8005508:	4619      	mov	r1, r3
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f7fe ff6e 	bl	80043ec <mem_cmp>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005516:	2100      	movs	r1, #0
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fe29 	bl	8005170 <dir_next>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0c8      	beq.n	80054ba <dir_find+0x1e>
 8005528:	e002      	b.n	8005530 <dir_find+0x94>
		if (res != FR_OK) break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <dir_find+0x94>
			break;
 800552e:	bf00      	nop

	return res;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005542:	2101      	movs	r1, #1
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff0a 	bl	800535e <dir_alloc>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d126      	bne.n	80055a2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f7ff f985 	bl	8004872 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d117      	bne.n	80055a2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005578:	2220      	movs	r2, #32
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe ff1b 	bl	80043b8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800558e:	220b      	movs	r2, #11
 8005590:	4619      	mov	r1, r3
 8005592:	f7fe fef3 	bl	800437c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e002      	b.n	80055c4 <create_name+0x18>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b2f      	cmp	r3, #47	; 0x2f
 80055ca:	d0f8      	beq.n	80055be <create_name+0x12>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b5c      	cmp	r3, #92	; 0x5c
 80055d2:	d0f4      	beq.n	80055be <create_name+0x12>
	sfn = dp->fn;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055da:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80055dc:	220b      	movs	r2, #11
 80055de:	2120      	movs	r1, #32
 80055e0:	68b8      	ldr	r0, [r7, #8]
 80055e2:	f7fe fee9 	bl	80043b8 <mem_set>
	si = i = b = 0; ni = 8;
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	2308      	movs	r3, #8
 80055f4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	617a      	str	r2, [r7, #20]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005604:	7fbb      	ldrb	r3, [r7, #30]
 8005606:	2b20      	cmp	r3, #32
 8005608:	d953      	bls.n	80056b2 <create_name+0x106>
 800560a:	7fbb      	ldrb	r3, [r7, #30]
 800560c:	2b2f      	cmp	r3, #47	; 0x2f
 800560e:	d050      	beq.n	80056b2 <create_name+0x106>
 8005610:	7fbb      	ldrb	r3, [r7, #30]
 8005612:	2b5c      	cmp	r3, #92	; 0x5c
 8005614:	d04d      	beq.n	80056b2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005616:	7fbb      	ldrb	r3, [r7, #30]
 8005618:	2b2e      	cmp	r3, #46	; 0x2e
 800561a:	d003      	beq.n	8005624 <create_name+0x78>
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d30f      	bcc.n	8005644 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d102      	bne.n	8005630 <create_name+0x84>
 800562a:	7fbb      	ldrb	r3, [r7, #30]
 800562c:	2b2e      	cmp	r3, #46	; 0x2e
 800562e:	d001      	beq.n	8005634 <create_name+0x88>
 8005630:	2306      	movs	r3, #6
 8005632:	e073      	b.n	800571c <create_name+0x170>
			i = 8; ni = 11;
 8005634:	2308      	movs	r3, #8
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	230b      	movs	r3, #11
 800563a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800563c:	7ffb      	ldrb	r3, [r7, #31]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e035      	b.n	80056b0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005644:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da08      	bge.n	800565e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800564c:	7ffb      	ldrb	r3, [r7, #31]
 800564e:	f043 0303 	orr.w	r3, r3, #3
 8005652:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005654:	7fbb      	ldrb	r3, [r7, #30]
 8005656:	3b80      	subs	r3, #128	; 0x80
 8005658:	4a32      	ldr	r2, [pc, #200]	; (8005724 <create_name+0x178>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800565e:	7fbb      	ldrb	r3, [r7, #30]
 8005660:	4619      	mov	r1, r3
 8005662:	4831      	ldr	r0, [pc, #196]	; (8005728 <create_name+0x17c>)
 8005664:	f7fe fee9 	bl	800443a <chk_chr>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <create_name+0xc6>
				return FR_INVALID_NAME;
 800566e:	2306      	movs	r3, #6
 8005670:	e054      	b.n	800571c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005672:	7fbb      	ldrb	r3, [r7, #30]
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d907      	bls.n	8005688 <create_name+0xdc>
 8005678:	7fbb      	ldrb	r3, [r7, #30]
 800567a:	2b5a      	cmp	r3, #90	; 0x5a
 800567c:	d804      	bhi.n	8005688 <create_name+0xdc>
				b |= 2;
 800567e:	7ffb      	ldrb	r3, [r7, #31]
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e00c      	b.n	80056a2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005688:	7fbb      	ldrb	r3, [r7, #30]
 800568a:	2b60      	cmp	r3, #96	; 0x60
 800568c:	d909      	bls.n	80056a2 <create_name+0xf6>
 800568e:	7fbb      	ldrb	r3, [r7, #30]
 8005690:	2b7a      	cmp	r3, #122	; 0x7a
 8005692:	d806      	bhi.n	80056a2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	7fbb      	ldrb	r3, [r7, #30]
 800569e:	3b20      	subs	r3, #32
 80056a0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	613a      	str	r2, [r7, #16]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	4413      	add	r3, r2
 80056ac:	7fba      	ldrb	r2, [r7, #30]
 80056ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80056b0:	e7a1      	b.n	80055f6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	441a      	add	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80056bc:	7fbb      	ldrb	r3, [r7, #30]
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d801      	bhi.n	80056c6 <create_name+0x11a>
 80056c2:	2304      	movs	r3, #4
 80056c4:	e000      	b.n	80056c8 <create_name+0x11c>
 80056c6:	2300      	movs	r3, #0
 80056c8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <create_name+0x128>
 80056d0:	2306      	movs	r3, #6
 80056d2:	e023      	b.n	800571c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2be5      	cmp	r3, #229	; 0xe5
 80056da:	d102      	bne.n	80056e2 <create_name+0x136>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2205      	movs	r2, #5
 80056e0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d102      	bne.n	80056ee <create_name+0x142>
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d103      	bne.n	8005700 <create_name+0x154>
 80056f8:	7fbb      	ldrb	r3, [r7, #30]
 80056fa:	f043 0310 	orr.w	r3, r3, #16
 80056fe:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005700:	7ffb      	ldrb	r3, [r7, #31]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d103      	bne.n	8005712 <create_name+0x166>
 800570a:	7fbb      	ldrb	r3, [r7, #30]
 800570c:	f043 0308 	orr.w	r3, r3, #8
 8005710:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	330b      	adds	r3, #11
 8005716:	7fba      	ldrb	r2, [r7, #30]
 8005718:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800571a:	2300      	movs	r3, #0
#endif
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	080079cc 	.word	0x080079cc
 8005728:	08007950 	.word	0x08007950

0800572c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b2f      	cmp	r3, #47	; 0x2f
 800573c:	d003      	beq.n	8005746 <follow_path+0x1a>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b5c      	cmp	r3, #92	; 0x5c
 8005744:	d102      	bne.n	800574c <follow_path+0x20>
		path++;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b1f      	cmp	r3, #31
 800575a:	d80a      	bhi.n	8005772 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800575c:	2100      	movs	r1, #0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fc72 	bl	8005048 <dir_sdi>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005770:	e045      	b.n	80057fe <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005772:	463b      	mov	r3, r7
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ff18 	bl	80055ac <create_name>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d136      	bne.n	80057f4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe88 	bl	800549c <dir_find>
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005796:	7adb      	ldrb	r3, [r3, #11]
 8005798:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d128      	bne.n	80057f8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d123      	bne.n	80057f8 <follow_path+0xcc>
 80057b0:	2305      	movs	r3, #5
 80057b2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80057b4:	e020      	b.n	80057f8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11d      	bne.n	80057fc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057c6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	330b      	adds	r3, #11
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80057d6:	2305      	movs	r3, #5
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e010      	b.n	80057fe <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fe04 	bl	80053f2 <ld_clust>
 80057ea:	4602      	mov	r2, r0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057f2:	e7be      	b.n	8005772 <follow_path+0x46>
			if (res != FR_OK) break;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <follow_path+0xd2>
				break;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057fc:	bf00      	nop
		}
	}

	return res;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d031      	beq.n	8005882 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e002      	b.n	800582c <get_ldnumber+0x24>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	3301      	adds	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b20      	cmp	r3, #32
 8005832:	d903      	bls.n	800583c <get_ldnumber+0x34>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b3a      	cmp	r3, #58	; 0x3a
 800583a:	d1f4      	bne.n	8005826 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b3a      	cmp	r3, #58	; 0x3a
 8005842:	d11c      	bne.n	800587e <get_ldnumber+0x76>
			tp = *path;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	3b30      	subs	r3, #48	; 0x30
 8005854:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b09      	cmp	r3, #9
 800585a:	d80e      	bhi.n	800587a <get_ldnumber+0x72>
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	429a      	cmp	r2, r3
 8005862:	d10a      	bne.n	800587a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <get_ldnumber+0x72>
					vol = (int)i;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	3301      	adds	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e002      	b.n	8005884 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005882:	693b      	ldr	r3, [r7, #16]
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fe ffdf 	bl	8004872 <move_window>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <check_fs+0x2e>
		return 3;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e04a      	b.n	8005954 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058c4:	3301      	adds	r3, #1
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	b21a      	sxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80058d2:	b21b      	sxth	r3, r3
 80058d4:	4313      	orrs	r3, r2
 80058d6:	b21b      	sxth	r3, r3
 80058d8:	4a20      	ldr	r2, [pc, #128]	; (800595c <check_fs+0xcc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d001      	beq.n	80058e2 <check_fs+0x52>
		return 2;
 80058de:	2302      	movs	r3, #2
 80058e0:	e038      	b.n	8005954 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3336      	adds	r3, #54	; 0x36
 80058e6:	3303      	adds	r3, #3
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	061a      	lsls	r2, r3, #24
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3336      	adds	r3, #54	; 0x36
 80058f0:	3302      	adds	r3, #2
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	4313      	orrs	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	3236      	adds	r2, #54	; 0x36
 80058fc:	3201      	adds	r2, #1
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	0212      	lsls	r2, r2, #8
 8005902:	4313      	orrs	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800590a:	4313      	orrs	r3, r2
 800590c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <check_fs+0xd0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d101      	bne.n	800591a <check_fs+0x8a>
		return 0;
 8005916:	2300      	movs	r3, #0
 8005918:	e01c      	b.n	8005954 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3352      	adds	r3, #82	; 0x52
 800591e:	3303      	adds	r3, #3
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	061a      	lsls	r2, r3, #24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3352      	adds	r3, #82	; 0x52
 8005928:	3302      	adds	r3, #2
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	4313      	orrs	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	3252      	adds	r2, #82	; 0x52
 8005934:	3201      	adds	r2, #1
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	0212      	lsls	r2, r2, #8
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005942:	4313      	orrs	r3, r2
 8005944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005948:	4a05      	ldr	r2, [pc, #20]	; (8005960 <check_fs+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <check_fs+0xc2>
		return 0;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <check_fs+0xc4>

	return 1;
 8005952:	2301      	movs	r3, #1
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	ffffaa55 	.word	0xffffaa55
 8005960:	00544146 	.word	0x00544146

08005964 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b096      	sub	sp, #88	; 0x58
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f7ff ff45 	bl	8005808 <get_ldnumber>
 800597e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	da01      	bge.n	800598a <find_volume+0x26>
 8005986:	230b      	movs	r3, #11
 8005988:	e2aa      	b.n	8005ee0 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800598a:	4a9e      	ldr	r2, [pc, #632]	; (8005c04 <find_volume+0x2a0>)
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <find_volume+0x3a>
 800599a:	230c      	movs	r3, #12
 800599c:	e2a0      	b.n	8005ee0 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01b      	beq.n	80059e6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fc43 	bl	8004240 <disk_status>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10c      	bne.n	80059e6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <find_volume+0x7e>
 80059d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80059de:	230a      	movs	r3, #10
 80059e0:	e27e      	b.n	8005ee0 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 80059e2:	2300      	movs	r3, #0
 80059e4:	e27c      	b.n	8005ee0 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fc38 	bl	8004274 <disk_initialize>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a16:	2303      	movs	r3, #3
 8005a18:	e262      	b.n	8005ee0 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <find_volume+0xcc>
 8005a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8005a2c:	230a      	movs	r3, #10
 8005a2e:	e257      	b.n	8005ee0 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005a34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a38:	f7ff ff2a 	bl	8005890 <check_fs>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005a42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d155      	bne.n	8005af6 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4e:	e029      	b.n	8005aa4 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a5a:	4413      	add	r3, r2
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	3304      	adds	r3, #4
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d012      	beq.n	8005a8e <find_volume+0x12a>
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	330b      	adds	r3, #11
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	061a      	lsls	r2, r3, #24
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	330a      	adds	r3, #10
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7c:	3209      	adds	r2, #9
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	0212      	lsls	r2, r2, #8
 8005a82:	4313      	orrs	r3, r2
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	3208      	adds	r2, #8
 8005a88:	7812      	ldrb	r2, [r2, #0]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	e000      	b.n	8005a90 <find_volume+0x12c>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005a98:	440b      	add	r3, r1
 8005a9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d9d2      	bls.n	8005a50 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <find_volume+0x156>
 8005ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ac8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <find_volume+0x178>
 8005ad0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ad4:	f7ff fedc 	bl	8005890 <check_fs>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	e000      	b.n	8005ade <find_volume+0x17a>
 8005adc:	2302      	movs	r3, #2
 8005ade:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <find_volume+0x192>
 8005aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aec:	3301      	adds	r3, #1
 8005aee:	643b      	str	r3, [r7, #64]	; 0x40
 8005af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d9e1      	bls.n	8005aba <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005af6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d101      	bne.n	8005b02 <find_volume+0x19e>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e1ee      	b.n	8005ee0 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <find_volume+0x1aa>
 8005b0a:	230d      	movs	r3, #13
 8005b0c:	e1e8      	b.n	8005ee0 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	7b1b      	ldrb	r3, [r3, #12]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	b21a      	sxth	r2, r3
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	7adb      	ldrb	r3, [r3, #11]
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b24:	d001      	beq.n	8005b2a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8005b26:	230d      	movs	r3, #13
 8005b28:	e1da      	b.n	8005ee0 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	7ddb      	ldrb	r3, [r3, #23]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	b21a      	sxth	r2, r3
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	7d9b      	ldrb	r3, [r3, #22]
 8005b36:	b21b      	sxth	r3, r3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d112      	bne.n	8005b6c <find_volume+0x208>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005b4c:	061a      	lsls	r2, r3, #24
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	4313      	orrs	r3, r2
 8005b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005b5e:	0212      	lsls	r2, r2, #8
 8005b60:	4313      	orrs	r3, r2
 8005b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b64:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	7c1a      	ldrb	r2, [r3, #16]
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d006      	beq.n	8005b96 <find_volume+0x232>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d001      	beq.n	8005b96 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8005b92:	230d      	movs	r3, #13
 8005b94:	e1a4      	b.n	8005ee0 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	7b5a      	ldrb	r2, [r3, #13]
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <find_volume+0x26c>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8005bd0:	230d      	movs	r3, #13
 8005bd2:	e185      	b.n	8005ee0 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	7c9b      	ldrb	r3, [r3, #18]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	b21a      	sxth	r2, r3
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	7c5b      	ldrb	r3, [r3, #17]
 8005be0:	b21b      	sxth	r3, r3
 8005be2:	4313      	orrs	r3, r2
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8005bfe:	230d      	movs	r3, #13
 8005c00:	e16e      	b.n	8005ee0 <find_volume+0x57c>
 8005c02:	bf00      	nop
 8005c04:	200001ac 	.word	0x200001ac

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	7d1b      	ldrb	r3, [r3, #20]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	b21a      	sxth	r2, r3
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	7cdb      	ldrb	r3, [r3, #19]
 8005c14:	b21b      	sxth	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d112      	bne.n	8005c4a <find_volume+0x2e6>
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005c2a:	061a      	lsls	r2, r3, #24
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	4313      	orrs	r3, r2
 8005c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c38:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005c3c:	0212      	lsls	r2, r2, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	7bdb      	ldrb	r3, [r3, #15]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b21a      	sxth	r2, r3
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	7b9b      	ldrb	r3, [r3, #14]
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	b21b      	sxth	r3, r3
 8005c5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005c5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <find_volume+0x304>
 8005c64:	230d      	movs	r3, #13
 8005c66:	e13b      	b.n	8005ee0 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	4413      	add	r3, r2
 8005c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c70:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005c74:	0912      	lsrs	r2, r2, #4
 8005c76:	b292      	uxth	r2, r2
 8005c78:	4413      	add	r3, r2
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d201      	bcs.n	8005c88 <find_volume+0x324>
 8005c84:	230d      	movs	r3, #13
 8005c86:	e12b      	b.n	8005ee0 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c90:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <find_volume+0x340>
 8005ca0:	230d      	movs	r3, #13
 8005ca2:	e11d      	b.n	8005ee0 <find_volume+0x57c>
	fmt = FS_FAT12;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d902      	bls.n	8005cba <find_volume+0x356>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d902      	bls.n	8005cca <find_volume+0x366>
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005cdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	441a      	add	r2, r3
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005ce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	441a      	add	r2, r3
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d121      	bne.n	8005d40 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <find_volume+0x3a6>
 8005d06:	230d      	movs	r3, #13
 8005d08:	e0ea      	b.n	8005ee0 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d10:	061a      	lsls	r2, r3, #24
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d1e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005d22:	0212      	lsls	r2, r2, #8
 8005d24:	4313      	orrs	r3, r2
 8005d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d28:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3e:	e025      	b.n	8005d8c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <find_volume+0x3ea>
 8005d4a:	230d      	movs	r3, #13
 8005d4c:	e0c8      	b.n	8005ee0 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	441a      	add	r2, r3
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d104      	bne.n	8005d70 <find_volume+0x40c>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	e00c      	b.n	8005d8a <find_volume+0x426>
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	085a      	lsrs	r2, r3, #1
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d94:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005d98:	0a5b      	lsrs	r3, r3, #9
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d201      	bcs.n	8005da2 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8005d9e:	230d      	movs	r3, #13
 8005da0:	e09e      	b.n	8005ee0 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d177      	bne.n	8005eb8 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	b21a      	sxth	r2, r3
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d16a      	bne.n	8005eb8 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de4:	3301      	adds	r3, #1
 8005de6:	4619      	mov	r1, r3
 8005de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dea:	f7fe fd42 	bl	8004872 <move_window>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d161      	bne.n	8005eb8 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	b21a      	sxth	r2, r3
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005e0c:	b21b      	sxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b21b      	sxth	r3, r3
 8005e12:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <find_volume+0x584>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d14f      	bne.n	8005eb8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	78db      	ldrb	r3, [r3, #3]
 8005e1c:	061a      	lsls	r2, r3, #24
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	4313      	orrs	r3, r2
 8005e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e28:	7852      	ldrb	r2, [r2, #1]
 8005e2a:	0212      	lsls	r2, r2, #8
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	4a2d      	ldr	r2, [pc, #180]	; (8005eec <find_volume+0x588>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d13e      	bne.n	8005eb8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005e40:	061a      	lsls	r2, r3, #24
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005e52:	0212      	lsls	r2, r2, #8
 8005e54:	4313      	orrs	r3, r2
 8005e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e58:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <find_volume+0x58c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d129      	bne.n	8005eb8 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005e6a:	061a      	lsls	r2, r3, #24
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	4313      	orrs	r3, r2
 8005e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e78:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005e7c:	0212      	lsls	r2, r2, #8
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e82:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005e86:	431a      	orrs	r2, r3
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005e94:	061a      	lsls	r2, r3, #24
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005ea6:	0212      	lsls	r2, r2, #8
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eac:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ebe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005ec2:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <find_volume+0x590>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <find_volume+0x590>)
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <find_volume+0x590>)
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eda:	f7fe fc57 	bl	800478c <clear_lock>
#endif

	return FR_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3758      	adds	r7, #88	; 0x58
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	ffffaa55 	.word	0xffffaa55
 8005eec:	41615252 	.word	0x41615252
 8005ef0:	61417272 	.word	0x61417272
 8005ef4:	200001b0 	.word	0x200001b0

08005ef8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d022      	beq.n	8005f50 <validate+0x58>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01d      	beq.n	8005f50 <validate+0x58>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <validate+0x58>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f28:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10c      	bne.n	8005f50 <validate+0x58>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f3c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe f97d 	bl	8004240 <disk_status>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005f50:	2309      	movs	r3, #9
 8005f52:	e000      	b.n	8005f56 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005f72:	f107 0310 	add.w	r3, r7, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fc46 	bl	8005808 <get_ldnumber>
 8005f7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da01      	bge.n	8005f88 <f_mount+0x28>
 8005f84:	230b      	movs	r3, #11
 8005f86:	e02d      	b.n	8005fe4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <f_mount+0x8c>)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005f98:	69b8      	ldr	r0, [r7, #24]
 8005f9a:	f7fe fbf7 	bl	800478c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	490d      	ldr	r1, [pc, #52]	; (8005fec <f_mount+0x8c>)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <f_mount+0x6a>
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <f_mount+0x6e>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e00a      	b.n	8005fe4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005fce:	f107 0108 	add.w	r1, r7, #8
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fcc3 	bl	8005964 <find_volume>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200001ac 	.word	0x200001ac

08005ff0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	6018      	str	r0, [r3, #0]
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	1dfb      	adds	r3, r7, #7
 8006006:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <f_open+0x26>
 8006012:	2309      	movs	r3, #9
 8006014:	e1f2      	b.n	80063fc <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8006016:	f107 030c 	add.w	r3, r7, #12
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006022:	1dfb      	adds	r3, r7, #7
 8006024:	1dfa      	adds	r2, r7, #7
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	f002 021f 	and.w	r2, r2, #31
 800602c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800602e:	1dfb      	adds	r3, r7, #7
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	f107 0320 	add.w	r3, r7, #32
 8006040:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fc8d 	bl	8005964 <find_volume>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006050:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006054:	2b00      	cmp	r3, #0
 8006056:	f040 81cf 	bne.w	80063f8 <f_open+0x408>
		INIT_BUF(dj);
 800605a:	f107 0320 	add.w	r3, r7, #32
 800605e:	f107 0214 	add.w	r2, r7, #20
 8006062:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	f107 0320 	add.w	r3, r7, #32
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fb5a 	bl	800572c <follow_path>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800607e:	f107 0320 	add.w	r3, r7, #32
 8006082:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006086:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800608a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11a      	bne.n	80060c8 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8006092:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800609a:	2306      	movs	r3, #6
 800609c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80060a0:	e012      	b.n	80060c8 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060a2:	1dfb      	adds	r3, r7, #7
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf14      	ite	ne
 80060ae:	2301      	movne	r3, #1
 80060b0:	2300      	moveq	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	f107 0320 	add.w	r3, r7, #32
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe f9d7 	bl	8004470 <chk_lock>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060c8:	1dfb      	adds	r3, r7, #7
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 031c 	and.w	r3, r3, #28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80cc 	beq.w	800626e <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80060d6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01f      	beq.n	800611e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80060de:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d10e      	bne.n	8006104 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060e6:	f7fe fa31 	bl	800454c <enq_lock>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <f_open+0x10e>
 80060f0:	f107 0320 	add.w	r3, r7, #32
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fa20 	bl	800553a <dir_register>
 80060fa:	4603      	mov	r3, r0
 80060fc:	e000      	b.n	8006100 <f_open+0x110>
 80060fe:	2312      	movs	r3, #18
 8006100:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006104:	1dfb      	adds	r3, r7, #7
 8006106:	1dfa      	adds	r2, r7, #7
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006110:	f107 0320 	add.w	r3, r7, #32
 8006114:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006118:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800611c:	e014      	b.n	8006148 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800611e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006122:	330b      	adds	r3, #11
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 0311 	and.w	r3, r3, #17
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <f_open+0x146>
					res = FR_DENIED;
 800612e:	2307      	movs	r3, #7
 8006130:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006134:	e008      	b.n	8006148 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006136:	1dfb      	adds	r3, r7, #7
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <f_open+0x158>
						res = FR_EXIST;
 8006142:	2308      	movs	r3, #8
 8006144:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006148:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 80af 	bne.w	80062b0 <f_open+0x2c0>
 8006152:	1dfb      	adds	r3, r7, #7
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80a8 	beq.w	80062b0 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8006160:	f7fd fb32 	bl	80037c8 <get_fattime>
 8006164:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006168:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800616c:	330e      	adds	r3, #14
 800616e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800617a:	b29b      	uxth	r3, r3
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b29a      	uxth	r2, r3
 8006180:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006184:	330f      	adds	r3, #15
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800618e:	0c1a      	lsrs	r2, r3, #16
 8006190:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006194:	3310      	adds	r3, #16
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800619e:	0e1a      	lsrs	r2, r3, #24
 80061a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061a4:	3311      	adds	r3, #17
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80061aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061ae:	330b      	adds	r3, #11
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80061b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061b8:	331c      	adds	r3, #28
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061c2:	331d      	adds	r3, #29
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061cc:	331e      	adds	r3, #30
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061d6:	331f      	adds	r3, #31
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80061dc:	f107 0320 	add.w	r3, r7, #32
 80061e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061e4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff f902 	bl	80053f2 <ld_clust>
 80061ee:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80061f2:	2100      	movs	r1, #0
 80061f4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80061f8:	f7ff f929 	bl	800544e <st_clust>
				dj.fs->wflag = 1;
 80061fc:	f107 0320 	add.w	r3, r7, #32
 8006200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800620a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800620e:	2b00      	cmp	r3, #0
 8006210:	d04e      	beq.n	80062b0 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8006212:	f107 0320 	add.w	r3, r7, #32
 8006216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800621a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800621e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006222:	f107 0320 	add.w	r3, r7, #32
 8006226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800622a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fdde 	bl	8004df0 <remove_chain>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800623a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d136      	bne.n	80062b0 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006242:	f107 0320 	add.w	r3, r7, #32
 8006246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800624a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800624e:	3a01      	subs	r2, #1
 8006250:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006254:	f107 0320 	add.w	r3, r7, #32
 8006258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800625c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fb06 	bl	8004872 <move_window>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800626c:	e020      	b.n	80062b0 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800626e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11c      	bne.n	80062b0 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006276:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800627a:	330b      	adds	r3, #11
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <f_open+0x29e>
					res = FR_NO_FILE;
 8006286:	2304      	movs	r3, #4
 8006288:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800628c:	e010      	b.n	80062b0 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800628e:	1dfb      	adds	r3, r7, #7
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <f_open+0x2c0>
 800629a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800629e:	330b      	adds	r3, #11
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <f_open+0x2c0>
						res = FR_DENIED;
 80062aa:	2307      	movs	r3, #7
 80062ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80062b0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d13d      	bne.n	8006334 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80062b8:	1dfb      	adds	r3, r7, #7
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	1dfa      	adds	r2, r7, #7
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	f042 0220 	orr.w	r2, r2, #32
 80062ce:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80062d0:	f107 0320 	add.w	r3, r7, #32
 80062d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062d8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80062e6:	f107 030c 	add.w	r3, r7, #12
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80062f0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062f4:	1dfb      	adds	r3, r7, #7
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	f107 0320 	add.w	r3, r7, #32
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe f940 	bl	8004594 <inc_lock>
 8006314:	4602      	mov	r2, r0
 8006316:	f107 030c 	add.w	r3, r7, #12
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006320:	f107 030c 	add.w	r3, r7, #12
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <f_open+0x344>
 800632e:	2302      	movs	r3, #2
 8006330:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006334:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006338:	2b00      	cmp	r3, #0
 800633a:	d15d      	bne.n	80063f8 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800633c:	f107 030c 	add.w	r3, r7, #12
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	1dfa      	adds	r2, r7, #7
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800634a:	f107 030c 	add.w	r3, r7, #12
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006356:	f107 0320 	add.w	r3, r7, #32
 800635a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800635e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f845 	bl	80053f2 <ld_clust>
 8006368:	4602      	mov	r2, r0
 800636a:	f107 030c 	add.w	r3, r7, #12
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006374:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006378:	331f      	adds	r3, #31
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	061a      	lsls	r2, r3, #24
 800637e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006382:	331e      	adds	r3, #30
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	4313      	orrs	r3, r2
 800638a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800638e:	321d      	adds	r2, #29
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	0212      	lsls	r2, r2, #8
 8006394:	4313      	orrs	r3, r2
 8006396:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800639a:	321c      	adds	r2, #28
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	431a      	orrs	r2, r3
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80063aa:	f107 030c 	add.w	r3, r7, #12
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80063b6:	f107 030c 	add.w	r3, r7, #12
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80063ce:	f107 0320 	add.w	r3, r7, #32
 80063d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063ea:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80063ee:	f107 030c 	add.w	r3, r7, #12
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80063f8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b08c      	sub	sp, #48	; 0x30
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fd6a 	bl	8005ef8 <validate>
 8006424:	4603      	mov	r3, r0
 8006426:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006428:	7ffb      	ldrb	r3, [r7, #31]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <f_read+0x2c>
 800642e:	7ffb      	ldrb	r3, [r7, #31]
 8006430:	e150      	b.n	80066d4 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006442:	e147      	b.n	80066d4 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006452:	2307      	movs	r3, #7
 8006454:	e13e      	b.n	80066d4 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	429a      	cmp	r2, r3
 800646c:	f240 812d 	bls.w	80066ca <f_read+0x2c4>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006474:	e129      	b.n	80066ca <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800647c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 80f2 	bne.w	800666a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800648c:	0a5b      	lsrs	r3, r3, #9
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006496:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800649a:	3b01      	subs	r3, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4013      	ands	r3, r2
 80064a0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d139      	bne.n	800651c <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	e018      	b.n	80064ee <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064cc:	4619      	mov	r1, r3
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7fe fd85 	bl	8004fde <clmt_clust>
 80064d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80064d6:	e00a      	b.n	80064ee <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7fe fac0 	bl	8004a6c <get_fat>
 80064ec:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d805      	bhi.n	8006500 <f_read+0xfa>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80064fc:	2302      	movs	r3, #2
 80064fe:	e0e9      	b.n	80066d4 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d105      	bne.n	8006514 <f_read+0x10e>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006510:	2301      	movs	r3, #1
 8006512:	e0df      	b.n	80066d4 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fe fa7c 	bl	8004a28 <clust2sect>
 8006530:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <f_read+0x13e>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006540:	2302      	movs	r3, #2
 8006542:	e0c7      	b.n	80066d4 <f_read+0x2ce>
			sect += csect;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0a5b      	lsrs	r3, r3, #9
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d046      	beq.n	80065e6 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006558:	7dfa      	ldrb	r2, [r7, #23]
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	4413      	add	r3, r2
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006564:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006568:	4293      	cmp	r3, r2
 800656a:	d908      	bls.n	800657e <f_read+0x178>
					cc = fp->fs->csize - csect;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006572:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006576:	461a      	mov	r2, r3
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006584:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	6a39      	ldr	r1, [r7, #32]
 800658e:	f7fd fe97 	bl	80042c0 <disk_read>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80065a0:	2301      	movs	r3, #1
 80065a2:	e097      	b.n	80066d4 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d015      	beq.n	80065de <f_read+0x1d8>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	429a      	cmp	r2, r3
 80065c0:	d90d      	bls.n	80065de <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	025b      	lsls	r3, r3, #9
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	4413      	add	r3, r2
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fecf 	bl	800437c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	025b      	lsls	r3, r3, #9
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80065e4:	e05b      	b.n	800669e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d037      	beq.n	8006662 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01d      	beq.n	800663c <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006606:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006612:	2301      	movs	r3, #1
 8006614:	f7fd fe74 	bl	8004300 <disk_write>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006626:	2301      	movs	r3, #1
 8006628:	e054      	b.n	80066d4 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006642:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	2301      	movs	r3, #1
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	f7fd fe38 	bl	80042c0 <disk_read>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800665e:	2301      	movs	r3, #1
 8006660:	e038      	b.n	80066d4 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800667a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d901      	bls.n	8006686 <f_read+0x280>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006696:	4619      	mov	r1, r3
 8006698:	6a38      	ldr	r0, [r7, #32]
 800669a:	f7fd fe6f 	bl	800437c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	4413      	add	r3, r2
 80066a4:	623b      	str	r3, [r7, #32]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	441a      	add	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f aed2 	bne.w	8006476 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3730      	adds	r7, #48	; 0x30
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fbff 	bl	8005ef8 <validate>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <f_write+0x2c>
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	e192      	b.n	8006a2e <f_write+0x352>
	if (fp->err)							/* Check error */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006718:	e189      	b.n	8006a2e <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006728:	2307      	movs	r3, #7
 800672a:	e180      	b.n	8006a2e <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800673c:	429a      	cmp	r2, r3
 800673e:	f080 8158 	bcs.w	80069f2 <f_write+0x316>
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006746:	e154      	b.n	80069f2 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 8114 	bne.w	8006980 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800675e:	0a5b      	lsrs	r3, r3, #9
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006768:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800676c:	3b01      	subs	r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	4013      	ands	r3, r2
 8006772:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006774:	7dbb      	ldrb	r3, [r7, #22]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d151      	bne.n	800681e <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10f      	bne.n	80067a4 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d121      	bne.n	80067d6 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fb82 	bl	8004ea4 <create_chain>
 80067a0:	6278      	str	r0, [r7, #36]	; 0x24
 80067a2:	e018      	b.n	80067d6 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067b4:	4619      	mov	r1, r3
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7fe fc11 	bl	8004fde <clmt_clust>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24
 80067be:	e00a      	b.n	80067d6 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fe fb68 	bl	8004ea4 <create_chain>
 80067d4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 810f 	beq.w	80069fc <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d105      	bne.n	80067f0 <f_write+0x114>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80067ec:	2302      	movs	r3, #2
 80067ee:	e11e      	b.n	8006a2e <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	d105      	bne.n	8006804 <f_write+0x128>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006800:	2301      	movs	r3, #1
 8006802:	e114      	b.n	8006a2e <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006808:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <f_write+0x142>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006832:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800683e:	2301      	movs	r3, #1
 8006840:	f7fd fd5e 	bl	8004300 <disk_write>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006852:	2301      	movs	r3, #1
 8006854:	e0eb      	b.n	8006a2e <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800685c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fe f8d6 	bl	8004a28 <clust2sect>
 800687c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <f_write+0x1b4>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800688c:	2302      	movs	r3, #2
 800688e:	e0ce      	b.n	8006a2e <f_write+0x352>
			sect += csect;
 8006890:	7dbb      	ldrb	r3, [r7, #22]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d048      	beq.n	8006936 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80068a4:	7dba      	ldrb	r2, [r7, #22]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80068b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d908      	bls.n	80068ca <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80068c2:	461a      	mov	r2, r3
 80068c4:	7dbb      	ldrb	r3, [r7, #22]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068d0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	f7fd fd11 	bl	8004300 <disk_write>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80068ec:	2301      	movs	r3, #1
 80068ee:	e09e      	b.n	8006a2e <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d916      	bls.n	800692e <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	025b      	lsls	r3, r3, #9
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4413      	add	r3, r2
 8006912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006916:	4619      	mov	r1, r3
 8006918:	f7fd fd30 	bl	800437c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006926:	b2da      	uxtb	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	025b      	lsls	r3, r3, #9
 8006932:	623b      	str	r3, [r7, #32]
				continue;
 8006934:	e047      	b.n	80069c6 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	429a      	cmp	r2, r3
 8006940:	d01a      	beq.n	8006978 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800694e:	429a      	cmp	r2, r3
 8006950:	d212      	bcs.n	8006978 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006958:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800695c:	68f9      	ldr	r1, [r7, #12]
 800695e:	2301      	movs	r3, #1
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	f7fd fcad 	bl	80042c0 <disk_read>
 8006966:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006974:	2301      	movs	r3, #1
 8006976:	e05a      	b.n	8006a2e <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800698e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d901      	bls.n	800699c <f_write+0x2c0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80069a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	6a3a      	ldr	r2, [r7, #32]
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fd fce4 	bl	800437c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80069ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	4413      	add	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	441a      	add	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	441a      	add	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f47f aea7 	bne.w	8006748 <f_write+0x6c>
 80069fa:	e000      	b.n	80069fe <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069fc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d905      	bls.n	8006a1a <f_write+0x33e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a20:	f043 0320 	orr.w	r3, r3, #32
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fa5a 	bl	8005ef8 <validate>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 80a8 	bne.w	8006ba0 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a0 	beq.w	8006ba0 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d019      	beq.n	8006aa2 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a74:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006a80:	2301      	movs	r3, #1
 8006a82:	f7fd fc3d 	bl	8004300 <disk_write>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e088      	b.n	8006ba2 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f7fd fede 	bl	8004872 <move_window>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d16f      	bne.n	8006ba0 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006ac6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	330b      	adds	r3, #11
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	330b      	adds	r3, #11
 8006ad2:	f042 0220 	orr.w	r2, r2, #32
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	331c      	adds	r3, #28
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	331d      	adds	r3, #29
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006b02:	0c1a      	lsrs	r2, r3, #16
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	331e      	adds	r3, #30
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006b12:	0e1a      	lsrs	r2, r3, #24
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	331f      	adds	r3, #31
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b22:	4619      	mov	r1, r3
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7fe fc92 	bl	800544e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006b2a:	f7fc fe4d 	bl	80037c8 <get_fattime>
 8006b2e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	3316      	adds	r3, #22
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3317      	adds	r3, #23
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	0c1a      	lsrs	r2, r3, #16
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	3318      	adds	r3, #24
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	0e1a      	lsrs	r2, r3, #24
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3319      	adds	r3, #25
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3312      	adds	r3, #18
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3313      	adds	r3, #19
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006b78:	f023 0320 	bic.w	r3, r3, #32
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fe99 	bl	80048ce <sync_fs>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ff3f 	bl	8006a36 <f_sync>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d116      	bne.n	8006bf0 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff f998 	bl	8005ef8 <validate>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10e      	bne.n	8006bf0 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd fd93 	bl	8004704 <dec_lock>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08e      	sub	sp, #56	; 0x38
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fe fea8 	bl	8005964 <find_volume>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 80af 	bne.w	8006d88 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c36:	3b02      	subs	r3, #2
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d805      	bhi.n	8006c48 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e09f      	b.n	8006d88 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c4e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8006c54:	7efb      	ldrb	r3, [r7, #27]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d125      	bne.n	8006ca6 <f_getfree+0xac>
				clst = 2;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c60:	69f8      	ldr	r0, [r7, #28]
 8006c62:	f7fd ff03 	bl	8004a6c <get_fat>
 8006c66:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d103      	bne.n	8006c78 <f_getfree+0x7e>
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c76:	e077      	b.n	8006d68 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d103      	bne.n	8006c86 <f_getfree+0x8c>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c84:	e070      	b.n	8006d68 <f_getfree+0x16e>
					if (stat == 0) n++;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <f_getfree+0x98>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	3301      	adds	r3, #1
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	3301      	adds	r3, #1
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d3dc      	bcc.n	8006c5e <f_getfree+0x64>
 8006ca4:	e060      	b.n	8006d68 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cba:	2300      	movs	r3, #0
 8006cbc:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d112      	bne.n	8006cea <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cca:	4619      	mov	r1, r3
 8006ccc:	69f8      	ldr	r0, [r7, #28]
 8006cce:	f7fd fdd0 	bl	8004872 <move_window>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d142      	bne.n	8006d66 <f_getfree+0x16c>
						p = fs->win.d8;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006cea:	7efb      	ldrb	r3, [r7, #27]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d115      	bne.n	8006d1c <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	b21a      	sxth	r2, r3
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b21b      	sxth	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <f_getfree+0x114>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	3302      	adds	r3, #2
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	3b02      	subs	r3, #2
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1a:	e01d      	b.n	8006d58 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	3303      	adds	r3, #3
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	061a      	lsls	r2, r3, #24
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	3302      	adds	r3, #2
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	3201      	adds	r2, #1
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	0212      	lsls	r2, r2, #8
 8006d36:	4313      	orrs	r3, r2
 8006d38:	6a3a      	ldr	r2, [r7, #32]
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d102      	bne.n	8006d4c <f_getfree+0x152>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	3301      	adds	r3, #1
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	3b04      	subs	r3, #4
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ac      	bne.n	8006cbe <f_getfree+0xc4>
 8006d64:	e000      	b.n	8006d68 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8006d66:	bf00      	nop
			}
			fs->free_clust = n;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d86:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3738      	adds	r7, #56	; 0x38
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006da8:	e01b      	b.n	8006de2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006daa:	f107 0310 	add.w	r3, r7, #16
 8006dae:	f107 0114 	add.w	r1, r7, #20
 8006db2:	2201      	movs	r2, #1
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fb26 	bl	8006406 <f_read>
		if (rc != 1) break;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d116      	bne.n	8006dee <f_gets+0x5a>
		c = s[0];
 8006dc0:	7d3b      	ldrb	r3, [r7, #20]
 8006dc2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b0d      	cmp	r3, #13
 8006dc8:	d100      	bne.n	8006dcc <f_gets+0x38>
 8006dca:	e00a      	b.n	8006de2 <f_gets+0x4e>
		*p++ = c;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	61ba      	str	r2, [r7, #24]
 8006dd2:	7dfa      	ldrb	r2, [r7, #23]
 8006dd4:	701a      	strb	r2, [r3, #0]
		n++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d007      	beq.n	8006df2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	dbde      	blt.n	8006daa <f_gets+0x16>
 8006dec:	e002      	b.n	8006df4 <f_gets+0x60>
		if (rc != 1) break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006df2:	bf00      	nop
	}
	*p = 0;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <f_gets+0x70>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	e000      	b.n	8006e06 <f_gets+0x72>
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006e26:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e28:	7a5b      	ldrb	r3, [r3, #9]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d831      	bhi.n	8006e94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e30:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e32:	7a5b      	ldrb	r3, [r3, #9]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006e3e:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e40:	7a5b      	ldrb	r3, [r3, #9]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e50:	7a5b      	ldrb	r3, [r3, #9]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	79fa      	ldrb	r2, [r7, #7]
 8006e5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e60:	7a5b      	ldrb	r3, [r3, #9]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	b2d1      	uxtb	r1, r2
 8006e68:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <FATFS_LinkDriverEx+0x94>)
 8006e6a:	7251      	strb	r1, [r2, #9]
 8006e6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
 8006e70:	3330      	adds	r3, #48	; 0x30
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	223a      	movs	r2, #58	; 0x3a
 8006e7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	3302      	adds	r3, #2
 8006e84:	222f      	movs	r2, #47	; 0x2f
 8006e86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	3303      	adds	r3, #3
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	200001cc 	.word	0x200001cc

08006ea8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ffaa 	bl	8006e10 <FATFS_LinkDriverEx>
 8006ebc:	4603      	mov	r3, r0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <__errno>:
 8006ec8:	4b01      	ldr	r3, [pc, #4]	; (8006ed0 <__errno+0x8>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000024 	.word	0x20000024

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4e0d      	ldr	r6, [pc, #52]	; (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1ba4      	subs	r4, r4, r6
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2500      	movs	r5, #0
 8006ee0:	42a5      	cmp	r5, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4e0b      	ldr	r6, [pc, #44]	; (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	; (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f000 fc40 	bl	800776c <_init>
 8006eec:	1ba4      	subs	r4, r4, r6
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	42a5      	cmp	r5, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006efc:	4798      	blx	r3
 8006efe:	3501      	adds	r5, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f06:	4798      	blx	r3
 8006f08:	3501      	adds	r5, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08007a80 	.word	0x08007a80
 8006f10:	08007a80 	.word	0x08007a80
 8006f14:	08007a80 	.word	0x08007a80
 8006f18:	08007a84 	.word	0x08007a84

08006f1c <memset>:
 8006f1c:	4402      	add	r2, r0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <memset+0xa>
 8006f24:	4770      	bx	lr
 8006f26:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2a:	e7f9      	b.n	8006f20 <memset+0x4>

08006f2c <_vsniprintf_r>:
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	1e14      	subs	r4, r2, #0
 8006f30:	4605      	mov	r5, r0
 8006f32:	b09b      	sub	sp, #108	; 0x6c
 8006f34:	4618      	mov	r0, r3
 8006f36:	da05      	bge.n	8006f44 <_vsniprintf_r+0x18>
 8006f38:	238b      	movs	r3, #139	; 0x8b
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b01b      	add	sp, #108	; 0x6c
 8006f42:	bd30      	pop	{r4, r5, pc}
 8006f44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006f4c:	bf14      	ite	ne
 8006f4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f52:	4623      	moveq	r3, r4
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f5c:	9100      	str	r1, [sp, #0]
 8006f5e:	9104      	str	r1, [sp, #16]
 8006f60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006f64:	4602      	mov	r2, r0
 8006f66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f68:	4669      	mov	r1, sp
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f872 	bl	8007054 <_svfiprintf_r>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	bfbc      	itt	lt
 8006f74:	238b      	movlt	r3, #139	; 0x8b
 8006f76:	602b      	strlt	r3, [r5, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d0e1      	beq.n	8006f40 <_vsniprintf_r+0x14>
 8006f7c:	9b00      	ldr	r3, [sp, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e7dd      	b.n	8006f40 <_vsniprintf_r+0x14>

08006f84 <vsniprintf>:
 8006f84:	b507      	push	{r0, r1, r2, lr}
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	4601      	mov	r1, r0
 8006f8e:	4803      	ldr	r0, [pc, #12]	; (8006f9c <vsniprintf+0x18>)
 8006f90:	6800      	ldr	r0, [r0, #0]
 8006f92:	f7ff ffcb 	bl	8006f2c <_vsniprintf_r>
 8006f96:	b003      	add	sp, #12
 8006f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f9c:	20000024 	.word	0x20000024

08006fa0 <__ssputs_r>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	688e      	ldr	r6, [r1, #8]
 8006fa6:	429e      	cmp	r6, r3
 8006fa8:	4682      	mov	sl, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4690      	mov	r8, r2
 8006fae:	4699      	mov	r9, r3
 8006fb0:	d837      	bhi.n	8007022 <__ssputs_r+0x82>
 8006fb2:	898a      	ldrh	r2, [r1, #12]
 8006fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb8:	d031      	beq.n	800701e <__ssputs_r+0x7e>
 8006fba:	6825      	ldr	r5, [r4, #0]
 8006fbc:	6909      	ldr	r1, [r1, #16]
 8006fbe:	1a6f      	subs	r7, r5, r1
 8006fc0:	6965      	ldr	r5, [r4, #20]
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fcc:	f109 0301 	add.w	r3, r9, #1
 8006fd0:	443b      	add	r3, r7
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	bf38      	it	cc
 8006fd6:	461d      	movcc	r5, r3
 8006fd8:	0553      	lsls	r3, r2, #21
 8006fda:	d530      	bpl.n	800703e <__ssputs_r+0x9e>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f000 fb2b 	bl	8007638 <_malloc_r>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	b950      	cbnz	r0, 8006ffc <__ssputs_r+0x5c>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	f8ca 3000 	str.w	r3, [sl]
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	463a      	mov	r2, r7
 8006ffe:	6921      	ldr	r1, [r4, #16]
 8007000:	f000 faa8 	bl	8007554 <memcpy>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800700a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	6126      	str	r6, [r4, #16]
 8007012:	6165      	str	r5, [r4, #20]
 8007014:	443e      	add	r6, r7
 8007016:	1bed      	subs	r5, r5, r7
 8007018:	6026      	str	r6, [r4, #0]
 800701a:	60a5      	str	r5, [r4, #8]
 800701c:	464e      	mov	r6, r9
 800701e:	454e      	cmp	r6, r9
 8007020:	d900      	bls.n	8007024 <__ssputs_r+0x84>
 8007022:	464e      	mov	r6, r9
 8007024:	4632      	mov	r2, r6
 8007026:	4641      	mov	r1, r8
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	f000 fa9e 	bl	800756a <memmove>
 800702e:	68a3      	ldr	r3, [r4, #8]
 8007030:	1b9b      	subs	r3, r3, r6
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	441e      	add	r6, r3
 8007038:	6026      	str	r6, [r4, #0]
 800703a:	2000      	movs	r0, #0
 800703c:	e7dc      	b.n	8006ff8 <__ssputs_r+0x58>
 800703e:	462a      	mov	r2, r5
 8007040:	f000 fb54 	bl	80076ec <_realloc_r>
 8007044:	4606      	mov	r6, r0
 8007046:	2800      	cmp	r0, #0
 8007048:	d1e2      	bne.n	8007010 <__ssputs_r+0x70>
 800704a:	6921      	ldr	r1, [r4, #16]
 800704c:	4650      	mov	r0, sl
 800704e:	f000 faa5 	bl	800759c <_free_r>
 8007052:	e7c8      	b.n	8006fe6 <__ssputs_r+0x46>

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	461d      	mov	r5, r3
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	061f      	lsls	r7, r3, #24
 800705e:	b09d      	sub	sp, #116	; 0x74
 8007060:	4680      	mov	r8, r0
 8007062:	460c      	mov	r4, r1
 8007064:	4616      	mov	r6, r2
 8007066:	d50f      	bpl.n	8007088 <_svfiprintf_r+0x34>
 8007068:	690b      	ldr	r3, [r1, #16]
 800706a:	b96b      	cbnz	r3, 8007088 <_svfiprintf_r+0x34>
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	f000 fae3 	bl	8007638 <_malloc_r>
 8007072:	6020      	str	r0, [r4, #0]
 8007074:	6120      	str	r0, [r4, #16]
 8007076:	b928      	cbnz	r0, 8007084 <_svfiprintf_r+0x30>
 8007078:	230c      	movs	r3, #12
 800707a:	f8c8 3000 	str.w	r3, [r8]
 800707e:	f04f 30ff 	mov.w	r0, #4294967295
 8007082:	e0c8      	b.n	8007216 <_svfiprintf_r+0x1c2>
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	6163      	str	r3, [r4, #20]
 8007088:	2300      	movs	r3, #0
 800708a:	9309      	str	r3, [sp, #36]	; 0x24
 800708c:	2320      	movs	r3, #32
 800708e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007092:	2330      	movs	r3, #48	; 0x30
 8007094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007098:	9503      	str	r5, [sp, #12]
 800709a:	f04f 0b01 	mov.w	fp, #1
 800709e:	4637      	mov	r7, r6
 80070a0:	463d      	mov	r5, r7
 80070a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070a6:	b10b      	cbz	r3, 80070ac <_svfiprintf_r+0x58>
 80070a8:	2b25      	cmp	r3, #37	; 0x25
 80070aa:	d13e      	bne.n	800712a <_svfiprintf_r+0xd6>
 80070ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80070b0:	d00b      	beq.n	80070ca <_svfiprintf_r+0x76>
 80070b2:	4653      	mov	r3, sl
 80070b4:	4632      	mov	r2, r6
 80070b6:	4621      	mov	r1, r4
 80070b8:	4640      	mov	r0, r8
 80070ba:	f7ff ff71 	bl	8006fa0 <__ssputs_r>
 80070be:	3001      	adds	r0, #1
 80070c0:	f000 80a4 	beq.w	800720c <_svfiprintf_r+0x1b8>
 80070c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c6:	4453      	add	r3, sl
 80070c8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ca:	783b      	ldrb	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 809d 	beq.w	800720c <_svfiprintf_r+0x1b8>
 80070d2:	2300      	movs	r3, #0
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	9307      	str	r3, [sp, #28]
 80070e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070e4:	931a      	str	r3, [sp, #104]	; 0x68
 80070e6:	462f      	mov	r7, r5
 80070e8:	2205      	movs	r2, #5
 80070ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070ee:	4850      	ldr	r0, [pc, #320]	; (8007230 <_svfiprintf_r+0x1dc>)
 80070f0:	f7f9 f87e 	bl	80001f0 <memchr>
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	b9d0      	cbnz	r0, 800712e <_svfiprintf_r+0xda>
 80070f8:	06d9      	lsls	r1, r3, #27
 80070fa:	bf44      	itt	mi
 80070fc:	2220      	movmi	r2, #32
 80070fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007102:	071a      	lsls	r2, r3, #28
 8007104:	bf44      	itt	mi
 8007106:	222b      	movmi	r2, #43	; 0x2b
 8007108:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800710c:	782a      	ldrb	r2, [r5, #0]
 800710e:	2a2a      	cmp	r2, #42	; 0x2a
 8007110:	d015      	beq.n	800713e <_svfiprintf_r+0xea>
 8007112:	9a07      	ldr	r2, [sp, #28]
 8007114:	462f      	mov	r7, r5
 8007116:	2000      	movs	r0, #0
 8007118:	250a      	movs	r5, #10
 800711a:	4639      	mov	r1, r7
 800711c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007120:	3b30      	subs	r3, #48	; 0x30
 8007122:	2b09      	cmp	r3, #9
 8007124:	d94d      	bls.n	80071c2 <_svfiprintf_r+0x16e>
 8007126:	b1b8      	cbz	r0, 8007158 <_svfiprintf_r+0x104>
 8007128:	e00f      	b.n	800714a <_svfiprintf_r+0xf6>
 800712a:	462f      	mov	r7, r5
 800712c:	e7b8      	b.n	80070a0 <_svfiprintf_r+0x4c>
 800712e:	4a40      	ldr	r2, [pc, #256]	; (8007230 <_svfiprintf_r+0x1dc>)
 8007130:	1a80      	subs	r0, r0, r2
 8007132:	fa0b f000 	lsl.w	r0, fp, r0
 8007136:	4318      	orrs	r0, r3
 8007138:	9004      	str	r0, [sp, #16]
 800713a:	463d      	mov	r5, r7
 800713c:	e7d3      	b.n	80070e6 <_svfiprintf_r+0x92>
 800713e:	9a03      	ldr	r2, [sp, #12]
 8007140:	1d11      	adds	r1, r2, #4
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	9103      	str	r1, [sp, #12]
 8007146:	2a00      	cmp	r2, #0
 8007148:	db01      	blt.n	800714e <_svfiprintf_r+0xfa>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e004      	b.n	8007158 <_svfiprintf_r+0x104>
 800714e:	4252      	negs	r2, r2
 8007150:	f043 0302 	orr.w	r3, r3, #2
 8007154:	9207      	str	r2, [sp, #28]
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	783b      	ldrb	r3, [r7, #0]
 800715a:	2b2e      	cmp	r3, #46	; 0x2e
 800715c:	d10c      	bne.n	8007178 <_svfiprintf_r+0x124>
 800715e:	787b      	ldrb	r3, [r7, #1]
 8007160:	2b2a      	cmp	r3, #42	; 0x2a
 8007162:	d133      	bne.n	80071cc <_svfiprintf_r+0x178>
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	9203      	str	r2, [sp, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfb8      	it	lt
 8007170:	f04f 33ff 	movlt.w	r3, #4294967295
 8007174:	3702      	adds	r7, #2
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	4d2e      	ldr	r5, [pc, #184]	; (8007234 <_svfiprintf_r+0x1e0>)
 800717a:	7839      	ldrb	r1, [r7, #0]
 800717c:	2203      	movs	r2, #3
 800717e:	4628      	mov	r0, r5
 8007180:	f7f9 f836 	bl	80001f0 <memchr>
 8007184:	b138      	cbz	r0, 8007196 <_svfiprintf_r+0x142>
 8007186:	2340      	movs	r3, #64	; 0x40
 8007188:	1b40      	subs	r0, r0, r5
 800718a:	fa03 f000 	lsl.w	r0, r3, r0
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	4303      	orrs	r3, r0
 8007192:	3701      	adds	r7, #1
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	7839      	ldrb	r1, [r7, #0]
 8007198:	4827      	ldr	r0, [pc, #156]	; (8007238 <_svfiprintf_r+0x1e4>)
 800719a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719e:	2206      	movs	r2, #6
 80071a0:	1c7e      	adds	r6, r7, #1
 80071a2:	f7f9 f825 	bl	80001f0 <memchr>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d038      	beq.n	800721c <_svfiprintf_r+0x1c8>
 80071aa:	4b24      	ldr	r3, [pc, #144]	; (800723c <_svfiprintf_r+0x1e8>)
 80071ac:	bb13      	cbnz	r3, 80071f4 <_svfiprintf_r+0x1a0>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	3307      	adds	r3, #7
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	3308      	adds	r3, #8
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	444b      	add	r3, r9
 80071be:	9309      	str	r3, [sp, #36]	; 0x24
 80071c0:	e76d      	b.n	800709e <_svfiprintf_r+0x4a>
 80071c2:	fb05 3202 	mla	r2, r5, r2, r3
 80071c6:	2001      	movs	r0, #1
 80071c8:	460f      	mov	r7, r1
 80071ca:	e7a6      	b.n	800711a <_svfiprintf_r+0xc6>
 80071cc:	2300      	movs	r3, #0
 80071ce:	3701      	adds	r7, #1
 80071d0:	9305      	str	r3, [sp, #20]
 80071d2:	4619      	mov	r1, r3
 80071d4:	250a      	movs	r5, #10
 80071d6:	4638      	mov	r0, r7
 80071d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071dc:	3a30      	subs	r2, #48	; 0x30
 80071de:	2a09      	cmp	r2, #9
 80071e0:	d903      	bls.n	80071ea <_svfiprintf_r+0x196>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0c8      	beq.n	8007178 <_svfiprintf_r+0x124>
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	e7c6      	b.n	8007178 <_svfiprintf_r+0x124>
 80071ea:	fb05 2101 	mla	r1, r5, r1, r2
 80071ee:	2301      	movs	r3, #1
 80071f0:	4607      	mov	r7, r0
 80071f2:	e7f0      	b.n	80071d6 <_svfiprintf_r+0x182>
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4622      	mov	r2, r4
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <_svfiprintf_r+0x1ec>)
 80071fc:	a904      	add	r1, sp, #16
 80071fe:	4640      	mov	r0, r8
 8007200:	f3af 8000 	nop.w
 8007204:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007208:	4681      	mov	r9, r0
 800720a:	d1d6      	bne.n	80071ba <_svfiprintf_r+0x166>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	065b      	lsls	r3, r3, #25
 8007210:	f53f af35 	bmi.w	800707e <_svfiprintf_r+0x2a>
 8007214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007216:	b01d      	add	sp, #116	; 0x74
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	ab03      	add	r3, sp, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4622      	mov	r2, r4
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <_svfiprintf_r+0x1ec>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	4640      	mov	r0, r8
 8007228:	f000 f882 	bl	8007330 <_printf_i>
 800722c:	e7ea      	b.n	8007204 <_svfiprintf_r+0x1b0>
 800722e:	bf00      	nop
 8007230:	08007a4c 	.word	0x08007a4c
 8007234:	08007a52 	.word	0x08007a52
 8007238:	08007a56 	.word	0x08007a56
 800723c:	00000000 	.word	0x00000000
 8007240:	08006fa1 	.word	0x08006fa1

08007244 <_printf_common>:
 8007244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	4691      	mov	r9, r2
 800724a:	461f      	mov	r7, r3
 800724c:	688a      	ldr	r2, [r1, #8]
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	4293      	cmp	r3, r2
 8007256:	bfb8      	it	lt
 8007258:	4613      	movlt	r3, r2
 800725a:	f8c9 3000 	str.w	r3, [r9]
 800725e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007262:	4606      	mov	r6, r0
 8007264:	460c      	mov	r4, r1
 8007266:	b112      	cbz	r2, 800726e <_printf_common+0x2a>
 8007268:	3301      	adds	r3, #1
 800726a:	f8c9 3000 	str.w	r3, [r9]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	0699      	lsls	r1, r3, #26
 8007272:	bf42      	ittt	mi
 8007274:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007278:	3302      	addmi	r3, #2
 800727a:	f8c9 3000 	strmi.w	r3, [r9]
 800727e:	6825      	ldr	r5, [r4, #0]
 8007280:	f015 0506 	ands.w	r5, r5, #6
 8007284:	d107      	bne.n	8007296 <_printf_common+0x52>
 8007286:	f104 0a19 	add.w	sl, r4, #25
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	f8d9 2000 	ldr.w	r2, [r9]
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	42ab      	cmp	r3, r5
 8007294:	dc28      	bgt.n	80072e8 <_printf_common+0xa4>
 8007296:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	3300      	adds	r3, #0
 800729e:	bf18      	it	ne
 80072a0:	2301      	movne	r3, #1
 80072a2:	0692      	lsls	r2, r2, #26
 80072a4:	d42d      	bmi.n	8007302 <_printf_common+0xbe>
 80072a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072aa:	4639      	mov	r1, r7
 80072ac:	4630      	mov	r0, r6
 80072ae:	47c0      	blx	r8
 80072b0:	3001      	adds	r0, #1
 80072b2:	d020      	beq.n	80072f6 <_printf_common+0xb2>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	68e5      	ldr	r5, [r4, #12]
 80072b8:	f8d9 2000 	ldr.w	r2, [r9]
 80072bc:	f003 0306 	and.w	r3, r3, #6
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	bf08      	it	eq
 80072c4:	1aad      	subeq	r5, r5, r2
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	f04f 0900 	mov.w	r9, #0
 80072de:	341a      	adds	r4, #26
 80072e0:	454d      	cmp	r5, r9
 80072e2:	d11a      	bne.n	800731a <_printf_common+0xd6>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e008      	b.n	80072fa <_printf_common+0xb6>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4652      	mov	r2, sl
 80072ec:	4639      	mov	r1, r7
 80072ee:	4630      	mov	r0, r6
 80072f0:	47c0      	blx	r8
 80072f2:	3001      	adds	r0, #1
 80072f4:	d103      	bne.n	80072fe <_printf_common+0xba>
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	3501      	adds	r5, #1
 8007300:	e7c3      	b.n	800728a <_printf_common+0x46>
 8007302:	18e1      	adds	r1, r4, r3
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	2030      	movs	r0, #48	; 0x30
 8007308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730c:	4422      	add	r2, r4
 800730e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007316:	3302      	adds	r3, #2
 8007318:	e7c5      	b.n	80072a6 <_printf_common+0x62>
 800731a:	2301      	movs	r3, #1
 800731c:	4622      	mov	r2, r4
 800731e:	4639      	mov	r1, r7
 8007320:	4630      	mov	r0, r6
 8007322:	47c0      	blx	r8
 8007324:	3001      	adds	r0, #1
 8007326:	d0e6      	beq.n	80072f6 <_printf_common+0xb2>
 8007328:	f109 0901 	add.w	r9, r9, #1
 800732c:	e7d8      	b.n	80072e0 <_printf_common+0x9c>
	...

08007330 <_printf_i>:
 8007330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007334:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007338:	460c      	mov	r4, r1
 800733a:	7e09      	ldrb	r1, [r1, #24]
 800733c:	b085      	sub	sp, #20
 800733e:	296e      	cmp	r1, #110	; 0x6e
 8007340:	4617      	mov	r7, r2
 8007342:	4606      	mov	r6, r0
 8007344:	4698      	mov	r8, r3
 8007346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007348:	f000 80b3 	beq.w	80074b2 <_printf_i+0x182>
 800734c:	d822      	bhi.n	8007394 <_printf_i+0x64>
 800734e:	2963      	cmp	r1, #99	; 0x63
 8007350:	d036      	beq.n	80073c0 <_printf_i+0x90>
 8007352:	d80a      	bhi.n	800736a <_printf_i+0x3a>
 8007354:	2900      	cmp	r1, #0
 8007356:	f000 80b9 	beq.w	80074cc <_printf_i+0x19c>
 800735a:	2958      	cmp	r1, #88	; 0x58
 800735c:	f000 8083 	beq.w	8007466 <_printf_i+0x136>
 8007360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007364:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007368:	e032      	b.n	80073d0 <_printf_i+0xa0>
 800736a:	2964      	cmp	r1, #100	; 0x64
 800736c:	d001      	beq.n	8007372 <_printf_i+0x42>
 800736e:	2969      	cmp	r1, #105	; 0x69
 8007370:	d1f6      	bne.n	8007360 <_printf_i+0x30>
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	0605      	lsls	r5, r0, #24
 8007378:	f103 0104 	add.w	r1, r3, #4
 800737c:	d52a      	bpl.n	80073d4 <_printf_i+0xa4>
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6011      	str	r1, [r2, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	da03      	bge.n	800738e <_printf_i+0x5e>
 8007386:	222d      	movs	r2, #45	; 0x2d
 8007388:	425b      	negs	r3, r3
 800738a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800738e:	486f      	ldr	r0, [pc, #444]	; (800754c <_printf_i+0x21c>)
 8007390:	220a      	movs	r2, #10
 8007392:	e039      	b.n	8007408 <_printf_i+0xd8>
 8007394:	2973      	cmp	r1, #115	; 0x73
 8007396:	f000 809d 	beq.w	80074d4 <_printf_i+0x1a4>
 800739a:	d808      	bhi.n	80073ae <_printf_i+0x7e>
 800739c:	296f      	cmp	r1, #111	; 0x6f
 800739e:	d020      	beq.n	80073e2 <_printf_i+0xb2>
 80073a0:	2970      	cmp	r1, #112	; 0x70
 80073a2:	d1dd      	bne.n	8007360 <_printf_i+0x30>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	f043 0320 	orr.w	r3, r3, #32
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	e003      	b.n	80073b6 <_printf_i+0x86>
 80073ae:	2975      	cmp	r1, #117	; 0x75
 80073b0:	d017      	beq.n	80073e2 <_printf_i+0xb2>
 80073b2:	2978      	cmp	r1, #120	; 0x78
 80073b4:	d1d4      	bne.n	8007360 <_printf_i+0x30>
 80073b6:	2378      	movs	r3, #120	; 0x78
 80073b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073bc:	4864      	ldr	r0, [pc, #400]	; (8007550 <_printf_i+0x220>)
 80073be:	e055      	b.n	800746c <_printf_i+0x13c>
 80073c0:	6813      	ldr	r3, [r2, #0]
 80073c2:	1d19      	adds	r1, r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6011      	str	r1, [r2, #0]
 80073c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d0:	2301      	movs	r3, #1
 80073d2:	e08c      	b.n	80074ee <_printf_i+0x1be>
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6011      	str	r1, [r2, #0]
 80073d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073dc:	bf18      	it	ne
 80073de:	b21b      	sxthne	r3, r3
 80073e0:	e7cf      	b.n	8007382 <_printf_i+0x52>
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	6825      	ldr	r5, [r4, #0]
 80073e6:	1d18      	adds	r0, r3, #4
 80073e8:	6010      	str	r0, [r2, #0]
 80073ea:	0628      	lsls	r0, r5, #24
 80073ec:	d501      	bpl.n	80073f2 <_printf_i+0xc2>
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	e002      	b.n	80073f8 <_printf_i+0xc8>
 80073f2:	0668      	lsls	r0, r5, #25
 80073f4:	d5fb      	bpl.n	80073ee <_printf_i+0xbe>
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	4854      	ldr	r0, [pc, #336]	; (800754c <_printf_i+0x21c>)
 80073fa:	296f      	cmp	r1, #111	; 0x6f
 80073fc:	bf14      	ite	ne
 80073fe:	220a      	movne	r2, #10
 8007400:	2208      	moveq	r2, #8
 8007402:	2100      	movs	r1, #0
 8007404:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007408:	6865      	ldr	r5, [r4, #4]
 800740a:	60a5      	str	r5, [r4, #8]
 800740c:	2d00      	cmp	r5, #0
 800740e:	f2c0 8095 	blt.w	800753c <_printf_i+0x20c>
 8007412:	6821      	ldr	r1, [r4, #0]
 8007414:	f021 0104 	bic.w	r1, r1, #4
 8007418:	6021      	str	r1, [r4, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d13d      	bne.n	800749a <_printf_i+0x16a>
 800741e:	2d00      	cmp	r5, #0
 8007420:	f040 808e 	bne.w	8007540 <_printf_i+0x210>
 8007424:	4665      	mov	r5, ip
 8007426:	2a08      	cmp	r2, #8
 8007428:	d10b      	bne.n	8007442 <_printf_i+0x112>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d508      	bpl.n	8007442 <_printf_i+0x112>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	bfde      	ittt	le
 8007438:	2330      	movle	r3, #48	; 0x30
 800743a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800743e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007442:	ebac 0305 	sub.w	r3, ip, r5
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	f8cd 8000 	str.w	r8, [sp]
 800744c:	463b      	mov	r3, r7
 800744e:	aa03      	add	r2, sp, #12
 8007450:	4621      	mov	r1, r4
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff fef6 	bl	8007244 <_printf_common>
 8007458:	3001      	adds	r0, #1
 800745a:	d14d      	bne.n	80074f8 <_printf_i+0x1c8>
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	b005      	add	sp, #20
 8007462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007466:	4839      	ldr	r0, [pc, #228]	; (800754c <_printf_i+0x21c>)
 8007468:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800746c:	6813      	ldr	r3, [r2, #0]
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	1d1d      	adds	r5, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6015      	str	r5, [r2, #0]
 8007476:	060a      	lsls	r2, r1, #24
 8007478:	d50b      	bpl.n	8007492 <_printf_i+0x162>
 800747a:	07ca      	lsls	r2, r1, #31
 800747c:	bf44      	itt	mi
 800747e:	f041 0120 	orrmi.w	r1, r1, #32
 8007482:	6021      	strmi	r1, [r4, #0]
 8007484:	b91b      	cbnz	r3, 800748e <_printf_i+0x15e>
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	f022 0220 	bic.w	r2, r2, #32
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	2210      	movs	r2, #16
 8007490:	e7b7      	b.n	8007402 <_printf_i+0xd2>
 8007492:	064d      	lsls	r5, r1, #25
 8007494:	bf48      	it	mi
 8007496:	b29b      	uxthmi	r3, r3
 8007498:	e7ef      	b.n	800747a <_printf_i+0x14a>
 800749a:	4665      	mov	r5, ip
 800749c:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a0:	fb02 3311 	mls	r3, r2, r1, r3
 80074a4:	5cc3      	ldrb	r3, [r0, r3]
 80074a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074aa:	460b      	mov	r3, r1
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d1f5      	bne.n	800749c <_printf_i+0x16c>
 80074b0:	e7b9      	b.n	8007426 <_printf_i+0xf6>
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	6961      	ldr	r1, [r4, #20]
 80074b8:	1d18      	adds	r0, r3, #4
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	0628      	lsls	r0, r5, #24
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	d501      	bpl.n	80074c6 <_printf_i+0x196>
 80074c2:	6019      	str	r1, [r3, #0]
 80074c4:	e002      	b.n	80074cc <_printf_i+0x19c>
 80074c6:	066a      	lsls	r2, r5, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0x192>
 80074ca:	8019      	strh	r1, [r3, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	4665      	mov	r5, ip
 80074d2:	e7b9      	b.n	8007448 <_printf_i+0x118>
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	1d19      	adds	r1, r3, #4
 80074d8:	6011      	str	r1, [r2, #0]
 80074da:	681d      	ldr	r5, [r3, #0]
 80074dc:	6862      	ldr	r2, [r4, #4]
 80074de:	2100      	movs	r1, #0
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7f8 fe85 	bl	80001f0 <memchr>
 80074e6:	b108      	cbz	r0, 80074ec <_printf_i+0x1bc>
 80074e8:	1b40      	subs	r0, r0, r5
 80074ea:	6060      	str	r0, [r4, #4]
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	2300      	movs	r3, #0
 80074f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f6:	e7a7      	b.n	8007448 <_printf_i+0x118>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4639      	mov	r1, r7
 80074fe:	4630      	mov	r0, r6
 8007500:	47c0      	blx	r8
 8007502:	3001      	adds	r0, #1
 8007504:	d0aa      	beq.n	800745c <_printf_i+0x12c>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	079b      	lsls	r3, r3, #30
 800750a:	d413      	bmi.n	8007534 <_printf_i+0x204>
 800750c:	68e0      	ldr	r0, [r4, #12]
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	4298      	cmp	r0, r3
 8007512:	bfb8      	it	lt
 8007514:	4618      	movlt	r0, r3
 8007516:	e7a3      	b.n	8007460 <_printf_i+0x130>
 8007518:	2301      	movs	r3, #1
 800751a:	464a      	mov	r2, r9
 800751c:	4639      	mov	r1, r7
 800751e:	4630      	mov	r0, r6
 8007520:	47c0      	blx	r8
 8007522:	3001      	adds	r0, #1
 8007524:	d09a      	beq.n	800745c <_printf_i+0x12c>
 8007526:	3501      	adds	r5, #1
 8007528:	68e3      	ldr	r3, [r4, #12]
 800752a:	9a03      	ldr	r2, [sp, #12]
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	42ab      	cmp	r3, r5
 8007530:	dcf2      	bgt.n	8007518 <_printf_i+0x1e8>
 8007532:	e7eb      	b.n	800750c <_printf_i+0x1dc>
 8007534:	2500      	movs	r5, #0
 8007536:	f104 0919 	add.w	r9, r4, #25
 800753a:	e7f5      	b.n	8007528 <_printf_i+0x1f8>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1ac      	bne.n	800749a <_printf_i+0x16a>
 8007540:	7803      	ldrb	r3, [r0, #0]
 8007542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007546:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754a:	e76c      	b.n	8007426 <_printf_i+0xf6>
 800754c:	08007a5d 	.word	0x08007a5d
 8007550:	08007a6e 	.word	0x08007a6e

08007554 <memcpy>:
 8007554:	b510      	push	{r4, lr}
 8007556:	1e43      	subs	r3, r0, #1
 8007558:	440a      	add	r2, r1
 800755a:	4291      	cmp	r1, r2
 800755c:	d100      	bne.n	8007560 <memcpy+0xc>
 800755e:	bd10      	pop	{r4, pc}
 8007560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007568:	e7f7      	b.n	800755a <memcpy+0x6>

0800756a <memmove>:
 800756a:	4288      	cmp	r0, r1
 800756c:	b510      	push	{r4, lr}
 800756e:	eb01 0302 	add.w	r3, r1, r2
 8007572:	d807      	bhi.n	8007584 <memmove+0x1a>
 8007574:	1e42      	subs	r2, r0, #1
 8007576:	4299      	cmp	r1, r3
 8007578:	d00a      	beq.n	8007590 <memmove+0x26>
 800757a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007582:	e7f8      	b.n	8007576 <memmove+0xc>
 8007584:	4283      	cmp	r3, r0
 8007586:	d9f5      	bls.n	8007574 <memmove+0xa>
 8007588:	1881      	adds	r1, r0, r2
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	42d3      	cmn	r3, r2
 800758e:	d100      	bne.n	8007592 <memmove+0x28>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007596:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800759a:	e7f7      	b.n	800758c <memmove+0x22>

0800759c <_free_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d045      	beq.n	8007630 <_free_r+0x94>
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f0c      	subs	r4, r1, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfb8      	it	lt
 80075ae:	18e4      	addlt	r4, r4, r3
 80075b0:	f000 f8d2 	bl	8007758 <__malloc_lock>
 80075b4:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <_free_r+0x98>)
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	4610      	mov	r0, r2
 80075ba:	b933      	cbnz	r3, 80075ca <_free_r+0x2e>
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	6014      	str	r4, [r2, #0]
 80075c0:	4628      	mov	r0, r5
 80075c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c6:	f000 b8c8 	b.w	800775a <__malloc_unlock>
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	d90c      	bls.n	80075e8 <_free_r+0x4c>
 80075ce:	6821      	ldr	r1, [r4, #0]
 80075d0:	1862      	adds	r2, r4, r1
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bf04      	itt	eq
 80075d6:	681a      	ldreq	r2, [r3, #0]
 80075d8:	685b      	ldreq	r3, [r3, #4]
 80075da:	6063      	str	r3, [r4, #4]
 80075dc:	bf04      	itt	eq
 80075de:	1852      	addeq	r2, r2, r1
 80075e0:	6022      	streq	r2, [r4, #0]
 80075e2:	6004      	str	r4, [r0, #0]
 80075e4:	e7ec      	b.n	80075c0 <_free_r+0x24>
 80075e6:	4613      	mov	r3, r2
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	b10a      	cbz	r2, 80075f0 <_free_r+0x54>
 80075ec:	42a2      	cmp	r2, r4
 80075ee:	d9fa      	bls.n	80075e6 <_free_r+0x4a>
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	1858      	adds	r0, r3, r1
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d10b      	bne.n	8007610 <_free_r+0x74>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	4401      	add	r1, r0
 80075fc:	1858      	adds	r0, r3, r1
 80075fe:	4282      	cmp	r2, r0
 8007600:	6019      	str	r1, [r3, #0]
 8007602:	d1dd      	bne.n	80075c0 <_free_r+0x24>
 8007604:	6810      	ldr	r0, [r2, #0]
 8007606:	6852      	ldr	r2, [r2, #4]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	4401      	add	r1, r0
 800760c:	6019      	str	r1, [r3, #0]
 800760e:	e7d7      	b.n	80075c0 <_free_r+0x24>
 8007610:	d902      	bls.n	8007618 <_free_r+0x7c>
 8007612:	230c      	movs	r3, #12
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	e7d3      	b.n	80075c0 <_free_r+0x24>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	1821      	adds	r1, r4, r0
 800761c:	428a      	cmp	r2, r1
 800761e:	bf04      	itt	eq
 8007620:	6811      	ldreq	r1, [r2, #0]
 8007622:	6852      	ldreq	r2, [r2, #4]
 8007624:	6062      	str	r2, [r4, #4]
 8007626:	bf04      	itt	eq
 8007628:	1809      	addeq	r1, r1, r0
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	605c      	str	r4, [r3, #4]
 800762e:	e7c7      	b.n	80075c0 <_free_r+0x24>
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	200001d8 	.word	0x200001d8

08007638 <_malloc_r>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	1ccd      	adds	r5, r1, #3
 800763c:	f025 0503 	bic.w	r5, r5, #3
 8007640:	3508      	adds	r5, #8
 8007642:	2d0c      	cmp	r5, #12
 8007644:	bf38      	it	cc
 8007646:	250c      	movcc	r5, #12
 8007648:	2d00      	cmp	r5, #0
 800764a:	4606      	mov	r6, r0
 800764c:	db01      	blt.n	8007652 <_malloc_r+0x1a>
 800764e:	42a9      	cmp	r1, r5
 8007650:	d903      	bls.n	800765a <_malloc_r+0x22>
 8007652:	230c      	movs	r3, #12
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	2000      	movs	r0, #0
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	f000 f87d 	bl	8007758 <__malloc_lock>
 800765e:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <_malloc_r+0xac>)
 8007660:	6814      	ldr	r4, [r2, #0]
 8007662:	4621      	mov	r1, r4
 8007664:	b991      	cbnz	r1, 800768c <_malloc_r+0x54>
 8007666:	4c20      	ldr	r4, [pc, #128]	; (80076e8 <_malloc_r+0xb0>)
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	b91b      	cbnz	r3, 8007674 <_malloc_r+0x3c>
 800766c:	4630      	mov	r0, r6
 800766e:	f000 f863 	bl	8007738 <_sbrk_r>
 8007672:	6020      	str	r0, [r4, #0]
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f000 f85e 	bl	8007738 <_sbrk_r>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d124      	bne.n	80076ca <_malloc_r+0x92>
 8007680:	230c      	movs	r3, #12
 8007682:	6033      	str	r3, [r6, #0]
 8007684:	4630      	mov	r0, r6
 8007686:	f000 f868 	bl	800775a <__malloc_unlock>
 800768a:	e7e4      	b.n	8007656 <_malloc_r+0x1e>
 800768c:	680b      	ldr	r3, [r1, #0]
 800768e:	1b5b      	subs	r3, r3, r5
 8007690:	d418      	bmi.n	80076c4 <_malloc_r+0x8c>
 8007692:	2b0b      	cmp	r3, #11
 8007694:	d90f      	bls.n	80076b6 <_malloc_r+0x7e>
 8007696:	600b      	str	r3, [r1, #0]
 8007698:	50cd      	str	r5, [r1, r3]
 800769a:	18cc      	adds	r4, r1, r3
 800769c:	4630      	mov	r0, r6
 800769e:	f000 f85c 	bl	800775a <__malloc_unlock>
 80076a2:	f104 000b 	add.w	r0, r4, #11
 80076a6:	1d23      	adds	r3, r4, #4
 80076a8:	f020 0007 	bic.w	r0, r0, #7
 80076ac:	1ac3      	subs	r3, r0, r3
 80076ae:	d0d3      	beq.n	8007658 <_malloc_r+0x20>
 80076b0:	425a      	negs	r2, r3
 80076b2:	50e2      	str	r2, [r4, r3]
 80076b4:	e7d0      	b.n	8007658 <_malloc_r+0x20>
 80076b6:	428c      	cmp	r4, r1
 80076b8:	684b      	ldr	r3, [r1, #4]
 80076ba:	bf16      	itet	ne
 80076bc:	6063      	strne	r3, [r4, #4]
 80076be:	6013      	streq	r3, [r2, #0]
 80076c0:	460c      	movne	r4, r1
 80076c2:	e7eb      	b.n	800769c <_malloc_r+0x64>
 80076c4:	460c      	mov	r4, r1
 80076c6:	6849      	ldr	r1, [r1, #4]
 80076c8:	e7cc      	b.n	8007664 <_malloc_r+0x2c>
 80076ca:	1cc4      	adds	r4, r0, #3
 80076cc:	f024 0403 	bic.w	r4, r4, #3
 80076d0:	42a0      	cmp	r0, r4
 80076d2:	d005      	beq.n	80076e0 <_malloc_r+0xa8>
 80076d4:	1a21      	subs	r1, r4, r0
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f82e 	bl	8007738 <_sbrk_r>
 80076dc:	3001      	adds	r0, #1
 80076de:	d0cf      	beq.n	8007680 <_malloc_r+0x48>
 80076e0:	6025      	str	r5, [r4, #0]
 80076e2:	e7db      	b.n	800769c <_malloc_r+0x64>
 80076e4:	200001d8 	.word	0x200001d8
 80076e8:	200001dc 	.word	0x200001dc

080076ec <_realloc_r>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	4607      	mov	r7, r0
 80076f0:	4614      	mov	r4, r2
 80076f2:	460e      	mov	r6, r1
 80076f4:	b921      	cbnz	r1, 8007700 <_realloc_r+0x14>
 80076f6:	4611      	mov	r1, r2
 80076f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076fc:	f7ff bf9c 	b.w	8007638 <_malloc_r>
 8007700:	b922      	cbnz	r2, 800770c <_realloc_r+0x20>
 8007702:	f7ff ff4b 	bl	800759c <_free_r>
 8007706:	4625      	mov	r5, r4
 8007708:	4628      	mov	r0, r5
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	f000 f826 	bl	800775c <_malloc_usable_size_r>
 8007710:	42a0      	cmp	r0, r4
 8007712:	d20f      	bcs.n	8007734 <_realloc_r+0x48>
 8007714:	4621      	mov	r1, r4
 8007716:	4638      	mov	r0, r7
 8007718:	f7ff ff8e 	bl	8007638 <_malloc_r>
 800771c:	4605      	mov	r5, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	d0f2      	beq.n	8007708 <_realloc_r+0x1c>
 8007722:	4631      	mov	r1, r6
 8007724:	4622      	mov	r2, r4
 8007726:	f7ff ff15 	bl	8007554 <memcpy>
 800772a:	4631      	mov	r1, r6
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff ff35 	bl	800759c <_free_r>
 8007732:	e7e9      	b.n	8007708 <_realloc_r+0x1c>
 8007734:	4635      	mov	r5, r6
 8007736:	e7e7      	b.n	8007708 <_realloc_r+0x1c>

08007738 <_sbrk_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4c06      	ldr	r4, [pc, #24]	; (8007754 <_sbrk_r+0x1c>)
 800773c:	2300      	movs	r3, #0
 800773e:	4605      	mov	r5, r0
 8007740:	4608      	mov	r0, r1
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	f7f9 f904 	bl	8000950 <_sbrk>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_sbrk_r+0x1a>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	b103      	cbz	r3, 8007752 <_sbrk_r+0x1a>
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000734 	.word	0x20000734

08007758 <__malloc_lock>:
 8007758:	4770      	bx	lr

0800775a <__malloc_unlock>:
 800775a:	4770      	bx	lr

0800775c <_malloc_usable_size_r>:
 800775c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007760:	1f18      	subs	r0, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfbc      	itt	lt
 8007766:	580b      	ldrlt	r3, [r1, r0]
 8007768:	18c0      	addlt	r0, r0, r3
 800776a:	4770      	bx	lr

0800776c <_init>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr

08007778 <_fini>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr
