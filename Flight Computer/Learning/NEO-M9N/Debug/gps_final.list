
gps_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006c00  08006c00  00016c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007014  08007014  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007014  08007014  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007014  08007014  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800701c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001dc  080071f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080071f8  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eb8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001737  00000000  00000000  000290c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  0002a800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020117  00000000  00000000  0002b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000733c  00000000  00000000  0004b5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c05ca  00000000  00000000  0005293b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  00112f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006be4 	.word	0x08006be4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006be4 	.word	0x08006be4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(GPS_USART, &rx_buffer, 79, 100);
 8000c9c:	2364      	movs	r3, #100	; 0x64
 8000c9e:	224f      	movs	r2, #79	; 0x4f
 8000ca0:	4905      	ldr	r1, [pc, #20]	; (8000cb8 <GPS_Poll+0x20>)
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <GPS_Poll+0x24>)
 8000ca4:	f002 fb1a 	bl	80032dc <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, &rx_buffer, 79, 100);
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	224f      	movs	r2, #79	; 0x4f
 8000cac:	4902      	ldr	r1, [pc, #8]	; (8000cb8 <GPS_Poll+0x20>)
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <GPS_Poll+0x28>)
 8000cb0:	f002 fa80 	bl	80031b4 <HAL_UART_Transmit>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000025c 	.word	0x2000025c
 8000cbc:	20000330 	.word	0x20000330
 8000cc0:	200002ac 	.word	0x200002ac

08000cc4 <GPS_UART_Process>:


void GPS_UART_Process(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <GPS_UART_Process+0x1c>)
 8000cca:	f000 f80b 	bl	8000ce4 <GPS_validate>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <GPS_UART_Process+0x16>
			GPS_parse((char*) rx_buffer);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <GPS_UART_Process+0x1c>)
 8000cd6:	f000 f869 	bl	8000dac <GPS_parse>
		//rx_index = 0;
		//memset(rx_buffer, 0, sizeof(rx_buffer));
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000025c 	.word	0x2000025c

08000ce4 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    while(nmeastr[i] != '$' && i < 79){
 8000cf4:	e002      	b.n	8000cfc <GPS_validate+0x18>
    	i++;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
    while(nmeastr[i] != '$' && i < 79){
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b24      	cmp	r3, #36	; 0x24
 8000d06:	d00e      	beq.n	8000d26 <GPS_validate+0x42>
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8000d0c:	ddf3      	ble.n	8000cf6 <GPS_validate+0x12>
    }
    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 79)){
 8000d0e:	e00a      	b.n	8000d26 <GPS_validate+0x42>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        i++;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 79)){
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d008      	beq.n	8000d44 <GPS_validate+0x60>
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d3c:	d002      	beq.n	8000d44 <GPS_validate+0x60>
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b4e      	cmp	r3, #78	; 0x4e
 8000d42:	dde5      	ble.n	8000d10 <GPS_validate+0x2c>
    }

    if(i >= 79){
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b4e      	cmp	r3, #78	; 0x4e
 8000d48:	dd01      	ble.n	8000d4e <GPS_validate+0x6a>
        return 0;// the string was too long so return an error
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e028      	b.n	8000da0 <GPS_validate+0xbc>
    }

    if (nmeastr[i] == '*'){
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b2a      	cmp	r3, #42	; 0x2a
 8000d58:	d119      	bne.n	8000d8e <GPS_validate+0xaa>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	490a      	ldr	r1, [pc, #40]	; (8000da8 <GPS_validate+0xc4>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 f8d4 	bl	8003f2c <siprintf>
    return((checkcalcstr[0] == check[0])
 8000d84:	7a3a      	ldrb	r2, [r7, #8]
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d108      	bne.n	8000d9e <GPS_validate+0xba>
 8000d8c:	e001      	b.n	8000d92 <GPS_validate+0xae>
        return 0;// no checksum separator found there for invalid
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e006      	b.n	8000da0 <GPS_validate+0xbc>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8000d92:	7a7a      	ldrb	r2, [r7, #9]
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d101      	bne.n	8000d9e <GPS_validate+0xba>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <GPS_validate+0xbc>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08006c00 	.word	0x08006c00

08000dac <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af08      	add	r7, sp, #32
 8000db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &rx_buffer, 79, 100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	224f      	movs	r2, #79	; 0x4f
 8000db8:	494c      	ldr	r1, [pc, #304]	; (8000eec <GPS_parse+0x140>)
 8000dba:	484d      	ldr	r0, [pc, #308]	; (8000ef0 <GPS_parse+0x144>)
 8000dbc:	f002 f9fa 	bl	80031b4 <HAL_UART_Transmit>
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8000dc0:	2206      	movs	r2, #6
 8000dc2:	494c      	ldr	r1, [pc, #304]	; (8000ef4 <GPS_parse+0x148>)
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f003 f8fd 	bl	8003fc4 <strncmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d137      	bne.n	8000e40 <GPS_parse+0x94>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <GPS_parse+0x14c>)
 8000dd2:	9307      	str	r3, [sp, #28]
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <GPS_parse+0x150>)
 8000dd6:	9306      	str	r3, [sp, #24]
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <GPS_parse+0x154>)
 8000dda:	9305      	str	r3, [sp, #20]
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <GPS_parse+0x158>)
 8000dde:	9304      	str	r3, [sp, #16]
 8000de0:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <GPS_parse+0x15c>)
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <GPS_parse+0x160>)
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <GPS_parse+0x164>)
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <GPS_parse+0x168>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <GPS_parse+0x16c>)
 8000df2:	4a4a      	ldr	r2, [pc, #296]	; (8000f1c <GPS_parse+0x170>)
 8000df4:	494a      	ldr	r1, [pc, #296]	; (8000f20 <GPS_parse+0x174>)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f003 f8b8 	bl	8003f6c <siscanf>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd70      	ble.n	8000ee4 <GPS_parse+0x138>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <GPS_parse+0x178>)
 8000e04:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e08:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <GPS_parse+0x178>)
 8000e0a:	7e1b      	ldrb	r3, [r3, #24]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e12:	f000 f8ab 	bl	8000f6c <GPS_nmea_to_dec>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <GPS_parse+0x178>)
 8000e1c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <GPS_parse+0x178>)
 8000e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <GPS_parse+0x178>)
 8000e28:	7e5b      	ldrb	r3, [r3, #25]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e30:	f000 f89c 	bl	8000f6c <GPS_nmea_to_dec>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <GPS_parse+0x178>)
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 8000e3e:	e051      	b.n	8000ee4 <GPS_parse+0x138>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8000e40:	2206      	movs	r2, #6
 8000e42:	4939      	ldr	r1, [pc, #228]	; (8000f28 <GPS_parse+0x17c>)
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f003 f8bd 	bl	8003fc4 <strncmp>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d114      	bne.n	8000e7a <GPS_parse+0xce>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <GPS_parse+0x180>)
 8000e52:	9305      	str	r3, [sp, #20]
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <GPS_parse+0x184>)
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <GPS_parse+0x188>)
 8000e5a:	9303      	str	r3, [sp, #12]
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <GPS_parse+0x160>)
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <GPS_parse+0x164>)
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <GPS_parse+0x168>)
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <GPS_parse+0x16c>)
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <GPS_parse+0x170>)
 8000e6c:	4932      	ldr	r1, [pc, #200]	; (8000f38 <GPS_parse+0x18c>)
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f003 f87c 	bl	8003f6c <siscanf>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	e034      	b.n	8000ee4 <GPS_parse+0x138>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8000e7a:	2206      	movs	r2, #6
 8000e7c:	492f      	ldr	r1, [pc, #188]	; (8000f3c <GPS_parse+0x190>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f003 f8a0 	bl	8003fc4 <strncmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d110      	bne.n	8000eac <GPS_parse+0x100>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <GPS_parse+0x194>)
 8000e8c:	9303      	str	r3, [sp, #12]
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <GPS_parse+0x170>)
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <GPS_parse+0x160>)
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <GPS_parse+0x164>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <GPS_parse+0x168>)
 8000e9c:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <GPS_parse+0x16c>)
 8000e9e:	4929      	ldr	r1, [pc, #164]	; (8000f44 <GPS_parse+0x198>)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f003 f863 	bl	8003f6c <siscanf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	e01b      	b.n	8000ee4 <GPS_parse+0x138>
        	return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8000eac:	2206      	movs	r2, #6
 8000eae:	4926      	ldr	r1, [pc, #152]	; (8000f48 <GPS_parse+0x19c>)
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f003 f887 	bl	8003fc4 <strncmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d113      	bne.n	8000ee4 <GPS_parse+0x138>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <GPS_parse+0x1a0>)
 8000ebe:	9305      	str	r3, [sp, #20]
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <GPS_parse+0x1a4>)
 8000ec2:	9304      	str	r3, [sp, #16]
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <GPS_parse+0x1a8>)
 8000ec6:	9303      	str	r3, [sp, #12]
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <GPS_parse+0x188>)
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <GPS_parse+0x1ac>)
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <GPS_parse+0x1b0>)
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <GPS_parse+0x1b4>)
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <GPS_parse+0x1b8>)
 8000ed8:	4923      	ldr	r1, [pc, #140]	; (8000f68 <GPS_parse+0x1bc>)
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f003 f846 	bl	8003f6c <siscanf>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
        	return;
    }
}
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000025c 	.word	0x2000025c
 8000ef0:	200002ac 	.word	0x200002ac
 8000ef4:	08006c08 	.word	0x08006c08
 8000ef8:	20000230 	.word	0x20000230
 8000efc:	2000022c 	.word	0x2000022c
 8000f00:	20000228 	.word	0x20000228
 8000f04:	20000224 	.word	0x20000224
 8000f08:	20000220 	.word	0x20000220
 8000f0c:	2000021d 	.word	0x2000021d
 8000f10:	20000210 	.word	0x20000210
 8000f14:	2000021c 	.word	0x2000021c
 8000f18:	20000214 	.word	0x20000214
 8000f1c:	20000218 	.word	0x20000218
 8000f20:	08006c10 	.word	0x08006c10
 8000f24:	20000204 	.word	0x20000204
 8000f28:	08006c38 	.word	0x08006c38
 8000f2c:	2000023c 	.word	0x2000023c
 8000f30:	20000238 	.word	0x20000238
 8000f34:	20000234 	.word	0x20000234
 8000f38:	08006c40 	.word	0x08006c40
 8000f3c:	08006c60 	.word	0x08006c60
 8000f40:	20000240 	.word	0x20000240
 8000f44:	08006c68 	.word	0x08006c68
 8000f48:	08006c84 	.word	0x08006c84
 8000f4c:	20000258 	.word	0x20000258
 8000f50:	20000254 	.word	0x20000254
 8000f54:	20000251 	.word	0x20000251
 8000f58:	20000250 	.word	0x20000250
 8000f5c:	2000024c 	.word	0x2000024c
 8000f60:	20000248 	.word	0x20000248
 8000f64:	20000244 	.word	0x20000244
 8000f68:	08006c8c 	.word	0x08006c8c

08000f6c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f76:	4603      	mov	r3, r0
 8000f78:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8000f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001000 <GPS_nmea_to_dec+0x94>
 8000f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8a:	ee17 3a90 	vmov	r3, s15
 8000f8e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2264      	movs	r2, #100	; 0x64
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8000fac:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001004 <GPS_nmea_to_dec+0x98>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2b53      	cmp	r3, #83	; 0x53
 8000fd6:	d002      	beq.n	8000fde <GPS_nmea_to_dec+0x72>
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b57      	cmp	r3, #87	; 0x57
 8000fdc:	d105      	bne.n	8000fea <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8000fde:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe2:	eef1 7a67 	vneg.f32	s15, s15
 8000fe6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	ee07 3a90 	vmov	s15, r3
}
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	42c80000 	.word	0x42c80000
 8001004:	42700000 	.word	0x42700000

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fa22 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f80e 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f8c0 	bl	8001198 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001018:	f000 f85e 	bl	80010d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800101c:	f000 f88c 	bl	8001138 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GPS_Poll();
 8001020:	f7ff fe3a 	bl	8000c98 <GPS_Poll>
	GPS_UART_Process();
 8001024:	f7ff fe4e 	bl	8000cc4 <GPS_UART_Process>
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f000 fa79 	bl	8001520 <HAL_Delay>
  {
 800102e:	e7f7      	b.n	8001020 <main+0x18>

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0a6      	sub	sp, #152	; 0x98
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fd84 	bl	8003b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2258      	movs	r2, #88	; 0x58
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fd76 	bl	8003b4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fce3 	bl	8001a44 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001084:	f000 f8ac 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fbe4 	bl	8002870 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ae:	f000 f897 	bl	80011e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 80010b2:	2305      	movs	r3, #5
 80010b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fe0b 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010cc:	f000 f888 	bl	80011e0 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3798      	adds	r7, #152	; 0x98
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <MX_USART1_UART_Init+0x5c>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_USART1_UART_Init+0x58>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_USART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_USART1_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_USART1_UART_Init+0x58>)
 800111c:	f001 fffc 	bl	8003118 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001126:	f000 f85b 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000330 	.word	0x20000330
 8001134:	40013800 	.word	0x40013800

08001138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <MX_USART3_UART_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001144:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART3_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART3_UART_Init+0x58>)
 800117c:	f001 ffcc 	bl	8003118 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001186:	f000 f82b 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002ac 	.word	0x200002ac
 8001194:	40004800 	.word	0x40004800

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_GPIO_Init+0x44>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <MX_GPIO_Init+0x44>)
 80011a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_GPIO_Init+0x44>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_GPIO_Init+0x44>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <MX_GPIO_Init+0x44>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_GPIO_Init+0x44>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <Error_Handler+0x6>

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x44>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6193      	str	r3, [r2, #24]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_MspInit+0x44>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_MspInit+0x44>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_MspInit+0x44>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <HAL_UART_MspInit+0xd8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d128      	bne.n	80012a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_UART_MspInit+0xdc>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001282:	2330      	movs	r3, #48	; 0x30
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001292:	2307      	movs	r3, #7
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	481c      	ldr	r0, [pc, #112]	; (8001310 <HAL_UART_MspInit+0xe0>)
 800129e:	f000 fa47 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a2:	e02d      	b.n	8001300 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_UART_MspInit+0xe4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d128      	bne.n	8001300 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f0:	2307      	movs	r3, #7
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_UART_MspInit+0xe8>)
 80012fc:	f000 fa18 	bl	8001730 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013800 	.word	0x40013800
 800130c:	40021000 	.word	0x40021000
 8001310:	48000800 	.word	0x48000800
 8001314:	40004800 	.word	0x40004800
 8001318:	48000400 	.word	0x48000400

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f8ba 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f002 fbaa 	bl	8003af8 <__errno>
 80013a4:	4602      	mov	r2, r0
 80013a6:	230c      	movs	r3, #12
 80013a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20010000 	.word	0x20010000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	200001f8 	.word	0x200001f8
 80013d8:	200003c0 	.word	0x200003c0

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 800141c:	4c0b      	ldr	r4, [pc, #44]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800142a:	f7ff ffd7 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142e:	f002 fb69 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff fde9 	bl	8001008 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001444:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 8001448:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800144c:	200003bc 	.word	0x200003bc

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>
	...

08001454 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_Init+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_Init+0x28>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f92f 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff feba 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000

08001480 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f939 	bl	8001716 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f000 f90f 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008
 8001504:	200003b4 	.word	0x200003b4

08001508 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;  
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200003b4 	.word	0x200003b4

08001520 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_Delay+0x40>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff47 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff5c 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb0 	bl	8001684 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e160      	b.n	8001a02 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8152 	beq.w	80019fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d00b      	beq.n	8001778 <HAL_GPIO_Init+0x48>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176c:	2b11      	cmp	r3, #17
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0xea>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0203 	and.w	r2, r3, #3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80ac 	beq.w	80019fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018bc:	4a59      	ldr	r2, [pc, #356]	; (8001a24 <HAL_GPIO_Init+0x2f4>)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e6:	d025      	beq.n	8001934 <HAL_GPIO_Init+0x204>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x2f8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d01f      	beq.n	8001930 <HAL_GPIO_Init+0x200>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_GPIO_Init+0x1fc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_GPIO_Init+0x1f8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1f4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x308>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1f0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1ec>
 8001918:	2306      	movs	r3, #6
 800191a:	e00c      	b.n	8001936 <HAL_GPIO_Init+0x206>
 800191c:	2307      	movs	r3, #7
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001920:	2305      	movs	r3, #5
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x206>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2f4>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_GPIO_Init+0x310>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_GPIO_Init+0x310>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_GPIO_Init+0x310>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019a2:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019cc:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f ae97 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	48001800 	.word	0x48001800
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f000 bf01 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8160 	beq.w	8001d2e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a6e:	4bae      	ldr	r3, [pc, #696]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d00c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7a:	4bab      	ldr	r3, [pc, #684]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d159      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf6>
 8001a86:	4ba8      	ldr	r3, [pc, #672]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d152      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf6>
 8001a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x82>
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0xae>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ade:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ae2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001aee:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001afa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001afe:	fa92 f2a2 	rbit	r2, r2
 8001b02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8102 	beq.w	8001d2c <HAL_RCC_OscConfig+0x2e8>
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80fc 	bne.w	8001d2c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f000 be93 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x110>
 8001b46:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e030      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x134>
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a71      	ldr	r2, [pc, #452]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x15a>
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a64      	ldr	r2, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b9e:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a61      	ldr	r2, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d059      	beq.n	8001c74 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fca2 	bl	8001508 <HAL_GetTick>
 8001bc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff fc9d 	bl	8001508 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d902      	bls.n	8001be0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f000 be40 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
 8001be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001bf4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x1ce>
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x1fa>
 8001c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c42:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001c52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ab      	beq.n	8001bca <HAL_RCC_OscConfig+0x186>
 8001c72:	e05c      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc48 	bl	8001508 <HAL_GetTick>
 8001c78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fc43 	bl	8001508 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d902      	bls.n	8001c94 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f000 bde6 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
 8001c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ca8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x282>
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ae>
 8001cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ce2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x2e4>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001cfa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001cfe:	fa92 f2a2 	rbit	r2, r2
 8001d02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ab      	bne.n	8001c7e <HAL_RCC_OscConfig+0x23a>
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
 8001d28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8170 	beq.w	800201e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d3e:	4bd0      	ldr	r3, [pc, #832]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d4a:	4bcd      	ldr	r3, [pc, #820]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d16d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3ee>
 8001d56:	4bca      	ldr	r3, [pc, #808]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d62:	d166      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3ee>
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001d76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0x350>
 8001d8e:	4bbc      	ldr	r3, [pc, #752]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e013      	b.n	8001dbc <HAL_RCC_OscConfig+0x378>
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001db8:	4bb1      	ldr	r3, [pc, #708]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001dc2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001dce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3ba>
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d002      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f000 bd31 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4ba0      	ldr	r3, [pc, #640]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	21f8      	movs	r1, #248	; 0xf8
 8001e0e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e16:	fa91 f1a1 	rbit	r1, r1
 8001e1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e22:	fab1 f181 	clz	r1, r1
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4995      	ldr	r1, [pc, #596]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e30:	e0f5      	b.n	800201e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8085 	beq.w	8001f48 <HAL_RCC_OscConfig+0x504>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001e50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	461a      	mov	r2, r3
 8001e66:	2301      	movs	r3, #1
 8001e68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb4d 	bl	8001508 <HAL_GetTick>
 8001e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb48 	bl	8001508 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d902      	bls.n	8001e8a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f000 bceb 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001e9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_OscConfig+0x476>
 8001eb4:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e013      	b.n	8001ee2 <HAL_RCC_OscConfig+0x49e>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ed2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ede:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ee8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ef4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0af      	beq.n	8001e74 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	21f8      	movs	r1, #248	; 0xf8
 8001f24:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f2c:	fa91 f1a1 	rbit	r1, r1
 8001f30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f38:	fab1 f181 	clz	r1, r1
 8001f3c:	b2c9      	uxtb	r1, r1
 8001f3e:	408b      	lsls	r3, r1
 8001f40:	494f      	ldr	r1, [pc, #316]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
 8001f46:	e06a      	b.n	800201e <HAL_RCC_OscConfig+0x5da>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001f5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fac8 	bl	8001508 <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fac3 	bl	8001508 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 bc66 	b.w	8002860 <HAL_RCC_OscConfig+0xe1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001fa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x580>
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x5a8>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x63c>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ff2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1af      	bne.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80da 	beq.w	80021e2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d069      	beq.n	800210c <HAL_RCC_OscConfig+0x6c8>
 8002038:	2301      	movs	r3, #1
 800203a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800204a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x640>)
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	2301      	movs	r3, #1
 8002060:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fa51 	bl	8001508 <HAL_GetTick>
 8002066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	e00d      	b.n	8002088 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff fa4c 	bl	8001508 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d905      	bls.n	8002088 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e3ef      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 8002080:	40021000 	.word	0x40021000
 8002084:	10908120 	.word	0x10908120
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020cc:	4ba4      	ldr	r3, [pc, #656]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80020ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020d4:	2102      	movs	r1, #2
 80020d6:	6019      	str	r1, [r3, #0]
 80020d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f1a3 	rbit	r1, r3
 80020e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020e6:	6019      	str	r1, [r3, #0]
  return result;
 80020e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0b0      	beq.n	800206c <HAL_RCC_OscConfig+0x628>
 800210a:	e06a      	b.n	80021e2 <HAL_RCC_OscConfig+0x79e>
 800210c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002122:	601a      	str	r2, [r3, #0]
  return result;
 8002124:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002128:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x920>)
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	461a      	mov	r2, r3
 800213a:	2300      	movs	r3, #0
 800213c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff f9e3 	bl	8001508 <HAL_GetTick>
 8002142:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002146:	e009      	b.n	800215c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7ff f9de 	bl	8001508 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e381      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 800215c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b6e      	ldr	r3, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021ac:	2102      	movs	r1, #2
 80021ae:	6019      	str	r1, [r3, #0]
 80021b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f1a3 	rbit	r1, r3
 80021ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021be:	6019      	str	r1, [r3, #0]
  return result;
 80021c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1b2      	bne.n	8002148 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8157 	beq.w	80024a0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a55      	ldr	r2, [pc, #340]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_OscConfig+0x924>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11a      	bne.n	800226c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x924>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_RCC_OscConfig+0x924>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff f961 	bl	8001508 <HAL_GetTick>
 8002246:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7ff f95c 	bl	8001508 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e2ff      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x924>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ef      	beq.n	800224c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x840>
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e02f      	b.n	80022e4 <HAL_RCC_OscConfig+0x8a0>
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x864>
 800228e:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a30      	ldr	r2, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0x8a0>
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x888>
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x8a0>
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7ff f90b 	bl	8001508 <HAL_GetTick>
 80022f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff f906 	bl	8001508 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e2a7      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 8002310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800233e:	601a      	str	r2, [r3, #0]
  return result;
 8002340:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x928>
 800235a:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_RCC_OscConfig+0x91c>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x944>
 8002360:	40021000 	.word	0x40021000
 8002364:	10908120 	.word	0x10908120
 8002368:	40007000 	.word	0x40007000
 800236c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4bc0      	ldr	r3, [pc, #768]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800238c:	2102      	movs	r1, #2
 800238e:	6011      	str	r1, [r2, #0]
 8002390:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	fa92 f1a2 	rbit	r1, r2
 800239a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800239e:	6011      	str	r1, [r2, #0]
  return result;
 80023a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d09a      	beq.n	80022f8 <HAL_RCC_OscConfig+0x8b4>
 80023c2:	e063      	b.n	800248c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff f8a0 	bl	8001508 <HAL_GetTick>
 80023c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff f89b 	bl	8001508 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e23c      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 80023e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ea:	2202      	movs	r2, #2
 80023ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002414:	601a      	str	r2, [r3, #0]
  return result;
 8002416:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800241a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d102      	bne.n	8002436 <HAL_RCC_OscConfig+0x9f2>
 8002430:	4b95      	ldr	r3, [pc, #596]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	e00d      	b.n	8002452 <HAL_RCC_OscConfig+0xa0e>
 8002436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002456:	2102      	movs	r1, #2
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002468:	6011      	str	r1, [r2, #0]
  return result;
 800246a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1a0      	bne.n	80023ce <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4a7b      	ldr	r2, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 81d9 	beq.w	800285e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ac:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	f000 81a6 	beq.w	8002806 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f040 811e 	bne.w	8002702 <HAL_RCC_OscConfig+0xcbe>
 80024c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024de:	601a      	str	r2, [r3, #0]
  return result;
 80024e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f804 	bl	8001508 <HAL_GetTick>
 8002500:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	e009      	b.n	800251a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe ffff 	bl	8001508 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1a2      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 800251a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002532:	601a      	str	r2, [r3, #0]
  return result;
 8002534:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0xb10>
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e01b      	b.n	800258c <HAL_RCC_OscConfig+0xb48>
 8002554:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002590:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002594:	6011      	str	r1, [r2, #0]
 8002596:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fa92 f1a2 	rbit	r1, r2
 80025a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025a4:	6011      	str	r1, [r2, #0]
  return result;
 80025a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d19e      	bne.n	8002506 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	f023 020f 	bic.w	r2, r3, #15
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	492c      	ldr	r1, [pc, #176]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a19      	ldr	r1, [r3, #32]
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
 80025f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002610:	601a      	str	r2, [r3, #0]
  return result;
 8002612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002616:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002622:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	461a      	mov	r2, r3
 800262a:	2301      	movs	r3, #1
 800262c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe ff6b 	bl	8001508 <HAL_GetTick>
 8002632:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe ff66 	bl	8001508 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e109      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 800264c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800266a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0xc48>
 8002680:	4b01      	ldr	r3, [pc, #4]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	e01e      	b.n	80026c4 <HAL_RCC_OscConfig+0xc80>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0xe28>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80026c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026cc:	6011      	str	r1, [r2, #0]
 80026ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	fa92 f1a2 	rbit	r1, r2
 80026d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026dc:	6011      	str	r1, [r2, #0]
  return result;
 80026de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d09b      	beq.n	8002638 <HAL_RCC_OscConfig+0xbf4>
 8002700:	e0ad      	b.n	800285e <HAL_RCC_OscConfig+0xe1a>
 8002702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f2a3 	rbit	r2, r3
 8002716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002720:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fee6 	bl	8001508 <HAL_GetTick>
 800273c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fee1 	bl	8001508 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e084      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
 8002756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276e:	601a      	str	r2, [r3, #0]
  return result;
 8002770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0xd4c>
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_RCC_OscConfig+0xe28>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0xd84>
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 0320 	add.w	r3, r7, #32
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f107 0318 	add.w	r3, r7, #24
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_OscConfig+0xe28>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f107 0214 	add.w	r2, r7, #20
 80027cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	f107 0214 	add.w	r2, r7, #20
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f107 0210 	add.w	r2, r7, #16
 80027e0:	6011      	str	r1, [r2, #0]
  return result;
 80027e2:	f107 0210 	add.w	r2, r7, #16
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d19e      	bne.n	8002742 <HAL_RCC_OscConfig+0xcfe>
 8002804:	e02b      	b.n	800285e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e025      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_RCC_OscConfig+0xe28>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_OscConfig+0xe28>)
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002824:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002828:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	429a      	cmp	r2, r3
 8002834:	d111      	bne.n	800285a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002836:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002844:	429a      	cmp	r2, r3
 8002846:	d108      	bne.n	800285a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b09e      	sub	sp, #120	; 0x78
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e162      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0207 	bic.w	r2, r3, #7
 800289e:	498b      	ldr	r1, [pc, #556]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b89      	ldr	r3, [pc, #548]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e14a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	497f      	ldr	r1, [pc, #508]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80dc 	beq.w	8002a9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d13c      	bne.n	8002966 <HAL_RCC_ClockConfig+0xf6>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <HAL_RCC_ClockConfig+0xa6>
 8002910:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	e00f      	b.n	8002936 <HAL_RCC_ClockConfig+0xc6>
 8002916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	667b      	str	r3, [r7, #100]	; 0x64
 8002924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002928:	663b      	str	r3, [r7, #96]	; 0x60
 800292a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002932:	4b67      	ldr	r3, [pc, #412]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800293a:	65ba      	str	r2, [r7, #88]	; 0x58
 800293c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800293e:	fa92 f2a2 	rbit	r2, r2
 8002942:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f042 0220 	orr.w	r2, r2, #32
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f002 021f 	and.w	r2, r2, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f202 	lsl.w	r2, r1, r2
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d17b      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0f3      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d13c      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x178>
 800296e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002972:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_RCC_ClockConfig+0x128>
 8002992:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e00f      	b.n	80029b8 <HAL_RCC_ClockConfig+0x148>
 8002998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
 80029a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
 80029ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80029be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029c0:	fa92 f2a2 	rbit	r2, r2
 80029c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d13a      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b2      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
 80029e8:	2302      	movs	r3, #2
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a0>
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e00d      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1bc>
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	61ba      	str	r2, [r7, #24]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	fa92 f2a2 	rbit	r2, r2
 8002a36:	617a      	str	r2, [r7, #20]
  return result;
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f002 021f 	and.w	r2, r2, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e079      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	491a      	ldr	r1, [pc, #104]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fd4c 	bl	8001508 <HAL_GetTick>
 8002a70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fd48 	bl	8001508 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e061      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d214      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4906      	ldr	r1, [pc, #24]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCC_ClockConfig+0x25c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e040      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2de>
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_ClockConfig+0x2e8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_RCC_ClockConfig+0x2e8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x2e8>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4912      	ldr	r1, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b12:	f000 f829 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b20:	22f0      	movs	r2, #240	; 0xf0
 8002b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	40d3      	lsrs	r3, r2
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x2ec>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_RCC_ClockConfig+0x2f0>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_RCC_ClockConfig+0x2f4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fc9a 	bl	8001480 <HAL_InitTick>
  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3778      	adds	r7, #120	; 0x78
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08006cb8 	.word	0x08006cb8
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x30>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x36>
 8002b96:	e03f      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b9a:	623b      	str	r3, [r7, #32]
      break;
 8002b9c:	e03f      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ba4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ba8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	607a      	str	r2, [r7, #4]
  return result;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	40d3      	lsrs	r3, r2
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	220f      	movs	r2, #15
 8002bcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	40d3      	lsrs	r3, r2
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	e007      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	623b      	str	r3, [r7, #32]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	372c      	adds	r7, #44	; 0x2c
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	007a1200 	.word	0x007a1200
 8002c34:	08006cd0 	.word	0x08006cd0
 8002c38:	08006ce0 	.word	0x08006ce0

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c5a:	f7ff ffef 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c5e:	4601      	mov	r1, r0
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	603a      	str	r2, [r7, #0]
  return result;
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	40d3      	lsrs	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08006cc8 	.word	0x08006cc8

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c9e:	f7ff ffcd 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	603a      	str	r2, [r7, #0]
  return result;
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	fab2 f282 	clz	r2, r2
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	40d3      	lsrs	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08006cc8 	.word	0x08006cc8

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b092      	sub	sp, #72	; 0x48
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80d4 	beq.w	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d00:	4b4e      	ldr	r3, [pc, #312]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10e      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	61d3      	str	r3, [r2, #28]
 8002d18:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a41      	ldr	r2, [pc, #260]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe fbe1 	bl	8001508 <HAL_GetTick>
 8002d46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fbdd 	bl	8001508 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1d6      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8084 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d07c      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	2301      	movs	r3, #1
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d04b      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fb8d 	bl	8001508 <HAL_GetTick>
 8002dee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fb89 	bl	8001508 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e180      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d108      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e36:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	e00d      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
 8002e44:	10908100 	.word	0x10908100
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2202      	movs	r2, #2
 8002e5a:	613a      	str	r2, [r7, #16]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	fa92 f2a2 	rbit	r2, r2
 8002e62:	60fa      	str	r2, [r7, #12]
  return result;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	fab2 f282 	clz	r2, r2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f002 021f 	and.w	r2, r2, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0b7      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e82:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4992      	ldr	r1, [pc, #584]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4a8d      	ldr	r2, [pc, #564]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f023 0203 	bic.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4985      	ldr	r1, [pc, #532]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed2:	4b81      	ldr	r3, [pc, #516]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	497e      	ldr	r1, [pc, #504]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef0:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4976      	ldr	r1, [pc, #472]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f023 0210 	bic.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	496f      	ldr	r1, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	4967      	ldr	r1, [pc, #412]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f023 0220 	bic.w	r2, r3, #32
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4960      	ldr	r1, [pc, #384]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f68:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	4958      	ldr	r1, [pc, #352]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4951      	ldr	r1, [pc, #324]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4949      	ldr	r1, [pc, #292]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4942      	ldr	r1, [pc, #264]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	493a      	ldr	r1, [pc, #232]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4933      	ldr	r1, [pc, #204]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	492b      	ldr	r1, [pc, #172]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4924      	ldr	r1, [pc, #144]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	491c      	ldr	r1, [pc, #112]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	4915      	ldr	r1, [pc, #84]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	490d      	ldr	r1, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	4906      	ldr	r1, [pc, #24]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	e002      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003104:	4313      	orrs	r3, r2
 8003106:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3748      	adds	r7, #72	; 0x48
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e040      	b.n	80031ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe f878 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f992 	bl	8003480 <UART_SetConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fb5a 	bl	8003828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fbe1 	bl	800396c <UART_CheckIdleState>
 80031aa:	4603      	mov	r3, r0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	f040 8082 	bne.w	80032d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_UART_Transmit+0x26>
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07a      	b.n	80032d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Transmit+0x38>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e073      	b.n	80032d4 <HAL_UART_Transmit+0x120>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2221      	movs	r2, #33	; 0x21
 8003200:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003202:	f7fe f981 	bl	8001508 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	d108      	bne.n	8003234 <HAL_UART_Transmit+0x80>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e003      	b.n	800323c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003244:	e02d      	b.n	80032a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fbd4 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e039      	b.n	80032d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003272:	b292      	uxth	r2, r2
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	3302      	adds	r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e008      	b.n	8003290 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b292      	uxth	r2, r2
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1cb      	bne.n	8003246 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2140      	movs	r1, #64	; 0x40
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fba0 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e005      	b.n	80032d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 80bf 	bne.w	8003474 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_UART_Receive+0x26>
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0b7      	b.n	8003476 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_UART_Receive+0x38>
 8003310:	2302      	movs	r3, #2
 8003312:	e0b0      	b.n	8003476 <HAL_UART_Receive+0x19a>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2222      	movs	r2, #34	; 0x22
 8003328:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003330:	f7fe f8ea 	bl	8001508 <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d10e      	bne.n	800336e <HAL_UART_Receive+0x92>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_UART_Receive+0x88>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800335e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003362:	e02d      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800336c:	e028      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_UART_Receive+0xb6>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_UART_Receive+0xac>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003386:	e01b      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	227f      	movs	r2, #127	; 0x7f
 800338c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003390:	e016      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339a:	d10d      	bne.n	80033b8 <HAL_UART_Receive+0xdc>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_UART_Receive+0xd2>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	227f      	movs	r2, #127	; 0x7f
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ac:	e008      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	223f      	movs	r2, #63	; 0x3f
 80033b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033b6:	e003      	b.n	80033c0 <HAL_UART_Receive+0xe4>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d108      	bne.n	80033e4 <HAL_UART_Receive+0x108>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e003      	b.n	80033ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033f4:	e033      	b.n	800345e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2120      	movs	r1, #32
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fafc 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e032      	b.n	8003476 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800341c:	b29a      	uxth	r2, r3
 800341e:	8a7b      	ldrh	r3, [r7, #18]
 8003420:	4013      	ands	r3, r2
 8003422:	b29a      	uxth	r2, r3
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	3302      	adds	r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e00d      	b.n	800344c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003436:	b29b      	uxth	r3, r3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	8a7b      	ldrh	r3, [r7, #18]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4013      	ands	r3, r2
 8003440:	b2da      	uxtb	r2, r3
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1c5      	bne.n	80033f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4baa      	ldr	r3, [pc, #680]	; (8003754 <UART_SetConfig+0x2d4>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a98      	ldr	r2, [pc, #608]	; (8003758 <UART_SetConfig+0x2d8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d121      	bne.n	8003540 <UART_SetConfig+0xc0>
 80034fc:	4b97      	ldr	r3, [pc, #604]	; (800375c <UART_SetConfig+0x2dc>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d817      	bhi.n	8003538 <UART_SetConfig+0xb8>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0x90>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	0800352d 	.word	0x0800352d
 8003518:	08003533 	.word	0x08003533
 800351c:	08003527 	.word	0x08003527
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e0b2      	b.n	800368c <UART_SetConfig+0x20c>
 8003526:	2302      	movs	r3, #2
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e0af      	b.n	800368c <UART_SetConfig+0x20c>
 800352c:	2304      	movs	r3, #4
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e0ac      	b.n	800368c <UART_SetConfig+0x20c>
 8003532:	2308      	movs	r3, #8
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e0a9      	b.n	800368c <UART_SetConfig+0x20c>
 8003538:	2310      	movs	r3, #16
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	bf00      	nop
 800353e:	e0a5      	b.n	800368c <UART_SetConfig+0x20c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a86      	ldr	r2, [pc, #536]	; (8003760 <UART_SetConfig+0x2e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d123      	bne.n	8003592 <UART_SetConfig+0x112>
 800354a:	4b84      	ldr	r3, [pc, #528]	; (800375c <UART_SetConfig+0x2dc>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d012      	beq.n	800357e <UART_SetConfig+0xfe>
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d802      	bhi.n	8003564 <UART_SetConfig+0xe4>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <UART_SetConfig+0xf2>
 8003562:	e012      	b.n	800358a <UART_SetConfig+0x10a>
 8003564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003568:	d00c      	beq.n	8003584 <UART_SetConfig+0x104>
 800356a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800356e:	d003      	beq.n	8003578 <UART_SetConfig+0xf8>
 8003570:	e00b      	b.n	800358a <UART_SetConfig+0x10a>
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e089      	b.n	800368c <UART_SetConfig+0x20c>
 8003578:	2302      	movs	r3, #2
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e086      	b.n	800368c <UART_SetConfig+0x20c>
 800357e:	2304      	movs	r3, #4
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e083      	b.n	800368c <UART_SetConfig+0x20c>
 8003584:	2308      	movs	r3, #8
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e080      	b.n	800368c <UART_SetConfig+0x20c>
 800358a:	2310      	movs	r3, #16
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	bf00      	nop
 8003590:	e07c      	b.n	800368c <UART_SetConfig+0x20c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a73      	ldr	r2, [pc, #460]	; (8003764 <UART_SetConfig+0x2e4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d123      	bne.n	80035e4 <UART_SetConfig+0x164>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <UART_SetConfig+0x2dc>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a8:	d012      	beq.n	80035d0 <UART_SetConfig+0x150>
 80035aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ae:	d802      	bhi.n	80035b6 <UART_SetConfig+0x136>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <UART_SetConfig+0x144>
 80035b4:	e012      	b.n	80035dc <UART_SetConfig+0x15c>
 80035b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ba:	d00c      	beq.n	80035d6 <UART_SetConfig+0x156>
 80035bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035c0:	d003      	beq.n	80035ca <UART_SetConfig+0x14a>
 80035c2:	e00b      	b.n	80035dc <UART_SetConfig+0x15c>
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e060      	b.n	800368c <UART_SetConfig+0x20c>
 80035ca:	2302      	movs	r3, #2
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e05d      	b.n	800368c <UART_SetConfig+0x20c>
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e05a      	b.n	800368c <UART_SetConfig+0x20c>
 80035d6:	2308      	movs	r3, #8
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e057      	b.n	800368c <UART_SetConfig+0x20c>
 80035dc:	2310      	movs	r3, #16
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	bf00      	nop
 80035e2:	e053      	b.n	800368c <UART_SetConfig+0x20c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5f      	ldr	r2, [pc, #380]	; (8003768 <UART_SetConfig+0x2e8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d123      	bne.n	8003636 <UART_SetConfig+0x1b6>
 80035ee:	4b5b      	ldr	r3, [pc, #364]	; (800375c <UART_SetConfig+0x2dc>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035fa:	d012      	beq.n	8003622 <UART_SetConfig+0x1a2>
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d802      	bhi.n	8003608 <UART_SetConfig+0x188>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <UART_SetConfig+0x196>
 8003606:	e012      	b.n	800362e <UART_SetConfig+0x1ae>
 8003608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360c:	d00c      	beq.n	8003628 <UART_SetConfig+0x1a8>
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d003      	beq.n	800361c <UART_SetConfig+0x19c>
 8003614:	e00b      	b.n	800362e <UART_SetConfig+0x1ae>
 8003616:	2300      	movs	r3, #0
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e037      	b.n	800368c <UART_SetConfig+0x20c>
 800361c:	2302      	movs	r3, #2
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e034      	b.n	800368c <UART_SetConfig+0x20c>
 8003622:	2304      	movs	r3, #4
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e031      	b.n	800368c <UART_SetConfig+0x20c>
 8003628:	2308      	movs	r3, #8
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e02e      	b.n	800368c <UART_SetConfig+0x20c>
 800362e:	2310      	movs	r3, #16
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	bf00      	nop
 8003634:	e02a      	b.n	800368c <UART_SetConfig+0x20c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4c      	ldr	r2, [pc, #304]	; (800376c <UART_SetConfig+0x2ec>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d123      	bne.n	8003688 <UART_SetConfig+0x208>
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <UART_SetConfig+0x2dc>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364c:	d012      	beq.n	8003674 <UART_SetConfig+0x1f4>
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003652:	d802      	bhi.n	800365a <UART_SetConfig+0x1da>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <UART_SetConfig+0x1e8>
 8003658:	e012      	b.n	8003680 <UART_SetConfig+0x200>
 800365a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800365e:	d00c      	beq.n	800367a <UART_SetConfig+0x1fa>
 8003660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003664:	d003      	beq.n	800366e <UART_SetConfig+0x1ee>
 8003666:	e00b      	b.n	8003680 <UART_SetConfig+0x200>
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e00e      	b.n	800368c <UART_SetConfig+0x20c>
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e00b      	b.n	800368c <UART_SetConfig+0x20c>
 8003674:	2304      	movs	r3, #4
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e008      	b.n	800368c <UART_SetConfig+0x20c>
 800367a:	2308      	movs	r3, #8
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e005      	b.n	800368c <UART_SetConfig+0x20c>
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	bf00      	nop
 8003686:	e001      	b.n	800368c <UART_SetConfig+0x20c>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d16e      	bne.n	8003774 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d828      	bhi.n	80036ee <UART_SetConfig+0x26e>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x224>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7ff fac4 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 80036cc:	61b8      	str	r0, [r7, #24]
        break;
 80036ce:	e013      	b.n	80036f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7ff fae2 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 80036d4:	61b8      	str	r0, [r7, #24]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <UART_SetConfig+0x2f0>)
 80036da:	61bb      	str	r3, [r7, #24]
        break;
 80036dc:	e00c      	b.n	80036f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7ff fa43 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 80036e2:	61b8      	str	r0, [r7, #24]
        break;
 80036e4:	e008      	b.n	80036f8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e004      	b.n	80036f8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77bb      	strb	r3, [r7, #30]
        break;
 80036f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8086 	beq.w	800380c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	005a      	lsls	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	441a      	add	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	b29b      	uxth	r3, r3
 8003716:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d916      	bls.n	800374c <UART_SetConfig+0x2cc>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d212      	bcs.n	800374c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f023 030f 	bic.w	r3, r3, #15
 800372e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	b29b      	uxth	r3, r3
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	b29a      	uxth	r2, r3
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	4313      	orrs	r3, r2
 8003740:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	89fa      	ldrh	r2, [r7, #14]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	e05f      	b.n	800380c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	77bb      	strb	r3, [r7, #30]
 8003750:	e05c      	b.n	800380c <UART_SetConfig+0x38c>
 8003752:	bf00      	nop
 8003754:	efff69f3 	.word	0xefff69f3
 8003758:	40013800 	.word	0x40013800
 800375c:	40021000 	.word	0x40021000
 8003760:	40004400 	.word	0x40004400
 8003764:	40004800 	.word	0x40004800
 8003768:	40004c00 	.word	0x40004c00
 800376c:	40005000 	.word	0x40005000
 8003770:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003774:	7ffb      	ldrb	r3, [r7, #31]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d827      	bhi.n	80037ca <UART_SetConfig+0x34a>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x300>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7ff fa56 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 80037a8:	61b8      	str	r0, [r7, #24]
        break;
 80037aa:	e013      	b.n	80037d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff fa74 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <UART_SetConfig+0x3a4>)
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e00c      	b.n	80037d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7ff f9d5 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 80037be:	61b8      	str	r0, [r7, #24]
        break;
 80037c0:	e008      	b.n	80037d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	61bb      	str	r3, [r7, #24]
        break;
 80037c8:	e004      	b.n	80037d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77bb      	strb	r3, [r7, #30]
        break;
 80037d2:	bf00      	nop
    }

    if (pclk != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	085a      	lsrs	r2, r3, #1
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d908      	bls.n	8003808 <UART_SetConfig+0x388>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d204      	bcs.n	8003808 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e001      	b.n	800380c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003818:	7fbb      	ldrb	r3, [r7, #30]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	007a1200 	.word	0x007a1200

08003828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01a      	beq.n	800393e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d10a      	bne.n	800393e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800397c:	f7fd fdc4 	bl	8001508 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d10e      	bne.n	80039ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f82d 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e023      	b.n	80039f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d10e      	bne.n	80039da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f817 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e00d      	b.n	80039f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	e05e      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d05a      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7fd fd76 	bl	8001508 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11b      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e043      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02c      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a82:	d124      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e00f      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d091      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4e0d      	ldr	r6, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1ba4      	subs	r4, r4, r6
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2500      	movs	r5, #0
 8003b10:	42a5      	cmp	r5, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4e0b      	ldr	r6, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f003 f864 	bl	8006be4 <_init>
 8003b1c:	1ba4      	subs	r4, r4, r6
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2500      	movs	r5, #0
 8003b22:	42a5      	cmp	r5, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2c:	4798      	blx	r3
 8003b2e:	3501      	adds	r5, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b36:	4798      	blx	r3
 8003b38:	3501      	adds	r5, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08007014 	.word	0x08007014
 8003b40:	08007014 	.word	0x08007014
 8003b44:	08007014 	.word	0x08007014
 8003b48:	08007018 	.word	0x08007018

08003b4c <memset>:
 8003b4c:	4402      	add	r2, r0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d100      	bne.n	8003b56 <memset+0xa>
 8003b54:	4770      	bx	lr
 8003b56:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5a:	e7f9      	b.n	8003b50 <memset+0x4>

08003b5c <_scanf_float>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	469a      	mov	sl, r3
 8003b62:	688b      	ldr	r3, [r1, #8]
 8003b64:	4616      	mov	r6, r2
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b6c:	b087      	sub	sp, #28
 8003b6e:	bf83      	ittte	hi
 8003b70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003b74:	189b      	addhi	r3, r3, r2
 8003b76:	9301      	strhi	r3, [sp, #4]
 8003b78:	2300      	movls	r3, #0
 8003b7a:	bf86      	itte	hi
 8003b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b80:	608b      	strhi	r3, [r1, #8]
 8003b82:	9301      	strls	r3, [sp, #4]
 8003b84:	680b      	ldr	r3, [r1, #0]
 8003b86:	4688      	mov	r8, r1
 8003b88:	f04f 0b00 	mov.w	fp, #0
 8003b8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003b90:	f848 3b1c 	str.w	r3, [r8], #28
 8003b94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003b98:	4607      	mov	r7, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4645      	mov	r5, r8
 8003b9e:	465a      	mov	r2, fp
 8003ba0:	46d9      	mov	r9, fp
 8003ba2:	f8cd b008 	str.w	fp, [sp, #8]
 8003ba6:	68a1      	ldr	r1, [r4, #8]
 8003ba8:	b181      	cbz	r1, 8003bcc <_scanf_float+0x70>
 8003baa:	6833      	ldr	r3, [r6, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b49      	cmp	r3, #73	; 0x49
 8003bb0:	d071      	beq.n	8003c96 <_scanf_float+0x13a>
 8003bb2:	d84d      	bhi.n	8003c50 <_scanf_float+0xf4>
 8003bb4:	2b39      	cmp	r3, #57	; 0x39
 8003bb6:	d840      	bhi.n	8003c3a <_scanf_float+0xde>
 8003bb8:	2b31      	cmp	r3, #49	; 0x31
 8003bba:	f080 8088 	bcs.w	8003cce <_scanf_float+0x172>
 8003bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8003bc0:	f000 8090 	beq.w	8003ce4 <_scanf_float+0x188>
 8003bc4:	d815      	bhi.n	8003bf2 <_scanf_float+0x96>
 8003bc6:	2b2b      	cmp	r3, #43	; 0x2b
 8003bc8:	f000 808c 	beq.w	8003ce4 <_scanf_float+0x188>
 8003bcc:	f1b9 0f00 	cmp.w	r9, #0
 8003bd0:	d003      	beq.n	8003bda <_scanf_float+0x7e>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	2a01      	cmp	r2, #1
 8003bde:	f200 80ea 	bhi.w	8003db6 <_scanf_float+0x25a>
 8003be2:	4545      	cmp	r5, r8
 8003be4:	f200 80dc 	bhi.w	8003da0 <_scanf_float+0x244>
 8003be8:	2601      	movs	r6, #1
 8003bea:	4630      	mov	r0, r6
 8003bec:	b007      	add	sp, #28
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bf4:	f000 809f 	beq.w	8003d36 <_scanf_float+0x1da>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d1e7      	bne.n	8003bcc <_scanf_float+0x70>
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003c02:	d064      	beq.n	8003cce <_scanf_float+0x172>
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	f109 0901 	add.w	r9, r9, #1
 8003c10:	b11b      	cbz	r3, 8003c1a <_scanf_float+0xbe>
 8003c12:	3b01      	subs	r3, #1
 8003c14:	3101      	adds	r1, #1
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	60a1      	str	r1, [r4, #8]
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60a3      	str	r3, [r4, #8]
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	3301      	adds	r3, #1
 8003c24:	6123      	str	r3, [r4, #16]
 8003c26:	6873      	ldr	r3, [r6, #4]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	6073      	str	r3, [r6, #4]
 8003c2e:	f340 80ac 	ble.w	8003d8a <_scanf_float+0x22e>
 8003c32:	6833      	ldr	r3, [r6, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	6033      	str	r3, [r6, #0]
 8003c38:	e7b5      	b.n	8003ba6 <_scanf_float+0x4a>
 8003c3a:	2b45      	cmp	r3, #69	; 0x45
 8003c3c:	f000 8085 	beq.w	8003d4a <_scanf_float+0x1ee>
 8003c40:	2b46      	cmp	r3, #70	; 0x46
 8003c42:	d06a      	beq.n	8003d1a <_scanf_float+0x1be>
 8003c44:	2b41      	cmp	r3, #65	; 0x41
 8003c46:	d1c1      	bne.n	8003bcc <_scanf_float+0x70>
 8003c48:	2a01      	cmp	r2, #1
 8003c4a:	d1bf      	bne.n	8003bcc <_scanf_float+0x70>
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	e046      	b.n	8003cde <_scanf_float+0x182>
 8003c50:	2b65      	cmp	r3, #101	; 0x65
 8003c52:	d07a      	beq.n	8003d4a <_scanf_float+0x1ee>
 8003c54:	d818      	bhi.n	8003c88 <_scanf_float+0x12c>
 8003c56:	2b54      	cmp	r3, #84	; 0x54
 8003c58:	d066      	beq.n	8003d28 <_scanf_float+0x1cc>
 8003c5a:	d811      	bhi.n	8003c80 <_scanf_float+0x124>
 8003c5c:	2b4e      	cmp	r3, #78	; 0x4e
 8003c5e:	d1b5      	bne.n	8003bcc <_scanf_float+0x70>
 8003c60:	2a00      	cmp	r2, #0
 8003c62:	d146      	bne.n	8003cf2 <_scanf_float+0x196>
 8003c64:	f1b9 0f00 	cmp.w	r9, #0
 8003c68:	d145      	bne.n	8003cf6 <_scanf_float+0x19a>
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003c70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003c74:	d13f      	bne.n	8003cf6 <_scanf_float+0x19a>
 8003c76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003c7a:	6021      	str	r1, [r4, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	e02e      	b.n	8003cde <_scanf_float+0x182>
 8003c80:	2b59      	cmp	r3, #89	; 0x59
 8003c82:	d01e      	beq.n	8003cc2 <_scanf_float+0x166>
 8003c84:	2b61      	cmp	r3, #97	; 0x61
 8003c86:	e7de      	b.n	8003c46 <_scanf_float+0xea>
 8003c88:	2b6e      	cmp	r3, #110	; 0x6e
 8003c8a:	d0e9      	beq.n	8003c60 <_scanf_float+0x104>
 8003c8c:	d815      	bhi.n	8003cba <_scanf_float+0x15e>
 8003c8e:	2b66      	cmp	r3, #102	; 0x66
 8003c90:	d043      	beq.n	8003d1a <_scanf_float+0x1be>
 8003c92:	2b69      	cmp	r3, #105	; 0x69
 8003c94:	d19a      	bne.n	8003bcc <_scanf_float+0x70>
 8003c96:	f1bb 0f00 	cmp.w	fp, #0
 8003c9a:	d138      	bne.n	8003d0e <_scanf_float+0x1b2>
 8003c9c:	f1b9 0f00 	cmp.w	r9, #0
 8003ca0:	d197      	bne.n	8003bd2 <_scanf_float+0x76>
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003ca8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003cac:	d195      	bne.n	8003bda <_scanf_float+0x7e>
 8003cae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003cb2:	6021      	str	r1, [r4, #0]
 8003cb4:	f04f 0b01 	mov.w	fp, #1
 8003cb8:	e011      	b.n	8003cde <_scanf_float+0x182>
 8003cba:	2b74      	cmp	r3, #116	; 0x74
 8003cbc:	d034      	beq.n	8003d28 <_scanf_float+0x1cc>
 8003cbe:	2b79      	cmp	r3, #121	; 0x79
 8003cc0:	d184      	bne.n	8003bcc <_scanf_float+0x70>
 8003cc2:	f1bb 0f07 	cmp.w	fp, #7
 8003cc6:	d181      	bne.n	8003bcc <_scanf_float+0x70>
 8003cc8:	f04f 0b08 	mov.w	fp, #8
 8003ccc:	e007      	b.n	8003cde <_scanf_float+0x182>
 8003cce:	eb12 0f0b 	cmn.w	r2, fp
 8003cd2:	f47f af7b 	bne.w	8003bcc <_scanf_float+0x70>
 8003cd6:	6821      	ldr	r1, [r4, #0]
 8003cd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003cdc:	6021      	str	r1, [r4, #0]
 8003cde:	702b      	strb	r3, [r5, #0]
 8003ce0:	3501      	adds	r5, #1
 8003ce2:	e79a      	b.n	8003c1a <_scanf_float+0xbe>
 8003ce4:	6821      	ldr	r1, [r4, #0]
 8003ce6:	0608      	lsls	r0, r1, #24
 8003ce8:	f57f af70 	bpl.w	8003bcc <_scanf_float+0x70>
 8003cec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003cf0:	e7f4      	b.n	8003cdc <_scanf_float+0x180>
 8003cf2:	2a02      	cmp	r2, #2
 8003cf4:	d047      	beq.n	8003d86 <_scanf_float+0x22a>
 8003cf6:	f1bb 0f01 	cmp.w	fp, #1
 8003cfa:	d003      	beq.n	8003d04 <_scanf_float+0x1a8>
 8003cfc:	f1bb 0f04 	cmp.w	fp, #4
 8003d00:	f47f af64 	bne.w	8003bcc <_scanf_float+0x70>
 8003d04:	f10b 0b01 	add.w	fp, fp, #1
 8003d08:	fa5f fb8b 	uxtb.w	fp, fp
 8003d0c:	e7e7      	b.n	8003cde <_scanf_float+0x182>
 8003d0e:	f1bb 0f03 	cmp.w	fp, #3
 8003d12:	d0f7      	beq.n	8003d04 <_scanf_float+0x1a8>
 8003d14:	f1bb 0f05 	cmp.w	fp, #5
 8003d18:	e7f2      	b.n	8003d00 <_scanf_float+0x1a4>
 8003d1a:	f1bb 0f02 	cmp.w	fp, #2
 8003d1e:	f47f af55 	bne.w	8003bcc <_scanf_float+0x70>
 8003d22:	f04f 0b03 	mov.w	fp, #3
 8003d26:	e7da      	b.n	8003cde <_scanf_float+0x182>
 8003d28:	f1bb 0f06 	cmp.w	fp, #6
 8003d2c:	f47f af4e 	bne.w	8003bcc <_scanf_float+0x70>
 8003d30:	f04f 0b07 	mov.w	fp, #7
 8003d34:	e7d3      	b.n	8003cde <_scanf_float+0x182>
 8003d36:	6821      	ldr	r1, [r4, #0]
 8003d38:	0588      	lsls	r0, r1, #22
 8003d3a:	f57f af47 	bpl.w	8003bcc <_scanf_float+0x70>
 8003d3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003d42:	6021      	str	r1, [r4, #0]
 8003d44:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d48:	e7c9      	b.n	8003cde <_scanf_float+0x182>
 8003d4a:	6821      	ldr	r1, [r4, #0]
 8003d4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003d50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d54:	d006      	beq.n	8003d64 <_scanf_float+0x208>
 8003d56:	0548      	lsls	r0, r1, #21
 8003d58:	f57f af38 	bpl.w	8003bcc <_scanf_float+0x70>
 8003d5c:	f1b9 0f00 	cmp.w	r9, #0
 8003d60:	f43f af3b 	beq.w	8003bda <_scanf_float+0x7e>
 8003d64:	0588      	lsls	r0, r1, #22
 8003d66:	bf58      	it	pl
 8003d68:	9802      	ldrpl	r0, [sp, #8]
 8003d6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003d6e:	bf58      	it	pl
 8003d70:	eba9 0000 	subpl.w	r0, r9, r0
 8003d74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003d78:	bf58      	it	pl
 8003d7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003d7e:	6021      	str	r1, [r4, #0]
 8003d80:	f04f 0900 	mov.w	r9, #0
 8003d84:	e7ab      	b.n	8003cde <_scanf_float+0x182>
 8003d86:	2203      	movs	r2, #3
 8003d88:	e7a9      	b.n	8003cde <_scanf_float+0x182>
 8003d8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d8e:	9205      	str	r2, [sp, #20]
 8003d90:	4631      	mov	r1, r6
 8003d92:	4638      	mov	r0, r7
 8003d94:	4798      	blx	r3
 8003d96:	9a05      	ldr	r2, [sp, #20]
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	f43f af04 	beq.w	8003ba6 <_scanf_float+0x4a>
 8003d9e:	e715      	b.n	8003bcc <_scanf_float+0x70>
 8003da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003da8:	4632      	mov	r2, r6
 8003daa:	4638      	mov	r0, r7
 8003dac:	4798      	blx	r3
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	e715      	b.n	8003be2 <_scanf_float+0x86>
 8003db6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d80a      	bhi.n	8003dd4 <_scanf_float+0x278>
 8003dbe:	f1bb 0f02 	cmp.w	fp, #2
 8003dc2:	d968      	bls.n	8003e96 <_scanf_float+0x33a>
 8003dc4:	f1ab 0b03 	sub.w	fp, fp, #3
 8003dc8:	fa5f fb8b 	uxtb.w	fp, fp
 8003dcc:	eba5 0b0b 	sub.w	fp, r5, fp
 8003dd0:	455d      	cmp	r5, fp
 8003dd2:	d14b      	bne.n	8003e6c <_scanf_float+0x310>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	05da      	lsls	r2, r3, #23
 8003dd8:	d51f      	bpl.n	8003e1a <_scanf_float+0x2be>
 8003dda:	055b      	lsls	r3, r3, #21
 8003ddc:	d468      	bmi.n	8003eb0 <_scanf_float+0x354>
 8003dde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	2965      	cmp	r1, #101	; 0x65
 8003de6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003dea:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	d00d      	beq.n	8003e0e <_scanf_float+0x2b2>
 8003df2:	2945      	cmp	r1, #69	; 0x45
 8003df4:	d00b      	beq.n	8003e0e <_scanf_float+0x2b2>
 8003df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	4798      	blx	r3
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1a5 0b02 	sub.w	fp, r5, #2
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e12:	4632      	mov	r2, r6
 8003e14:	4638      	mov	r0, r7
 8003e16:	4798      	blx	r3
 8003e18:	465d      	mov	r5, fp
 8003e1a:	6826      	ldr	r6, [r4, #0]
 8003e1c:	f016 0610 	ands.w	r6, r6, #16
 8003e20:	d17a      	bne.n	8003f18 <_scanf_float+0x3bc>
 8003e22:	702e      	strb	r6, [r5, #0]
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d142      	bne.n	8003eb6 <_scanf_float+0x35a>
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	eba9 0303 	sub.w	r3, r9, r3
 8003e36:	425a      	negs	r2, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d149      	bne.n	8003ed0 <_scanf_float+0x374>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4641      	mov	r1, r8
 8003e40:	4638      	mov	r0, r7
 8003e42:	f000 fee1 	bl	8004c08 <_strtod_r>
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	f8da 3000 	ldr.w	r3, [sl]
 8003e4c:	f015 0f02 	tst.w	r5, #2
 8003e50:	f103 0204 	add.w	r2, r3, #4
 8003e54:	ec59 8b10 	vmov	r8, r9, d0
 8003e58:	f8ca 2000 	str.w	r2, [sl]
 8003e5c:	d043      	beq.n	8003ee6 <_scanf_float+0x38a>
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e9c3 8900 	strd	r8, r9, [r3]
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60e3      	str	r3, [r4, #12]
 8003e6a:	e6be      	b.n	8003bea <_scanf_float+0x8e>
 8003e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e74:	4632      	mov	r2, r6
 8003e76:	4638      	mov	r0, r7
 8003e78:	4798      	blx	r3
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	e7a6      	b.n	8003dd0 <_scanf_float+0x274>
 8003e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e8a:	4632      	mov	r2, r6
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	4798      	blx	r3
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	4545      	cmp	r5, r8
 8003e98:	d8f3      	bhi.n	8003e82 <_scanf_float+0x326>
 8003e9a:	e6a5      	b.n	8003be8 <_scanf_float+0x8c>
 8003e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	4798      	blx	r3
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	4545      	cmp	r5, r8
 8003eb2:	d8f3      	bhi.n	8003e9c <_scanf_float+0x340>
 8003eb4:	e698      	b.n	8003be8 <_scanf_float+0x8c>
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0bf      	beq.n	8003e3c <_scanf_float+0x2e0>
 8003ebc:	9904      	ldr	r1, [sp, #16]
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	3101      	adds	r1, #1
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f000 ff2b 	bl	8004d20 <_strtol_r>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	9d04      	ldr	r5, [sp, #16]
 8003ece:	1ac2      	subs	r2, r0, r3
 8003ed0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003ed4:	429d      	cmp	r5, r3
 8003ed6:	bf28      	it	cs
 8003ed8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003edc:	490f      	ldr	r1, [pc, #60]	; (8003f1c <_scanf_float+0x3c0>)
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 f824 	bl	8003f2c <siprintf>
 8003ee4:	e7aa      	b.n	8003e3c <_scanf_float+0x2e0>
 8003ee6:	f015 0504 	ands.w	r5, r5, #4
 8003eea:	d1b8      	bne.n	8003e5e <_scanf_float+0x302>
 8003eec:	681f      	ldr	r7, [r3, #0]
 8003eee:	ee10 2a10 	vmov	r2, s0
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	ee10 0a10 	vmov	r0, s0
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc fe1f 	bl	8000b3c <__aeabi_dcmpun>
 8003efe:	b128      	cbz	r0, 8003f0c <_scanf_float+0x3b0>
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f80d 	bl	8003f20 <nanf>
 8003f06:	ed87 0a00 	vstr	s0, [r7]
 8003f0a:	e7ab      	b.n	8003e64 <_scanf_float+0x308>
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	4649      	mov	r1, r9
 8003f10:	f7fc fe72 	bl	8000bf8 <__aeabi_d2f>
 8003f14:	6038      	str	r0, [r7, #0]
 8003f16:	e7a5      	b.n	8003e64 <_scanf_float+0x308>
 8003f18:	2600      	movs	r6, #0
 8003f1a:	e666      	b.n	8003bea <_scanf_float+0x8e>
 8003f1c:	08006cf0 	.word	0x08006cf0

08003f20 <nanf>:
 8003f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003f28 <nanf+0x8>
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	7fc00000 	.word	0x7fc00000

08003f2c <siprintf>:
 8003f2c:	b40e      	push	{r1, r2, r3}
 8003f2e:	b500      	push	{lr}
 8003f30:	b09c      	sub	sp, #112	; 0x70
 8003f32:	ab1d      	add	r3, sp, #116	; 0x74
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	9006      	str	r0, [sp, #24]
 8003f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f3c:	4809      	ldr	r0, [pc, #36]	; (8003f64 <siprintf+0x38>)
 8003f3e:	9107      	str	r1, [sp, #28]
 8003f40:	9104      	str	r1, [sp, #16]
 8003f42:	4909      	ldr	r1, [pc, #36]	; (8003f68 <siprintf+0x3c>)
 8003f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f48:	9105      	str	r1, [sp, #20]
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	a902      	add	r1, sp, #8
 8003f50:	f001 ff10 	bl	8005d74 <_svfiprintf_r>
 8003f54:	9b02      	ldr	r3, [sp, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	b01c      	add	sp, #112	; 0x70
 8003f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f60:	b003      	add	sp, #12
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c
 8003f68:	ffff0208 	.word	0xffff0208

08003f6c <siscanf>:
 8003f6c:	b40e      	push	{r1, r2, r3}
 8003f6e:	b530      	push	{r4, r5, lr}
 8003f70:	b09c      	sub	sp, #112	; 0x70
 8003f72:	ac1f      	add	r4, sp, #124	; 0x7c
 8003f74:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003f78:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003f80:	9002      	str	r0, [sp, #8]
 8003f82:	9006      	str	r0, [sp, #24]
 8003f84:	f7fc f92c 	bl	80001e0 <strlen>
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <siscanf+0x4c>)
 8003f8a:	9003      	str	r0, [sp, #12]
 8003f8c:	9007      	str	r0, [sp, #28]
 8003f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f90:	480a      	ldr	r0, [pc, #40]	; (8003fbc <siscanf+0x50>)
 8003f92:	9401      	str	r4, [sp, #4]
 8003f94:	2300      	movs	r3, #0
 8003f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f98:	9314      	str	r3, [sp, #80]	; 0x50
 8003f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	a902      	add	r1, sp, #8
 8003fa8:	6800      	ldr	r0, [r0, #0]
 8003faa:	f002 f835 	bl	8006018 <__ssvfiscanf_r>
 8003fae:	b01c      	add	sp, #112	; 0x70
 8003fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fb4:	b003      	add	sp, #12
 8003fb6:	4770      	bx	lr
 8003fb8:	08003fc1 	.word	0x08003fc1
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <__seofread>:
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	4770      	bx	lr

08003fc4 <strncmp>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	b16a      	cbz	r2, 8003fe4 <strncmp+0x20>
 8003fc8:	3901      	subs	r1, #1
 8003fca:	1884      	adds	r4, r0, r2
 8003fcc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003fd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d103      	bne.n	8003fe0 <strncmp+0x1c>
 8003fd8:	42a0      	cmp	r0, r4
 8003fda:	d001      	beq.n	8003fe0 <strncmp+0x1c>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f5      	bne.n	8003fcc <strncmp+0x8>
 8003fe0:	1a98      	subs	r0, r3, r2
 8003fe2:	bd10      	pop	{r4, pc}
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	e7fc      	b.n	8003fe2 <strncmp+0x1e>

08003fe8 <sulp>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4604      	mov	r4, r0
 8003fec:	460d      	mov	r5, r1
 8003fee:	ec45 4b10 	vmov	d0, r4, r5
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	f001 fcc8 	bl	8005988 <__ulp>
 8003ff8:	ec51 0b10 	vmov	r0, r1, d0
 8003ffc:	b17e      	cbz	r6, 800401e <sulp+0x36>
 8003ffe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004006:	2b00      	cmp	r3, #0
 8004008:	dd09      	ble.n	800401e <sulp+0x36>
 800400a:	051b      	lsls	r3, r3, #20
 800400c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004010:	2400      	movs	r4, #0
 8004012:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f7fc faf5 	bl	8000608 <__aeabi_dmul>
 800401e:	bd70      	pop	{r4, r5, r6, pc}

08004020 <_strtod_l>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	461f      	mov	r7, r3
 8004026:	b0a1      	sub	sp, #132	; 0x84
 8004028:	2300      	movs	r3, #0
 800402a:	4681      	mov	r9, r0
 800402c:	4638      	mov	r0, r7
 800402e:	460e      	mov	r6, r1
 8004030:	9217      	str	r2, [sp, #92]	; 0x5c
 8004032:	931c      	str	r3, [sp, #112]	; 0x70
 8004034:	f001 f9be 	bl	80053b4 <__localeconv_l>
 8004038:	4680      	mov	r8, r0
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f7fc f8d0 	bl	80001e0 <strlen>
 8004040:	f04f 0a00 	mov.w	sl, #0
 8004044:	4604      	mov	r4, r0
 8004046:	f04f 0b00 	mov.w	fp, #0
 800404a:	961b      	str	r6, [sp, #108]	; 0x6c
 800404c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	2a0d      	cmp	r2, #13
 8004052:	d832      	bhi.n	80040ba <_strtod_l+0x9a>
 8004054:	2a09      	cmp	r2, #9
 8004056:	d236      	bcs.n	80040c6 <_strtod_l+0xa6>
 8004058:	2a00      	cmp	r2, #0
 800405a:	d03e      	beq.n	80040da <_strtod_l+0xba>
 800405c:	2300      	movs	r3, #0
 800405e:	930d      	str	r3, [sp, #52]	; 0x34
 8004060:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004062:	782b      	ldrb	r3, [r5, #0]
 8004064:	2b30      	cmp	r3, #48	; 0x30
 8004066:	f040 80ac 	bne.w	80041c2 <_strtod_l+0x1a2>
 800406a:	786b      	ldrb	r3, [r5, #1]
 800406c:	2b58      	cmp	r3, #88	; 0x58
 800406e:	d001      	beq.n	8004074 <_strtod_l+0x54>
 8004070:	2b78      	cmp	r3, #120	; 0x78
 8004072:	d167      	bne.n	8004144 <_strtod_l+0x124>
 8004074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	ab1c      	add	r3, sp, #112	; 0x70
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	9702      	str	r7, [sp, #8]
 800407e:	ab1d      	add	r3, sp, #116	; 0x74
 8004080:	4a88      	ldr	r2, [pc, #544]	; (80042a4 <_strtod_l+0x284>)
 8004082:	a91b      	add	r1, sp, #108	; 0x6c
 8004084:	4648      	mov	r0, r9
 8004086:	f000 feac 	bl	8004de2 <__gethex>
 800408a:	f010 0407 	ands.w	r4, r0, #7
 800408e:	4606      	mov	r6, r0
 8004090:	d005      	beq.n	800409e <_strtod_l+0x7e>
 8004092:	2c06      	cmp	r4, #6
 8004094:	d12b      	bne.n	80040ee <_strtod_l+0xce>
 8004096:	3501      	adds	r5, #1
 8004098:	2300      	movs	r3, #0
 800409a:	951b      	str	r5, [sp, #108]	; 0x6c
 800409c:	930d      	str	r3, [sp, #52]	; 0x34
 800409e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 859a 	bne.w	8004bda <_strtod_l+0xbba>
 80040a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040a8:	b1e3      	cbz	r3, 80040e4 <_strtod_l+0xc4>
 80040aa:	4652      	mov	r2, sl
 80040ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80040b0:	ec43 2b10 	vmov	d0, r2, r3
 80040b4:	b021      	add	sp, #132	; 0x84
 80040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	2a2b      	cmp	r2, #43	; 0x2b
 80040bc:	d015      	beq.n	80040ea <_strtod_l+0xca>
 80040be:	2a2d      	cmp	r2, #45	; 0x2d
 80040c0:	d004      	beq.n	80040cc <_strtod_l+0xac>
 80040c2:	2a20      	cmp	r2, #32
 80040c4:	d1ca      	bne.n	800405c <_strtod_l+0x3c>
 80040c6:	3301      	adds	r3, #1
 80040c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80040ca:	e7bf      	b.n	800404c <_strtod_l+0x2c>
 80040cc:	2201      	movs	r2, #1
 80040ce:	920d      	str	r2, [sp, #52]	; 0x34
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1c2      	bne.n	8004060 <_strtod_l+0x40>
 80040da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8579 	bne.w	8004bd6 <_strtod_l+0xbb6>
 80040e4:	4652      	mov	r2, sl
 80040e6:	465b      	mov	r3, fp
 80040e8:	e7e2      	b.n	80040b0 <_strtod_l+0x90>
 80040ea:	2200      	movs	r2, #0
 80040ec:	e7ef      	b.n	80040ce <_strtod_l+0xae>
 80040ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040f0:	b13a      	cbz	r2, 8004102 <_strtod_l+0xe2>
 80040f2:	2135      	movs	r1, #53	; 0x35
 80040f4:	a81e      	add	r0, sp, #120	; 0x78
 80040f6:	f001 fd3f 	bl	8005b78 <__copybits>
 80040fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040fc:	4648      	mov	r0, r9
 80040fe:	f001 f9ac 	bl	800545a <_Bfree>
 8004102:	3c01      	subs	r4, #1
 8004104:	2c04      	cmp	r4, #4
 8004106:	d806      	bhi.n	8004116 <_strtod_l+0xf6>
 8004108:	e8df f004 	tbb	[pc, r4]
 800410c:	1714030a 	.word	0x1714030a
 8004110:	0a          	.byte	0x0a
 8004111:	00          	.byte	0x00
 8004112:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004116:	0730      	lsls	r0, r6, #28
 8004118:	d5c1      	bpl.n	800409e <_strtod_l+0x7e>
 800411a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800411e:	e7be      	b.n	800409e <_strtod_l+0x7e>
 8004120:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004124:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004126:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800412a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800412e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004132:	e7f0      	b.n	8004116 <_strtod_l+0xf6>
 8004134:	f8df b170 	ldr.w	fp, [pc, #368]	; 80042a8 <_strtod_l+0x288>
 8004138:	e7ed      	b.n	8004116 <_strtod_l+0xf6>
 800413a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800413e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004142:	e7e8      	b.n	8004116 <_strtod_l+0xf6>
 8004144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	921b      	str	r2, [sp, #108]	; 0x6c
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b30      	cmp	r3, #48	; 0x30
 800414e:	d0f9      	beq.n	8004144 <_strtod_l+0x124>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0a4      	beq.n	800409e <_strtod_l+0x7e>
 8004154:	2301      	movs	r3, #1
 8004156:	2500      	movs	r5, #0
 8004158:	9306      	str	r3, [sp, #24]
 800415a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800415c:	9308      	str	r3, [sp, #32]
 800415e:	9507      	str	r5, [sp, #28]
 8004160:	9505      	str	r5, [sp, #20]
 8004162:	220a      	movs	r2, #10
 8004164:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004166:	7807      	ldrb	r7, [r0, #0]
 8004168:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800416c:	b2d9      	uxtb	r1, r3
 800416e:	2909      	cmp	r1, #9
 8004170:	d929      	bls.n	80041c6 <_strtod_l+0x1a6>
 8004172:	4622      	mov	r2, r4
 8004174:	f8d8 1000 	ldr.w	r1, [r8]
 8004178:	f7ff ff24 	bl	8003fc4 <strncmp>
 800417c:	2800      	cmp	r0, #0
 800417e:	d031      	beq.n	80041e4 <_strtod_l+0x1c4>
 8004180:	2000      	movs	r0, #0
 8004182:	9c05      	ldr	r4, [sp, #20]
 8004184:	9004      	str	r0, [sp, #16]
 8004186:	463b      	mov	r3, r7
 8004188:	4602      	mov	r2, r0
 800418a:	2b65      	cmp	r3, #101	; 0x65
 800418c:	d001      	beq.n	8004192 <_strtod_l+0x172>
 800418e:	2b45      	cmp	r3, #69	; 0x45
 8004190:	d114      	bne.n	80041bc <_strtod_l+0x19c>
 8004192:	b924      	cbnz	r4, 800419e <_strtod_l+0x17e>
 8004194:	b910      	cbnz	r0, 800419c <_strtod_l+0x17c>
 8004196:	9b06      	ldr	r3, [sp, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d09e      	beq.n	80040da <_strtod_l+0xba>
 800419c:	2400      	movs	r4, #0
 800419e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80041a0:	1c73      	adds	r3, r6, #1
 80041a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80041a4:	7873      	ldrb	r3, [r6, #1]
 80041a6:	2b2b      	cmp	r3, #43	; 0x2b
 80041a8:	d078      	beq.n	800429c <_strtod_l+0x27c>
 80041aa:	2b2d      	cmp	r3, #45	; 0x2d
 80041ac:	d070      	beq.n	8004290 <_strtod_l+0x270>
 80041ae:	f04f 0c00 	mov.w	ip, #0
 80041b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80041b6:	2f09      	cmp	r7, #9
 80041b8:	d97c      	bls.n	80042b4 <_strtod_l+0x294>
 80041ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80041bc:	f04f 0e00 	mov.w	lr, #0
 80041c0:	e09a      	b.n	80042f8 <_strtod_l+0x2d8>
 80041c2:	2300      	movs	r3, #0
 80041c4:	e7c7      	b.n	8004156 <_strtod_l+0x136>
 80041c6:	9905      	ldr	r1, [sp, #20]
 80041c8:	2908      	cmp	r1, #8
 80041ca:	bfdd      	ittte	le
 80041cc:	9907      	ldrle	r1, [sp, #28]
 80041ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80041d2:	9307      	strle	r3, [sp, #28]
 80041d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80041d8:	9b05      	ldr	r3, [sp, #20]
 80041da:	3001      	adds	r0, #1
 80041dc:	3301      	adds	r3, #1
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80041e2:	e7bf      	b.n	8004164 <_strtod_l+0x144>
 80041e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041e6:	191a      	adds	r2, r3, r4
 80041e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80041ea:	9a05      	ldr	r2, [sp, #20]
 80041ec:	5d1b      	ldrb	r3, [r3, r4]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d037      	beq.n	8004262 <_strtod_l+0x242>
 80041f2:	9c05      	ldr	r4, [sp, #20]
 80041f4:	4602      	mov	r2, r0
 80041f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80041fa:	2909      	cmp	r1, #9
 80041fc:	d913      	bls.n	8004226 <_strtod_l+0x206>
 80041fe:	2101      	movs	r1, #1
 8004200:	9104      	str	r1, [sp, #16]
 8004202:	e7c2      	b.n	800418a <_strtod_l+0x16a>
 8004204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	921b      	str	r2, [sp, #108]	; 0x6c
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	3001      	adds	r0, #1
 800420e:	2b30      	cmp	r3, #48	; 0x30
 8004210:	d0f8      	beq.n	8004204 <_strtod_l+0x1e4>
 8004212:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004216:	2a08      	cmp	r2, #8
 8004218:	f200 84e4 	bhi.w	8004be4 <_strtod_l+0xbc4>
 800421c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800421e:	9208      	str	r2, [sp, #32]
 8004220:	4602      	mov	r2, r0
 8004222:	2000      	movs	r0, #0
 8004224:	4604      	mov	r4, r0
 8004226:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800422a:	f100 0101 	add.w	r1, r0, #1
 800422e:	d012      	beq.n	8004256 <_strtod_l+0x236>
 8004230:	440a      	add	r2, r1
 8004232:	eb00 0c04 	add.w	ip, r0, r4
 8004236:	4621      	mov	r1, r4
 8004238:	270a      	movs	r7, #10
 800423a:	458c      	cmp	ip, r1
 800423c:	d113      	bne.n	8004266 <_strtod_l+0x246>
 800423e:	1821      	adds	r1, r4, r0
 8004240:	2908      	cmp	r1, #8
 8004242:	f104 0401 	add.w	r4, r4, #1
 8004246:	4404      	add	r4, r0
 8004248:	dc19      	bgt.n	800427e <_strtod_l+0x25e>
 800424a:	9b07      	ldr	r3, [sp, #28]
 800424c:	210a      	movs	r1, #10
 800424e:	fb01 e303 	mla	r3, r1, r3, lr
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	2100      	movs	r1, #0
 8004256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004258:	1c58      	adds	r0, r3, #1
 800425a:	901b      	str	r0, [sp, #108]	; 0x6c
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	4608      	mov	r0, r1
 8004260:	e7c9      	b.n	80041f6 <_strtod_l+0x1d6>
 8004262:	9805      	ldr	r0, [sp, #20]
 8004264:	e7d3      	b.n	800420e <_strtod_l+0x1ee>
 8004266:	2908      	cmp	r1, #8
 8004268:	f101 0101 	add.w	r1, r1, #1
 800426c:	dc03      	bgt.n	8004276 <_strtod_l+0x256>
 800426e:	9b07      	ldr	r3, [sp, #28]
 8004270:	437b      	muls	r3, r7
 8004272:	9307      	str	r3, [sp, #28]
 8004274:	e7e1      	b.n	800423a <_strtod_l+0x21a>
 8004276:	2910      	cmp	r1, #16
 8004278:	bfd8      	it	le
 800427a:	437d      	mulle	r5, r7
 800427c:	e7dd      	b.n	800423a <_strtod_l+0x21a>
 800427e:	2c10      	cmp	r4, #16
 8004280:	bfdc      	itt	le
 8004282:	210a      	movle	r1, #10
 8004284:	fb01 e505 	mlale	r5, r1, r5, lr
 8004288:	e7e4      	b.n	8004254 <_strtod_l+0x234>
 800428a:	2301      	movs	r3, #1
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	e781      	b.n	8004194 <_strtod_l+0x174>
 8004290:	f04f 0c01 	mov.w	ip, #1
 8004294:	1cb3      	adds	r3, r6, #2
 8004296:	931b      	str	r3, [sp, #108]	; 0x6c
 8004298:	78b3      	ldrb	r3, [r6, #2]
 800429a:	e78a      	b.n	80041b2 <_strtod_l+0x192>
 800429c:	f04f 0c00 	mov.w	ip, #0
 80042a0:	e7f8      	b.n	8004294 <_strtod_l+0x274>
 80042a2:	bf00      	nop
 80042a4:	08006d04 	.word	0x08006d04
 80042a8:	7ff00000 	.word	0x7ff00000
 80042ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042ae:	1c5f      	adds	r7, r3, #1
 80042b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d0f9      	beq.n	80042ac <_strtod_l+0x28c>
 80042b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80042bc:	2f08      	cmp	r7, #8
 80042be:	f63f af7d 	bhi.w	80041bc <_strtod_l+0x19c>
 80042c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80042c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042c8:	930a      	str	r3, [sp, #40]	; 0x28
 80042ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042cc:	1c5f      	adds	r7, r3, #1
 80042ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80042d6:	f1b8 0f09 	cmp.w	r8, #9
 80042da:	d937      	bls.n	800434c <_strtod_l+0x32c>
 80042dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042de:	1a7f      	subs	r7, r7, r1
 80042e0:	2f08      	cmp	r7, #8
 80042e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80042e6:	dc37      	bgt.n	8004358 <_strtod_l+0x338>
 80042e8:	45be      	cmp	lr, r7
 80042ea:	bfa8      	it	ge
 80042ec:	46be      	movge	lr, r7
 80042ee:	f1bc 0f00 	cmp.w	ip, #0
 80042f2:	d001      	beq.n	80042f8 <_strtod_l+0x2d8>
 80042f4:	f1ce 0e00 	rsb	lr, lr, #0
 80042f8:	2c00      	cmp	r4, #0
 80042fa:	d151      	bne.n	80043a0 <_strtod_l+0x380>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f47f aece 	bne.w	800409e <_strtod_l+0x7e>
 8004302:	9a06      	ldr	r2, [sp, #24]
 8004304:	2a00      	cmp	r2, #0
 8004306:	f47f aeca 	bne.w	800409e <_strtod_l+0x7e>
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	2a00      	cmp	r2, #0
 800430e:	f47f aee4 	bne.w	80040da <_strtod_l+0xba>
 8004312:	2b4e      	cmp	r3, #78	; 0x4e
 8004314:	d027      	beq.n	8004366 <_strtod_l+0x346>
 8004316:	dc21      	bgt.n	800435c <_strtod_l+0x33c>
 8004318:	2b49      	cmp	r3, #73	; 0x49
 800431a:	f47f aede 	bne.w	80040da <_strtod_l+0xba>
 800431e:	49a0      	ldr	r1, [pc, #640]	; (80045a0 <_strtod_l+0x580>)
 8004320:	a81b      	add	r0, sp, #108	; 0x6c
 8004322:	f000 ff91 	bl	8005248 <__match>
 8004326:	2800      	cmp	r0, #0
 8004328:	f43f aed7 	beq.w	80040da <_strtod_l+0xba>
 800432c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800432e:	499d      	ldr	r1, [pc, #628]	; (80045a4 <_strtod_l+0x584>)
 8004330:	3b01      	subs	r3, #1
 8004332:	a81b      	add	r0, sp, #108	; 0x6c
 8004334:	931b      	str	r3, [sp, #108]	; 0x6c
 8004336:	f000 ff87 	bl	8005248 <__match>
 800433a:	b910      	cbnz	r0, 8004342 <_strtod_l+0x322>
 800433c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800433e:	3301      	adds	r3, #1
 8004340:	931b      	str	r3, [sp, #108]	; 0x6c
 8004342:	f8df b274 	ldr.w	fp, [pc, #628]	; 80045b8 <_strtod_l+0x598>
 8004346:	f04f 0a00 	mov.w	sl, #0
 800434a:	e6a8      	b.n	800409e <_strtod_l+0x7e>
 800434c:	210a      	movs	r1, #10
 800434e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004352:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004356:	e7b8      	b.n	80042ca <_strtod_l+0x2aa>
 8004358:	46be      	mov	lr, r7
 800435a:	e7c8      	b.n	80042ee <_strtod_l+0x2ce>
 800435c:	2b69      	cmp	r3, #105	; 0x69
 800435e:	d0de      	beq.n	800431e <_strtod_l+0x2fe>
 8004360:	2b6e      	cmp	r3, #110	; 0x6e
 8004362:	f47f aeba 	bne.w	80040da <_strtod_l+0xba>
 8004366:	4990      	ldr	r1, [pc, #576]	; (80045a8 <_strtod_l+0x588>)
 8004368:	a81b      	add	r0, sp, #108	; 0x6c
 800436a:	f000 ff6d 	bl	8005248 <__match>
 800436e:	2800      	cmp	r0, #0
 8004370:	f43f aeb3 	beq.w	80040da <_strtod_l+0xba>
 8004374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b28      	cmp	r3, #40	; 0x28
 800437a:	d10e      	bne.n	800439a <_strtod_l+0x37a>
 800437c:	aa1e      	add	r2, sp, #120	; 0x78
 800437e:	498b      	ldr	r1, [pc, #556]	; (80045ac <_strtod_l+0x58c>)
 8004380:	a81b      	add	r0, sp, #108	; 0x6c
 8004382:	f000 ff75 	bl	8005270 <__hexnan>
 8004386:	2805      	cmp	r0, #5
 8004388:	d107      	bne.n	800439a <_strtod_l+0x37a>
 800438a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800438c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004390:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004394:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004398:	e681      	b.n	800409e <_strtod_l+0x7e>
 800439a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80045c0 <_strtod_l+0x5a0>
 800439e:	e7d2      	b.n	8004346 <_strtod_l+0x326>
 80043a0:	ebae 0302 	sub.w	r3, lr, r2
 80043a4:	9306      	str	r3, [sp, #24]
 80043a6:	9b05      	ldr	r3, [sp, #20]
 80043a8:	9807      	ldr	r0, [sp, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf08      	it	eq
 80043ae:	4623      	moveq	r3, r4
 80043b0:	2c10      	cmp	r4, #16
 80043b2:	9305      	str	r3, [sp, #20]
 80043b4:	46a0      	mov	r8, r4
 80043b6:	bfa8      	it	ge
 80043b8:	f04f 0810 	movge.w	r8, #16
 80043bc:	f7fc f8aa 	bl	8000514 <__aeabi_ui2d>
 80043c0:	2c09      	cmp	r4, #9
 80043c2:	4682      	mov	sl, r0
 80043c4:	468b      	mov	fp, r1
 80043c6:	dc13      	bgt.n	80043f0 <_strtod_l+0x3d0>
 80043c8:	9b06      	ldr	r3, [sp, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f43f ae67 	beq.w	800409e <_strtod_l+0x7e>
 80043d0:	9b06      	ldr	r3, [sp, #24]
 80043d2:	dd7a      	ble.n	80044ca <_strtod_l+0x4aa>
 80043d4:	2b16      	cmp	r3, #22
 80043d6:	dc61      	bgt.n	800449c <_strtod_l+0x47c>
 80043d8:	4a75      	ldr	r2, [pc, #468]	; (80045b0 <_strtod_l+0x590>)
 80043da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80043de:	e9de 0100 	ldrd	r0, r1, [lr]
 80043e2:	4652      	mov	r2, sl
 80043e4:	465b      	mov	r3, fp
 80043e6:	f7fc f90f 	bl	8000608 <__aeabi_dmul>
 80043ea:	4682      	mov	sl, r0
 80043ec:	468b      	mov	fp, r1
 80043ee:	e656      	b.n	800409e <_strtod_l+0x7e>
 80043f0:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <_strtod_l+0x590>)
 80043f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80043f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043fa:	f7fc f905 	bl	8000608 <__aeabi_dmul>
 80043fe:	4606      	mov	r6, r0
 8004400:	4628      	mov	r0, r5
 8004402:	460f      	mov	r7, r1
 8004404:	f7fc f886 	bl	8000514 <__aeabi_ui2d>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4630      	mov	r0, r6
 800440e:	4639      	mov	r1, r7
 8004410:	f7fb ff44 	bl	800029c <__adddf3>
 8004414:	2c0f      	cmp	r4, #15
 8004416:	4682      	mov	sl, r0
 8004418:	468b      	mov	fp, r1
 800441a:	ddd5      	ble.n	80043c8 <_strtod_l+0x3a8>
 800441c:	9b06      	ldr	r3, [sp, #24]
 800441e:	eba4 0808 	sub.w	r8, r4, r8
 8004422:	4498      	add	r8, r3
 8004424:	f1b8 0f00 	cmp.w	r8, #0
 8004428:	f340 8096 	ble.w	8004558 <_strtod_l+0x538>
 800442c:	f018 030f 	ands.w	r3, r8, #15
 8004430:	d00a      	beq.n	8004448 <_strtod_l+0x428>
 8004432:	495f      	ldr	r1, [pc, #380]	; (80045b0 <_strtod_l+0x590>)
 8004434:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004438:	4652      	mov	r2, sl
 800443a:	465b      	mov	r3, fp
 800443c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004440:	f7fc f8e2 	bl	8000608 <__aeabi_dmul>
 8004444:	4682      	mov	sl, r0
 8004446:	468b      	mov	fp, r1
 8004448:	f038 080f 	bics.w	r8, r8, #15
 800444c:	d073      	beq.n	8004536 <_strtod_l+0x516>
 800444e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004452:	dd47      	ble.n	80044e4 <_strtod_l+0x4c4>
 8004454:	2400      	movs	r4, #0
 8004456:	46a0      	mov	r8, r4
 8004458:	9407      	str	r4, [sp, #28]
 800445a:	9405      	str	r4, [sp, #20]
 800445c:	2322      	movs	r3, #34	; 0x22
 800445e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80045b8 <_strtod_l+0x598>
 8004462:	f8c9 3000 	str.w	r3, [r9]
 8004466:	f04f 0a00 	mov.w	sl, #0
 800446a:	9b07      	ldr	r3, [sp, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f43f ae16 	beq.w	800409e <_strtod_l+0x7e>
 8004472:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004474:	4648      	mov	r0, r9
 8004476:	f000 fff0 	bl	800545a <_Bfree>
 800447a:	9905      	ldr	r1, [sp, #20]
 800447c:	4648      	mov	r0, r9
 800447e:	f000 ffec 	bl	800545a <_Bfree>
 8004482:	4641      	mov	r1, r8
 8004484:	4648      	mov	r0, r9
 8004486:	f000 ffe8 	bl	800545a <_Bfree>
 800448a:	9907      	ldr	r1, [sp, #28]
 800448c:	4648      	mov	r0, r9
 800448e:	f000 ffe4 	bl	800545a <_Bfree>
 8004492:	4621      	mov	r1, r4
 8004494:	4648      	mov	r0, r9
 8004496:	f000 ffe0 	bl	800545a <_Bfree>
 800449a:	e600      	b.n	800409e <_strtod_l+0x7e>
 800449c:	9a06      	ldr	r2, [sp, #24]
 800449e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80044a2:	4293      	cmp	r3, r2
 80044a4:	dbba      	blt.n	800441c <_strtod_l+0x3fc>
 80044a6:	4d42      	ldr	r5, [pc, #264]	; (80045b0 <_strtod_l+0x590>)
 80044a8:	f1c4 040f 	rsb	r4, r4, #15
 80044ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80044b0:	4652      	mov	r2, sl
 80044b2:	465b      	mov	r3, fp
 80044b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044b8:	f7fc f8a6 	bl	8000608 <__aeabi_dmul>
 80044bc:	9b06      	ldr	r3, [sp, #24]
 80044be:	1b1c      	subs	r4, r3, r4
 80044c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80044c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044c8:	e78d      	b.n	80043e6 <_strtod_l+0x3c6>
 80044ca:	f113 0f16 	cmn.w	r3, #22
 80044ce:	dba5      	blt.n	800441c <_strtod_l+0x3fc>
 80044d0:	4a37      	ldr	r2, [pc, #220]	; (80045b0 <_strtod_l+0x590>)
 80044d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80044d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80044da:	4650      	mov	r0, sl
 80044dc:	4659      	mov	r1, fp
 80044de:	f7fc f9bd 	bl	800085c <__aeabi_ddiv>
 80044e2:	e782      	b.n	80043ea <_strtod_l+0x3ca>
 80044e4:	2300      	movs	r3, #0
 80044e6:	4e33      	ldr	r6, [pc, #204]	; (80045b4 <_strtod_l+0x594>)
 80044e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80044ec:	4650      	mov	r0, sl
 80044ee:	4659      	mov	r1, fp
 80044f0:	461d      	mov	r5, r3
 80044f2:	f1b8 0f01 	cmp.w	r8, #1
 80044f6:	dc21      	bgt.n	800453c <_strtod_l+0x51c>
 80044f8:	b10b      	cbz	r3, 80044fe <_strtod_l+0x4de>
 80044fa:	4682      	mov	sl, r0
 80044fc:	468b      	mov	fp, r1
 80044fe:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <_strtod_l+0x594>)
 8004500:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004508:	4652      	mov	r2, sl
 800450a:	465b      	mov	r3, fp
 800450c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004510:	f7fc f87a 	bl	8000608 <__aeabi_dmul>
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <_strtod_l+0x598>)
 8004516:	460a      	mov	r2, r1
 8004518:	400b      	ands	r3, r1
 800451a:	4928      	ldr	r1, [pc, #160]	; (80045bc <_strtod_l+0x59c>)
 800451c:	428b      	cmp	r3, r1
 800451e:	4682      	mov	sl, r0
 8004520:	d898      	bhi.n	8004454 <_strtod_l+0x434>
 8004522:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004526:	428b      	cmp	r3, r1
 8004528:	bf86      	itte	hi
 800452a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80045c4 <_strtod_l+0x5a4>
 800452e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004532:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004536:	2300      	movs	r3, #0
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	e077      	b.n	800462c <_strtod_l+0x60c>
 800453c:	f018 0f01 	tst.w	r8, #1
 8004540:	d006      	beq.n	8004550 <_strtod_l+0x530>
 8004542:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fc f85d 	bl	8000608 <__aeabi_dmul>
 800454e:	2301      	movs	r3, #1
 8004550:	3501      	adds	r5, #1
 8004552:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004556:	e7cc      	b.n	80044f2 <_strtod_l+0x4d2>
 8004558:	d0ed      	beq.n	8004536 <_strtod_l+0x516>
 800455a:	f1c8 0800 	rsb	r8, r8, #0
 800455e:	f018 020f 	ands.w	r2, r8, #15
 8004562:	d00a      	beq.n	800457a <_strtod_l+0x55a>
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <_strtod_l+0x590>)
 8004566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800456a:	4650      	mov	r0, sl
 800456c:	4659      	mov	r1, fp
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f7fc f973 	bl	800085c <__aeabi_ddiv>
 8004576:	4682      	mov	sl, r0
 8004578:	468b      	mov	fp, r1
 800457a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800457e:	d0da      	beq.n	8004536 <_strtod_l+0x516>
 8004580:	f1b8 0f1f 	cmp.w	r8, #31
 8004584:	dd20      	ble.n	80045c8 <_strtod_l+0x5a8>
 8004586:	2400      	movs	r4, #0
 8004588:	46a0      	mov	r8, r4
 800458a:	9407      	str	r4, [sp, #28]
 800458c:	9405      	str	r4, [sp, #20]
 800458e:	2322      	movs	r3, #34	; 0x22
 8004590:	f04f 0a00 	mov.w	sl, #0
 8004594:	f04f 0b00 	mov.w	fp, #0
 8004598:	f8c9 3000 	str.w	r3, [r9]
 800459c:	e765      	b.n	800446a <_strtod_l+0x44a>
 800459e:	bf00      	nop
 80045a0:	08006cf5 	.word	0x08006cf5
 80045a4:	08006cf8 	.word	0x08006cf8
 80045a8:	08006cfe 	.word	0x08006cfe
 80045ac:	08006d18 	.word	0x08006d18
 80045b0:	08006d90 	.word	0x08006d90
 80045b4:	08006d68 	.word	0x08006d68
 80045b8:	7ff00000 	.word	0x7ff00000
 80045bc:	7ca00000 	.word	0x7ca00000
 80045c0:	fff80000 	.word	0xfff80000
 80045c4:	7fefffff 	.word	0x7fefffff
 80045c8:	f018 0310 	ands.w	r3, r8, #16
 80045cc:	bf18      	it	ne
 80045ce:	236a      	movne	r3, #106	; 0x6a
 80045d0:	4da0      	ldr	r5, [pc, #640]	; (8004854 <_strtod_l+0x834>)
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	4650      	mov	r0, sl
 80045d6:	4659      	mov	r1, fp
 80045d8:	2300      	movs	r3, #0
 80045da:	f1b8 0f00 	cmp.w	r8, #0
 80045de:	f300 810a 	bgt.w	80047f6 <_strtod_l+0x7d6>
 80045e2:	b10b      	cbz	r3, 80045e8 <_strtod_l+0x5c8>
 80045e4:	4682      	mov	sl, r0
 80045e6:	468b      	mov	fp, r1
 80045e8:	9b04      	ldr	r3, [sp, #16]
 80045ea:	b1bb      	cbz	r3, 800461c <_strtod_l+0x5fc>
 80045ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80045f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	4659      	mov	r1, fp
 80045f8:	dd10      	ble.n	800461c <_strtod_l+0x5fc>
 80045fa:	2b1f      	cmp	r3, #31
 80045fc:	f340 8107 	ble.w	800480e <_strtod_l+0x7ee>
 8004600:	2b34      	cmp	r3, #52	; 0x34
 8004602:	bfde      	ittt	le
 8004604:	3b20      	suble	r3, #32
 8004606:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800460a:	fa02 f303 	lslle.w	r3, r2, r3
 800460e:	f04f 0a00 	mov.w	sl, #0
 8004612:	bfcc      	ite	gt
 8004614:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004618:	ea03 0b01 	andle.w	fp, r3, r1
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	4650      	mov	r0, sl
 8004622:	4659      	mov	r1, fp
 8004624:	f7fc fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004628:	2800      	cmp	r0, #0
 800462a:	d1ac      	bne.n	8004586 <_strtod_l+0x566>
 800462c:	9b07      	ldr	r3, [sp, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	9a05      	ldr	r2, [sp, #20]
 8004632:	9908      	ldr	r1, [sp, #32]
 8004634:	4623      	mov	r3, r4
 8004636:	4648      	mov	r0, r9
 8004638:	f000 ff61 	bl	80054fe <__s2b>
 800463c:	9007      	str	r0, [sp, #28]
 800463e:	2800      	cmp	r0, #0
 8004640:	f43f af08 	beq.w	8004454 <_strtod_l+0x434>
 8004644:	9a06      	ldr	r2, [sp, #24]
 8004646:	9b06      	ldr	r3, [sp, #24]
 8004648:	2a00      	cmp	r2, #0
 800464a:	f1c3 0300 	rsb	r3, r3, #0
 800464e:	bfa8      	it	ge
 8004650:	2300      	movge	r3, #0
 8004652:	930e      	str	r3, [sp, #56]	; 0x38
 8004654:	2400      	movs	r4, #0
 8004656:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800465a:	9316      	str	r3, [sp, #88]	; 0x58
 800465c:	46a0      	mov	r8, r4
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	4648      	mov	r0, r9
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	f000 fec5 	bl	80053f2 <_Balloc>
 8004668:	9005      	str	r0, [sp, #20]
 800466a:	2800      	cmp	r0, #0
 800466c:	f43f aef6 	beq.w	800445c <_strtod_l+0x43c>
 8004670:	9b07      	ldr	r3, [sp, #28]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	3202      	adds	r2, #2
 8004676:	f103 010c 	add.w	r1, r3, #12
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	300c      	adds	r0, #12
 800467e:	f000 fead 	bl	80053dc <memcpy>
 8004682:	aa1e      	add	r2, sp, #120	; 0x78
 8004684:	a91d      	add	r1, sp, #116	; 0x74
 8004686:	ec4b ab10 	vmov	d0, sl, fp
 800468a:	4648      	mov	r0, r9
 800468c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004690:	f001 f9f0 	bl	8005a74 <__d2b>
 8004694:	901c      	str	r0, [sp, #112]	; 0x70
 8004696:	2800      	cmp	r0, #0
 8004698:	f43f aee0 	beq.w	800445c <_strtod_l+0x43c>
 800469c:	2101      	movs	r1, #1
 800469e:	4648      	mov	r0, r9
 80046a0:	f000 ffb9 	bl	8005616 <__i2b>
 80046a4:	4680      	mov	r8, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f43f aed8 	beq.w	800445c <_strtod_l+0x43c>
 80046ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80046ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	bfab      	itete	ge
 80046b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80046b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80046b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80046ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80046bc:	bfac      	ite	ge
 80046be:	18f7      	addge	r7, r6, r3
 80046c0:	1b9d      	sublt	r5, r3, r6
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	1af6      	subs	r6, r6, r3
 80046c6:	4416      	add	r6, r2
 80046c8:	4b63      	ldr	r3, [pc, #396]	; (8004858 <_strtod_l+0x838>)
 80046ca:	3e01      	subs	r6, #1
 80046cc:	429e      	cmp	r6, r3
 80046ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80046d2:	f280 80af 	bge.w	8004834 <_strtod_l+0x814>
 80046d6:	1b9b      	subs	r3, r3, r6
 80046d8:	2b1f      	cmp	r3, #31
 80046da:	eba2 0203 	sub.w	r2, r2, r3
 80046de:	f04f 0101 	mov.w	r1, #1
 80046e2:	f300 809b 	bgt.w	800481c <_strtod_l+0x7fc>
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80046ec:	2300      	movs	r3, #0
 80046ee:	930a      	str	r3, [sp, #40]	; 0x28
 80046f0:	18be      	adds	r6, r7, r2
 80046f2:	9b04      	ldr	r3, [sp, #16]
 80046f4:	42b7      	cmp	r7, r6
 80046f6:	4415      	add	r5, r2
 80046f8:	441d      	add	r5, r3
 80046fa:	463b      	mov	r3, r7
 80046fc:	bfa8      	it	ge
 80046fe:	4633      	movge	r3, r6
 8004700:	42ab      	cmp	r3, r5
 8004702:	bfa8      	it	ge
 8004704:	462b      	movge	r3, r5
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfc2      	ittt	gt
 800470a:	1af6      	subgt	r6, r6, r3
 800470c:	1aed      	subgt	r5, r5, r3
 800470e:	1aff      	subgt	r7, r7, r3
 8004710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004712:	b1bb      	cbz	r3, 8004744 <_strtod_l+0x724>
 8004714:	4641      	mov	r1, r8
 8004716:	461a      	mov	r2, r3
 8004718:	4648      	mov	r0, r9
 800471a:	f001 f81b 	bl	8005754 <__pow5mult>
 800471e:	4680      	mov	r8, r0
 8004720:	2800      	cmp	r0, #0
 8004722:	f43f ae9b 	beq.w	800445c <_strtod_l+0x43c>
 8004726:	4601      	mov	r1, r0
 8004728:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800472a:	4648      	mov	r0, r9
 800472c:	f000 ff7c 	bl	8005628 <__multiply>
 8004730:	900c      	str	r0, [sp, #48]	; 0x30
 8004732:	2800      	cmp	r0, #0
 8004734:	f43f ae92 	beq.w	800445c <_strtod_l+0x43c>
 8004738:	991c      	ldr	r1, [sp, #112]	; 0x70
 800473a:	4648      	mov	r0, r9
 800473c:	f000 fe8d 	bl	800545a <_Bfree>
 8004740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004742:	931c      	str	r3, [sp, #112]	; 0x70
 8004744:	2e00      	cmp	r6, #0
 8004746:	dc7a      	bgt.n	800483e <_strtod_l+0x81e>
 8004748:	9b06      	ldr	r3, [sp, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	dd08      	ble.n	8004760 <_strtod_l+0x740>
 800474e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004750:	9905      	ldr	r1, [sp, #20]
 8004752:	4648      	mov	r0, r9
 8004754:	f000 fffe 	bl	8005754 <__pow5mult>
 8004758:	9005      	str	r0, [sp, #20]
 800475a:	2800      	cmp	r0, #0
 800475c:	f43f ae7e 	beq.w	800445c <_strtod_l+0x43c>
 8004760:	2d00      	cmp	r5, #0
 8004762:	dd08      	ble.n	8004776 <_strtod_l+0x756>
 8004764:	462a      	mov	r2, r5
 8004766:	9905      	ldr	r1, [sp, #20]
 8004768:	4648      	mov	r0, r9
 800476a:	f001 f841 	bl	80057f0 <__lshift>
 800476e:	9005      	str	r0, [sp, #20]
 8004770:	2800      	cmp	r0, #0
 8004772:	f43f ae73 	beq.w	800445c <_strtod_l+0x43c>
 8004776:	2f00      	cmp	r7, #0
 8004778:	dd08      	ble.n	800478c <_strtod_l+0x76c>
 800477a:	4641      	mov	r1, r8
 800477c:	463a      	mov	r2, r7
 800477e:	4648      	mov	r0, r9
 8004780:	f001 f836 	bl	80057f0 <__lshift>
 8004784:	4680      	mov	r8, r0
 8004786:	2800      	cmp	r0, #0
 8004788:	f43f ae68 	beq.w	800445c <_strtod_l+0x43c>
 800478c:	9a05      	ldr	r2, [sp, #20]
 800478e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004790:	4648      	mov	r0, r9
 8004792:	f001 f89b 	bl	80058cc <__mdiff>
 8004796:	4604      	mov	r4, r0
 8004798:	2800      	cmp	r0, #0
 800479a:	f43f ae5f 	beq.w	800445c <_strtod_l+0x43c>
 800479e:	68c3      	ldr	r3, [r0, #12]
 80047a0:	930c      	str	r3, [sp, #48]	; 0x30
 80047a2:	2300      	movs	r3, #0
 80047a4:	60c3      	str	r3, [r0, #12]
 80047a6:	4641      	mov	r1, r8
 80047a8:	f001 f876 	bl	8005898 <__mcmp>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	da55      	bge.n	800485c <_strtod_l+0x83c>
 80047b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047b2:	b9e3      	cbnz	r3, 80047ee <_strtod_l+0x7ce>
 80047b4:	f1ba 0f00 	cmp.w	sl, #0
 80047b8:	d119      	bne.n	80047ee <_strtod_l+0x7ce>
 80047ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047be:	b9b3      	cbnz	r3, 80047ee <_strtod_l+0x7ce>
 80047c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	051b      	lsls	r3, r3, #20
 80047c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047cc:	d90f      	bls.n	80047ee <_strtod_l+0x7ce>
 80047ce:	6963      	ldr	r3, [r4, #20]
 80047d0:	b913      	cbnz	r3, 80047d8 <_strtod_l+0x7b8>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	dd0a      	ble.n	80047ee <_strtod_l+0x7ce>
 80047d8:	4621      	mov	r1, r4
 80047da:	2201      	movs	r2, #1
 80047dc:	4648      	mov	r0, r9
 80047de:	f001 f807 	bl	80057f0 <__lshift>
 80047e2:	4641      	mov	r1, r8
 80047e4:	4604      	mov	r4, r0
 80047e6:	f001 f857 	bl	8005898 <__mcmp>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	dc67      	bgt.n	80048be <_strtod_l+0x89e>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d171      	bne.n	80048d8 <_strtod_l+0x8b8>
 80047f4:	e63d      	b.n	8004472 <_strtod_l+0x452>
 80047f6:	f018 0f01 	tst.w	r8, #1
 80047fa:	d004      	beq.n	8004806 <_strtod_l+0x7e6>
 80047fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004800:	f7fb ff02 	bl	8000608 <__aeabi_dmul>
 8004804:	2301      	movs	r3, #1
 8004806:	ea4f 0868 	mov.w	r8, r8, asr #1
 800480a:	3508      	adds	r5, #8
 800480c:	e6e5      	b.n	80045da <_strtod_l+0x5ba>
 800480e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	ea03 0a0a 	and.w	sl, r3, sl
 800481a:	e6ff      	b.n	800461c <_strtod_l+0x5fc>
 800481c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004820:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004824:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004828:	36e2      	adds	r6, #226	; 0xe2
 800482a:	fa01 f306 	lsl.w	r3, r1, r6
 800482e:	930a      	str	r3, [sp, #40]	; 0x28
 8004830:	910f      	str	r1, [sp, #60]	; 0x3c
 8004832:	e75d      	b.n	80046f0 <_strtod_l+0x6d0>
 8004834:	2300      	movs	r3, #0
 8004836:	930a      	str	r3, [sp, #40]	; 0x28
 8004838:	2301      	movs	r3, #1
 800483a:	930f      	str	r3, [sp, #60]	; 0x3c
 800483c:	e758      	b.n	80046f0 <_strtod_l+0x6d0>
 800483e:	4632      	mov	r2, r6
 8004840:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004842:	4648      	mov	r0, r9
 8004844:	f000 ffd4 	bl	80057f0 <__lshift>
 8004848:	901c      	str	r0, [sp, #112]	; 0x70
 800484a:	2800      	cmp	r0, #0
 800484c:	f47f af7c 	bne.w	8004748 <_strtod_l+0x728>
 8004850:	e604      	b.n	800445c <_strtod_l+0x43c>
 8004852:	bf00      	nop
 8004854:	08006d30 	.word	0x08006d30
 8004858:	fffffc02 	.word	0xfffffc02
 800485c:	465d      	mov	r5, fp
 800485e:	f040 8086 	bne.w	800496e <_strtod_l+0x94e>
 8004862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004868:	b32a      	cbz	r2, 80048b6 <_strtod_l+0x896>
 800486a:	4aaf      	ldr	r2, [pc, #700]	; (8004b28 <_strtod_l+0xb08>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d153      	bne.n	8004918 <_strtod_l+0x8f8>
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	4650      	mov	r0, sl
 8004874:	b1d3      	cbz	r3, 80048ac <_strtod_l+0x88c>
 8004876:	4aad      	ldr	r2, [pc, #692]	; (8004b2c <_strtod_l+0xb0c>)
 8004878:	402a      	ands	r2, r5
 800487a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800487e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004882:	d816      	bhi.n	80048b2 <_strtod_l+0x892>
 8004884:	0d12      	lsrs	r2, r2, #20
 8004886:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	4298      	cmp	r0, r3
 8004890:	d142      	bne.n	8004918 <_strtod_l+0x8f8>
 8004892:	4ba7      	ldr	r3, [pc, #668]	; (8004b30 <_strtod_l+0xb10>)
 8004894:	429d      	cmp	r5, r3
 8004896:	d102      	bne.n	800489e <_strtod_l+0x87e>
 8004898:	3001      	adds	r0, #1
 800489a:	f43f addf 	beq.w	800445c <_strtod_l+0x43c>
 800489e:	4ba3      	ldr	r3, [pc, #652]	; (8004b2c <_strtod_l+0xb0c>)
 80048a0:	402b      	ands	r3, r5
 80048a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80048a6:	f04f 0a00 	mov.w	sl, #0
 80048aa:	e7a0      	b.n	80047ee <_strtod_l+0x7ce>
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b0:	e7ed      	b.n	800488e <_strtod_l+0x86e>
 80048b2:	460b      	mov	r3, r1
 80048b4:	e7eb      	b.n	800488e <_strtod_l+0x86e>
 80048b6:	bb7b      	cbnz	r3, 8004918 <_strtod_l+0x8f8>
 80048b8:	f1ba 0f00 	cmp.w	sl, #0
 80048bc:	d12c      	bne.n	8004918 <_strtod_l+0x8f8>
 80048be:	9904      	ldr	r1, [sp, #16]
 80048c0:	4a9a      	ldr	r2, [pc, #616]	; (8004b2c <_strtod_l+0xb0c>)
 80048c2:	465b      	mov	r3, fp
 80048c4:	b1f1      	cbz	r1, 8004904 <_strtod_l+0x8e4>
 80048c6:	ea02 010b 	and.w	r1, r2, fp
 80048ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80048ce:	dc19      	bgt.n	8004904 <_strtod_l+0x8e4>
 80048d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80048d4:	f77f ae5b 	ble.w	800458e <_strtod_l+0x56e>
 80048d8:	4a96      	ldr	r2, [pc, #600]	; (8004b34 <_strtod_l+0xb14>)
 80048da:	2300      	movs	r3, #0
 80048dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80048e0:	4650      	mov	r0, sl
 80048e2:	4659      	mov	r1, fp
 80048e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80048e8:	f7fb fe8e 	bl	8000608 <__aeabi_dmul>
 80048ec:	4682      	mov	sl, r0
 80048ee:	468b      	mov	fp, r1
 80048f0:	2900      	cmp	r1, #0
 80048f2:	f47f adbe 	bne.w	8004472 <_strtod_l+0x452>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f47f adbb 	bne.w	8004472 <_strtod_l+0x452>
 80048fc:	2322      	movs	r3, #34	; 0x22
 80048fe:	f8c9 3000 	str.w	r3, [r9]
 8004902:	e5b6      	b.n	8004472 <_strtod_l+0x452>
 8004904:	4013      	ands	r3, r2
 8004906:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800490a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800490e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004912:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004916:	e76a      	b.n	80047ee <_strtod_l+0x7ce>
 8004918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491a:	b193      	cbz	r3, 8004942 <_strtod_l+0x922>
 800491c:	422b      	tst	r3, r5
 800491e:	f43f af66 	beq.w	80047ee <_strtod_l+0x7ce>
 8004922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004924:	9a04      	ldr	r2, [sp, #16]
 8004926:	4650      	mov	r0, sl
 8004928:	4659      	mov	r1, fp
 800492a:	b173      	cbz	r3, 800494a <_strtod_l+0x92a>
 800492c:	f7ff fb5c 	bl	8003fe8 <sulp>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004938:	f7fb fcb0 	bl	800029c <__adddf3>
 800493c:	4682      	mov	sl, r0
 800493e:	468b      	mov	fp, r1
 8004940:	e755      	b.n	80047ee <_strtod_l+0x7ce>
 8004942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004944:	ea13 0f0a 	tst.w	r3, sl
 8004948:	e7e9      	b.n	800491e <_strtod_l+0x8fe>
 800494a:	f7ff fb4d 	bl	8003fe8 <sulp>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004956:	f7fb fc9f 	bl	8000298 <__aeabi_dsub>
 800495a:	2200      	movs	r2, #0
 800495c:	2300      	movs	r3, #0
 800495e:	4682      	mov	sl, r0
 8004960:	468b      	mov	fp, r1
 8004962:	f7fc f8b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004966:	2800      	cmp	r0, #0
 8004968:	f47f ae11 	bne.w	800458e <_strtod_l+0x56e>
 800496c:	e73f      	b.n	80047ee <_strtod_l+0x7ce>
 800496e:	4641      	mov	r1, r8
 8004970:	4620      	mov	r0, r4
 8004972:	f001 f8ce 	bl	8005b12 <__ratio>
 8004976:	ec57 6b10 	vmov	r6, r7, d0
 800497a:	2200      	movs	r2, #0
 800497c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004980:	ee10 0a10 	vmov	r0, s0
 8004984:	4639      	mov	r1, r7
 8004986:	f7fc f8bb 	bl	8000b00 <__aeabi_dcmple>
 800498a:	2800      	cmp	r0, #0
 800498c:	d077      	beq.n	8004a7e <_strtod_l+0xa5e>
 800498e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004990:	2b00      	cmp	r3, #0
 8004992:	d04a      	beq.n	8004a2a <_strtod_l+0xa0a>
 8004994:	4b68      	ldr	r3, [pc, #416]	; (8004b38 <_strtod_l+0xb18>)
 8004996:	2200      	movs	r2, #0
 8004998:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800499c:	4f66      	ldr	r7, [pc, #408]	; (8004b38 <_strtod_l+0xb18>)
 800499e:	2600      	movs	r6, #0
 80049a0:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <_strtod_l+0xb0c>)
 80049a2:	402b      	ands	r3, r5
 80049a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049a8:	4b64      	ldr	r3, [pc, #400]	; (8004b3c <_strtod_l+0xb1c>)
 80049aa:	429a      	cmp	r2, r3
 80049ac:	f040 80ce 	bne.w	8004b4c <_strtod_l+0xb2c>
 80049b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80049bc:	ec4b ab10 	vmov	d0, sl, fp
 80049c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80049c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049c8:	f000 ffde 	bl	8005988 <__ulp>
 80049cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049d0:	ec53 2b10 	vmov	r2, r3, d0
 80049d4:	f7fb fe18 	bl	8000608 <__aeabi_dmul>
 80049d8:	4652      	mov	r2, sl
 80049da:	465b      	mov	r3, fp
 80049dc:	f7fb fc5e 	bl	800029c <__adddf3>
 80049e0:	460b      	mov	r3, r1
 80049e2:	4952      	ldr	r1, [pc, #328]	; (8004b2c <_strtod_l+0xb0c>)
 80049e4:	4a56      	ldr	r2, [pc, #344]	; (8004b40 <_strtod_l+0xb20>)
 80049e6:	4019      	ands	r1, r3
 80049e8:	4291      	cmp	r1, r2
 80049ea:	4682      	mov	sl, r0
 80049ec:	d95b      	bls.n	8004aa6 <_strtod_l+0xa86>
 80049ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <_strtod_l+0x9e0>
 80049f8:	9b08      	ldr	r3, [sp, #32]
 80049fa:	3301      	adds	r3, #1
 80049fc:	f43f ad2e 	beq.w	800445c <_strtod_l+0x43c>
 8004a00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004b30 <_strtod_l+0xb10>
 8004a04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004a08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a0a:	4648      	mov	r0, r9
 8004a0c:	f000 fd25 	bl	800545a <_Bfree>
 8004a10:	9905      	ldr	r1, [sp, #20]
 8004a12:	4648      	mov	r0, r9
 8004a14:	f000 fd21 	bl	800545a <_Bfree>
 8004a18:	4641      	mov	r1, r8
 8004a1a:	4648      	mov	r0, r9
 8004a1c:	f000 fd1d 	bl	800545a <_Bfree>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4648      	mov	r0, r9
 8004a24:	f000 fd19 	bl	800545a <_Bfree>
 8004a28:	e619      	b.n	800465e <_strtod_l+0x63e>
 8004a2a:	f1ba 0f00 	cmp.w	sl, #0
 8004a2e:	d11a      	bne.n	8004a66 <_strtod_l+0xa46>
 8004a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a34:	b9eb      	cbnz	r3, 8004a72 <_strtod_l+0xa52>
 8004a36:	2200      	movs	r2, #0
 8004a38:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <_strtod_l+0xb18>)
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	f7fc f855 	bl	8000aec <__aeabi_dcmplt>
 8004a42:	b9c8      	cbnz	r0, 8004a78 <_strtod_l+0xa58>
 8004a44:	4630      	mov	r0, r6
 8004a46:	4639      	mov	r1, r7
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <_strtod_l+0xb24>)
 8004a4c:	f7fb fddc 	bl	8000608 <__aeabi_dmul>
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004a58:	9618      	str	r6, [sp, #96]	; 0x60
 8004a5a:	9319      	str	r3, [sp, #100]	; 0x64
 8004a5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004a60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004a64:	e79c      	b.n	80049a0 <_strtod_l+0x980>
 8004a66:	f1ba 0f01 	cmp.w	sl, #1
 8004a6a:	d102      	bne.n	8004a72 <_strtod_l+0xa52>
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	f43f ad8e 	beq.w	800458e <_strtod_l+0x56e>
 8004a72:	2200      	movs	r2, #0
 8004a74:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <_strtod_l+0xb28>)
 8004a76:	e78f      	b.n	8004998 <_strtod_l+0x978>
 8004a78:	2600      	movs	r6, #0
 8004a7a:	4f32      	ldr	r7, [pc, #200]	; (8004b44 <_strtod_l+0xb24>)
 8004a7c:	e7ea      	b.n	8004a54 <_strtod_l+0xa34>
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <_strtod_l+0xb24>)
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	2200      	movs	r2, #0
 8004a86:	f7fb fdbf 	bl	8000608 <__aeabi_dmul>
 8004a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	b933      	cbnz	r3, 8004aa0 <_strtod_l+0xa80>
 8004a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a96:	9010      	str	r0, [sp, #64]	; 0x40
 8004a98:	9311      	str	r3, [sp, #68]	; 0x44
 8004a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a9e:	e7df      	b.n	8004a60 <_strtod_l+0xa40>
 8004aa0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004aa4:	e7f9      	b.n	8004a9a <_strtod_l+0xa7a>
 8004aa6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004aaa:	9b04      	ldr	r3, [sp, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ab      	bne.n	8004a08 <_strtod_l+0x9e8>
 8004ab0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ab4:	0d1b      	lsrs	r3, r3, #20
 8004ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ab8:	051b      	lsls	r3, r3, #20
 8004aba:	429a      	cmp	r2, r3
 8004abc:	465d      	mov	r5, fp
 8004abe:	d1a3      	bne.n	8004a08 <_strtod_l+0x9e8>
 8004ac0:	4639      	mov	r1, r7
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7fc f850 	bl	8000b68 <__aeabi_d2iz>
 8004ac8:	f7fb fd34 	bl	8000534 <__aeabi_i2d>
 8004acc:	460b      	mov	r3, r1
 8004ace:	4602      	mov	r2, r0
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7fb fbe0 	bl	8000298 <__aeabi_dsub>
 8004ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ada:	4606      	mov	r6, r0
 8004adc:	460f      	mov	r7, r1
 8004ade:	b933      	cbnz	r3, 8004aee <_strtod_l+0xace>
 8004ae0:	f1ba 0f00 	cmp.w	sl, #0
 8004ae4:	d103      	bne.n	8004aee <_strtod_l+0xace>
 8004ae6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	d06d      	beq.n	8004bca <_strtod_l+0xbaa>
 8004aee:	a30a      	add	r3, pc, #40	; (adr r3, 8004b18 <_strtod_l+0xaf8>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	4630      	mov	r0, r6
 8004af6:	4639      	mov	r1, r7
 8004af8:	f7fb fff8 	bl	8000aec <__aeabi_dcmplt>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	f47f acb8 	bne.w	8004472 <_strtod_l+0x452>
 8004b02:	a307      	add	r3, pc, #28	; (adr r3, 8004b20 <_strtod_l+0xb00>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	f7fc f80c 	bl	8000b28 <__aeabi_dcmpgt>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f43f af79 	beq.w	8004a08 <_strtod_l+0x9e8>
 8004b16:	e4ac      	b.n	8004472 <_strtod_l+0x452>
 8004b18:	94a03595 	.word	0x94a03595
 8004b1c:	3fdfffff 	.word	0x3fdfffff
 8004b20:	35afe535 	.word	0x35afe535
 8004b24:	3fe00000 	.word	0x3fe00000
 8004b28:	000fffff 	.word	0x000fffff
 8004b2c:	7ff00000 	.word	0x7ff00000
 8004b30:	7fefffff 	.word	0x7fefffff
 8004b34:	39500000 	.word	0x39500000
 8004b38:	3ff00000 	.word	0x3ff00000
 8004b3c:	7fe00000 	.word	0x7fe00000
 8004b40:	7c9fffff 	.word	0x7c9fffff
 8004b44:	3fe00000 	.word	0x3fe00000
 8004b48:	bff00000 	.word	0xbff00000
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	b333      	cbz	r3, 8004b9e <_strtod_l+0xb7e>
 8004b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b56:	d822      	bhi.n	8004b9e <_strtod_l+0xb7e>
 8004b58:	a327      	add	r3, pc, #156	; (adr r3, 8004bf8 <_strtod_l+0xbd8>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	4630      	mov	r0, r6
 8004b60:	4639      	mov	r1, r7
 8004b62:	f7fb ffcd 	bl	8000b00 <__aeabi_dcmple>
 8004b66:	b1a0      	cbz	r0, 8004b92 <_strtod_l+0xb72>
 8004b68:	4639      	mov	r1, r7
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7fc f824 	bl	8000bb8 <__aeabi_d2uiz>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	bf08      	it	eq
 8004b74:	2001      	moveq	r0, #1
 8004b76:	f7fb fccd 	bl	8000514 <__aeabi_ui2d>
 8004b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	460f      	mov	r7, r1
 8004b80:	bb03      	cbnz	r3, 8004bc4 <_strtod_l+0xba4>
 8004b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b86:	9012      	str	r0, [sp, #72]	; 0x48
 8004b88:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004b8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b96:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b9e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8004ba2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8004ba6:	f000 feef 	bl	8005988 <__ulp>
 8004baa:	4650      	mov	r0, sl
 8004bac:	ec53 2b10 	vmov	r2, r3, d0
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	f7fb fd29 	bl	8000608 <__aeabi_dmul>
 8004bb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bba:	f7fb fb6f 	bl	800029c <__adddf3>
 8004bbe:	4682      	mov	sl, r0
 8004bc0:	468b      	mov	fp, r1
 8004bc2:	e772      	b.n	8004aaa <_strtod_l+0xa8a>
 8004bc4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004bc8:	e7df      	b.n	8004b8a <_strtod_l+0xb6a>
 8004bca:	a30d      	add	r3, pc, #52	; (adr r3, 8004c00 <_strtod_l+0xbe0>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f7fb ff8c 	bl	8000aec <__aeabi_dcmplt>
 8004bd4:	e79c      	b.n	8004b10 <_strtod_l+0xaf0>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8004bda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	f7ff ba61 	b.w	80040a6 <_strtod_l+0x86>
 8004be4:	2b65      	cmp	r3, #101	; 0x65
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f43f ab4e 	beq.w	800428a <_strtod_l+0x26a>
 8004bee:	2101      	movs	r1, #1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	9104      	str	r1, [sp, #16]
 8004bf4:	f7ff bacb 	b.w	800418e <_strtod_l+0x16e>
 8004bf8:	ffc00000 	.word	0xffc00000
 8004bfc:	41dfffff 	.word	0x41dfffff
 8004c00:	94a03595 	.word	0x94a03595
 8004c04:	3fcfffff 	.word	0x3fcfffff

08004c08 <_strtod_r>:
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <_strtod_r+0x18>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b410      	push	{r4}
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4c04      	ldr	r4, [pc, #16]	; (8004c24 <_strtod_r+0x1c>)
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf08      	it	eq
 8004c16:	4623      	moveq	r3, r4
 8004c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c1c:	f7ff ba00 	b.w	8004020 <_strtod_l>
 8004c20:	2000000c 	.word	0x2000000c
 8004c24:	20000070 	.word	0x20000070

08004c28 <_strtol_l.isra.0>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	4689      	mov	r9, r1
 8004c30:	4692      	mov	sl, r2
 8004c32:	461e      	mov	r6, r3
 8004c34:	460f      	mov	r7, r1
 8004c36:	463d      	mov	r5, r7
 8004c38:	9808      	ldr	r0, [sp, #32]
 8004c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c3e:	f000 fba7 	bl	8005390 <__locale_ctype_ptr_l>
 8004c42:	4420      	add	r0, r4
 8004c44:	7843      	ldrb	r3, [r0, #1]
 8004c46:	f013 0308 	ands.w	r3, r3, #8
 8004c4a:	d132      	bne.n	8004cb2 <_strtol_l.isra.0+0x8a>
 8004c4c:	2c2d      	cmp	r4, #45	; 0x2d
 8004c4e:	d132      	bne.n	8004cb6 <_strtol_l.isra.0+0x8e>
 8004c50:	787c      	ldrb	r4, [r7, #1]
 8004c52:	1cbd      	adds	r5, r7, #2
 8004c54:	2201      	movs	r2, #1
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d05d      	beq.n	8004d16 <_strtol_l.isra.0+0xee>
 8004c5a:	2e10      	cmp	r6, #16
 8004c5c:	d109      	bne.n	8004c72 <_strtol_l.isra.0+0x4a>
 8004c5e:	2c30      	cmp	r4, #48	; 0x30
 8004c60:	d107      	bne.n	8004c72 <_strtol_l.isra.0+0x4a>
 8004c62:	782b      	ldrb	r3, [r5, #0]
 8004c64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c68:	2b58      	cmp	r3, #88	; 0x58
 8004c6a:	d14f      	bne.n	8004d0c <_strtol_l.isra.0+0xe4>
 8004c6c:	786c      	ldrb	r4, [r5, #1]
 8004c6e:	2610      	movs	r6, #16
 8004c70:	3502      	adds	r5, #2
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	bf14      	ite	ne
 8004c76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004c7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004c7e:	2700      	movs	r7, #0
 8004c80:	fbb1 fcf6 	udiv	ip, r1, r6
 8004c84:	4638      	mov	r0, r7
 8004c86:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004c8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d817      	bhi.n	8004cc2 <_strtol_l.isra.0+0x9a>
 8004c92:	461c      	mov	r4, r3
 8004c94:	42a6      	cmp	r6, r4
 8004c96:	dd23      	ble.n	8004ce0 <_strtol_l.isra.0+0xb8>
 8004c98:	1c7b      	adds	r3, r7, #1
 8004c9a:	d007      	beq.n	8004cac <_strtol_l.isra.0+0x84>
 8004c9c:	4584      	cmp	ip, r0
 8004c9e:	d31c      	bcc.n	8004cda <_strtol_l.isra.0+0xb2>
 8004ca0:	d101      	bne.n	8004ca6 <_strtol_l.isra.0+0x7e>
 8004ca2:	45a6      	cmp	lr, r4
 8004ca4:	db19      	blt.n	8004cda <_strtol_l.isra.0+0xb2>
 8004ca6:	fb00 4006 	mla	r0, r0, r6, r4
 8004caa:	2701      	movs	r7, #1
 8004cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cb0:	e7eb      	b.n	8004c8a <_strtol_l.isra.0+0x62>
 8004cb2:	462f      	mov	r7, r5
 8004cb4:	e7bf      	b.n	8004c36 <_strtol_l.isra.0+0xe>
 8004cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8004cb8:	bf04      	itt	eq
 8004cba:	1cbd      	addeq	r5, r7, #2
 8004cbc:	787c      	ldrbeq	r4, [r7, #1]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	e7c9      	b.n	8004c56 <_strtol_l.isra.0+0x2e>
 8004cc2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004cc6:	2b19      	cmp	r3, #25
 8004cc8:	d801      	bhi.n	8004cce <_strtol_l.isra.0+0xa6>
 8004cca:	3c37      	subs	r4, #55	; 0x37
 8004ccc:	e7e2      	b.n	8004c94 <_strtol_l.isra.0+0x6c>
 8004cce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004cd2:	2b19      	cmp	r3, #25
 8004cd4:	d804      	bhi.n	8004ce0 <_strtol_l.isra.0+0xb8>
 8004cd6:	3c57      	subs	r4, #87	; 0x57
 8004cd8:	e7dc      	b.n	8004c94 <_strtol_l.isra.0+0x6c>
 8004cda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cde:	e7e5      	b.n	8004cac <_strtol_l.isra.0+0x84>
 8004ce0:	1c7b      	adds	r3, r7, #1
 8004ce2:	d108      	bne.n	8004cf6 <_strtol_l.isra.0+0xce>
 8004ce4:	2322      	movs	r3, #34	; 0x22
 8004ce6:	f8c8 3000 	str.w	r3, [r8]
 8004cea:	4608      	mov	r0, r1
 8004cec:	f1ba 0f00 	cmp.w	sl, #0
 8004cf0:	d107      	bne.n	8004d02 <_strtol_l.isra.0+0xda>
 8004cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf6:	b102      	cbz	r2, 8004cfa <_strtol_l.isra.0+0xd2>
 8004cf8:	4240      	negs	r0, r0
 8004cfa:	f1ba 0f00 	cmp.w	sl, #0
 8004cfe:	d0f8      	beq.n	8004cf2 <_strtol_l.isra.0+0xca>
 8004d00:	b10f      	cbz	r7, 8004d06 <_strtol_l.isra.0+0xde>
 8004d02:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004d06:	f8ca 9000 	str.w	r9, [sl]
 8004d0a:	e7f2      	b.n	8004cf2 <_strtol_l.isra.0+0xca>
 8004d0c:	2430      	movs	r4, #48	; 0x30
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	d1af      	bne.n	8004c72 <_strtol_l.isra.0+0x4a>
 8004d12:	2608      	movs	r6, #8
 8004d14:	e7ad      	b.n	8004c72 <_strtol_l.isra.0+0x4a>
 8004d16:	2c30      	cmp	r4, #48	; 0x30
 8004d18:	d0a3      	beq.n	8004c62 <_strtol_l.isra.0+0x3a>
 8004d1a:	260a      	movs	r6, #10
 8004d1c:	e7a9      	b.n	8004c72 <_strtol_l.isra.0+0x4a>
	...

08004d20 <_strtol_r>:
 8004d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d22:	4c06      	ldr	r4, [pc, #24]	; (8004d3c <_strtol_r+0x1c>)
 8004d24:	4d06      	ldr	r5, [pc, #24]	; (8004d40 <_strtol_r+0x20>)
 8004d26:	6824      	ldr	r4, [r4, #0]
 8004d28:	6a24      	ldr	r4, [r4, #32]
 8004d2a:	2c00      	cmp	r4, #0
 8004d2c:	bf08      	it	eq
 8004d2e:	462c      	moveq	r4, r5
 8004d30:	9400      	str	r4, [sp, #0]
 8004d32:	f7ff ff79 	bl	8004c28 <_strtol_l.isra.0>
 8004d36:	b003      	add	sp, #12
 8004d38:	bd30      	pop	{r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	2000000c 	.word	0x2000000c
 8004d40:	20000070 	.word	0x20000070

08004d44 <rshift>:
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	6906      	ldr	r6, [r0, #16]
 8004d48:	114b      	asrs	r3, r1, #5
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	f100 0414 	add.w	r4, r0, #20
 8004d50:	dd30      	ble.n	8004db4 <rshift+0x70>
 8004d52:	f011 011f 	ands.w	r1, r1, #31
 8004d56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004d5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004d5e:	d108      	bne.n	8004d72 <rshift+0x2e>
 8004d60:	4621      	mov	r1, r4
 8004d62:	42b2      	cmp	r2, r6
 8004d64:	460b      	mov	r3, r1
 8004d66:	d211      	bcs.n	8004d8c <rshift+0x48>
 8004d68:	f852 3b04 	ldr.w	r3, [r2], #4
 8004d6c:	f841 3b04 	str.w	r3, [r1], #4
 8004d70:	e7f7      	b.n	8004d62 <rshift+0x1e>
 8004d72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8004d76:	f1c1 0c20 	rsb	ip, r1, #32
 8004d7a:	40cd      	lsrs	r5, r1
 8004d7c:	3204      	adds	r2, #4
 8004d7e:	4623      	mov	r3, r4
 8004d80:	42b2      	cmp	r2, r6
 8004d82:	4617      	mov	r7, r2
 8004d84:	d30c      	bcc.n	8004da0 <rshift+0x5c>
 8004d86:	601d      	str	r5, [r3, #0]
 8004d88:	b105      	cbz	r5, 8004d8c <rshift+0x48>
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	1b1a      	subs	r2, r3, r4
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004d94:	bf08      	it	eq
 8004d96:	2300      	moveq	r3, #0
 8004d98:	6102      	str	r2, [r0, #16]
 8004d9a:	bf08      	it	eq
 8004d9c:	6143      	streq	r3, [r0, #20]
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	683f      	ldr	r7, [r7, #0]
 8004da2:	fa07 f70c 	lsl.w	r7, r7, ip
 8004da6:	433d      	orrs	r5, r7
 8004da8:	f843 5b04 	str.w	r5, [r3], #4
 8004dac:	f852 5b04 	ldr.w	r5, [r2], #4
 8004db0:	40cd      	lsrs	r5, r1
 8004db2:	e7e5      	b.n	8004d80 <rshift+0x3c>
 8004db4:	4623      	mov	r3, r4
 8004db6:	e7e9      	b.n	8004d8c <rshift+0x48>

08004db8 <__hexdig_fun>:
 8004db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004dbc:	2b09      	cmp	r3, #9
 8004dbe:	d802      	bhi.n	8004dc6 <__hexdig_fun+0xe>
 8004dc0:	3820      	subs	r0, #32
 8004dc2:	b2c0      	uxtb	r0, r0
 8004dc4:	4770      	bx	lr
 8004dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d801      	bhi.n	8004dd2 <__hexdig_fun+0x1a>
 8004dce:	3847      	subs	r0, #71	; 0x47
 8004dd0:	e7f7      	b.n	8004dc2 <__hexdig_fun+0xa>
 8004dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d801      	bhi.n	8004dde <__hexdig_fun+0x26>
 8004dda:	3827      	subs	r0, #39	; 0x27
 8004ddc:	e7f1      	b.n	8004dc2 <__hexdig_fun+0xa>
 8004dde:	2000      	movs	r0, #0
 8004de0:	4770      	bx	lr

08004de2 <__gethex>:
 8004de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de6:	b08b      	sub	sp, #44	; 0x2c
 8004de8:	468a      	mov	sl, r1
 8004dea:	9002      	str	r0, [sp, #8]
 8004dec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004dee:	9306      	str	r3, [sp, #24]
 8004df0:	4690      	mov	r8, r2
 8004df2:	f000 fadf 	bl	80053b4 <__localeconv_l>
 8004df6:	6803      	ldr	r3, [r0, #0]
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb f9f0 	bl	80001e0 <strlen>
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	9001      	str	r0, [sp, #4]
 8004e04:	4403      	add	r3, r0
 8004e06:	f04f 0b00 	mov.w	fp, #0
 8004e0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	f8da 3000 	ldr.w	r3, [sl]
 8004e14:	3302      	adds	r3, #2
 8004e16:	461f      	mov	r7, r3
 8004e18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e1c:	2830      	cmp	r0, #48	; 0x30
 8004e1e:	d06c      	beq.n	8004efa <__gethex+0x118>
 8004e20:	f7ff ffca 	bl	8004db8 <__hexdig_fun>
 8004e24:	4604      	mov	r4, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d16a      	bne.n	8004f00 <__gethex+0x11e>
 8004e2a:	9a01      	ldr	r2, [sp, #4]
 8004e2c:	9903      	ldr	r1, [sp, #12]
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f7ff f8c8 	bl	8003fc4 <strncmp>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d166      	bne.n	8004f06 <__gethex+0x124>
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	5cf8      	ldrb	r0, [r7, r3]
 8004e3c:	18fe      	adds	r6, r7, r3
 8004e3e:	f7ff ffbb 	bl	8004db8 <__hexdig_fun>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d062      	beq.n	8004f0c <__gethex+0x12a>
 8004e46:	4633      	mov	r3, r6
 8004e48:	7818      	ldrb	r0, [r3, #0]
 8004e4a:	2830      	cmp	r0, #48	; 0x30
 8004e4c:	461f      	mov	r7, r3
 8004e4e:	f103 0301 	add.w	r3, r3, #1
 8004e52:	d0f9      	beq.n	8004e48 <__gethex+0x66>
 8004e54:	f7ff ffb0 	bl	8004db8 <__hexdig_fun>
 8004e58:	fab0 f580 	clz	r5, r0
 8004e5c:	096d      	lsrs	r5, r5, #5
 8004e5e:	4634      	mov	r4, r6
 8004e60:	f04f 0b01 	mov.w	fp, #1
 8004e64:	463a      	mov	r2, r7
 8004e66:	4616      	mov	r6, r2
 8004e68:	3201      	adds	r2, #1
 8004e6a:	7830      	ldrb	r0, [r6, #0]
 8004e6c:	f7ff ffa4 	bl	8004db8 <__hexdig_fun>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1f8      	bne.n	8004e66 <__gethex+0x84>
 8004e74:	9a01      	ldr	r2, [sp, #4]
 8004e76:	9903      	ldr	r1, [sp, #12]
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff f8a3 	bl	8003fc4 <strncmp>
 8004e7e:	b950      	cbnz	r0, 8004e96 <__gethex+0xb4>
 8004e80:	b954      	cbnz	r4, 8004e98 <__gethex+0xb6>
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	18f4      	adds	r4, r6, r3
 8004e86:	4622      	mov	r2, r4
 8004e88:	4616      	mov	r6, r2
 8004e8a:	3201      	adds	r2, #1
 8004e8c:	7830      	ldrb	r0, [r6, #0]
 8004e8e:	f7ff ff93 	bl	8004db8 <__hexdig_fun>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d1f8      	bne.n	8004e88 <__gethex+0xa6>
 8004e96:	b10c      	cbz	r4, 8004e9c <__gethex+0xba>
 8004e98:	1ba4      	subs	r4, r4, r6
 8004e9a:	00a4      	lsls	r4, r4, #2
 8004e9c:	7833      	ldrb	r3, [r6, #0]
 8004e9e:	2b50      	cmp	r3, #80	; 0x50
 8004ea0:	d001      	beq.n	8004ea6 <__gethex+0xc4>
 8004ea2:	2b70      	cmp	r3, #112	; 0x70
 8004ea4:	d140      	bne.n	8004f28 <__gethex+0x146>
 8004ea6:	7873      	ldrb	r3, [r6, #1]
 8004ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8004eaa:	d031      	beq.n	8004f10 <__gethex+0x12e>
 8004eac:	2b2d      	cmp	r3, #45	; 0x2d
 8004eae:	d033      	beq.n	8004f18 <__gethex+0x136>
 8004eb0:	1c71      	adds	r1, r6, #1
 8004eb2:	f04f 0900 	mov.w	r9, #0
 8004eb6:	7808      	ldrb	r0, [r1, #0]
 8004eb8:	f7ff ff7e 	bl	8004db8 <__hexdig_fun>
 8004ebc:	1e43      	subs	r3, r0, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d831      	bhi.n	8004f28 <__gethex+0x146>
 8004ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8004ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004ecc:	f7ff ff74 	bl	8004db8 <__hexdig_fun>
 8004ed0:	1e43      	subs	r3, r0, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b18      	cmp	r3, #24
 8004ed6:	d922      	bls.n	8004f1e <__gethex+0x13c>
 8004ed8:	f1b9 0f00 	cmp.w	r9, #0
 8004edc:	d000      	beq.n	8004ee0 <__gethex+0xfe>
 8004ede:	4252      	negs	r2, r2
 8004ee0:	4414      	add	r4, r2
 8004ee2:	f8ca 1000 	str.w	r1, [sl]
 8004ee6:	b30d      	cbz	r5, 8004f2c <__gethex+0x14a>
 8004ee8:	f1bb 0f00 	cmp.w	fp, #0
 8004eec:	bf0c      	ite	eq
 8004eee:	2706      	moveq	r7, #6
 8004ef0:	2700      	movne	r7, #0
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	b00b      	add	sp, #44	; 0x2c
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	f10b 0b01 	add.w	fp, fp, #1
 8004efe:	e78a      	b.n	8004e16 <__gethex+0x34>
 8004f00:	2500      	movs	r5, #0
 8004f02:	462c      	mov	r4, r5
 8004f04:	e7ae      	b.n	8004e64 <__gethex+0x82>
 8004f06:	463e      	mov	r6, r7
 8004f08:	2501      	movs	r5, #1
 8004f0a:	e7c7      	b.n	8004e9c <__gethex+0xba>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	e7fb      	b.n	8004f08 <__gethex+0x126>
 8004f10:	f04f 0900 	mov.w	r9, #0
 8004f14:	1cb1      	adds	r1, r6, #2
 8004f16:	e7ce      	b.n	8004eb6 <__gethex+0xd4>
 8004f18:	f04f 0901 	mov.w	r9, #1
 8004f1c:	e7fa      	b.n	8004f14 <__gethex+0x132>
 8004f1e:	230a      	movs	r3, #10
 8004f20:	fb03 0202 	mla	r2, r3, r2, r0
 8004f24:	3a10      	subs	r2, #16
 8004f26:	e7cf      	b.n	8004ec8 <__gethex+0xe6>
 8004f28:	4631      	mov	r1, r6
 8004f2a:	e7da      	b.n	8004ee2 <__gethex+0x100>
 8004f2c:	1bf3      	subs	r3, r6, r7
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4629      	mov	r1, r5
 8004f32:	2b07      	cmp	r3, #7
 8004f34:	dc49      	bgt.n	8004fca <__gethex+0x1e8>
 8004f36:	9802      	ldr	r0, [sp, #8]
 8004f38:	f000 fa5b 	bl	80053f2 <_Balloc>
 8004f3c:	9b01      	ldr	r3, [sp, #4]
 8004f3e:	f100 0914 	add.w	r9, r0, #20
 8004f42:	f04f 0b00 	mov.w	fp, #0
 8004f46:	f1c3 0301 	rsb	r3, r3, #1
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004f50:	46da      	mov	sl, fp
 8004f52:	9308      	str	r3, [sp, #32]
 8004f54:	42b7      	cmp	r7, r6
 8004f56:	d33b      	bcc.n	8004fd0 <__gethex+0x1ee>
 8004f58:	9804      	ldr	r0, [sp, #16]
 8004f5a:	f840 ab04 	str.w	sl, [r0], #4
 8004f5e:	eba0 0009 	sub.w	r0, r0, r9
 8004f62:	1080      	asrs	r0, r0, #2
 8004f64:	6128      	str	r0, [r5, #16]
 8004f66:	0147      	lsls	r7, r0, #5
 8004f68:	4650      	mov	r0, sl
 8004f6a:	f000 fb06 	bl	800557a <__hi0bits>
 8004f6e:	f8d8 6000 	ldr.w	r6, [r8]
 8004f72:	1a3f      	subs	r7, r7, r0
 8004f74:	42b7      	cmp	r7, r6
 8004f76:	dd64      	ble.n	8005042 <__gethex+0x260>
 8004f78:	1bbf      	subs	r7, r7, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fe15 	bl	8005bac <__any_on>
 8004f82:	4682      	mov	sl, r0
 8004f84:	b178      	cbz	r0, 8004fa6 <__gethex+0x1c4>
 8004f86:	1e7b      	subs	r3, r7, #1
 8004f88:	1159      	asrs	r1, r3, #5
 8004f8a:	f003 021f 	and.w	r2, r3, #31
 8004f8e:	f04f 0a01 	mov.w	sl, #1
 8004f92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f96:	fa0a f202 	lsl.w	r2, sl, r2
 8004f9a:	420a      	tst	r2, r1
 8004f9c:	d003      	beq.n	8004fa6 <__gethex+0x1c4>
 8004f9e:	4553      	cmp	r3, sl
 8004fa0:	dc46      	bgt.n	8005030 <__gethex+0x24e>
 8004fa2:	f04f 0a02 	mov.w	sl, #2
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f7ff fecb 	bl	8004d44 <rshift>
 8004fae:	443c      	add	r4, r7
 8004fb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	da52      	bge.n	800505e <__gethex+0x27c>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	9802      	ldr	r0, [sp, #8]
 8004fbc:	f000 fa4d 	bl	800545a <_Bfree>
 8004fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	27a3      	movs	r7, #163	; 0xa3
 8004fc8:	e793      	b.n	8004ef2 <__gethex+0x110>
 8004fca:	3101      	adds	r1, #1
 8004fcc:	105b      	asrs	r3, r3, #1
 8004fce:	e7b0      	b.n	8004f32 <__gethex+0x150>
 8004fd0:	1e73      	subs	r3, r6, #1
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	9a07      	ldr	r2, [sp, #28]
 8004fd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <__gethex+0x22e>
 8004fde:	f1bb 0f20 	cmp.w	fp, #32
 8004fe2:	d107      	bne.n	8004ff4 <__gethex+0x212>
 8004fe4:	9b04      	ldr	r3, [sp, #16]
 8004fe6:	f8c3 a000 	str.w	sl, [r3]
 8004fea:	3304      	adds	r3, #4
 8004fec:	f04f 0a00 	mov.w	sl, #0
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	46d3      	mov	fp, sl
 8004ff4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ff8:	f7ff fede 	bl	8004db8 <__hexdig_fun>
 8004ffc:	f000 000f 	and.w	r0, r0, #15
 8005000:	fa00 f00b 	lsl.w	r0, r0, fp
 8005004:	ea4a 0a00 	orr.w	sl, sl, r0
 8005008:	f10b 0b04 	add.w	fp, fp, #4
 800500c:	9b05      	ldr	r3, [sp, #20]
 800500e:	e00d      	b.n	800502c <__gethex+0x24a>
 8005010:	9b05      	ldr	r3, [sp, #20]
 8005012:	9a08      	ldr	r2, [sp, #32]
 8005014:	4413      	add	r3, r2
 8005016:	42bb      	cmp	r3, r7
 8005018:	d3e1      	bcc.n	8004fde <__gethex+0x1fc>
 800501a:	4618      	mov	r0, r3
 800501c:	9a01      	ldr	r2, [sp, #4]
 800501e:	9903      	ldr	r1, [sp, #12]
 8005020:	9309      	str	r3, [sp, #36]	; 0x24
 8005022:	f7fe ffcf 	bl	8003fc4 <strncmp>
 8005026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005028:	2800      	cmp	r0, #0
 800502a:	d1d8      	bne.n	8004fde <__gethex+0x1fc>
 800502c:	461e      	mov	r6, r3
 800502e:	e791      	b.n	8004f54 <__gethex+0x172>
 8005030:	1eb9      	subs	r1, r7, #2
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fdba 	bl	8005bac <__any_on>
 8005038:	2800      	cmp	r0, #0
 800503a:	d0b2      	beq.n	8004fa2 <__gethex+0x1c0>
 800503c:	f04f 0a03 	mov.w	sl, #3
 8005040:	e7b1      	b.n	8004fa6 <__gethex+0x1c4>
 8005042:	da09      	bge.n	8005058 <__gethex+0x276>
 8005044:	1bf7      	subs	r7, r6, r7
 8005046:	4629      	mov	r1, r5
 8005048:	463a      	mov	r2, r7
 800504a:	9802      	ldr	r0, [sp, #8]
 800504c:	f000 fbd0 	bl	80057f0 <__lshift>
 8005050:	1be4      	subs	r4, r4, r7
 8005052:	4605      	mov	r5, r0
 8005054:	f100 0914 	add.w	r9, r0, #20
 8005058:	f04f 0a00 	mov.w	sl, #0
 800505c:	e7a8      	b.n	8004fb0 <__gethex+0x1ce>
 800505e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005062:	42a0      	cmp	r0, r4
 8005064:	dd6a      	ble.n	800513c <__gethex+0x35a>
 8005066:	1b04      	subs	r4, r0, r4
 8005068:	42a6      	cmp	r6, r4
 800506a:	dc2e      	bgt.n	80050ca <__gethex+0x2e8>
 800506c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d022      	beq.n	80050ba <__gethex+0x2d8>
 8005074:	2b03      	cmp	r3, #3
 8005076:	d024      	beq.n	80050c2 <__gethex+0x2e0>
 8005078:	2b01      	cmp	r3, #1
 800507a:	d115      	bne.n	80050a8 <__gethex+0x2c6>
 800507c:	42a6      	cmp	r6, r4
 800507e:	d113      	bne.n	80050a8 <__gethex+0x2c6>
 8005080:	2e01      	cmp	r6, #1
 8005082:	dc0b      	bgt.n	800509c <__gethex+0x2ba>
 8005084:	9a06      	ldr	r2, [sp, #24]
 8005086:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	2301      	movs	r3, #1
 800508e:	612b      	str	r3, [r5, #16]
 8005090:	f8c9 3000 	str.w	r3, [r9]
 8005094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005096:	2762      	movs	r7, #98	; 0x62
 8005098:	601d      	str	r5, [r3, #0]
 800509a:	e72a      	b.n	8004ef2 <__gethex+0x110>
 800509c:	1e71      	subs	r1, r6, #1
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 fd84 	bl	8005bac <__any_on>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d1ed      	bne.n	8005084 <__gethex+0x2a2>
 80050a8:	4629      	mov	r1, r5
 80050aa:	9802      	ldr	r0, [sp, #8]
 80050ac:	f000 f9d5 	bl	800545a <_Bfree>
 80050b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050b2:	2300      	movs	r3, #0
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	2750      	movs	r7, #80	; 0x50
 80050b8:	e71b      	b.n	8004ef2 <__gethex+0x110>
 80050ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0e1      	beq.n	8005084 <__gethex+0x2a2>
 80050c0:	e7f2      	b.n	80050a8 <__gethex+0x2c6>
 80050c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1dd      	bne.n	8005084 <__gethex+0x2a2>
 80050c8:	e7ee      	b.n	80050a8 <__gethex+0x2c6>
 80050ca:	1e67      	subs	r7, r4, #1
 80050cc:	f1ba 0f00 	cmp.w	sl, #0
 80050d0:	d131      	bne.n	8005136 <__gethex+0x354>
 80050d2:	b127      	cbz	r7, 80050de <__gethex+0x2fc>
 80050d4:	4639      	mov	r1, r7
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 fd68 	bl	8005bac <__any_on>
 80050dc:	4682      	mov	sl, r0
 80050de:	117a      	asrs	r2, r7, #5
 80050e0:	2301      	movs	r3, #1
 80050e2:	f007 071f 	and.w	r7, r7, #31
 80050e6:	fa03 f707 	lsl.w	r7, r3, r7
 80050ea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80050ee:	4621      	mov	r1, r4
 80050f0:	421f      	tst	r7, r3
 80050f2:	4628      	mov	r0, r5
 80050f4:	bf18      	it	ne
 80050f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80050fa:	1b36      	subs	r6, r6, r4
 80050fc:	f7ff fe22 	bl	8004d44 <rshift>
 8005100:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005104:	2702      	movs	r7, #2
 8005106:	f1ba 0f00 	cmp.w	sl, #0
 800510a:	d048      	beq.n	800519e <__gethex+0x3bc>
 800510c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d015      	beq.n	8005140 <__gethex+0x35e>
 8005114:	2b03      	cmp	r3, #3
 8005116:	d017      	beq.n	8005148 <__gethex+0x366>
 8005118:	2b01      	cmp	r3, #1
 800511a:	d109      	bne.n	8005130 <__gethex+0x34e>
 800511c:	f01a 0f02 	tst.w	sl, #2
 8005120:	d006      	beq.n	8005130 <__gethex+0x34e>
 8005122:	f8d9 3000 	ldr.w	r3, [r9]
 8005126:	ea4a 0a03 	orr.w	sl, sl, r3
 800512a:	f01a 0f01 	tst.w	sl, #1
 800512e:	d10e      	bne.n	800514e <__gethex+0x36c>
 8005130:	f047 0710 	orr.w	r7, r7, #16
 8005134:	e033      	b.n	800519e <__gethex+0x3bc>
 8005136:	f04f 0a01 	mov.w	sl, #1
 800513a:	e7d0      	b.n	80050de <__gethex+0x2fc>
 800513c:	2701      	movs	r7, #1
 800513e:	e7e2      	b.n	8005106 <__gethex+0x324>
 8005140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005142:	f1c3 0301 	rsb	r3, r3, #1
 8005146:	9315      	str	r3, [sp, #84]	; 0x54
 8005148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <__gethex+0x34e>
 800514e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005152:	f105 0314 	add.w	r3, r5, #20
 8005156:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800515a:	eb03 010a 	add.w	r1, r3, sl
 800515e:	f04f 0c00 	mov.w	ip, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f853 2b04 	ldr.w	r2, [r3], #4
 8005168:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800516c:	d01c      	beq.n	80051a8 <__gethex+0x3c6>
 800516e:	3201      	adds	r2, #1
 8005170:	6002      	str	r2, [r0, #0]
 8005172:	2f02      	cmp	r7, #2
 8005174:	f105 0314 	add.w	r3, r5, #20
 8005178:	d138      	bne.n	80051ec <__gethex+0x40a>
 800517a:	f8d8 2000 	ldr.w	r2, [r8]
 800517e:	3a01      	subs	r2, #1
 8005180:	42b2      	cmp	r2, r6
 8005182:	d10a      	bne.n	800519a <__gethex+0x3b8>
 8005184:	1171      	asrs	r1, r6, #5
 8005186:	2201      	movs	r2, #1
 8005188:	f006 061f 	and.w	r6, r6, #31
 800518c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005190:	fa02 f606 	lsl.w	r6, r2, r6
 8005194:	421e      	tst	r6, r3
 8005196:	bf18      	it	ne
 8005198:	4617      	movne	r7, r2
 800519a:	f047 0720 	orr.w	r7, r7, #32
 800519e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051a0:	601d      	str	r5, [r3, #0]
 80051a2:	9b06      	ldr	r3, [sp, #24]
 80051a4:	601c      	str	r4, [r3, #0]
 80051a6:	e6a4      	b.n	8004ef2 <__gethex+0x110>
 80051a8:	4299      	cmp	r1, r3
 80051aa:	f843 cc04 	str.w	ip, [r3, #-4]
 80051ae:	d8d8      	bhi.n	8005162 <__gethex+0x380>
 80051b0:	68ab      	ldr	r3, [r5, #8]
 80051b2:	4599      	cmp	r9, r3
 80051b4:	db12      	blt.n	80051dc <__gethex+0x3fa>
 80051b6:	6869      	ldr	r1, [r5, #4]
 80051b8:	9802      	ldr	r0, [sp, #8]
 80051ba:	3101      	adds	r1, #1
 80051bc:	f000 f919 	bl	80053f2 <_Balloc>
 80051c0:	692a      	ldr	r2, [r5, #16]
 80051c2:	3202      	adds	r2, #2
 80051c4:	f105 010c 	add.w	r1, r5, #12
 80051c8:	4683      	mov	fp, r0
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	300c      	adds	r0, #12
 80051ce:	f000 f905 	bl	80053dc <memcpy>
 80051d2:	4629      	mov	r1, r5
 80051d4:	9802      	ldr	r0, [sp, #8]
 80051d6:	f000 f940 	bl	800545a <_Bfree>
 80051da:	465d      	mov	r5, fp
 80051dc:	692b      	ldr	r3, [r5, #16]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051e4:	612a      	str	r2, [r5, #16]
 80051e6:	2201      	movs	r2, #1
 80051e8:	615a      	str	r2, [r3, #20]
 80051ea:	e7c2      	b.n	8005172 <__gethex+0x390>
 80051ec:	692a      	ldr	r2, [r5, #16]
 80051ee:	454a      	cmp	r2, r9
 80051f0:	dd0b      	ble.n	800520a <__gethex+0x428>
 80051f2:	2101      	movs	r1, #1
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7ff fda5 	bl	8004d44 <rshift>
 80051fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80051fe:	3401      	adds	r4, #1
 8005200:	42a3      	cmp	r3, r4
 8005202:	f6ff aed9 	blt.w	8004fb8 <__gethex+0x1d6>
 8005206:	2701      	movs	r7, #1
 8005208:	e7c7      	b.n	800519a <__gethex+0x3b8>
 800520a:	f016 061f 	ands.w	r6, r6, #31
 800520e:	d0fa      	beq.n	8005206 <__gethex+0x424>
 8005210:	449a      	add	sl, r3
 8005212:	f1c6 0620 	rsb	r6, r6, #32
 8005216:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800521a:	f000 f9ae 	bl	800557a <__hi0bits>
 800521e:	42b0      	cmp	r0, r6
 8005220:	dbe7      	blt.n	80051f2 <__gethex+0x410>
 8005222:	e7f0      	b.n	8005206 <__gethex+0x424>

08005224 <L_shift>:
 8005224:	f1c2 0208 	rsb	r2, r2, #8
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	f1c2 0620 	rsb	r6, r2, #32
 8005230:	6843      	ldr	r3, [r0, #4]
 8005232:	6804      	ldr	r4, [r0, #0]
 8005234:	fa03 f506 	lsl.w	r5, r3, r6
 8005238:	432c      	orrs	r4, r5
 800523a:	40d3      	lsrs	r3, r2
 800523c:	6004      	str	r4, [r0, #0]
 800523e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005242:	4288      	cmp	r0, r1
 8005244:	d3f4      	bcc.n	8005230 <L_shift+0xc>
 8005246:	bd70      	pop	{r4, r5, r6, pc}

08005248 <__match>:
 8005248:	b530      	push	{r4, r5, lr}
 800524a:	6803      	ldr	r3, [r0, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005252:	b914      	cbnz	r4, 800525a <__match+0x12>
 8005254:	6003      	str	r3, [r0, #0]
 8005256:	2001      	movs	r0, #1
 8005258:	bd30      	pop	{r4, r5, pc}
 800525a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005262:	2d19      	cmp	r5, #25
 8005264:	bf98      	it	ls
 8005266:	3220      	addls	r2, #32
 8005268:	42a2      	cmp	r2, r4
 800526a:	d0f0      	beq.n	800524e <__match+0x6>
 800526c:	2000      	movs	r0, #0
 800526e:	e7f3      	b.n	8005258 <__match+0x10>

08005270 <__hexnan>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	680b      	ldr	r3, [r1, #0]
 8005276:	6801      	ldr	r1, [r0, #0]
 8005278:	115f      	asrs	r7, r3, #5
 800527a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800527e:	f013 031f 	ands.w	r3, r3, #31
 8005282:	b087      	sub	sp, #28
 8005284:	bf18      	it	ne
 8005286:	3704      	addne	r7, #4
 8005288:	2500      	movs	r5, #0
 800528a:	1f3e      	subs	r6, r7, #4
 800528c:	4682      	mov	sl, r0
 800528e:	4690      	mov	r8, r2
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	f847 5c04 	str.w	r5, [r7, #-4]
 8005296:	46b1      	mov	r9, r6
 8005298:	4634      	mov	r4, r6
 800529a:	9502      	str	r5, [sp, #8]
 800529c:	46ab      	mov	fp, r5
 800529e:	784a      	ldrb	r2, [r1, #1]
 80052a0:	1c4b      	adds	r3, r1, #1
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	b342      	cbz	r2, 80052f8 <__hexnan+0x88>
 80052a6:	4610      	mov	r0, r2
 80052a8:	9105      	str	r1, [sp, #20]
 80052aa:	9204      	str	r2, [sp, #16]
 80052ac:	f7ff fd84 	bl	8004db8 <__hexdig_fun>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d143      	bne.n	800533c <__hexnan+0xcc>
 80052b4:	9a04      	ldr	r2, [sp, #16]
 80052b6:	9905      	ldr	r1, [sp, #20]
 80052b8:	2a20      	cmp	r2, #32
 80052ba:	d818      	bhi.n	80052ee <__hexnan+0x7e>
 80052bc:	9b02      	ldr	r3, [sp, #8]
 80052be:	459b      	cmp	fp, r3
 80052c0:	dd13      	ble.n	80052ea <__hexnan+0x7a>
 80052c2:	454c      	cmp	r4, r9
 80052c4:	d206      	bcs.n	80052d4 <__hexnan+0x64>
 80052c6:	2d07      	cmp	r5, #7
 80052c8:	dc04      	bgt.n	80052d4 <__hexnan+0x64>
 80052ca:	462a      	mov	r2, r5
 80052cc:	4649      	mov	r1, r9
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff ffa8 	bl	8005224 <L_shift>
 80052d4:	4544      	cmp	r4, r8
 80052d6:	d944      	bls.n	8005362 <__hexnan+0xf2>
 80052d8:	2300      	movs	r3, #0
 80052da:	f1a4 0904 	sub.w	r9, r4, #4
 80052de:	f844 3c04 	str.w	r3, [r4, #-4]
 80052e2:	f8cd b008 	str.w	fp, [sp, #8]
 80052e6:	464c      	mov	r4, r9
 80052e8:	461d      	mov	r5, r3
 80052ea:	9903      	ldr	r1, [sp, #12]
 80052ec:	e7d7      	b.n	800529e <__hexnan+0x2e>
 80052ee:	2a29      	cmp	r2, #41	; 0x29
 80052f0:	d14a      	bne.n	8005388 <__hexnan+0x118>
 80052f2:	3102      	adds	r1, #2
 80052f4:	f8ca 1000 	str.w	r1, [sl]
 80052f8:	f1bb 0f00 	cmp.w	fp, #0
 80052fc:	d044      	beq.n	8005388 <__hexnan+0x118>
 80052fe:	454c      	cmp	r4, r9
 8005300:	d206      	bcs.n	8005310 <__hexnan+0xa0>
 8005302:	2d07      	cmp	r5, #7
 8005304:	dc04      	bgt.n	8005310 <__hexnan+0xa0>
 8005306:	462a      	mov	r2, r5
 8005308:	4649      	mov	r1, r9
 800530a:	4620      	mov	r0, r4
 800530c:	f7ff ff8a 	bl	8005224 <L_shift>
 8005310:	4544      	cmp	r4, r8
 8005312:	d928      	bls.n	8005366 <__hexnan+0xf6>
 8005314:	4643      	mov	r3, r8
 8005316:	f854 2b04 	ldr.w	r2, [r4], #4
 800531a:	f843 2b04 	str.w	r2, [r3], #4
 800531e:	42a6      	cmp	r6, r4
 8005320:	d2f9      	bcs.n	8005316 <__hexnan+0xa6>
 8005322:	2200      	movs	r2, #0
 8005324:	f843 2b04 	str.w	r2, [r3], #4
 8005328:	429e      	cmp	r6, r3
 800532a:	d2fb      	bcs.n	8005324 <__hexnan+0xb4>
 800532c:	6833      	ldr	r3, [r6, #0]
 800532e:	b91b      	cbnz	r3, 8005338 <__hexnan+0xc8>
 8005330:	4546      	cmp	r6, r8
 8005332:	d127      	bne.n	8005384 <__hexnan+0x114>
 8005334:	2301      	movs	r3, #1
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	2005      	movs	r0, #5
 800533a:	e026      	b.n	800538a <__hexnan+0x11a>
 800533c:	3501      	adds	r5, #1
 800533e:	2d08      	cmp	r5, #8
 8005340:	f10b 0b01 	add.w	fp, fp, #1
 8005344:	dd06      	ble.n	8005354 <__hexnan+0xe4>
 8005346:	4544      	cmp	r4, r8
 8005348:	d9cf      	bls.n	80052ea <__hexnan+0x7a>
 800534a:	2300      	movs	r3, #0
 800534c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005350:	2501      	movs	r5, #1
 8005352:	3c04      	subs	r4, #4
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	f000 000f 	and.w	r0, r0, #15
 800535a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	e7c3      	b.n	80052ea <__hexnan+0x7a>
 8005362:	2508      	movs	r5, #8
 8005364:	e7c1      	b.n	80052ea <__hexnan+0x7a>
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0df      	beq.n	800532c <__hexnan+0xbc>
 800536c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005370:	f1c3 0320 	rsb	r3, r3, #32
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800537c:	401a      	ands	r2, r3
 800537e:	f847 2c04 	str.w	r2, [r7, #-4]
 8005382:	e7d3      	b.n	800532c <__hexnan+0xbc>
 8005384:	3e04      	subs	r6, #4
 8005386:	e7d1      	b.n	800532c <__hexnan+0xbc>
 8005388:	2004      	movs	r0, #4
 800538a:	b007      	add	sp, #28
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005390 <__locale_ctype_ptr_l>:
 8005390:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005394:	4770      	bx	lr
	...

08005398 <__locale_ctype_ptr>:
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <__locale_ctype_ptr+0x14>)
 800539a:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <__locale_ctype_ptr+0x18>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf08      	it	eq
 80053a4:	4613      	moveq	r3, r2
 80053a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80053aa:	4770      	bx	lr
 80053ac:	2000000c 	.word	0x2000000c
 80053b0:	20000070 	.word	0x20000070

080053b4 <__localeconv_l>:
 80053b4:	30f0      	adds	r0, #240	; 0xf0
 80053b6:	4770      	bx	lr

080053b8 <__ascii_mbtowc>:
 80053b8:	b082      	sub	sp, #8
 80053ba:	b901      	cbnz	r1, 80053be <__ascii_mbtowc+0x6>
 80053bc:	a901      	add	r1, sp, #4
 80053be:	b142      	cbz	r2, 80053d2 <__ascii_mbtowc+0x1a>
 80053c0:	b14b      	cbz	r3, 80053d6 <__ascii_mbtowc+0x1e>
 80053c2:	7813      	ldrb	r3, [r2, #0]
 80053c4:	600b      	str	r3, [r1, #0]
 80053c6:	7812      	ldrb	r2, [r2, #0]
 80053c8:	1c10      	adds	r0, r2, #0
 80053ca:	bf18      	it	ne
 80053cc:	2001      	movne	r0, #1
 80053ce:	b002      	add	sp, #8
 80053d0:	4770      	bx	lr
 80053d2:	4610      	mov	r0, r2
 80053d4:	e7fb      	b.n	80053ce <__ascii_mbtowc+0x16>
 80053d6:	f06f 0001 	mvn.w	r0, #1
 80053da:	e7f8      	b.n	80053ce <__ascii_mbtowc+0x16>

080053dc <memcpy>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	1e43      	subs	r3, r0, #1
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	d100      	bne.n	80053e8 <memcpy+0xc>
 80053e6:	bd10      	pop	{r4, pc}
 80053e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f0:	e7f7      	b.n	80053e2 <memcpy+0x6>

080053f2 <_Balloc>:
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053f6:	4604      	mov	r4, r0
 80053f8:	460e      	mov	r6, r1
 80053fa:	b93d      	cbnz	r5, 800540c <_Balloc+0x1a>
 80053fc:	2010      	movs	r0, #16
 80053fe:	f001 fb51 	bl	8006aa4 <malloc>
 8005402:	6260      	str	r0, [r4, #36]	; 0x24
 8005404:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005408:	6005      	str	r5, [r0, #0]
 800540a:	60c5      	str	r5, [r0, #12]
 800540c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800540e:	68eb      	ldr	r3, [r5, #12]
 8005410:	b183      	cbz	r3, 8005434 <_Balloc+0x42>
 8005412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800541a:	b9b8      	cbnz	r0, 800544c <_Balloc+0x5a>
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f506 	lsl.w	r5, r1, r6
 8005422:	1d6a      	adds	r2, r5, #5
 8005424:	0092      	lsls	r2, r2, #2
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fbe1 	bl	8005bee <_calloc_r>
 800542c:	b160      	cbz	r0, 8005448 <_Balloc+0x56>
 800542e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005432:	e00e      	b.n	8005452 <_Balloc+0x60>
 8005434:	2221      	movs	r2, #33	; 0x21
 8005436:	2104      	movs	r1, #4
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fbd8 	bl	8005bee <_calloc_r>
 800543e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005440:	60e8      	str	r0, [r5, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e4      	bne.n	8005412 <_Balloc+0x20>
 8005448:	2000      	movs	r0, #0
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	6802      	ldr	r2, [r0, #0]
 800544e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005452:	2300      	movs	r3, #0
 8005454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005458:	e7f7      	b.n	800544a <_Balloc+0x58>

0800545a <_Bfree>:
 800545a:	b570      	push	{r4, r5, r6, lr}
 800545c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800545e:	4606      	mov	r6, r0
 8005460:	460d      	mov	r5, r1
 8005462:	b93c      	cbnz	r4, 8005474 <_Bfree+0x1a>
 8005464:	2010      	movs	r0, #16
 8005466:	f001 fb1d 	bl	8006aa4 <malloc>
 800546a:	6270      	str	r0, [r6, #36]	; 0x24
 800546c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005470:	6004      	str	r4, [r0, #0]
 8005472:	60c4      	str	r4, [r0, #12]
 8005474:	b13d      	cbz	r5, 8005486 <_Bfree+0x2c>
 8005476:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005478:	686a      	ldr	r2, [r5, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005480:	6029      	str	r1, [r5, #0]
 8005482:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005486:	bd70      	pop	{r4, r5, r6, pc}

08005488 <__multadd>:
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	690d      	ldr	r5, [r1, #16]
 800548e:	461f      	mov	r7, r3
 8005490:	4606      	mov	r6, r0
 8005492:	460c      	mov	r4, r1
 8005494:	f101 0c14 	add.w	ip, r1, #20
 8005498:	2300      	movs	r3, #0
 800549a:	f8dc 0000 	ldr.w	r0, [ip]
 800549e:	b281      	uxth	r1, r0
 80054a0:	fb02 7101 	mla	r1, r2, r1, r7
 80054a4:	0c0f      	lsrs	r7, r1, #16
 80054a6:	0c00      	lsrs	r0, r0, #16
 80054a8:	fb02 7000 	mla	r0, r2, r0, r7
 80054ac:	b289      	uxth	r1, r1
 80054ae:	3301      	adds	r3, #1
 80054b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80054b4:	429d      	cmp	r5, r3
 80054b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80054ba:	f84c 1b04 	str.w	r1, [ip], #4
 80054be:	dcec      	bgt.n	800549a <__multadd+0x12>
 80054c0:	b1d7      	cbz	r7, 80054f8 <__multadd+0x70>
 80054c2:	68a3      	ldr	r3, [r4, #8]
 80054c4:	42ab      	cmp	r3, r5
 80054c6:	dc12      	bgt.n	80054ee <__multadd+0x66>
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4630      	mov	r0, r6
 80054cc:	3101      	adds	r1, #1
 80054ce:	f7ff ff90 	bl	80053f2 <_Balloc>
 80054d2:	6922      	ldr	r2, [r4, #16]
 80054d4:	3202      	adds	r2, #2
 80054d6:	f104 010c 	add.w	r1, r4, #12
 80054da:	4680      	mov	r8, r0
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	300c      	adds	r0, #12
 80054e0:	f7ff ff7c 	bl	80053dc <memcpy>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ffb7 	bl	800545a <_Bfree>
 80054ec:	4644      	mov	r4, r8
 80054ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054f2:	3501      	adds	r5, #1
 80054f4:	615f      	str	r7, [r3, #20]
 80054f6:	6125      	str	r5, [r4, #16]
 80054f8:	4620      	mov	r0, r4
 80054fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054fe <__s2b>:
 80054fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	4615      	mov	r5, r2
 8005506:	461f      	mov	r7, r3
 8005508:	2209      	movs	r2, #9
 800550a:	3308      	adds	r3, #8
 800550c:	4606      	mov	r6, r0
 800550e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005512:	2100      	movs	r1, #0
 8005514:	2201      	movs	r2, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	db20      	blt.n	800555c <__s2b+0x5e>
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ff69 	bl	80053f2 <_Balloc>
 8005520:	9b08      	ldr	r3, [sp, #32]
 8005522:	6143      	str	r3, [r0, #20]
 8005524:	2d09      	cmp	r5, #9
 8005526:	f04f 0301 	mov.w	r3, #1
 800552a:	6103      	str	r3, [r0, #16]
 800552c:	dd19      	ble.n	8005562 <__s2b+0x64>
 800552e:	f104 0809 	add.w	r8, r4, #9
 8005532:	46c1      	mov	r9, r8
 8005534:	442c      	add	r4, r5
 8005536:	f819 3b01 	ldrb.w	r3, [r9], #1
 800553a:	4601      	mov	r1, r0
 800553c:	3b30      	subs	r3, #48	; 0x30
 800553e:	220a      	movs	r2, #10
 8005540:	4630      	mov	r0, r6
 8005542:	f7ff ffa1 	bl	8005488 <__multadd>
 8005546:	45a1      	cmp	r9, r4
 8005548:	d1f5      	bne.n	8005536 <__s2b+0x38>
 800554a:	eb08 0405 	add.w	r4, r8, r5
 800554e:	3c08      	subs	r4, #8
 8005550:	1b2d      	subs	r5, r5, r4
 8005552:	1963      	adds	r3, r4, r5
 8005554:	42bb      	cmp	r3, r7
 8005556:	db07      	blt.n	8005568 <__s2b+0x6a>
 8005558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	3101      	adds	r1, #1
 8005560:	e7d9      	b.n	8005516 <__s2b+0x18>
 8005562:	340a      	adds	r4, #10
 8005564:	2509      	movs	r5, #9
 8005566:	e7f3      	b.n	8005550 <__s2b+0x52>
 8005568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800556c:	4601      	mov	r1, r0
 800556e:	3b30      	subs	r3, #48	; 0x30
 8005570:	220a      	movs	r2, #10
 8005572:	4630      	mov	r0, r6
 8005574:	f7ff ff88 	bl	8005488 <__multadd>
 8005578:	e7eb      	b.n	8005552 <__s2b+0x54>

0800557a <__hi0bits>:
 800557a:	0c02      	lsrs	r2, r0, #16
 800557c:	0412      	lsls	r2, r2, #16
 800557e:	4603      	mov	r3, r0
 8005580:	b9b2      	cbnz	r2, 80055b0 <__hi0bits+0x36>
 8005582:	0403      	lsls	r3, r0, #16
 8005584:	2010      	movs	r0, #16
 8005586:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800558a:	bf04      	itt	eq
 800558c:	021b      	lsleq	r3, r3, #8
 800558e:	3008      	addeq	r0, #8
 8005590:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005594:	bf04      	itt	eq
 8005596:	011b      	lsleq	r3, r3, #4
 8005598:	3004      	addeq	r0, #4
 800559a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800559e:	bf04      	itt	eq
 80055a0:	009b      	lsleq	r3, r3, #2
 80055a2:	3002      	addeq	r0, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db06      	blt.n	80055b6 <__hi0bits+0x3c>
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	d503      	bpl.n	80055b4 <__hi0bits+0x3a>
 80055ac:	3001      	adds	r0, #1
 80055ae:	4770      	bx	lr
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7e8      	b.n	8005586 <__hi0bits+0xc>
 80055b4:	2020      	movs	r0, #32
 80055b6:	4770      	bx	lr

080055b8 <__lo0bits>:
 80055b8:	6803      	ldr	r3, [r0, #0]
 80055ba:	f013 0207 	ands.w	r2, r3, #7
 80055be:	4601      	mov	r1, r0
 80055c0:	d00b      	beq.n	80055da <__lo0bits+0x22>
 80055c2:	07da      	lsls	r2, r3, #31
 80055c4:	d423      	bmi.n	800560e <__lo0bits+0x56>
 80055c6:	0798      	lsls	r0, r3, #30
 80055c8:	bf49      	itett	mi
 80055ca:	085b      	lsrmi	r3, r3, #1
 80055cc:	089b      	lsrpl	r3, r3, #2
 80055ce:	2001      	movmi	r0, #1
 80055d0:	600b      	strmi	r3, [r1, #0]
 80055d2:	bf5c      	itt	pl
 80055d4:	600b      	strpl	r3, [r1, #0]
 80055d6:	2002      	movpl	r0, #2
 80055d8:	4770      	bx	lr
 80055da:	b298      	uxth	r0, r3
 80055dc:	b9a8      	cbnz	r0, 800560a <__lo0bits+0x52>
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	2010      	movs	r0, #16
 80055e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055e6:	bf04      	itt	eq
 80055e8:	0a1b      	lsreq	r3, r3, #8
 80055ea:	3008      	addeq	r0, #8
 80055ec:	071a      	lsls	r2, r3, #28
 80055ee:	bf04      	itt	eq
 80055f0:	091b      	lsreq	r3, r3, #4
 80055f2:	3004      	addeq	r0, #4
 80055f4:	079a      	lsls	r2, r3, #30
 80055f6:	bf04      	itt	eq
 80055f8:	089b      	lsreq	r3, r3, #2
 80055fa:	3002      	addeq	r0, #2
 80055fc:	07da      	lsls	r2, r3, #31
 80055fe:	d402      	bmi.n	8005606 <__lo0bits+0x4e>
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	d006      	beq.n	8005612 <__lo0bits+0x5a>
 8005604:	3001      	adds	r0, #1
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	4770      	bx	lr
 800560a:	4610      	mov	r0, r2
 800560c:	e7e9      	b.n	80055e2 <__lo0bits+0x2a>
 800560e:	2000      	movs	r0, #0
 8005610:	4770      	bx	lr
 8005612:	2020      	movs	r0, #32
 8005614:	4770      	bx	lr

08005616 <__i2b>:
 8005616:	b510      	push	{r4, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	2101      	movs	r1, #1
 800561c:	f7ff fee9 	bl	80053f2 <_Balloc>
 8005620:	2201      	movs	r2, #1
 8005622:	6144      	str	r4, [r0, #20]
 8005624:	6102      	str	r2, [r0, #16]
 8005626:	bd10      	pop	{r4, pc}

08005628 <__multiply>:
 8005628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	4614      	mov	r4, r2
 800562e:	690a      	ldr	r2, [r1, #16]
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	bfb8      	it	lt
 8005636:	460b      	movlt	r3, r1
 8005638:	4688      	mov	r8, r1
 800563a:	bfbc      	itt	lt
 800563c:	46a0      	movlt	r8, r4
 800563e:	461c      	movlt	r4, r3
 8005640:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005644:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005648:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800564c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005650:	eb07 0609 	add.w	r6, r7, r9
 8005654:	42b3      	cmp	r3, r6
 8005656:	bfb8      	it	lt
 8005658:	3101      	addlt	r1, #1
 800565a:	f7ff feca 	bl	80053f2 <_Balloc>
 800565e:	f100 0514 	add.w	r5, r0, #20
 8005662:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005666:	462b      	mov	r3, r5
 8005668:	2200      	movs	r2, #0
 800566a:	4573      	cmp	r3, lr
 800566c:	d316      	bcc.n	800569c <__multiply+0x74>
 800566e:	f104 0214 	add.w	r2, r4, #20
 8005672:	f108 0114 	add.w	r1, r8, #20
 8005676:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800567a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	9b00      	ldr	r3, [sp, #0]
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	4293      	cmp	r3, r2
 8005686:	d80c      	bhi.n	80056a2 <__multiply+0x7a>
 8005688:	2e00      	cmp	r6, #0
 800568a:	dd03      	ble.n	8005694 <__multiply+0x6c>
 800568c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005690:	2b00      	cmp	r3, #0
 8005692:	d05d      	beq.n	8005750 <__multiply+0x128>
 8005694:	6106      	str	r6, [r0, #16]
 8005696:	b003      	add	sp, #12
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	f843 2b04 	str.w	r2, [r3], #4
 80056a0:	e7e3      	b.n	800566a <__multiply+0x42>
 80056a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80056a6:	f1bb 0f00 	cmp.w	fp, #0
 80056aa:	d023      	beq.n	80056f4 <__multiply+0xcc>
 80056ac:	4689      	mov	r9, r1
 80056ae:	46ac      	mov	ip, r5
 80056b0:	f04f 0800 	mov.w	r8, #0
 80056b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80056b8:	f8dc a000 	ldr.w	sl, [ip]
 80056bc:	b2a3      	uxth	r3, r4
 80056be:	fa1f fa8a 	uxth.w	sl, sl
 80056c2:	fb0b a303 	mla	r3, fp, r3, sl
 80056c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80056ca:	f8dc 4000 	ldr.w	r4, [ip]
 80056ce:	4443      	add	r3, r8
 80056d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80056d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80056d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80056dc:	46e2      	mov	sl, ip
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80056e4:	454f      	cmp	r7, r9
 80056e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80056ea:	f84a 3b04 	str.w	r3, [sl], #4
 80056ee:	d82b      	bhi.n	8005748 <__multiply+0x120>
 80056f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80056f4:	9b01      	ldr	r3, [sp, #4]
 80056f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80056fa:	3204      	adds	r2, #4
 80056fc:	f1ba 0f00 	cmp.w	sl, #0
 8005700:	d020      	beq.n	8005744 <__multiply+0x11c>
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	4689      	mov	r9, r1
 8005706:	46a8      	mov	r8, r5
 8005708:	f04f 0b00 	mov.w	fp, #0
 800570c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005710:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005714:	fb0a 440c 	mla	r4, sl, ip, r4
 8005718:	445c      	add	r4, fp
 800571a:	46c4      	mov	ip, r8
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005722:	f84c 3b04 	str.w	r3, [ip], #4
 8005726:	f859 3b04 	ldr.w	r3, [r9], #4
 800572a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	fb0a b303 	mla	r3, sl, r3, fp
 8005734:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005738:	454f      	cmp	r7, r9
 800573a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800573e:	d805      	bhi.n	800574c <__multiply+0x124>
 8005740:	f8c8 3004 	str.w	r3, [r8, #4]
 8005744:	3504      	adds	r5, #4
 8005746:	e79b      	b.n	8005680 <__multiply+0x58>
 8005748:	46d4      	mov	ip, sl
 800574a:	e7b3      	b.n	80056b4 <__multiply+0x8c>
 800574c:	46e0      	mov	r8, ip
 800574e:	e7dd      	b.n	800570c <__multiply+0xe4>
 8005750:	3e01      	subs	r6, #1
 8005752:	e799      	b.n	8005688 <__multiply+0x60>

08005754 <__pow5mult>:
 8005754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005758:	4615      	mov	r5, r2
 800575a:	f012 0203 	ands.w	r2, r2, #3
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	d007      	beq.n	8005774 <__pow5mult+0x20>
 8005764:	3a01      	subs	r2, #1
 8005766:	4c21      	ldr	r4, [pc, #132]	; (80057ec <__pow5mult+0x98>)
 8005768:	2300      	movs	r3, #0
 800576a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800576e:	f7ff fe8b 	bl	8005488 <__multadd>
 8005772:	4607      	mov	r7, r0
 8005774:	10ad      	asrs	r5, r5, #2
 8005776:	d035      	beq.n	80057e4 <__pow5mult+0x90>
 8005778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800577a:	b93c      	cbnz	r4, 800578c <__pow5mult+0x38>
 800577c:	2010      	movs	r0, #16
 800577e:	f001 f991 	bl	8006aa4 <malloc>
 8005782:	6270      	str	r0, [r6, #36]	; 0x24
 8005784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005788:	6004      	str	r4, [r0, #0]
 800578a:	60c4      	str	r4, [r0, #12]
 800578c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005794:	b94c      	cbnz	r4, 80057aa <__pow5mult+0x56>
 8005796:	f240 2171 	movw	r1, #625	; 0x271
 800579a:	4630      	mov	r0, r6
 800579c:	f7ff ff3b 	bl	8005616 <__i2b>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80057a6:	4604      	mov	r4, r0
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	07eb      	lsls	r3, r5, #31
 80057b0:	d50a      	bpl.n	80057c8 <__pow5mult+0x74>
 80057b2:	4639      	mov	r1, r7
 80057b4:	4622      	mov	r2, r4
 80057b6:	4630      	mov	r0, r6
 80057b8:	f7ff ff36 	bl	8005628 <__multiply>
 80057bc:	4639      	mov	r1, r7
 80057be:	4681      	mov	r9, r0
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff fe4a 	bl	800545a <_Bfree>
 80057c6:	464f      	mov	r7, r9
 80057c8:	106d      	asrs	r5, r5, #1
 80057ca:	d00b      	beq.n	80057e4 <__pow5mult+0x90>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	b938      	cbnz	r0, 80057e0 <__pow5mult+0x8c>
 80057d0:	4622      	mov	r2, r4
 80057d2:	4621      	mov	r1, r4
 80057d4:	4630      	mov	r0, r6
 80057d6:	f7ff ff27 	bl	8005628 <__multiply>
 80057da:	6020      	str	r0, [r4, #0]
 80057dc:	f8c0 8000 	str.w	r8, [r0]
 80057e0:	4604      	mov	r4, r0
 80057e2:	e7e4      	b.n	80057ae <__pow5mult+0x5a>
 80057e4:	4638      	mov	r0, r7
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ea:	bf00      	nop
 80057ec:	08006e58 	.word	0x08006e58

080057f0 <__lshift>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	460c      	mov	r4, r1
 80057f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	6849      	ldr	r1, [r1, #4]
 80057fe:	eb0a 0903 	add.w	r9, sl, r3
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	4607      	mov	r7, r0
 8005806:	4616      	mov	r6, r2
 8005808:	f109 0501 	add.w	r5, r9, #1
 800580c:	42ab      	cmp	r3, r5
 800580e:	db32      	blt.n	8005876 <__lshift+0x86>
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff fdee 	bl	80053f2 <_Balloc>
 8005816:	2300      	movs	r3, #0
 8005818:	4680      	mov	r8, r0
 800581a:	f100 0114 	add.w	r1, r0, #20
 800581e:	461a      	mov	r2, r3
 8005820:	4553      	cmp	r3, sl
 8005822:	db2b      	blt.n	800587c <__lshift+0x8c>
 8005824:	6920      	ldr	r0, [r4, #16]
 8005826:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800582a:	f104 0314 	add.w	r3, r4, #20
 800582e:	f016 021f 	ands.w	r2, r6, #31
 8005832:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005836:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800583a:	d025      	beq.n	8005888 <__lshift+0x98>
 800583c:	f1c2 0e20 	rsb	lr, r2, #32
 8005840:	2000      	movs	r0, #0
 8005842:	681e      	ldr	r6, [r3, #0]
 8005844:	468a      	mov	sl, r1
 8005846:	4096      	lsls	r6, r2
 8005848:	4330      	orrs	r0, r6
 800584a:	f84a 0b04 	str.w	r0, [sl], #4
 800584e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005852:	459c      	cmp	ip, r3
 8005854:	fa20 f00e 	lsr.w	r0, r0, lr
 8005858:	d814      	bhi.n	8005884 <__lshift+0x94>
 800585a:	6048      	str	r0, [r1, #4]
 800585c:	b108      	cbz	r0, 8005862 <__lshift+0x72>
 800585e:	f109 0502 	add.w	r5, r9, #2
 8005862:	3d01      	subs	r5, #1
 8005864:	4638      	mov	r0, r7
 8005866:	f8c8 5010 	str.w	r5, [r8, #16]
 800586a:	4621      	mov	r1, r4
 800586c:	f7ff fdf5 	bl	800545a <_Bfree>
 8005870:	4640      	mov	r0, r8
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	3101      	adds	r1, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	e7c7      	b.n	800580c <__lshift+0x1c>
 800587c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005880:	3301      	adds	r3, #1
 8005882:	e7cd      	b.n	8005820 <__lshift+0x30>
 8005884:	4651      	mov	r1, sl
 8005886:	e7dc      	b.n	8005842 <__lshift+0x52>
 8005888:	3904      	subs	r1, #4
 800588a:	f853 2b04 	ldr.w	r2, [r3], #4
 800588e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005892:	459c      	cmp	ip, r3
 8005894:	d8f9      	bhi.n	800588a <__lshift+0x9a>
 8005896:	e7e4      	b.n	8005862 <__lshift+0x72>

08005898 <__mcmp>:
 8005898:	6903      	ldr	r3, [r0, #16]
 800589a:	690a      	ldr	r2, [r1, #16]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	b530      	push	{r4, r5, lr}
 80058a0:	d10c      	bne.n	80058bc <__mcmp+0x24>
 80058a2:	0092      	lsls	r2, r2, #2
 80058a4:	3014      	adds	r0, #20
 80058a6:	3114      	adds	r1, #20
 80058a8:	1884      	adds	r4, r0, r2
 80058aa:	4411      	add	r1, r2
 80058ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058b4:	4295      	cmp	r5, r2
 80058b6:	d003      	beq.n	80058c0 <__mcmp+0x28>
 80058b8:	d305      	bcc.n	80058c6 <__mcmp+0x2e>
 80058ba:	2301      	movs	r3, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	bd30      	pop	{r4, r5, pc}
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d3f3      	bcc.n	80058ac <__mcmp+0x14>
 80058c4:	e7fa      	b.n	80058bc <__mcmp+0x24>
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ca:	e7f7      	b.n	80058bc <__mcmp+0x24>

080058cc <__mdiff>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	460d      	mov	r5, r1
 80058d2:	4607      	mov	r7, r0
 80058d4:	4611      	mov	r1, r2
 80058d6:	4628      	mov	r0, r5
 80058d8:	4614      	mov	r4, r2
 80058da:	f7ff ffdd 	bl	8005898 <__mcmp>
 80058de:	1e06      	subs	r6, r0, #0
 80058e0:	d108      	bne.n	80058f4 <__mdiff+0x28>
 80058e2:	4631      	mov	r1, r6
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7ff fd84 	bl	80053f2 <_Balloc>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	bfa4      	itt	ge
 80058f6:	4623      	movge	r3, r4
 80058f8:	462c      	movge	r4, r5
 80058fa:	4638      	mov	r0, r7
 80058fc:	6861      	ldr	r1, [r4, #4]
 80058fe:	bfa6      	itte	ge
 8005900:	461d      	movge	r5, r3
 8005902:	2600      	movge	r6, #0
 8005904:	2601      	movlt	r6, #1
 8005906:	f7ff fd74 	bl	80053f2 <_Balloc>
 800590a:	692b      	ldr	r3, [r5, #16]
 800590c:	60c6      	str	r6, [r0, #12]
 800590e:	6926      	ldr	r6, [r4, #16]
 8005910:	f105 0914 	add.w	r9, r5, #20
 8005914:	f104 0214 	add.w	r2, r4, #20
 8005918:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800591c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005920:	f100 0514 	add.w	r5, r0, #20
 8005924:	f04f 0e00 	mov.w	lr, #0
 8005928:	f852 ab04 	ldr.w	sl, [r2], #4
 800592c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005930:	fa1e f18a 	uxtah	r1, lr, sl
 8005934:	b2a3      	uxth	r3, r4
 8005936:	1ac9      	subs	r1, r1, r3
 8005938:	0c23      	lsrs	r3, r4, #16
 800593a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800593e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005942:	b289      	uxth	r1, r1
 8005944:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005948:	45c8      	cmp	r8, r9
 800594a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800594e:	4694      	mov	ip, r2
 8005950:	f845 3b04 	str.w	r3, [r5], #4
 8005954:	d8e8      	bhi.n	8005928 <__mdiff+0x5c>
 8005956:	45bc      	cmp	ip, r7
 8005958:	d304      	bcc.n	8005964 <__mdiff+0x98>
 800595a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800595e:	b183      	cbz	r3, 8005982 <__mdiff+0xb6>
 8005960:	6106      	str	r6, [r0, #16]
 8005962:	e7c5      	b.n	80058f0 <__mdiff+0x24>
 8005964:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005968:	fa1e f381 	uxtah	r3, lr, r1
 800596c:	141a      	asrs	r2, r3, #16
 800596e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005978:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800597c:	f845 3b04 	str.w	r3, [r5], #4
 8005980:	e7e9      	b.n	8005956 <__mdiff+0x8a>
 8005982:	3e01      	subs	r6, #1
 8005984:	e7e9      	b.n	800595a <__mdiff+0x8e>
	...

08005988 <__ulp>:
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <__ulp+0x4c>)
 800598a:	ee10 2a90 	vmov	r2, s1
 800598e:	401a      	ands	r2, r3
 8005990:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd04      	ble.n	80059a2 <__ulp+0x1a>
 8005998:	2000      	movs	r0, #0
 800599a:	4619      	mov	r1, r3
 800599c:	ec41 0b10 	vmov	d0, r0, r1
 80059a0:	4770      	bx	lr
 80059a2:	425b      	negs	r3, r3
 80059a4:	151b      	asrs	r3, r3, #20
 80059a6:	2b13      	cmp	r3, #19
 80059a8:	f04f 0000 	mov.w	r0, #0
 80059ac:	f04f 0100 	mov.w	r1, #0
 80059b0:	dc04      	bgt.n	80059bc <__ulp+0x34>
 80059b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80059b6:	fa42 f103 	asr.w	r1, r2, r3
 80059ba:	e7ef      	b.n	800599c <__ulp+0x14>
 80059bc:	3b14      	subs	r3, #20
 80059be:	2b1e      	cmp	r3, #30
 80059c0:	f04f 0201 	mov.w	r2, #1
 80059c4:	bfda      	itte	le
 80059c6:	f1c3 031f 	rsble	r3, r3, #31
 80059ca:	fa02 f303 	lslle.w	r3, r2, r3
 80059ce:	4613      	movgt	r3, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	e7e3      	b.n	800599c <__ulp+0x14>
 80059d4:	7ff00000 	.word	0x7ff00000

080059d8 <__b2d>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	6905      	ldr	r5, [r0, #16]
 80059dc:	f100 0714 	add.w	r7, r0, #20
 80059e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80059e4:	1f2e      	subs	r6, r5, #4
 80059e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff fdc5 	bl	800557a <__hi0bits>
 80059f0:	f1c0 0320 	rsb	r3, r0, #32
 80059f4:	280a      	cmp	r0, #10
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005a70 <__b2d+0x98>
 80059fc:	dc14      	bgt.n	8005a28 <__b2d+0x50>
 80059fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8005a02:	fa24 f10e 	lsr.w	r1, r4, lr
 8005a06:	42b7      	cmp	r7, r6
 8005a08:	ea41 030c 	orr.w	r3, r1, ip
 8005a0c:	bf34      	ite	cc
 8005a0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005a12:	2100      	movcs	r1, #0
 8005a14:	3015      	adds	r0, #21
 8005a16:	fa04 f000 	lsl.w	r0, r4, r0
 8005a1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8005a1e:	ea40 0201 	orr.w	r2, r0, r1
 8005a22:	ec43 2b10 	vmov	d0, r2, r3
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a28:	42b7      	cmp	r7, r6
 8005a2a:	bf3a      	itte	cc
 8005a2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8005a30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005a34:	2100      	movcs	r1, #0
 8005a36:	380b      	subs	r0, #11
 8005a38:	d015      	beq.n	8005a66 <__b2d+0x8e>
 8005a3a:	4084      	lsls	r4, r0
 8005a3c:	f1c0 0520 	rsb	r5, r0, #32
 8005a40:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8005a44:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8005a48:	42be      	cmp	r6, r7
 8005a4a:	fa21 fc05 	lsr.w	ip, r1, r5
 8005a4e:	ea44 030c 	orr.w	r3, r4, ip
 8005a52:	bf8c      	ite	hi
 8005a54:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005a58:	2400      	movls	r4, #0
 8005a5a:	fa01 f000 	lsl.w	r0, r1, r0
 8005a5e:	40ec      	lsrs	r4, r5
 8005a60:	ea40 0204 	orr.w	r2, r0, r4
 8005a64:	e7dd      	b.n	8005a22 <__b2d+0x4a>
 8005a66:	ea44 030c 	orr.w	r3, r4, ip
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	e7d9      	b.n	8005a22 <__b2d+0x4a>
 8005a6e:	bf00      	nop
 8005a70:	3ff00000 	.word	0x3ff00000

08005a74 <__d2b>:
 8005a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	460e      	mov	r6, r1
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	ec59 8b10 	vmov	r8, r9, d0
 8005a80:	4615      	mov	r5, r2
 8005a82:	f7ff fcb6 	bl	80053f2 <_Balloc>
 8005a86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a90:	bb34      	cbnz	r4, 8005ae0 <__d2b+0x6c>
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	f1b8 0300 	subs.w	r3, r8, #0
 8005a98:	d027      	beq.n	8005aea <__d2b+0x76>
 8005a9a:	a802      	add	r0, sp, #8
 8005a9c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005aa0:	f7ff fd8a 	bl	80055b8 <__lo0bits>
 8005aa4:	9900      	ldr	r1, [sp, #0]
 8005aa6:	b1f0      	cbz	r0, 8005ae6 <__d2b+0x72>
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	f1c0 0320 	rsb	r3, r0, #32
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	40c2      	lsrs	r2, r0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	9201      	str	r2, [sp, #4]
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2102      	movne	r1, #2
 8005ac4:	2101      	moveq	r1, #1
 8005ac6:	6139      	str	r1, [r7, #16]
 8005ac8:	b1c4      	cbz	r4, 8005afc <__d2b+0x88>
 8005aca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005ace:	4404      	add	r4, r0
 8005ad0:	6034      	str	r4, [r6, #0]
 8005ad2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ad6:	6028      	str	r0, [r5, #0]
 8005ad8:	4638      	mov	r0, r7
 8005ada:	b003      	add	sp, #12
 8005adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae4:	e7d5      	b.n	8005a92 <__d2b+0x1e>
 8005ae6:	6179      	str	r1, [r7, #20]
 8005ae8:	e7e7      	b.n	8005aba <__d2b+0x46>
 8005aea:	a801      	add	r0, sp, #4
 8005aec:	f7ff fd64 	bl	80055b8 <__lo0bits>
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	2101      	movs	r1, #1
 8005af6:	6139      	str	r1, [r7, #16]
 8005af8:	3020      	adds	r0, #32
 8005afa:	e7e5      	b.n	8005ac8 <__d2b+0x54>
 8005afc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005b00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b04:	6030      	str	r0, [r6, #0]
 8005b06:	6918      	ldr	r0, [r3, #16]
 8005b08:	f7ff fd37 	bl	800557a <__hi0bits>
 8005b0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005b10:	e7e1      	b.n	8005ad6 <__d2b+0x62>

08005b12 <__ratio>:
 8005b12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	4688      	mov	r8, r1
 8005b18:	4669      	mov	r1, sp
 8005b1a:	4681      	mov	r9, r0
 8005b1c:	f7ff ff5c 	bl	80059d8 <__b2d>
 8005b20:	a901      	add	r1, sp, #4
 8005b22:	4640      	mov	r0, r8
 8005b24:	ec57 6b10 	vmov	r6, r7, d0
 8005b28:	f7ff ff56 	bl	80059d8 <__b2d>
 8005b2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005b34:	eba3 0c02 	sub.w	ip, r3, r2
 8005b38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005b42:	ec5b ab10 	vmov	sl, fp, d0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfce      	itee	gt
 8005b4a:	463a      	movgt	r2, r7
 8005b4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005b50:	465a      	movle	r2, fp
 8005b52:	4659      	mov	r1, fp
 8005b54:	463d      	mov	r5, r7
 8005b56:	bfd4      	ite	le
 8005b58:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8005b5c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8005b60:	4630      	mov	r0, r6
 8005b62:	ee10 2a10 	vmov	r2, s0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fe77 	bl	800085c <__aeabi_ddiv>
 8005b6e:	ec41 0b10 	vmov	d0, r0, r1
 8005b72:	b003      	add	sp, #12
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b78 <__copybits>:
 8005b78:	3901      	subs	r1, #1
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	1149      	asrs	r1, r1, #5
 8005b7e:	6914      	ldr	r4, [r2, #16]
 8005b80:	3101      	adds	r1, #1
 8005b82:	f102 0314 	add.w	r3, r2, #20
 8005b86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	4602      	mov	r2, r0
 8005b92:	d303      	bcc.n	8005b9c <__copybits+0x24>
 8005b94:	2300      	movs	r3, #0
 8005b96:	428a      	cmp	r2, r1
 8005b98:	d305      	bcc.n	8005ba6 <__copybits+0x2e>
 8005b9a:	bd10      	pop	{r4, pc}
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	f840 2b04 	str.w	r2, [r0], #4
 8005ba4:	e7f3      	b.n	8005b8e <__copybits+0x16>
 8005ba6:	f842 3b04 	str.w	r3, [r2], #4
 8005baa:	e7f4      	b.n	8005b96 <__copybits+0x1e>

08005bac <__any_on>:
 8005bac:	f100 0214 	add.w	r2, r0, #20
 8005bb0:	6900      	ldr	r0, [r0, #16]
 8005bb2:	114b      	asrs	r3, r1, #5
 8005bb4:	4298      	cmp	r0, r3
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	db11      	blt.n	8005bde <__any_on+0x32>
 8005bba:	dd0a      	ble.n	8005bd2 <__any_on+0x26>
 8005bbc:	f011 011f 	ands.w	r1, r1, #31
 8005bc0:	d007      	beq.n	8005bd2 <__any_on+0x26>
 8005bc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005bc6:	fa24 f001 	lsr.w	r0, r4, r1
 8005bca:	fa00 f101 	lsl.w	r1, r0, r1
 8005bce:	428c      	cmp	r4, r1
 8005bd0:	d10b      	bne.n	8005bea <__any_on+0x3e>
 8005bd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d803      	bhi.n	8005be2 <__any_on+0x36>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	4603      	mov	r3, r0
 8005be0:	e7f7      	b.n	8005bd2 <__any_on+0x26>
 8005be2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005be6:	2900      	cmp	r1, #0
 8005be8:	d0f5      	beq.n	8005bd6 <__any_on+0x2a>
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7f6      	b.n	8005bdc <__any_on+0x30>

08005bee <_calloc_r>:
 8005bee:	b538      	push	{r3, r4, r5, lr}
 8005bf0:	fb02 f401 	mul.w	r4, r2, r1
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f000 f809 	bl	8005c0c <_malloc_r>
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	b118      	cbz	r0, 8005c06 <_calloc_r+0x18>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	2100      	movs	r1, #0
 8005c02:	f7fd ffa3 	bl	8003b4c <memset>
 8005c06:	4628      	mov	r0, r5
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
	...

08005c0c <_malloc_r>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	1ccd      	adds	r5, r1, #3
 8005c10:	f025 0503 	bic.w	r5, r5, #3
 8005c14:	3508      	adds	r5, #8
 8005c16:	2d0c      	cmp	r5, #12
 8005c18:	bf38      	it	cc
 8005c1a:	250c      	movcc	r5, #12
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	db01      	blt.n	8005c26 <_malloc_r+0x1a>
 8005c22:	42a9      	cmp	r1, r5
 8005c24:	d903      	bls.n	8005c2e <_malloc_r+0x22>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	f000 ff5a 	bl	8006ae6 <__malloc_lock>
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <_malloc_r+0xac>)
 8005c34:	6814      	ldr	r4, [r2, #0]
 8005c36:	4621      	mov	r1, r4
 8005c38:	b991      	cbnz	r1, 8005c60 <_malloc_r+0x54>
 8005c3a:	4c20      	ldr	r4, [pc, #128]	; (8005cbc <_malloc_r+0xb0>)
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	b91b      	cbnz	r3, 8005c48 <_malloc_r+0x3c>
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 fe19 	bl	8006878 <_sbrk_r>
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 fe14 	bl	8006878 <_sbrk_r>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d124      	bne.n	8005c9e <_malloc_r+0x92>
 8005c54:	230c      	movs	r3, #12
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 ff45 	bl	8006ae8 <__malloc_unlock>
 8005c5e:	e7e4      	b.n	8005c2a <_malloc_r+0x1e>
 8005c60:	680b      	ldr	r3, [r1, #0]
 8005c62:	1b5b      	subs	r3, r3, r5
 8005c64:	d418      	bmi.n	8005c98 <_malloc_r+0x8c>
 8005c66:	2b0b      	cmp	r3, #11
 8005c68:	d90f      	bls.n	8005c8a <_malloc_r+0x7e>
 8005c6a:	600b      	str	r3, [r1, #0]
 8005c6c:	50cd      	str	r5, [r1, r3]
 8005c6e:	18cc      	adds	r4, r1, r3
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 ff39 	bl	8006ae8 <__malloc_unlock>
 8005c76:	f104 000b 	add.w	r0, r4, #11
 8005c7a:	1d23      	adds	r3, r4, #4
 8005c7c:	f020 0007 	bic.w	r0, r0, #7
 8005c80:	1ac3      	subs	r3, r0, r3
 8005c82:	d0d3      	beq.n	8005c2c <_malloc_r+0x20>
 8005c84:	425a      	negs	r2, r3
 8005c86:	50e2      	str	r2, [r4, r3]
 8005c88:	e7d0      	b.n	8005c2c <_malloc_r+0x20>
 8005c8a:	428c      	cmp	r4, r1
 8005c8c:	684b      	ldr	r3, [r1, #4]
 8005c8e:	bf16      	itet	ne
 8005c90:	6063      	strne	r3, [r4, #4]
 8005c92:	6013      	streq	r3, [r2, #0]
 8005c94:	460c      	movne	r4, r1
 8005c96:	e7eb      	b.n	8005c70 <_malloc_r+0x64>
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6849      	ldr	r1, [r1, #4]
 8005c9c:	e7cc      	b.n	8005c38 <_malloc_r+0x2c>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d005      	beq.n	8005cb4 <_malloc_r+0xa8>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 fde4 	bl	8006878 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0cf      	beq.n	8005c54 <_malloc_r+0x48>
 8005cb4:	6025      	str	r5, [r4, #0]
 8005cb6:	e7db      	b.n	8005c70 <_malloc_r+0x64>
 8005cb8:	200001fc 	.word	0x200001fc
 8005cbc:	20000200 	.word	0x20000200

08005cc0 <__ssputs_r>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	688e      	ldr	r6, [r1, #8]
 8005cc6:	429e      	cmp	r6, r3
 8005cc8:	4682      	mov	sl, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	4690      	mov	r8, r2
 8005cce:	4699      	mov	r9, r3
 8005cd0:	d837      	bhi.n	8005d42 <__ssputs_r+0x82>
 8005cd2:	898a      	ldrh	r2, [r1, #12]
 8005cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cd8:	d031      	beq.n	8005d3e <__ssputs_r+0x7e>
 8005cda:	6825      	ldr	r5, [r4, #0]
 8005cdc:	6909      	ldr	r1, [r1, #16]
 8005cde:	1a6f      	subs	r7, r5, r1
 8005ce0:	6965      	ldr	r5, [r4, #20]
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ce8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cec:	f109 0301 	add.w	r3, r9, #1
 8005cf0:	443b      	add	r3, r7
 8005cf2:	429d      	cmp	r5, r3
 8005cf4:	bf38      	it	cc
 8005cf6:	461d      	movcc	r5, r3
 8005cf8:	0553      	lsls	r3, r2, #21
 8005cfa:	d530      	bpl.n	8005d5e <__ssputs_r+0x9e>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7ff ff85 	bl	8005c0c <_malloc_r>
 8005d02:	4606      	mov	r6, r0
 8005d04:	b950      	cbnz	r0, 8005d1c <__ssputs_r+0x5c>
 8005d06:	230c      	movs	r3, #12
 8005d08:	f8ca 3000 	str.w	r3, [sl]
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	6921      	ldr	r1, [r4, #16]
 8005d20:	f7ff fb5c 	bl	80053dc <memcpy>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	6126      	str	r6, [r4, #16]
 8005d32:	6165      	str	r5, [r4, #20]
 8005d34:	443e      	add	r6, r7
 8005d36:	1bed      	subs	r5, r5, r7
 8005d38:	6026      	str	r6, [r4, #0]
 8005d3a:	60a5      	str	r5, [r4, #8]
 8005d3c:	464e      	mov	r6, r9
 8005d3e:	454e      	cmp	r6, r9
 8005d40:	d900      	bls.n	8005d44 <__ssputs_r+0x84>
 8005d42:	464e      	mov	r6, r9
 8005d44:	4632      	mov	r2, r6
 8005d46:	4641      	mov	r1, r8
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	f000 feb3 	bl	8006ab4 <memmove>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	441e      	add	r6, r3
 8005d58:	6026      	str	r6, [r4, #0]
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e7dc      	b.n	8005d18 <__ssputs_r+0x58>
 8005d5e:	462a      	mov	r2, r5
 8005d60:	f000 ff12 	bl	8006b88 <_realloc_r>
 8005d64:	4606      	mov	r6, r0
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1e2      	bne.n	8005d30 <__ssputs_r+0x70>
 8005d6a:	6921      	ldr	r1, [r4, #16]
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	f000 febd 	bl	8006aec <_free_r>
 8005d72:	e7c8      	b.n	8005d06 <__ssputs_r+0x46>

08005d74 <_svfiprintf_r>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	461d      	mov	r5, r3
 8005d7a:	898b      	ldrh	r3, [r1, #12]
 8005d7c:	061f      	lsls	r7, r3, #24
 8005d7e:	b09d      	sub	sp, #116	; 0x74
 8005d80:	4680      	mov	r8, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4616      	mov	r6, r2
 8005d86:	d50f      	bpl.n	8005da8 <_svfiprintf_r+0x34>
 8005d88:	690b      	ldr	r3, [r1, #16]
 8005d8a:	b96b      	cbnz	r3, 8005da8 <_svfiprintf_r+0x34>
 8005d8c:	2140      	movs	r1, #64	; 0x40
 8005d8e:	f7ff ff3d 	bl	8005c0c <_malloc_r>
 8005d92:	6020      	str	r0, [r4, #0]
 8005d94:	6120      	str	r0, [r4, #16]
 8005d96:	b928      	cbnz	r0, 8005da4 <_svfiprintf_r+0x30>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	f8c8 3000 	str.w	r3, [r8]
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da2:	e0c8      	b.n	8005f36 <_svfiprintf_r+0x1c2>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	2300      	movs	r3, #0
 8005daa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dac:	2320      	movs	r3, #32
 8005dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005db8:	9503      	str	r5, [sp, #12]
 8005dba:	f04f 0b01 	mov.w	fp, #1
 8005dbe:	4637      	mov	r7, r6
 8005dc0:	463d      	mov	r5, r7
 8005dc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dc6:	b10b      	cbz	r3, 8005dcc <_svfiprintf_r+0x58>
 8005dc8:	2b25      	cmp	r3, #37	; 0x25
 8005dca:	d13e      	bne.n	8005e4a <_svfiprintf_r+0xd6>
 8005dcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005dd0:	d00b      	beq.n	8005dea <_svfiprintf_r+0x76>
 8005dd2:	4653      	mov	r3, sl
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4640      	mov	r0, r8
 8005dda:	f7ff ff71 	bl	8005cc0 <__ssputs_r>
 8005dde:	3001      	adds	r0, #1
 8005de0:	f000 80a4 	beq.w	8005f2c <_svfiprintf_r+0x1b8>
 8005de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de6:	4453      	add	r3, sl
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	783b      	ldrb	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 809d 	beq.w	8005f2c <_svfiprintf_r+0x1b8>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e04:	931a      	str	r3, [sp, #104]	; 0x68
 8005e06:	462f      	mov	r7, r5
 8005e08:	2205      	movs	r2, #5
 8005e0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e0e:	4850      	ldr	r0, [pc, #320]	; (8005f50 <_svfiprintf_r+0x1dc>)
 8005e10:	f7fa f9ee 	bl	80001f0 <memchr>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	b9d0      	cbnz	r0, 8005e4e <_svfiprintf_r+0xda>
 8005e18:	06d9      	lsls	r1, r3, #27
 8005e1a:	bf44      	itt	mi
 8005e1c:	2220      	movmi	r2, #32
 8005e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e22:	071a      	lsls	r2, r3, #28
 8005e24:	bf44      	itt	mi
 8005e26:	222b      	movmi	r2, #43	; 0x2b
 8005e28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e2c:	782a      	ldrb	r2, [r5, #0]
 8005e2e:	2a2a      	cmp	r2, #42	; 0x2a
 8005e30:	d015      	beq.n	8005e5e <_svfiprintf_r+0xea>
 8005e32:	9a07      	ldr	r2, [sp, #28]
 8005e34:	462f      	mov	r7, r5
 8005e36:	2000      	movs	r0, #0
 8005e38:	250a      	movs	r5, #10
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e40:	3b30      	subs	r3, #48	; 0x30
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d94d      	bls.n	8005ee2 <_svfiprintf_r+0x16e>
 8005e46:	b1b8      	cbz	r0, 8005e78 <_svfiprintf_r+0x104>
 8005e48:	e00f      	b.n	8005e6a <_svfiprintf_r+0xf6>
 8005e4a:	462f      	mov	r7, r5
 8005e4c:	e7b8      	b.n	8005dc0 <_svfiprintf_r+0x4c>
 8005e4e:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <_svfiprintf_r+0x1dc>)
 8005e50:	1a80      	subs	r0, r0, r2
 8005e52:	fa0b f000 	lsl.w	r0, fp, r0
 8005e56:	4318      	orrs	r0, r3
 8005e58:	9004      	str	r0, [sp, #16]
 8005e5a:	463d      	mov	r5, r7
 8005e5c:	e7d3      	b.n	8005e06 <_svfiprintf_r+0x92>
 8005e5e:	9a03      	ldr	r2, [sp, #12]
 8005e60:	1d11      	adds	r1, r2, #4
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	db01      	blt.n	8005e6e <_svfiprintf_r+0xfa>
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	e004      	b.n	8005e78 <_svfiprintf_r+0x104>
 8005e6e:	4252      	negs	r2, r2
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	9207      	str	r2, [sp, #28]
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	783b      	ldrb	r3, [r7, #0]
 8005e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7c:	d10c      	bne.n	8005e98 <_svfiprintf_r+0x124>
 8005e7e:	787b      	ldrb	r3, [r7, #1]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d133      	bne.n	8005eec <_svfiprintf_r+0x178>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	9203      	str	r2, [sp, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e94:	3702      	adds	r7, #2
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	4d2e      	ldr	r5, [pc, #184]	; (8005f54 <_svfiprintf_r+0x1e0>)
 8005e9a:	7839      	ldrb	r1, [r7, #0]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7fa f9a6 	bl	80001f0 <memchr>
 8005ea4:	b138      	cbz	r0, 8005eb6 <_svfiprintf_r+0x142>
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	1b40      	subs	r0, r0, r5
 8005eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	4303      	orrs	r3, r0
 8005eb2:	3701      	adds	r7, #1
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	7839      	ldrb	r1, [r7, #0]
 8005eb8:	4827      	ldr	r0, [pc, #156]	; (8005f58 <_svfiprintf_r+0x1e4>)
 8005eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ebe:	2206      	movs	r2, #6
 8005ec0:	1c7e      	adds	r6, r7, #1
 8005ec2:	f7fa f995 	bl	80001f0 <memchr>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d038      	beq.n	8005f3c <_svfiprintf_r+0x1c8>
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <_svfiprintf_r+0x1e8>)
 8005ecc:	bb13      	cbnz	r3, 8005f14 <_svfiprintf_r+0x1a0>
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	444b      	add	r3, r9
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	e76d      	b.n	8005dbe <_svfiprintf_r+0x4a>
 8005ee2:	fb05 3202 	mla	r2, r5, r2, r3
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	460f      	mov	r7, r1
 8005eea:	e7a6      	b.n	8005e3a <_svfiprintf_r+0xc6>
 8005eec:	2300      	movs	r3, #0
 8005eee:	3701      	adds	r7, #1
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	250a      	movs	r5, #10
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005efc:	3a30      	subs	r2, #48	; 0x30
 8005efe:	2a09      	cmp	r2, #9
 8005f00:	d903      	bls.n	8005f0a <_svfiprintf_r+0x196>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0c8      	beq.n	8005e98 <_svfiprintf_r+0x124>
 8005f06:	9105      	str	r1, [sp, #20]
 8005f08:	e7c6      	b.n	8005e98 <_svfiprintf_r+0x124>
 8005f0a:	fb05 2101 	mla	r1, r5, r1, r2
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4607      	mov	r7, r0
 8005f12:	e7f0      	b.n	8005ef6 <_svfiprintf_r+0x182>
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4622      	mov	r2, r4
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <_svfiprintf_r+0x1ec>)
 8005f1c:	a904      	add	r1, sp, #16
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f3af 8000 	nop.w
 8005f24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f28:	4681      	mov	r9, r0
 8005f2a:	d1d6      	bne.n	8005eda <_svfiprintf_r+0x166>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	065b      	lsls	r3, r3, #25
 8005f30:	f53f af35 	bmi.w	8005d9e <_svfiprintf_r+0x2a>
 8005f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f36:	b01d      	add	sp, #116	; 0x74
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4622      	mov	r2, r4
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <_svfiprintf_r+0x1ec>)
 8005f44:	a904      	add	r1, sp, #16
 8005f46:	4640      	mov	r0, r8
 8005f48:	f000 fa2c 	bl	80063a4 <_printf_i>
 8005f4c:	e7ea      	b.n	8005f24 <_svfiprintf_r+0x1b0>
 8005f4e:	bf00      	nop
 8005f50:	08006e64 	.word	0x08006e64
 8005f54:	08006e6a 	.word	0x08006e6a
 8005f58:	08006e6e 	.word	0x08006e6e
 8005f5c:	00000000 	.word	0x00000000
 8005f60:	08005cc1 	.word	0x08005cc1

08005f64 <_sungetc_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	1c4b      	adds	r3, r1, #1
 8005f68:	4614      	mov	r4, r2
 8005f6a:	d103      	bne.n	8005f74 <_sungetc_r+0x10>
 8005f6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f70:	4628      	mov	r0, r5
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	8993      	ldrh	r3, [r2, #12]
 8005f76:	f023 0320 	bic.w	r3, r3, #32
 8005f7a:	8193      	strh	r3, [r2, #12]
 8005f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f7e:	6852      	ldr	r2, [r2, #4]
 8005f80:	b2cd      	uxtb	r5, r1
 8005f82:	b18b      	cbz	r3, 8005fa8 <_sungetc_r+0x44>
 8005f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f86:	4293      	cmp	r3, r2
 8005f88:	dd08      	ble.n	8005f9c <_sungetc_r+0x38>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005f94:	6863      	ldr	r3, [r4, #4]
 8005f96:	3301      	adds	r3, #1
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	e7e9      	b.n	8005f70 <_sungetc_r+0xc>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	f000 fd39 	bl	8006a14 <__submore>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d0f1      	beq.n	8005f8a <_sungetc_r+0x26>
 8005fa6:	e7e1      	b.n	8005f6c <_sungetc_r+0x8>
 8005fa8:	6921      	ldr	r1, [r4, #16]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	b151      	cbz	r1, 8005fc4 <_sungetc_r+0x60>
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	d208      	bcs.n	8005fc4 <_sungetc_r+0x60>
 8005fb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005fb6:	42a9      	cmp	r1, r5
 8005fb8:	d104      	bne.n	8005fc4 <_sungetc_r+0x60>
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	3201      	adds	r2, #1
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	6062      	str	r2, [r4, #4]
 8005fc2:	e7d5      	b.n	8005f70 <_sungetc_r+0xc>
 8005fc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fce:	2303      	movs	r3, #3
 8005fd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e7dc      	b.n	8005f98 <_sungetc_r+0x34>

08005fde <__ssrefill_r>:
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005fe4:	b169      	cbz	r1, 8006002 <__ssrefill_r+0x24>
 8005fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fea:	4299      	cmp	r1, r3
 8005fec:	d001      	beq.n	8005ff2 <__ssrefill_r+0x14>
 8005fee:	f000 fd7d 	bl	8006aec <_free_r>
 8005ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8005ffa:	b113      	cbz	r3, 8006002 <__ssrefill_r+0x24>
 8005ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	bd10      	pop	{r4, pc}
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f043 0320 	orr.w	r3, r3, #32
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006016:	e7f3      	b.n	8006000 <__ssrefill_r+0x22>

08006018 <__ssvfiscanf_r>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006020:	460c      	mov	r4, r1
 8006022:	2100      	movs	r1, #0
 8006024:	9144      	str	r1, [sp, #272]	; 0x110
 8006026:	9145      	str	r1, [sp, #276]	; 0x114
 8006028:	499f      	ldr	r1, [pc, #636]	; (80062a8 <__ssvfiscanf_r+0x290>)
 800602a:	91a0      	str	r1, [sp, #640]	; 0x280
 800602c:	f10d 0804 	add.w	r8, sp, #4
 8006030:	499e      	ldr	r1, [pc, #632]	; (80062ac <__ssvfiscanf_r+0x294>)
 8006032:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80062b0 <__ssvfiscanf_r+0x298>
 8006036:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800603a:	4606      	mov	r6, r0
 800603c:	4692      	mov	sl, r2
 800603e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	270a      	movs	r7, #10
 8006044:	f89a 3000 	ldrb.w	r3, [sl]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 812a 	beq.w	80062a2 <__ssvfiscanf_r+0x28a>
 800604e:	4655      	mov	r5, sl
 8006050:	f7ff f9a2 	bl	8005398 <__locale_ctype_ptr>
 8006054:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006058:	4458      	add	r0, fp
 800605a:	7843      	ldrb	r3, [r0, #1]
 800605c:	f013 0308 	ands.w	r3, r3, #8
 8006060:	d01c      	beq.n	800609c <__ssvfiscanf_r+0x84>
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd12      	ble.n	800608e <__ssvfiscanf_r+0x76>
 8006068:	f7ff f996 	bl	8005398 <__locale_ctype_ptr>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	4410      	add	r0, r2
 8006072:	7842      	ldrb	r2, [r0, #1]
 8006074:	0712      	lsls	r2, r2, #28
 8006076:	d401      	bmi.n	800607c <__ssvfiscanf_r+0x64>
 8006078:	46aa      	mov	sl, r5
 800607a:	e7e3      	b.n	8006044 <__ssvfiscanf_r+0x2c>
 800607c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800607e:	3201      	adds	r2, #1
 8006080:	9245      	str	r2, [sp, #276]	; 0x114
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	3301      	adds	r3, #1
 8006086:	3a01      	subs	r2, #1
 8006088:	6062      	str	r2, [r4, #4]
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	e7e9      	b.n	8006062 <__ssvfiscanf_r+0x4a>
 800608e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006090:	4621      	mov	r1, r4
 8006092:	4630      	mov	r0, r6
 8006094:	4798      	blx	r3
 8006096:	2800      	cmp	r0, #0
 8006098:	d0e6      	beq.n	8006068 <__ssvfiscanf_r+0x50>
 800609a:	e7ed      	b.n	8006078 <__ssvfiscanf_r+0x60>
 800609c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80060a0:	f040 8082 	bne.w	80061a8 <__ssvfiscanf_r+0x190>
 80060a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80060a6:	9341      	str	r3, [sp, #260]	; 0x104
 80060a8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80060ac:	2b2a      	cmp	r3, #42	; 0x2a
 80060ae:	d103      	bne.n	80060b8 <__ssvfiscanf_r+0xa0>
 80060b0:	2310      	movs	r3, #16
 80060b2:	9341      	str	r3, [sp, #260]	; 0x104
 80060b4:	f10a 0502 	add.w	r5, sl, #2
 80060b8:	46aa      	mov	sl, r5
 80060ba:	f815 1b01 	ldrb.w	r1, [r5], #1
 80060be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80060c2:	2a09      	cmp	r2, #9
 80060c4:	d922      	bls.n	800610c <__ssvfiscanf_r+0xf4>
 80060c6:	2203      	movs	r2, #3
 80060c8:	4879      	ldr	r0, [pc, #484]	; (80062b0 <__ssvfiscanf_r+0x298>)
 80060ca:	f7fa f891 	bl	80001f0 <memchr>
 80060ce:	b138      	cbz	r0, 80060e0 <__ssvfiscanf_r+0xc8>
 80060d0:	eba0 0309 	sub.w	r3, r0, r9
 80060d4:	2001      	movs	r0, #1
 80060d6:	4098      	lsls	r0, r3
 80060d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060da:	4318      	orrs	r0, r3
 80060dc:	9041      	str	r0, [sp, #260]	; 0x104
 80060de:	46aa      	mov	sl, r5
 80060e0:	f89a 3000 	ldrb.w	r3, [sl]
 80060e4:	2b67      	cmp	r3, #103	; 0x67
 80060e6:	f10a 0501 	add.w	r5, sl, #1
 80060ea:	d82b      	bhi.n	8006144 <__ssvfiscanf_r+0x12c>
 80060ec:	2b65      	cmp	r3, #101	; 0x65
 80060ee:	f080 809f 	bcs.w	8006230 <__ssvfiscanf_r+0x218>
 80060f2:	2b47      	cmp	r3, #71	; 0x47
 80060f4:	d810      	bhi.n	8006118 <__ssvfiscanf_r+0x100>
 80060f6:	2b45      	cmp	r3, #69	; 0x45
 80060f8:	f080 809a 	bcs.w	8006230 <__ssvfiscanf_r+0x218>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d06c      	beq.n	80061da <__ssvfiscanf_r+0x1c2>
 8006100:	2b25      	cmp	r3, #37	; 0x25
 8006102:	d051      	beq.n	80061a8 <__ssvfiscanf_r+0x190>
 8006104:	2303      	movs	r3, #3
 8006106:	9347      	str	r3, [sp, #284]	; 0x11c
 8006108:	9742      	str	r7, [sp, #264]	; 0x108
 800610a:	e027      	b.n	800615c <__ssvfiscanf_r+0x144>
 800610c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800610e:	fb07 1303 	mla	r3, r7, r3, r1
 8006112:	3b30      	subs	r3, #48	; 0x30
 8006114:	9343      	str	r3, [sp, #268]	; 0x10c
 8006116:	e7cf      	b.n	80060b8 <__ssvfiscanf_r+0xa0>
 8006118:	2b5b      	cmp	r3, #91	; 0x5b
 800611a:	d06a      	beq.n	80061f2 <__ssvfiscanf_r+0x1da>
 800611c:	d80c      	bhi.n	8006138 <__ssvfiscanf_r+0x120>
 800611e:	2b58      	cmp	r3, #88	; 0x58
 8006120:	d1f0      	bne.n	8006104 <__ssvfiscanf_r+0xec>
 8006122:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006128:	9241      	str	r2, [sp, #260]	; 0x104
 800612a:	2210      	movs	r2, #16
 800612c:	9242      	str	r2, [sp, #264]	; 0x108
 800612e:	2b6e      	cmp	r3, #110	; 0x6e
 8006130:	bf8c      	ite	hi
 8006132:	2304      	movhi	r3, #4
 8006134:	2303      	movls	r3, #3
 8006136:	e010      	b.n	800615a <__ssvfiscanf_r+0x142>
 8006138:	2b63      	cmp	r3, #99	; 0x63
 800613a:	d065      	beq.n	8006208 <__ssvfiscanf_r+0x1f0>
 800613c:	2b64      	cmp	r3, #100	; 0x64
 800613e:	d1e1      	bne.n	8006104 <__ssvfiscanf_r+0xec>
 8006140:	9742      	str	r7, [sp, #264]	; 0x108
 8006142:	e7f4      	b.n	800612e <__ssvfiscanf_r+0x116>
 8006144:	2b70      	cmp	r3, #112	; 0x70
 8006146:	d04b      	beq.n	80061e0 <__ssvfiscanf_r+0x1c8>
 8006148:	d826      	bhi.n	8006198 <__ssvfiscanf_r+0x180>
 800614a:	2b6e      	cmp	r3, #110	; 0x6e
 800614c:	d062      	beq.n	8006214 <__ssvfiscanf_r+0x1fc>
 800614e:	d84c      	bhi.n	80061ea <__ssvfiscanf_r+0x1d2>
 8006150:	2b69      	cmp	r3, #105	; 0x69
 8006152:	d1d7      	bne.n	8006104 <__ssvfiscanf_r+0xec>
 8006154:	2300      	movs	r3, #0
 8006156:	9342      	str	r3, [sp, #264]	; 0x108
 8006158:	2303      	movs	r3, #3
 800615a:	9347      	str	r3, [sp, #284]	; 0x11c
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd68      	ble.n	8006234 <__ssvfiscanf_r+0x21c>
 8006162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006164:	0659      	lsls	r1, r3, #25
 8006166:	d407      	bmi.n	8006178 <__ssvfiscanf_r+0x160>
 8006168:	f7ff f916 	bl	8005398 <__locale_ctype_ptr>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	4410      	add	r0, r2
 8006172:	7842      	ldrb	r2, [r0, #1]
 8006174:	0712      	lsls	r2, r2, #28
 8006176:	d464      	bmi.n	8006242 <__ssvfiscanf_r+0x22a>
 8006178:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800617a:	2b02      	cmp	r3, #2
 800617c:	dc73      	bgt.n	8006266 <__ssvfiscanf_r+0x24e>
 800617e:	466b      	mov	r3, sp
 8006180:	4622      	mov	r2, r4
 8006182:	a941      	add	r1, sp, #260	; 0x104
 8006184:	4630      	mov	r0, r6
 8006186:	f000 fa1f 	bl	80065c8 <_scanf_chars>
 800618a:	2801      	cmp	r0, #1
 800618c:	f000 8089 	beq.w	80062a2 <__ssvfiscanf_r+0x28a>
 8006190:	2802      	cmp	r0, #2
 8006192:	f47f af71 	bne.w	8006078 <__ssvfiscanf_r+0x60>
 8006196:	e01d      	b.n	80061d4 <__ssvfiscanf_r+0x1bc>
 8006198:	2b75      	cmp	r3, #117	; 0x75
 800619a:	d0d1      	beq.n	8006140 <__ssvfiscanf_r+0x128>
 800619c:	2b78      	cmp	r3, #120	; 0x78
 800619e:	d0c0      	beq.n	8006122 <__ssvfiscanf_r+0x10a>
 80061a0:	2b73      	cmp	r3, #115	; 0x73
 80061a2:	d1af      	bne.n	8006104 <__ssvfiscanf_r+0xec>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e7d8      	b.n	800615a <__ssvfiscanf_r+0x142>
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dd0c      	ble.n	80061c8 <__ssvfiscanf_r+0x1b0>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	455a      	cmp	r2, fp
 80061b4:	d175      	bne.n	80062a2 <__ssvfiscanf_r+0x28a>
 80061b6:	3301      	adds	r3, #1
 80061b8:	6862      	ldr	r2, [r4, #4]
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80061be:	3a01      	subs	r2, #1
 80061c0:	3301      	adds	r3, #1
 80061c2:	6062      	str	r2, [r4, #4]
 80061c4:	9345      	str	r3, [sp, #276]	; 0x114
 80061c6:	e757      	b.n	8006078 <__ssvfiscanf_r+0x60>
 80061c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80061ca:	4621      	mov	r1, r4
 80061cc:	4630      	mov	r0, r6
 80061ce:	4798      	blx	r3
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d0ec      	beq.n	80061ae <__ssvfiscanf_r+0x196>
 80061d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d159      	bne.n	800628e <__ssvfiscanf_r+0x276>
 80061da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061de:	e05c      	b.n	800629a <__ssvfiscanf_r+0x282>
 80061e0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80061e2:	f042 0220 	orr.w	r2, r2, #32
 80061e6:	9241      	str	r2, [sp, #260]	; 0x104
 80061e8:	e79b      	b.n	8006122 <__ssvfiscanf_r+0x10a>
 80061ea:	2308      	movs	r3, #8
 80061ec:	9342      	str	r3, [sp, #264]	; 0x108
 80061ee:	2304      	movs	r3, #4
 80061f0:	e7b3      	b.n	800615a <__ssvfiscanf_r+0x142>
 80061f2:	4629      	mov	r1, r5
 80061f4:	4640      	mov	r0, r8
 80061f6:	f000 fb4f 	bl	8006898 <__sccl>
 80061fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80061fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006200:	9341      	str	r3, [sp, #260]	; 0x104
 8006202:	4605      	mov	r5, r0
 8006204:	2301      	movs	r3, #1
 8006206:	e7a8      	b.n	800615a <__ssvfiscanf_r+0x142>
 8006208:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800620a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620e:	9341      	str	r3, [sp, #260]	; 0x104
 8006210:	2300      	movs	r3, #0
 8006212:	e7a2      	b.n	800615a <__ssvfiscanf_r+0x142>
 8006214:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006216:	06c3      	lsls	r3, r0, #27
 8006218:	f53f af2e 	bmi.w	8006078 <__ssvfiscanf_r+0x60>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006220:	1d19      	adds	r1, r3, #4
 8006222:	9100      	str	r1, [sp, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	07c0      	lsls	r0, r0, #31
 8006228:	bf4c      	ite	mi
 800622a:	801a      	strhmi	r2, [r3, #0]
 800622c:	601a      	strpl	r2, [r3, #0]
 800622e:	e723      	b.n	8006078 <__ssvfiscanf_r+0x60>
 8006230:	2305      	movs	r3, #5
 8006232:	e792      	b.n	800615a <__ssvfiscanf_r+0x142>
 8006234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006236:	4621      	mov	r1, r4
 8006238:	4630      	mov	r0, r6
 800623a:	4798      	blx	r3
 800623c:	2800      	cmp	r0, #0
 800623e:	d090      	beq.n	8006162 <__ssvfiscanf_r+0x14a>
 8006240:	e7c8      	b.n	80061d4 <__ssvfiscanf_r+0x1bc>
 8006242:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006244:	3201      	adds	r2, #1
 8006246:	9245      	str	r2, [sp, #276]	; 0x114
 8006248:	6862      	ldr	r2, [r4, #4]
 800624a:	3a01      	subs	r2, #1
 800624c:	2a00      	cmp	r2, #0
 800624e:	6062      	str	r2, [r4, #4]
 8006250:	dd02      	ble.n	8006258 <__ssvfiscanf_r+0x240>
 8006252:	3301      	adds	r3, #1
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	e787      	b.n	8006168 <__ssvfiscanf_r+0x150>
 8006258:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800625a:	4621      	mov	r1, r4
 800625c:	4630      	mov	r0, r6
 800625e:	4798      	blx	r3
 8006260:	2800      	cmp	r0, #0
 8006262:	d081      	beq.n	8006168 <__ssvfiscanf_r+0x150>
 8006264:	e7b6      	b.n	80061d4 <__ssvfiscanf_r+0x1bc>
 8006266:	2b04      	cmp	r3, #4
 8006268:	dc06      	bgt.n	8006278 <__ssvfiscanf_r+0x260>
 800626a:	466b      	mov	r3, sp
 800626c:	4622      	mov	r2, r4
 800626e:	a941      	add	r1, sp, #260	; 0x104
 8006270:	4630      	mov	r0, r6
 8006272:	f000 fa0d 	bl	8006690 <_scanf_i>
 8006276:	e788      	b.n	800618a <__ssvfiscanf_r+0x172>
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <__ssvfiscanf_r+0x29c>)
 800627a:	2b00      	cmp	r3, #0
 800627c:	f43f aefc 	beq.w	8006078 <__ssvfiscanf_r+0x60>
 8006280:	466b      	mov	r3, sp
 8006282:	4622      	mov	r2, r4
 8006284:	a941      	add	r1, sp, #260	; 0x104
 8006286:	4630      	mov	r0, r6
 8006288:	f7fd fc68 	bl	8003b5c <_scanf_float>
 800628c:	e77d      	b.n	800618a <__ssvfiscanf_r+0x172>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006294:	bf18      	it	ne
 8006296:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800629a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80062a4:	e7f9      	b.n	800629a <__ssvfiscanf_r+0x282>
 80062a6:	bf00      	nop
 80062a8:	08005f65 	.word	0x08005f65
 80062ac:	08005fdf 	.word	0x08005fdf
 80062b0:	08006e6a 	.word	0x08006e6a
 80062b4:	08003b5d 	.word	0x08003b5d

080062b8 <_printf_common>:
 80062b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	4691      	mov	r9, r2
 80062be:	461f      	mov	r7, r3
 80062c0:	688a      	ldr	r2, [r1, #8]
 80062c2:	690b      	ldr	r3, [r1, #16]
 80062c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	bfb8      	it	lt
 80062cc:	4613      	movlt	r3, r2
 80062ce:	f8c9 3000 	str.w	r3, [r9]
 80062d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d6:	4606      	mov	r6, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	b112      	cbz	r2, 80062e2 <_printf_common+0x2a>
 80062dc:	3301      	adds	r3, #1
 80062de:	f8c9 3000 	str.w	r3, [r9]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	0699      	lsls	r1, r3, #26
 80062e6:	bf42      	ittt	mi
 80062e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062ec:	3302      	addmi	r3, #2
 80062ee:	f8c9 3000 	strmi.w	r3, [r9]
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	f015 0506 	ands.w	r5, r5, #6
 80062f8:	d107      	bne.n	800630a <_printf_common+0x52>
 80062fa:	f104 0a19 	add.w	sl, r4, #25
 80062fe:	68e3      	ldr	r3, [r4, #12]
 8006300:	f8d9 2000 	ldr.w	r2, [r9]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	42ab      	cmp	r3, r5
 8006308:	dc28      	bgt.n	800635c <_printf_common+0xa4>
 800630a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	3300      	adds	r3, #0
 8006312:	bf18      	it	ne
 8006314:	2301      	movne	r3, #1
 8006316:	0692      	lsls	r2, r2, #26
 8006318:	d42d      	bmi.n	8006376 <_printf_common+0xbe>
 800631a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800631e:	4639      	mov	r1, r7
 8006320:	4630      	mov	r0, r6
 8006322:	47c0      	blx	r8
 8006324:	3001      	adds	r0, #1
 8006326:	d020      	beq.n	800636a <_printf_common+0xb2>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	68e5      	ldr	r5, [r4, #12]
 800632c:	f8d9 2000 	ldr.w	r2, [r9]
 8006330:	f003 0306 	and.w	r3, r3, #6
 8006334:	2b04      	cmp	r3, #4
 8006336:	bf08      	it	eq
 8006338:	1aad      	subeq	r5, r5, r2
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	bf0c      	ite	eq
 8006340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006344:	2500      	movne	r5, #0
 8006346:	4293      	cmp	r3, r2
 8006348:	bfc4      	itt	gt
 800634a:	1a9b      	subgt	r3, r3, r2
 800634c:	18ed      	addgt	r5, r5, r3
 800634e:	f04f 0900 	mov.w	r9, #0
 8006352:	341a      	adds	r4, #26
 8006354:	454d      	cmp	r5, r9
 8006356:	d11a      	bne.n	800638e <_printf_common+0xd6>
 8006358:	2000      	movs	r0, #0
 800635a:	e008      	b.n	800636e <_printf_common+0xb6>
 800635c:	2301      	movs	r3, #1
 800635e:	4652      	mov	r2, sl
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d103      	bne.n	8006372 <_printf_common+0xba>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	3501      	adds	r5, #1
 8006374:	e7c3      	b.n	80062fe <_printf_common+0x46>
 8006376:	18e1      	adds	r1, r4, r3
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	2030      	movs	r0, #48	; 0x30
 800637c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006380:	4422      	add	r2, r4
 8006382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800638a:	3302      	adds	r3, #2
 800638c:	e7c5      	b.n	800631a <_printf_common+0x62>
 800638e:	2301      	movs	r3, #1
 8006390:	4622      	mov	r2, r4
 8006392:	4639      	mov	r1, r7
 8006394:	4630      	mov	r0, r6
 8006396:	47c0      	blx	r8
 8006398:	3001      	adds	r0, #1
 800639a:	d0e6      	beq.n	800636a <_printf_common+0xb2>
 800639c:	f109 0901 	add.w	r9, r9, #1
 80063a0:	e7d8      	b.n	8006354 <_printf_common+0x9c>
	...

080063a4 <_printf_i>:
 80063a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063ac:	460c      	mov	r4, r1
 80063ae:	7e09      	ldrb	r1, [r1, #24]
 80063b0:	b085      	sub	sp, #20
 80063b2:	296e      	cmp	r1, #110	; 0x6e
 80063b4:	4617      	mov	r7, r2
 80063b6:	4606      	mov	r6, r0
 80063b8:	4698      	mov	r8, r3
 80063ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063bc:	f000 80b3 	beq.w	8006526 <_printf_i+0x182>
 80063c0:	d822      	bhi.n	8006408 <_printf_i+0x64>
 80063c2:	2963      	cmp	r1, #99	; 0x63
 80063c4:	d036      	beq.n	8006434 <_printf_i+0x90>
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x3a>
 80063c8:	2900      	cmp	r1, #0
 80063ca:	f000 80b9 	beq.w	8006540 <_printf_i+0x19c>
 80063ce:	2958      	cmp	r1, #88	; 0x58
 80063d0:	f000 8083 	beq.w	80064da <_printf_i+0x136>
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063dc:	e032      	b.n	8006444 <_printf_i+0xa0>
 80063de:	2964      	cmp	r1, #100	; 0x64
 80063e0:	d001      	beq.n	80063e6 <_printf_i+0x42>
 80063e2:	2969      	cmp	r1, #105	; 0x69
 80063e4:	d1f6      	bne.n	80063d4 <_printf_i+0x30>
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	0605      	lsls	r5, r0, #24
 80063ec:	f103 0104 	add.w	r1, r3, #4
 80063f0:	d52a      	bpl.n	8006448 <_printf_i+0xa4>
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da03      	bge.n	8006402 <_printf_i+0x5e>
 80063fa:	222d      	movs	r2, #45	; 0x2d
 80063fc:	425b      	negs	r3, r3
 80063fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006402:	486f      	ldr	r0, [pc, #444]	; (80065c0 <_printf_i+0x21c>)
 8006404:	220a      	movs	r2, #10
 8006406:	e039      	b.n	800647c <_printf_i+0xd8>
 8006408:	2973      	cmp	r1, #115	; 0x73
 800640a:	f000 809d 	beq.w	8006548 <_printf_i+0x1a4>
 800640e:	d808      	bhi.n	8006422 <_printf_i+0x7e>
 8006410:	296f      	cmp	r1, #111	; 0x6f
 8006412:	d020      	beq.n	8006456 <_printf_i+0xb2>
 8006414:	2970      	cmp	r1, #112	; 0x70
 8006416:	d1dd      	bne.n	80063d4 <_printf_i+0x30>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	f043 0320 	orr.w	r3, r3, #32
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	e003      	b.n	800642a <_printf_i+0x86>
 8006422:	2975      	cmp	r1, #117	; 0x75
 8006424:	d017      	beq.n	8006456 <_printf_i+0xb2>
 8006426:	2978      	cmp	r1, #120	; 0x78
 8006428:	d1d4      	bne.n	80063d4 <_printf_i+0x30>
 800642a:	2378      	movs	r3, #120	; 0x78
 800642c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006430:	4864      	ldr	r0, [pc, #400]	; (80065c4 <_printf_i+0x220>)
 8006432:	e055      	b.n	80064e0 <_printf_i+0x13c>
 8006434:	6813      	ldr	r3, [r2, #0]
 8006436:	1d19      	adds	r1, r3, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6011      	str	r1, [r2, #0]
 800643c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006444:	2301      	movs	r3, #1
 8006446:	e08c      	b.n	8006562 <_printf_i+0x1be>
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6011      	str	r1, [r2, #0]
 800644c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006450:	bf18      	it	ne
 8006452:	b21b      	sxthne	r3, r3
 8006454:	e7cf      	b.n	80063f6 <_printf_i+0x52>
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	6825      	ldr	r5, [r4, #0]
 800645a:	1d18      	adds	r0, r3, #4
 800645c:	6010      	str	r0, [r2, #0]
 800645e:	0628      	lsls	r0, r5, #24
 8006460:	d501      	bpl.n	8006466 <_printf_i+0xc2>
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	e002      	b.n	800646c <_printf_i+0xc8>
 8006466:	0668      	lsls	r0, r5, #25
 8006468:	d5fb      	bpl.n	8006462 <_printf_i+0xbe>
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	4854      	ldr	r0, [pc, #336]	; (80065c0 <_printf_i+0x21c>)
 800646e:	296f      	cmp	r1, #111	; 0x6f
 8006470:	bf14      	ite	ne
 8006472:	220a      	movne	r2, #10
 8006474:	2208      	moveq	r2, #8
 8006476:	2100      	movs	r1, #0
 8006478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800647c:	6865      	ldr	r5, [r4, #4]
 800647e:	60a5      	str	r5, [r4, #8]
 8006480:	2d00      	cmp	r5, #0
 8006482:	f2c0 8095 	blt.w	80065b0 <_printf_i+0x20c>
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	f021 0104 	bic.w	r1, r1, #4
 800648c:	6021      	str	r1, [r4, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d13d      	bne.n	800650e <_printf_i+0x16a>
 8006492:	2d00      	cmp	r5, #0
 8006494:	f040 808e 	bne.w	80065b4 <_printf_i+0x210>
 8006498:	4665      	mov	r5, ip
 800649a:	2a08      	cmp	r2, #8
 800649c:	d10b      	bne.n	80064b6 <_printf_i+0x112>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	07db      	lsls	r3, r3, #31
 80064a2:	d508      	bpl.n	80064b6 <_printf_i+0x112>
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	6862      	ldr	r2, [r4, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	bfde      	ittt	le
 80064ac:	2330      	movle	r3, #48	; 0x30
 80064ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064b6:	ebac 0305 	sub.w	r3, ip, r5
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f8cd 8000 	str.w	r8, [sp]
 80064c0:	463b      	mov	r3, r7
 80064c2:	aa03      	add	r2, sp, #12
 80064c4:	4621      	mov	r1, r4
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff fef6 	bl	80062b8 <_printf_common>
 80064cc:	3001      	adds	r0, #1
 80064ce:	d14d      	bne.n	800656c <_printf_i+0x1c8>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d4:	b005      	add	sp, #20
 80064d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064da:	4839      	ldr	r0, [pc, #228]	; (80065c0 <_printf_i+0x21c>)
 80064dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	6821      	ldr	r1, [r4, #0]
 80064e4:	1d1d      	adds	r5, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6015      	str	r5, [r2, #0]
 80064ea:	060a      	lsls	r2, r1, #24
 80064ec:	d50b      	bpl.n	8006506 <_printf_i+0x162>
 80064ee:	07ca      	lsls	r2, r1, #31
 80064f0:	bf44      	itt	mi
 80064f2:	f041 0120 	orrmi.w	r1, r1, #32
 80064f6:	6021      	strmi	r1, [r4, #0]
 80064f8:	b91b      	cbnz	r3, 8006502 <_printf_i+0x15e>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	f022 0220 	bic.w	r2, r2, #32
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	e7b7      	b.n	8006476 <_printf_i+0xd2>
 8006506:	064d      	lsls	r5, r1, #25
 8006508:	bf48      	it	mi
 800650a:	b29b      	uxthmi	r3, r3
 800650c:	e7ef      	b.n	80064ee <_printf_i+0x14a>
 800650e:	4665      	mov	r5, ip
 8006510:	fbb3 f1f2 	udiv	r1, r3, r2
 8006514:	fb02 3311 	mls	r3, r2, r1, r3
 8006518:	5cc3      	ldrb	r3, [r0, r3]
 800651a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800651e:	460b      	mov	r3, r1
 8006520:	2900      	cmp	r1, #0
 8006522:	d1f5      	bne.n	8006510 <_printf_i+0x16c>
 8006524:	e7b9      	b.n	800649a <_printf_i+0xf6>
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	6825      	ldr	r5, [r4, #0]
 800652a:	6961      	ldr	r1, [r4, #20]
 800652c:	1d18      	adds	r0, r3, #4
 800652e:	6010      	str	r0, [r2, #0]
 8006530:	0628      	lsls	r0, r5, #24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	d501      	bpl.n	800653a <_printf_i+0x196>
 8006536:	6019      	str	r1, [r3, #0]
 8006538:	e002      	b.n	8006540 <_printf_i+0x19c>
 800653a:	066a      	lsls	r2, r5, #25
 800653c:	d5fb      	bpl.n	8006536 <_printf_i+0x192>
 800653e:	8019      	strh	r1, [r3, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	4665      	mov	r5, ip
 8006546:	e7b9      	b.n	80064bc <_printf_i+0x118>
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	1d19      	adds	r1, r3, #4
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	681d      	ldr	r5, [r3, #0]
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	2100      	movs	r1, #0
 8006554:	4628      	mov	r0, r5
 8006556:	f7f9 fe4b 	bl	80001f0 <memchr>
 800655a:	b108      	cbz	r0, 8006560 <_printf_i+0x1bc>
 800655c:	1b40      	subs	r0, r0, r5
 800655e:	6060      	str	r0, [r4, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	2300      	movs	r3, #0
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656a:	e7a7      	b.n	80064bc <_printf_i+0x118>
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	462a      	mov	r2, r5
 8006570:	4639      	mov	r1, r7
 8006572:	4630      	mov	r0, r6
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d0aa      	beq.n	80064d0 <_printf_i+0x12c>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	079b      	lsls	r3, r3, #30
 800657e:	d413      	bmi.n	80065a8 <_printf_i+0x204>
 8006580:	68e0      	ldr	r0, [r4, #12]
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	4298      	cmp	r0, r3
 8006586:	bfb8      	it	lt
 8006588:	4618      	movlt	r0, r3
 800658a:	e7a3      	b.n	80064d4 <_printf_i+0x130>
 800658c:	2301      	movs	r3, #1
 800658e:	464a      	mov	r2, r9
 8006590:	4639      	mov	r1, r7
 8006592:	4630      	mov	r0, r6
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d09a      	beq.n	80064d0 <_printf_i+0x12c>
 800659a:	3501      	adds	r5, #1
 800659c:	68e3      	ldr	r3, [r4, #12]
 800659e:	9a03      	ldr	r2, [sp, #12]
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	dcf2      	bgt.n	800658c <_printf_i+0x1e8>
 80065a6:	e7eb      	b.n	8006580 <_printf_i+0x1dc>
 80065a8:	2500      	movs	r5, #0
 80065aa:	f104 0919 	add.w	r9, r4, #25
 80065ae:	e7f5      	b.n	800659c <_printf_i+0x1f8>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1ac      	bne.n	800650e <_printf_i+0x16a>
 80065b4:	7803      	ldrb	r3, [r0, #0]
 80065b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065be:	e76c      	b.n	800649a <_printf_i+0xf6>
 80065c0:	08006e75 	.word	0x08006e75
 80065c4:	08006e86 	.word	0x08006e86

080065c8 <_scanf_chars>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4615      	mov	r5, r2
 80065ce:	688a      	ldr	r2, [r1, #8]
 80065d0:	4680      	mov	r8, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	b932      	cbnz	r2, 80065e4 <_scanf_chars+0x1c>
 80065d6:	698a      	ldr	r2, [r1, #24]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	bf14      	ite	ne
 80065dc:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80065e0:	2201      	moveq	r2, #1
 80065e2:	608a      	str	r2, [r1, #8]
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	06d1      	lsls	r1, r2, #27
 80065e8:	bf5f      	itttt	pl
 80065ea:	681a      	ldrpl	r2, [r3, #0]
 80065ec:	1d11      	addpl	r1, r2, #4
 80065ee:	6019      	strpl	r1, [r3, #0]
 80065f0:	6817      	ldrpl	r7, [r2, #0]
 80065f2:	2600      	movs	r6, #0
 80065f4:	69a3      	ldr	r3, [r4, #24]
 80065f6:	b1db      	cbz	r3, 8006630 <_scanf_chars+0x68>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <_scanf_chars+0x44>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	6962      	ldr	r2, [r4, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	5cd3      	ldrb	r3, [r2, r3]
 8006604:	b9a3      	cbnz	r3, 8006630 <_scanf_chars+0x68>
 8006606:	2e00      	cmp	r6, #0
 8006608:	d132      	bne.n	8006670 <_scanf_chars+0xa8>
 800660a:	e006      	b.n	800661a <_scanf_chars+0x52>
 800660c:	2b02      	cmp	r3, #2
 800660e:	d007      	beq.n	8006620 <_scanf_chars+0x58>
 8006610:	2e00      	cmp	r6, #0
 8006612:	d12d      	bne.n	8006670 <_scanf_chars+0xa8>
 8006614:	69a3      	ldr	r3, [r4, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d12a      	bne.n	8006670 <_scanf_chars+0xa8>
 800661a:	2001      	movs	r0, #1
 800661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006620:	f7fe feba 	bl	8005398 <__locale_ctype_ptr>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4418      	add	r0, r3
 800662a:	7843      	ldrb	r3, [r0, #1]
 800662c:	071b      	lsls	r3, r3, #28
 800662e:	d4ef      	bmi.n	8006610 <_scanf_chars+0x48>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	06da      	lsls	r2, r3, #27
 8006634:	bf5e      	ittt	pl
 8006636:	682b      	ldrpl	r3, [r5, #0]
 8006638:	781b      	ldrbpl	r3, [r3, #0]
 800663a:	703b      	strbpl	r3, [r7, #0]
 800663c:	682a      	ldr	r2, [r5, #0]
 800663e:	686b      	ldr	r3, [r5, #4]
 8006640:	f102 0201 	add.w	r2, r2, #1
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	68a2      	ldr	r2, [r4, #8]
 8006648:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800664c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006650:	606b      	str	r3, [r5, #4]
 8006652:	f106 0601 	add.w	r6, r6, #1
 8006656:	bf58      	it	pl
 8006658:	3701      	addpl	r7, #1
 800665a:	60a2      	str	r2, [r4, #8]
 800665c:	b142      	cbz	r2, 8006670 <_scanf_chars+0xa8>
 800665e:	2b00      	cmp	r3, #0
 8006660:	dcc8      	bgt.n	80065f4 <_scanf_chars+0x2c>
 8006662:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006666:	4629      	mov	r1, r5
 8006668:	4640      	mov	r0, r8
 800666a:	4798      	blx	r3
 800666c:	2800      	cmp	r0, #0
 800666e:	d0c1      	beq.n	80065f4 <_scanf_chars+0x2c>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	f013 0310 	ands.w	r3, r3, #16
 8006676:	d105      	bne.n	8006684 <_scanf_chars+0xbc>
 8006678:	68e2      	ldr	r2, [r4, #12]
 800667a:	3201      	adds	r2, #1
 800667c:	60e2      	str	r2, [r4, #12]
 800667e:	69a2      	ldr	r2, [r4, #24]
 8006680:	b102      	cbz	r2, 8006684 <_scanf_chars+0xbc>
 8006682:	703b      	strb	r3, [r7, #0]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	441e      	add	r6, r3
 8006688:	6126      	str	r6, [r4, #16]
 800668a:	2000      	movs	r0, #0
 800668c:	e7c6      	b.n	800661c <_scanf_chars+0x54>
	...

08006690 <_scanf_i>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	469a      	mov	sl, r3
 8006696:	4b74      	ldr	r3, [pc, #464]	; (8006868 <_scanf_i+0x1d8>)
 8006698:	460c      	mov	r4, r1
 800669a:	4683      	mov	fp, r0
 800669c:	4616      	mov	r6, r2
 800669e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066a2:	b087      	sub	sp, #28
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	68a7      	ldr	r7, [r4, #8]
 80066a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066ac:	4b6f      	ldr	r3, [pc, #444]	; (800686c <_scanf_i+0x1dc>)
 80066ae:	69a1      	ldr	r1, [r4, #24]
 80066b0:	4a6f      	ldr	r2, [pc, #444]	; (8006870 <_scanf_i+0x1e0>)
 80066b2:	2903      	cmp	r1, #3
 80066b4:	bf08      	it	eq
 80066b6:	461a      	moveq	r2, r3
 80066b8:	1e7b      	subs	r3, r7, #1
 80066ba:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80066be:	bf84      	itt	hi
 80066c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066c4:	60a3      	strhi	r3, [r4, #8]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	9200      	str	r2, [sp, #0]
 80066ca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80066ce:	bf88      	it	hi
 80066d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066d4:	f104 091c 	add.w	r9, r4, #28
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bf8c      	ite	hi
 80066dc:	197f      	addhi	r7, r7, r5
 80066de:	2700      	movls	r7, #0
 80066e0:	464b      	mov	r3, r9
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	6831      	ldr	r1, [r6, #0]
 80066ea:	ab03      	add	r3, sp, #12
 80066ec:	2202      	movs	r2, #2
 80066ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80066f2:	7809      	ldrb	r1, [r1, #0]
 80066f4:	f7f9 fd7c 	bl	80001f0 <memchr>
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	b330      	cbz	r0, 800674a <_scanf_i+0xba>
 80066fc:	f1b8 0f01 	cmp.w	r8, #1
 8006700:	d15a      	bne.n	80067b8 <_scanf_i+0x128>
 8006702:	6862      	ldr	r2, [r4, #4]
 8006704:	b92a      	cbnz	r2, 8006712 <_scanf_i+0x82>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	2108      	movs	r1, #8
 800670a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670e:	6061      	str	r1, [r4, #4]
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	68a2      	ldr	r2, [r4, #8]
 800671c:	1e51      	subs	r1, r2, #1
 800671e:	60a1      	str	r1, [r4, #8]
 8006720:	b19a      	cbz	r2, 800674a <_scanf_i+0xba>
 8006722:	6832      	ldr	r2, [r6, #0]
 8006724:	1c51      	adds	r1, r2, #1
 8006726:	6031      	str	r1, [r6, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	1c5d      	adds	r5, r3, #1
 800672e:	6873      	ldr	r3, [r6, #4]
 8006730:	3b01      	subs	r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	6073      	str	r3, [r6, #4]
 8006736:	dc07      	bgt.n	8006748 <_scanf_i+0xb8>
 8006738:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800673c:	4631      	mov	r1, r6
 800673e:	4658      	mov	r0, fp
 8006740:	4798      	blx	r3
 8006742:	2800      	cmp	r0, #0
 8006744:	f040 8086 	bne.w	8006854 <_scanf_i+0x1c4>
 8006748:	462b      	mov	r3, r5
 800674a:	f108 0801 	add.w	r8, r8, #1
 800674e:	f1b8 0f03 	cmp.w	r8, #3
 8006752:	d1c8      	bne.n	80066e6 <_scanf_i+0x56>
 8006754:	6862      	ldr	r2, [r4, #4]
 8006756:	b90a      	cbnz	r2, 800675c <_scanf_i+0xcc>
 8006758:	220a      	movs	r2, #10
 800675a:	6062      	str	r2, [r4, #4]
 800675c:	6862      	ldr	r2, [r4, #4]
 800675e:	4945      	ldr	r1, [pc, #276]	; (8006874 <_scanf_i+0x1e4>)
 8006760:	6960      	ldr	r0, [r4, #20]
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	1a89      	subs	r1, r1, r2
 8006766:	f000 f897 	bl	8006898 <__sccl>
 800676a:	9b01      	ldr	r3, [sp, #4]
 800676c:	f04f 0800 	mov.w	r8, #0
 8006770:	461d      	mov	r5, r3
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d03a      	beq.n	80067f0 <_scanf_i+0x160>
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	6960      	ldr	r0, [r4, #20]
 800677e:	f891 c000 	ldrb.w	ip, [r1]
 8006782:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006786:	2800      	cmp	r0, #0
 8006788:	d032      	beq.n	80067f0 <_scanf_i+0x160>
 800678a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800678e:	d121      	bne.n	80067d4 <_scanf_i+0x144>
 8006790:	0510      	lsls	r0, r2, #20
 8006792:	d51f      	bpl.n	80067d4 <_scanf_i+0x144>
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	b117      	cbz	r7, 80067a0 <_scanf_i+0x110>
 800679a:	3301      	adds	r3, #1
 800679c:	3f01      	subs	r7, #1
 800679e:	60a3      	str	r3, [r4, #8]
 80067a0:	6873      	ldr	r3, [r6, #4]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	6073      	str	r3, [r6, #4]
 80067a8:	dd1b      	ble.n	80067e2 <_scanf_i+0x152>
 80067aa:	6833      	ldr	r3, [r6, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	6033      	str	r3, [r6, #0]
 80067b0:	68a3      	ldr	r3, [r4, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60a3      	str	r3, [r4, #8]
 80067b6:	e7dc      	b.n	8006772 <_scanf_i+0xe2>
 80067b8:	f1b8 0f02 	cmp.w	r8, #2
 80067bc:	d1ad      	bne.n	800671a <_scanf_i+0x8a>
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80067c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80067c8:	d1bf      	bne.n	800674a <_scanf_i+0xba>
 80067ca:	2110      	movs	r1, #16
 80067cc:	6061      	str	r1, [r4, #4]
 80067ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d2:	e7a1      	b.n	8006718 <_scanf_i+0x88>
 80067d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80067d8:	6022      	str	r2, [r4, #0]
 80067da:	780b      	ldrb	r3, [r1, #0]
 80067dc:	702b      	strb	r3, [r5, #0]
 80067de:	3501      	adds	r5, #1
 80067e0:	e7de      	b.n	80067a0 <_scanf_i+0x110>
 80067e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067e6:	4631      	mov	r1, r6
 80067e8:	4658      	mov	r0, fp
 80067ea:	4798      	blx	r3
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d0df      	beq.n	80067b0 <_scanf_i+0x120>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	05d9      	lsls	r1, r3, #23
 80067f4:	d50c      	bpl.n	8006810 <_scanf_i+0x180>
 80067f6:	454d      	cmp	r5, r9
 80067f8:	d908      	bls.n	800680c <_scanf_i+0x17c>
 80067fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80067fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006802:	4632      	mov	r2, r6
 8006804:	4658      	mov	r0, fp
 8006806:	4798      	blx	r3
 8006808:	1e6f      	subs	r7, r5, #1
 800680a:	463d      	mov	r5, r7
 800680c:	454d      	cmp	r5, r9
 800680e:	d029      	beq.n	8006864 <_scanf_i+0x1d4>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	f012 0210 	ands.w	r2, r2, #16
 8006816:	d113      	bne.n	8006840 <_scanf_i+0x1b0>
 8006818:	702a      	strb	r2, [r5, #0]
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	9e00      	ldr	r6, [sp, #0]
 800681e:	4649      	mov	r1, r9
 8006820:	4658      	mov	r0, fp
 8006822:	47b0      	blx	r6
 8006824:	f8da 3000 	ldr.w	r3, [sl]
 8006828:	6821      	ldr	r1, [r4, #0]
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	f8ca 2000 	str.w	r2, [sl]
 8006830:	f011 0f20 	tst.w	r1, #32
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d010      	beq.n	800685a <_scanf_i+0x1ca>
 8006838:	6018      	str	r0, [r3, #0]
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60e3      	str	r3, [r4, #12]
 8006840:	eba5 0509 	sub.w	r5, r5, r9
 8006844:	44a8      	add	r8, r5
 8006846:	6925      	ldr	r5, [r4, #16]
 8006848:	4445      	add	r5, r8
 800684a:	6125      	str	r5, [r4, #16]
 800684c:	2000      	movs	r0, #0
 800684e:	b007      	add	sp, #28
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	f04f 0800 	mov.w	r8, #0
 8006858:	e7ca      	b.n	80067f0 <_scanf_i+0x160>
 800685a:	07ca      	lsls	r2, r1, #31
 800685c:	bf4c      	ite	mi
 800685e:	8018      	strhmi	r0, [r3, #0]
 8006860:	6018      	strpl	r0, [r3, #0]
 8006862:	e7ea      	b.n	800683a <_scanf_i+0x1aa>
 8006864:	2001      	movs	r0, #1
 8006866:	e7f2      	b.n	800684e <_scanf_i+0x1be>
 8006868:	08006cac 	.word	0x08006cac
 800686c:	08004d21 	.word	0x08004d21
 8006870:	080069f1 	.word	0x080069f1
 8006874:	08006ea7 	.word	0x08006ea7

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4c06      	ldr	r4, [pc, #24]	; (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4605      	mov	r5, r0
 8006880:	4608      	mov	r0, r1
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	f7fa fd74 	bl	8001370 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	200003b8 	.word	0x200003b8

08006898 <__sccl>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	780b      	ldrb	r3, [r1, #0]
 800689c:	2b5e      	cmp	r3, #94	; 0x5e
 800689e:	bf13      	iteet	ne
 80068a0:	1c4a      	addne	r2, r1, #1
 80068a2:	1c8a      	addeq	r2, r1, #2
 80068a4:	784b      	ldrbeq	r3, [r1, #1]
 80068a6:	2100      	movne	r1, #0
 80068a8:	bf08      	it	eq
 80068aa:	2101      	moveq	r1, #1
 80068ac:	1e44      	subs	r4, r0, #1
 80068ae:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80068b2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80068b6:	42ac      	cmp	r4, r5
 80068b8:	d1fb      	bne.n	80068b2 <__sccl+0x1a>
 80068ba:	b913      	cbnz	r3, 80068c2 <__sccl+0x2a>
 80068bc:	3a01      	subs	r2, #1
 80068be:	4610      	mov	r0, r2
 80068c0:	bd70      	pop	{r4, r5, r6, pc}
 80068c2:	f081 0401 	eor.w	r4, r1, #1
 80068c6:	54c4      	strb	r4, [r0, r3]
 80068c8:	1c51      	adds	r1, r2, #1
 80068ca:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80068ce:	2d2d      	cmp	r5, #45	; 0x2d
 80068d0:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80068d4:	460a      	mov	r2, r1
 80068d6:	d006      	beq.n	80068e6 <__sccl+0x4e>
 80068d8:	2d5d      	cmp	r5, #93	; 0x5d
 80068da:	d0f0      	beq.n	80068be <__sccl+0x26>
 80068dc:	b90d      	cbnz	r5, 80068e2 <__sccl+0x4a>
 80068de:	4632      	mov	r2, r6
 80068e0:	e7ed      	b.n	80068be <__sccl+0x26>
 80068e2:	462b      	mov	r3, r5
 80068e4:	e7ef      	b.n	80068c6 <__sccl+0x2e>
 80068e6:	780e      	ldrb	r6, [r1, #0]
 80068e8:	2e5d      	cmp	r6, #93	; 0x5d
 80068ea:	d0fa      	beq.n	80068e2 <__sccl+0x4a>
 80068ec:	42b3      	cmp	r3, r6
 80068ee:	dcf8      	bgt.n	80068e2 <__sccl+0x4a>
 80068f0:	3301      	adds	r3, #1
 80068f2:	429e      	cmp	r6, r3
 80068f4:	54c4      	strb	r4, [r0, r3]
 80068f6:	dcfb      	bgt.n	80068f0 <__sccl+0x58>
 80068f8:	3102      	adds	r1, #2
 80068fa:	e7e6      	b.n	80068ca <__sccl+0x32>

080068fc <_strtoul_l.isra.0>:
 80068fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006900:	4680      	mov	r8, r0
 8006902:	4689      	mov	r9, r1
 8006904:	4692      	mov	sl, r2
 8006906:	461e      	mov	r6, r3
 8006908:	460f      	mov	r7, r1
 800690a:	463d      	mov	r5, r7
 800690c:	9808      	ldr	r0, [sp, #32]
 800690e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006912:	f7fe fd3d 	bl	8005390 <__locale_ctype_ptr_l>
 8006916:	4420      	add	r0, r4
 8006918:	7843      	ldrb	r3, [r0, #1]
 800691a:	f013 0308 	ands.w	r3, r3, #8
 800691e:	d130      	bne.n	8006982 <_strtoul_l.isra.0+0x86>
 8006920:	2c2d      	cmp	r4, #45	; 0x2d
 8006922:	d130      	bne.n	8006986 <_strtoul_l.isra.0+0x8a>
 8006924:	787c      	ldrb	r4, [r7, #1]
 8006926:	1cbd      	adds	r5, r7, #2
 8006928:	2101      	movs	r1, #1
 800692a:	2e00      	cmp	r6, #0
 800692c:	d05c      	beq.n	80069e8 <_strtoul_l.isra.0+0xec>
 800692e:	2e10      	cmp	r6, #16
 8006930:	d109      	bne.n	8006946 <_strtoul_l.isra.0+0x4a>
 8006932:	2c30      	cmp	r4, #48	; 0x30
 8006934:	d107      	bne.n	8006946 <_strtoul_l.isra.0+0x4a>
 8006936:	782b      	ldrb	r3, [r5, #0]
 8006938:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800693c:	2b58      	cmp	r3, #88	; 0x58
 800693e:	d14e      	bne.n	80069de <_strtoul_l.isra.0+0xe2>
 8006940:	786c      	ldrb	r4, [r5, #1]
 8006942:	2610      	movs	r6, #16
 8006944:	3502      	adds	r5, #2
 8006946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694a:	2300      	movs	r3, #0
 800694c:	fbb2 f2f6 	udiv	r2, r2, r6
 8006950:	fb06 fc02 	mul.w	ip, r6, r2
 8006954:	ea6f 0c0c 	mvn.w	ip, ip
 8006958:	4618      	mov	r0, r3
 800695a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800695e:	2f09      	cmp	r7, #9
 8006960:	d817      	bhi.n	8006992 <_strtoul_l.isra.0+0x96>
 8006962:	463c      	mov	r4, r7
 8006964:	42a6      	cmp	r6, r4
 8006966:	dd23      	ble.n	80069b0 <_strtoul_l.isra.0+0xb4>
 8006968:	2b00      	cmp	r3, #0
 800696a:	db1e      	blt.n	80069aa <_strtoul_l.isra.0+0xae>
 800696c:	4282      	cmp	r2, r0
 800696e:	d31c      	bcc.n	80069aa <_strtoul_l.isra.0+0xae>
 8006970:	d101      	bne.n	8006976 <_strtoul_l.isra.0+0x7a>
 8006972:	45a4      	cmp	ip, r4
 8006974:	db19      	blt.n	80069aa <_strtoul_l.isra.0+0xae>
 8006976:	fb00 4006 	mla	r0, r0, r6, r4
 800697a:	2301      	movs	r3, #1
 800697c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006980:	e7eb      	b.n	800695a <_strtoul_l.isra.0+0x5e>
 8006982:	462f      	mov	r7, r5
 8006984:	e7c1      	b.n	800690a <_strtoul_l.isra.0+0xe>
 8006986:	2c2b      	cmp	r4, #43	; 0x2b
 8006988:	bf04      	itt	eq
 800698a:	1cbd      	addeq	r5, r7, #2
 800698c:	787c      	ldrbeq	r4, [r7, #1]
 800698e:	4619      	mov	r1, r3
 8006990:	e7cb      	b.n	800692a <_strtoul_l.isra.0+0x2e>
 8006992:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006996:	2f19      	cmp	r7, #25
 8006998:	d801      	bhi.n	800699e <_strtoul_l.isra.0+0xa2>
 800699a:	3c37      	subs	r4, #55	; 0x37
 800699c:	e7e2      	b.n	8006964 <_strtoul_l.isra.0+0x68>
 800699e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80069a2:	2f19      	cmp	r7, #25
 80069a4:	d804      	bhi.n	80069b0 <_strtoul_l.isra.0+0xb4>
 80069a6:	3c57      	subs	r4, #87	; 0x57
 80069a8:	e7dc      	b.n	8006964 <_strtoul_l.isra.0+0x68>
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ae:	e7e5      	b.n	800697c <_strtoul_l.isra.0+0x80>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da09      	bge.n	80069c8 <_strtoul_l.isra.0+0xcc>
 80069b4:	2322      	movs	r3, #34	; 0x22
 80069b6:	f8c8 3000 	str.w	r3, [r8]
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069be:	f1ba 0f00 	cmp.w	sl, #0
 80069c2:	d107      	bne.n	80069d4 <_strtoul_l.isra.0+0xd8>
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	b101      	cbz	r1, 80069cc <_strtoul_l.isra.0+0xd0>
 80069ca:	4240      	negs	r0, r0
 80069cc:	f1ba 0f00 	cmp.w	sl, #0
 80069d0:	d0f8      	beq.n	80069c4 <_strtoul_l.isra.0+0xc8>
 80069d2:	b10b      	cbz	r3, 80069d8 <_strtoul_l.isra.0+0xdc>
 80069d4:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80069d8:	f8ca 9000 	str.w	r9, [sl]
 80069dc:	e7f2      	b.n	80069c4 <_strtoul_l.isra.0+0xc8>
 80069de:	2430      	movs	r4, #48	; 0x30
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	d1b0      	bne.n	8006946 <_strtoul_l.isra.0+0x4a>
 80069e4:	2608      	movs	r6, #8
 80069e6:	e7ae      	b.n	8006946 <_strtoul_l.isra.0+0x4a>
 80069e8:	2c30      	cmp	r4, #48	; 0x30
 80069ea:	d0a4      	beq.n	8006936 <_strtoul_l.isra.0+0x3a>
 80069ec:	260a      	movs	r6, #10
 80069ee:	e7aa      	b.n	8006946 <_strtoul_l.isra.0+0x4a>

080069f0 <_strtoul_r>:
 80069f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f2:	4c06      	ldr	r4, [pc, #24]	; (8006a0c <_strtoul_r+0x1c>)
 80069f4:	4d06      	ldr	r5, [pc, #24]	; (8006a10 <_strtoul_r+0x20>)
 80069f6:	6824      	ldr	r4, [r4, #0]
 80069f8:	6a24      	ldr	r4, [r4, #32]
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	bf08      	it	eq
 80069fe:	462c      	moveq	r4, r5
 8006a00:	9400      	str	r4, [sp, #0]
 8006a02:	f7ff ff7b 	bl	80068fc <_strtoul_l.isra.0>
 8006a06:	b003      	add	sp, #12
 8006a08:	bd30      	pop	{r4, r5, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000000c 	.word	0x2000000c
 8006a10:	20000070 	.word	0x20000070

08006a14 <__submore>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a20:	4299      	cmp	r1, r3
 8006a22:	d11d      	bne.n	8006a60 <__submore+0x4c>
 8006a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a28:	f7ff f8f0 	bl	8005c0c <_malloc_r>
 8006a2c:	b918      	cbnz	r0, 8006a36 <__submore+0x22>
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006a40:	6360      	str	r0, [r4, #52]	; 0x34
 8006a42:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006a46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a4a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006a4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a52:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006a56:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006a5a:	6020      	str	r0, [r4, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7e8      	b.n	8006a32 <__submore+0x1e>
 8006a60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006a62:	0077      	lsls	r7, r6, #1
 8006a64:	463a      	mov	r2, r7
 8006a66:	f000 f88f 	bl	8006b88 <_realloc_r>
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d0de      	beq.n	8006a2e <__submore+0x1a>
 8006a70:	eb00 0806 	add.w	r8, r0, r6
 8006a74:	4601      	mov	r1, r0
 8006a76:	4632      	mov	r2, r6
 8006a78:	4640      	mov	r0, r8
 8006a7a:	f7fe fcaf 	bl	80053dc <memcpy>
 8006a7e:	f8c4 8000 	str.w	r8, [r4]
 8006a82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006a86:	e7e9      	b.n	8006a5c <__submore+0x48>

08006a88 <__ascii_wctomb>:
 8006a88:	b149      	cbz	r1, 8006a9e <__ascii_wctomb+0x16>
 8006a8a:	2aff      	cmp	r2, #255	; 0xff
 8006a8c:	bf85      	ittet	hi
 8006a8e:	238a      	movhi	r3, #138	; 0x8a
 8006a90:	6003      	strhi	r3, [r0, #0]
 8006a92:	700a      	strbls	r2, [r1, #0]
 8006a94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006a98:	bf98      	it	ls
 8006a9a:	2001      	movls	r0, #1
 8006a9c:	4770      	bx	lr
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4770      	bx	lr
	...

08006aa4 <malloc>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <malloc+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f7ff b8af 	b.w	8005c0c <_malloc_r>
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <memmove>:
 8006ab4:	4288      	cmp	r0, r1
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	eb01 0302 	add.w	r3, r1, r2
 8006abc:	d807      	bhi.n	8006ace <memmove+0x1a>
 8006abe:	1e42      	subs	r2, r0, #1
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d00a      	beq.n	8006ada <memmove+0x26>
 8006ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006acc:	e7f8      	b.n	8006ac0 <memmove+0xc>
 8006ace:	4283      	cmp	r3, r0
 8006ad0:	d9f5      	bls.n	8006abe <memmove+0xa>
 8006ad2:	1881      	adds	r1, r0, r2
 8006ad4:	1ad2      	subs	r2, r2, r3
 8006ad6:	42d3      	cmn	r3, r2
 8006ad8:	d100      	bne.n	8006adc <memmove+0x28>
 8006ada:	bd10      	pop	{r4, pc}
 8006adc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ae0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ae4:	e7f7      	b.n	8006ad6 <memmove+0x22>

08006ae6 <__malloc_lock>:
 8006ae6:	4770      	bx	lr

08006ae8 <__malloc_unlock>:
 8006ae8:	4770      	bx	lr
	...

08006aec <_free_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	2900      	cmp	r1, #0
 8006af2:	d045      	beq.n	8006b80 <_free_r+0x94>
 8006af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af8:	1f0c      	subs	r4, r1, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bfb8      	it	lt
 8006afe:	18e4      	addlt	r4, r4, r3
 8006b00:	f7ff fff1 	bl	8006ae6 <__malloc_lock>
 8006b04:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <_free_r+0x98>)
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	4610      	mov	r0, r2
 8006b0a:	b933      	cbnz	r3, 8006b1a <_free_r+0x2e>
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6014      	str	r4, [r2, #0]
 8006b10:	4628      	mov	r0, r5
 8006b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b16:	f7ff bfe7 	b.w	8006ae8 <__malloc_unlock>
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	d90c      	bls.n	8006b38 <_free_r+0x4c>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	1862      	adds	r2, r4, r1
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bf04      	itt	eq
 8006b26:	681a      	ldreq	r2, [r3, #0]
 8006b28:	685b      	ldreq	r3, [r3, #4]
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	bf04      	itt	eq
 8006b2e:	1852      	addeq	r2, r2, r1
 8006b30:	6022      	streq	r2, [r4, #0]
 8006b32:	6004      	str	r4, [r0, #0]
 8006b34:	e7ec      	b.n	8006b10 <_free_r+0x24>
 8006b36:	4613      	mov	r3, r2
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	b10a      	cbz	r2, 8006b40 <_free_r+0x54>
 8006b3c:	42a2      	cmp	r2, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x4a>
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	1858      	adds	r0, r3, r1
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x74>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	4401      	add	r1, r0
 8006b4c:	1858      	adds	r0, r3, r1
 8006b4e:	4282      	cmp	r2, r0
 8006b50:	6019      	str	r1, [r3, #0]
 8006b52:	d1dd      	bne.n	8006b10 <_free_r+0x24>
 8006b54:	6810      	ldr	r0, [r2, #0]
 8006b56:	6852      	ldr	r2, [r2, #4]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	4401      	add	r1, r0
 8006b5c:	6019      	str	r1, [r3, #0]
 8006b5e:	e7d7      	b.n	8006b10 <_free_r+0x24>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x7c>
 8006b62:	230c      	movs	r3, #12
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	e7d3      	b.n	8006b10 <_free_r+0x24>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	1821      	adds	r1, r4, r0
 8006b6c:	428a      	cmp	r2, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6811      	ldreq	r1, [r2, #0]
 8006b72:	6852      	ldreq	r2, [r2, #4]
 8006b74:	6062      	str	r2, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1809      	addeq	r1, r1, r0
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	605c      	str	r4, [r3, #4]
 8006b7e:	e7c7      	b.n	8006b10 <_free_r+0x24>
 8006b80:	bd38      	pop	{r3, r4, r5, pc}
 8006b82:	bf00      	nop
 8006b84:	200001fc 	.word	0x200001fc

08006b88 <_realloc_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	460e      	mov	r6, r1
 8006b90:	b921      	cbnz	r1, 8006b9c <_realloc_r+0x14>
 8006b92:	4611      	mov	r1, r2
 8006b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b98:	f7ff b838 	b.w	8005c0c <_malloc_r>
 8006b9c:	b922      	cbnz	r2, 8006ba8 <_realloc_r+0x20>
 8006b9e:	f7ff ffa5 	bl	8006aec <_free_r>
 8006ba2:	4625      	mov	r5, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba8:	f000 f814 	bl	8006bd4 <_malloc_usable_size_r>
 8006bac:	42a0      	cmp	r0, r4
 8006bae:	d20f      	bcs.n	8006bd0 <_realloc_r+0x48>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f7ff f82a 	bl	8005c0c <_malloc_r>
 8006bb8:	4605      	mov	r5, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0f2      	beq.n	8006ba4 <_realloc_r+0x1c>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	f7fe fc0b 	bl	80053dc <memcpy>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff ff8f 	bl	8006aec <_free_r>
 8006bce:	e7e9      	b.n	8006ba4 <_realloc_r+0x1c>
 8006bd0:	4635      	mov	r5, r6
 8006bd2:	e7e7      	b.n	8006ba4 <_realloc_r+0x1c>

08006bd4 <_malloc_usable_size_r>:
 8006bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd8:	1f18      	subs	r0, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfbc      	itt	lt
 8006bde:	580b      	ldrlt	r3, [r1, r0]
 8006be0:	18c0      	addlt	r0, r0, r3
 8006be2:	4770      	bx	lr

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
