
f303_combinedsensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005378  08005378  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005378  08005378  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005378  08005378  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000070  080053f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  080053f0  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c49e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ee  00000000  00000000  0003c53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  0003e730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212b1  00000000  00000000  00041438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca20  00000000  00000000  000626e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca5d9  00000000  00000000  0006f109  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001396e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  00139760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005284 	.word	0x08005284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005284 	.word	0x08005284

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	607a      	str	r2, [r7, #4]
 800029a:	461a      	mov	r2, r3
 800029c:	460b      	mov	r3, r1
 800029e:	72fb      	strb	r3, [r7, #11]
 80002a0:	4613      	mov	r3, r2
 80002a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	685c      	ldr	r4, [r3, #4]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	6898      	ldr	r0, [r3, #8]
 80002ac:	893b      	ldrh	r3, [r7, #8]
 80002ae:	7af9      	ldrb	r1, [r7, #11]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	47a0      	blx	r4
 80002b4:	6178      	str	r0, [r7, #20]
  return ret;
 80002b6:	697b      	ldr	r3, [r7, #20]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd90      	pop	{r4, r7, pc}

080002c0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	607a      	str	r2, [r7, #4]
 80002ca:	461a      	mov	r2, r3
 80002cc:	460b      	mov	r3, r1
 80002ce:	72fb      	strb	r3, [r7, #11]
 80002d0:	4613      	mov	r3, r2
 80002d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	681c      	ldr	r4, [r3, #0]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	6898      	ldr	r0, [r3, #8]
 80002dc:	893b      	ldrh	r3, [r7, #8]
 80002de:	7af9      	ldrb	r1, [r7, #11]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	47a0      	blx	r4
 80002e4:	6178      	str	r0, [r7, #20]
  return ret;
 80002e6:	697b      	ldr	r3, [r7, #20]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	371c      	adds	r7, #28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	ee07 3a90 	vmov	s15, r3
 80002fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000302:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800031c <lps22hh_from_lsb_to_hpa+0x2c>
 8000306:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800030a:	eef0 7a66 	vmov.f32	s15, s13
}
 800030e:	eeb0 0a67 	vmov.f32	s0, s15
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	49800000 	.word	0x49800000

08000320 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 800032a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800032e:	ee07 3a90 	vmov	s15, r3
 8000332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000336:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000350 <lps22hh_from_lsb_to_celsius+0x30>
 800033a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800033e:	eef0 7a66 	vmov.f32	s15, s13
}
 8000342:	eeb0 0a67 	vmov.f32	s0, s15
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	42c80000 	.word	0x42c80000

08000354 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000360:	f107 0208 	add.w	r2, r7, #8
 8000364:	2301      	movs	r3, #1
 8000366:	2110      	movs	r1, #16
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f7ff ff91 	bl	8000290 <lps22hh_read_reg>
 800036e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d10f      	bne.n	8000396 <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	b2da      	uxtb	r2, r3
 800037e:	7a3b      	ldrb	r3, [r7, #8]
 8000380:	f362 0341 	bfi	r3, r2, #1, #1
 8000384:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000386:	f107 0208 	add.w	r2, r7, #8
 800038a:	2301      	movs	r3, #1
 800038c:	2110      	movs	r1, #16
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ff96 	bl	80002c0 <lps22hh_write_reg>
 8000394:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000396:	68fb      	ldr	r3, [r7, #12]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80003ac:	f107 0210 	add.w	r2, r7, #16
 80003b0:	2301      	movs	r3, #1
 80003b2:	2110      	movs	r1, #16
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff6b 	bl	8000290 <lps22hh_read_reg>
 80003ba:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d107      	bne.n	80003d2 <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80003c2:	f107 020c 	add.w	r2, r7, #12
 80003c6:	2301      	movs	r3, #1
 80003c8:	2111      	movs	r1, #17
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ff60 	bl	8000290 <lps22hh_read_reg>
 80003d0:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d10f      	bne.n	80003f8 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	7c3b      	ldrb	r3, [r7, #16]
 80003e2:	f362 1306 	bfi	r3, r2, #4, #3
 80003e6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80003e8:	f107 0210 	add.w	r2, r7, #16
 80003ec:	2301      	movs	r3, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff65 	bl	80002c0 <lps22hh_write_reg>
 80003f6:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d119      	bne.n	8000432 <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	091b      	lsrs	r3, r3, #4
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	7b3b      	ldrb	r3, [r7, #12]
 800040a:	f362 0341 	bfi	r3, r2, #1, #1
 800040e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2da      	uxtb	r2, r3
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	f362 0300 	bfi	r3, r2, #0, #1
 8000420:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8000422:	f107 020c 	add.w	r2, r7, #12
 8000426:	2301      	movs	r3, #1
 8000428:	2111      	movs	r1, #17
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff ff48 	bl	80002c0 <lps22hh_write_reg>
 8000430:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 8000432:	697b      	ldr	r3, [r7, #20]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8000446:	f107 0208 	add.w	r2, r7, #8
 800044a:	2302      	movs	r3, #2
 800044c:	212b      	movs	r1, #43	; 0x2b
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ff1e 	bl	8000290 <lps22hh_read_reg>
 8000454:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8000456:	7a7b      	ldrb	r3, [r7, #9]
 8000458:	b21a      	sxth	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000464:	b29b      	uxth	r3, r3
 8000466:	021b      	lsls	r3, r3, #8
 8000468:	b29a      	uxth	r2, r3
 800046a:	7a3b      	ldrb	r3, [r7, #8]
 800046c:	b29b      	uxth	r3, r3
 800046e:	4413      	add	r3, r2
 8000470:	b29b      	uxth	r3, r3
 8000472:	b21a      	sxth	r2, r3
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	801a      	strh	r2, [r3, #0]
  return ret;
 8000478:	68fb      	ldr	r3, [r7, #12]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800048c:	2301      	movs	r3, #1
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	210f      	movs	r1, #15
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff fefc 	bl	8000290 <lps22hh_read_reg>
 8000498:	60f8      	str	r0, [r7, #12]
  return ret;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80004b0:	f107 0208 	add.w	r2, r7, #8
 80004b4:	2301      	movs	r3, #1
 80004b6:	2111      	movs	r1, #17
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff fee9 	bl	8000290 <lps22hh_read_reg>
 80004be:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d10f      	bne.n	80004e6 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	7a3b      	ldrb	r3, [r7, #8]
 80004d0:	f362 0382 	bfi	r3, r2, #2, #1
 80004d4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2301      	movs	r3, #1
 80004dc:	2111      	movs	r1, #17
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff feee 	bl	80002c0 <lps22hh_write_reg>
 80004e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80004fa:	f107 0208 	add.w	r2, r7, #8
 80004fe:	2301      	movs	r3, #1
 8000500:	2111      	movs	r1, #17
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff fec4 	bl	8000290 <lps22hh_read_reg>
 8000508:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800050a:	7a3b      	ldrb	r3, [r7, #8]
 800050c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	701a      	strb	r2, [r3, #0]
  return ret;
 8000518:	68fb      	ldr	r3, [r7, #12]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000522:	b590      	push	{r4, r7, lr}
 8000524:	b087      	sub	sp, #28
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	461a      	mov	r2, r3
 800052e:	460b      	mov	r3, r1
 8000530:	72fb      	strb	r3, [r7, #11]
 8000532:	4613      	mov	r3, r2
 8000534:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	685c      	ldr	r4, [r3, #4]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6898      	ldr	r0, [r3, #8]
 800053e:	893b      	ldrh	r3, [r7, #8]
 8000540:	7af9      	ldrb	r1, [r7, #11]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	47a0      	blx	r4
 8000546:	6178      	str	r0, [r7, #20]
  return ret;
 8000548:	697b      	ldr	r3, [r7, #20]
}
 800054a:	4618      	mov	r0, r3
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd90      	pop	{r4, r7, pc}

08000552 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000552:	b590      	push	{r4, r7, lr}
 8000554:	b087      	sub	sp, #28
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	460b      	mov	r3, r1
 8000560:	72fb      	strb	r3, [r7, #11]
 8000562:	4613      	mov	r3, r2
 8000564:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681c      	ldr	r4, [r3, #0]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6898      	ldr	r0, [r3, #8]
 800056e:	893b      	ldrh	r3, [r7, #8]
 8000570:	7af9      	ldrb	r1, [r7, #11]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	47a0      	blx	r4
 8000576:	6178      	str	r0, [r7, #20]
  return ret;
 8000578:	697b      	ldr	r3, [r7, #20]
}
 800057a:	4618      	mov	r0, r3
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd90      	pop	{r4, r7, pc}
	...

08000584 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	ee07 3a90 	vmov	s15, r3
 8000596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800059a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80005b0 <lsm6dsr_from_fs2g_to_mg+0x2c>
 800059e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80005a2:	eeb0 0a67 	vmov.f32	s0, s15
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	3d79db23 	.word	0x3d79db23

080005b4 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80005be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80005e0 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80005ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	428c0000 	.word	0x428c0000

080005e4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	2301      	movs	r3, #1
 80005f6:	2110      	movs	r1, #16
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff92 	bl	8000522 <lsm6dsr_read_reg>
 80005fe:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10f      	bne.n	8000626 <lsm6dsr_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7a3b      	ldrb	r3, [r7, #8]
 8000610:	f362 0383 	bfi	r3, r2, #2, #2
 8000614:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8000616:	f107 0208 	add.w	r2, r7, #8
 800061a:	2301      	movs	r3, #1
 800061c:	2110      	movs	r1, #16
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff97 	bl	8000552 <lsm6dsr_write_reg>
 8000624:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 fc18 	bl	8000e7c <lsm6dsr_fsm_enable_get>
 800064c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	f040 80c4 	bne.w	80007de <lsm6dsr_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800065c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800065e:	7b3b      	ldrb	r3, [r7, #12]
 8000660:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000664:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000666:	4313      	orrs	r3, r2
 8000668:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800066a:	7b3b      	ldrb	r3, [r7, #12]
 800066c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000670:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8000672:	4313      	orrs	r3, r2
 8000674:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800067c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000688:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800068a:	4313      	orrs	r3, r2
 800068c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000694:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8000696:	4313      	orrs	r3, r2
 8000698:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800069a:	7b3b      	ldrb	r3, [r7, #12]
 800069c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80006a6:	7b3b      	ldrb	r3, [r7, #12]
 80006a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006c4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
 80006cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80006d0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80006d6:	7b7b      	ldrb	r3, [r7, #13]
 80006d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80006e2:	7b7b      	ldrb	r3, [r7, #13]
 80006e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80006e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000700:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8000702:	4313      	orrs	r3, r2
 8000704:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8000706:	7b7b      	ldrb	r3, [r7, #13]
 8000708:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800070c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800070e:	4313      	orrs	r3, r2
 8000710:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000712:	2b01      	cmp	r3, #1
 8000714:	d163      	bne.n	80007de <lsm6dsr_xl_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8000716:	f107 030b 	add.w	r3, r7, #11
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 fbd9 	bl	8000ed4 <lsm6dsr_fsm_data_rate_get>
 8000722:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d159      	bne.n	80007de <lsm6dsr_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d853      	bhi.n	80007d8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <lsm6dsr_xl_data_rate_set+0x108>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000749 	.word	0x08000749
 800073c:	0800075b 	.word	0x0800075b
 8000740:	08000779 	.word	0x08000779
 8000744:	080007a3 	.word	0x080007a3
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <lsm6dsr_xl_data_rate_set+0x124>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800074e:	2301      	movs	r3, #1
 8000750:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000752:	e045      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	75fb      	strb	r3, [r7, #23]
            break;
 8000758:	e042      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <lsm6dsr_xl_data_rate_set+0x136>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8000760:	2302      	movs	r3, #2
 8000762:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000764:	e03c      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d102      	bne.n	8000772 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800076c:	2302      	movs	r3, #2
 800076e:	75fb      	strb	r3, [r7, #23]
            break;
 8000770:	e036      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	75fb      	strb	r3, [r7, #23]
            break;
 8000776:	e033      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d102      	bne.n	8000784 <lsm6dsr_xl_data_rate_set+0x154>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800077e:	2303      	movs	r3, #3
 8000780:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8000782:	e02d      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800078a:	2303      	movs	r3, #3
 800078c:	75fb      	strb	r3, [r7, #23]
            break;
 800078e:	e027      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d102      	bne.n	800079c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8000796:	2303      	movs	r3, #3
 8000798:	75fb      	strb	r3, [r7, #23]
            break;
 800079a:	e021      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	75fb      	strb	r3, [r7, #23]
            break;
 80007a0:	e01e      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80007a8:	2304      	movs	r3, #4
 80007aa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80007ac:	e018      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d102      	bne.n	80007ba <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80007b4:	2304      	movs	r3, #4
 80007b6:	75fb      	strb	r3, [r7, #23]
            break;
 80007b8:	e012      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d102      	bne.n	80007c6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80007c0:	2304      	movs	r3, #4
 80007c2:	75fb      	strb	r3, [r7, #23]
            break;
 80007c4:	e00c      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d102      	bne.n	80007d2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80007cc:	2304      	movs	r3, #4
 80007ce:	75fb      	strb	r3, [r7, #23]
            break;
 80007d0:	e006      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	75fb      	strb	r3, [r7, #23]
            break;
 80007d6:	e003      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	75fb      	strb	r3, [r7, #23]
            break;
 80007dc:	e000      	b.n	80007e0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80007de:	bf00      	nop
    }
  }

  if (ret == 0) {
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d107      	bne.n	80007f6 <lsm6dsr_xl_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80007e6:	f107 0208 	add.w	r2, r7, #8
 80007ea:	2301      	movs	r3, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fe97 	bl	8000522 <lsm6dsr_read_reg>
 80007f4:	6138      	str	r0, [r7, #16]
                           1);
  }

  if (ret == 0) {
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10f      	bne.n	800081c <lsm6dsr_xl_data_rate_set+0x1ec>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	b2da      	uxtb	r2, r3
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	f362 1307 	bfi	r3, r2, #4, #4
 800080a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800080c:	f107 0208 	add.w	r2, r7, #8
 8000810:	2301      	movs	r3, #1
 8000812:	2110      	movs	r1, #16
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fe9c 	bl	8000552 <lsm6dsr_write_reg>
 800081a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800081c:	693b      	ldr	r3, [r7, #16]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop

08000828 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	2301      	movs	r3, #1
 800083a:	2111      	movs	r1, #17
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff fe70 	bl	8000522 <lsm6dsr_read_reg>
 8000842:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10f      	bne.n	800086a <lsm6dsr_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7a3b      	ldrb	r3, [r7, #8]
 8000854:	f362 0303 	bfi	r3, r2, #0, #4
 8000858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800085a:	f107 0208 	add.w	r2, r7, #8
 800085e:	2301      	movs	r3, #1
 8000860:	2111      	movs	r1, #17
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe75 	bl	8000552 <lsm6dsr_write_reg>
 8000868:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 faf6 	bl	8000e7c <lsm6dsr_fsm_enable_get>
 8000890:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f040 80c4 	bne.w	8000a22 <lsm6dsr_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800089a:	7b3b      	ldrb	r3, [r7, #12]
 800089c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80008a2:	7b3b      	ldrb	r3, [r7, #12]
 80008a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008a8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80008b4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80008ba:	7b3b      	ldrb	r3, [r7, #12]
 80008bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80008c6:	7b3b      	ldrb	r3, [r7, #12]
 80008c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80008d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80008da:	4313      	orrs	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80008de:	7b3b      	ldrb	r3, [r7, #12]
 80008e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80008e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80008ea:	7b3b      	ldrb	r3, [r7, #12]
 80008ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80008f6:	7b7b      	ldrb	r3, [r7, #13]
 80008f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008fc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80008fe:	4313      	orrs	r3, r2
 8000900:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000908:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800090a:	4313      	orrs	r3, r2
 800090c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800090e:	7b7b      	ldrb	r3, [r7, #13]
 8000910:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000914:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8000916:	4313      	orrs	r3, r2
 8000918:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800091a:	7b7b      	ldrb	r3, [r7, #13]
 800091c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000920:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8000922:	4313      	orrs	r3, r2
 8000924:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8000926:	7b7b      	ldrb	r3, [r7, #13]
 8000928:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800092c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800092e:	4313      	orrs	r3, r2
 8000930:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8000932:	7b7b      	ldrb	r3, [r7, #13]
 8000934:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000938:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800093a:	4313      	orrs	r3, r2
 800093c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800093e:	7b7b      	ldrb	r3, [r7, #13]
 8000940:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000944:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8000946:	4313      	orrs	r3, r2
 8000948:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000950:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8000952:	4313      	orrs	r3, r2
 8000954:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000956:	2b01      	cmp	r3, #1
 8000958:	d163      	bne.n	8000a22 <lsm6dsr_gy_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800095a:	f107 030b 	add.w	r3, r7, #11
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fab7 	bl	8000ed4 <lsm6dsr_fsm_data_rate_get>
 8000966:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d159      	bne.n	8000a22 <lsm6dsr_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d853      	bhi.n	8000a1c <lsm6dsr_gy_data_rate_set+0x1a8>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <lsm6dsr_gy_data_rate_set+0x108>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800098d 	.word	0x0800098d
 8000980:	0800099f 	.word	0x0800099f
 8000984:	080009bd 	.word	0x080009bd
 8000988:	080009e7 	.word	0x080009e7
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <lsm6dsr_gy_data_rate_set+0x124>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8000996:	e045      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	75fb      	strb	r3, [r7, #23]
            break;
 800099c:	e042      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <lsm6dsr_gy_data_rate_set+0x136>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80009a4:	2302      	movs	r3, #2
 80009a6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80009a8:	e03c      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d102      	bne.n	80009b6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80009b0:	2302      	movs	r3, #2
 80009b2:	75fb      	strb	r3, [r7, #23]
            break;
 80009b4:	e036      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	75fb      	strb	r3, [r7, #23]
            break;
 80009ba:	e033      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <lsm6dsr_gy_data_rate_set+0x154>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80009c2:	2303      	movs	r3, #3
 80009c4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80009c6:	e02d      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d102      	bne.n	80009d4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80009ce:	2303      	movs	r3, #3
 80009d0:	75fb      	strb	r3, [r7, #23]
            break;
 80009d2:	e027      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d102      	bne.n	80009e0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80009da:	2303      	movs	r3, #3
 80009dc:	75fb      	strb	r3, [r7, #23]
            break;
 80009de:	e021      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	75fb      	strb	r3, [r7, #23]
            break;
 80009e4:	e01e      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80009ec:	2304      	movs	r3, #4
 80009ee:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80009f0:	e018      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d102      	bne.n	80009fe <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80009f8:	2304      	movs	r3, #4
 80009fa:	75fb      	strb	r3, [r7, #23]
            break;
 80009fc:	e012      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d102      	bne.n	8000a0a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8000a04:	2304      	movs	r3, #4
 8000a06:	75fb      	strb	r3, [r7, #23]
            break;
 8000a08:	e00c      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d102      	bne.n	8000a16 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8000a10:	2304      	movs	r3, #4
 8000a12:	75fb      	strb	r3, [r7, #23]
            break;
 8000a14:	e006      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	75fb      	strb	r3, [r7, #23]
            break;
 8000a1a:	e003      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	75fb      	strb	r3, [r7, #23]
            break;
 8000a20:	e000      	b.n	8000a24 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8000a22:	bf00      	nop
    }
  }

  if (ret == 0) {
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d107      	bne.n	8000a3a <lsm6dsr_gy_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000a2a:	f107 0208 	add.w	r2, r7, #8
 8000a2e:	2301      	movs	r3, #1
 8000a30:	2111      	movs	r1, #17
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fd75 	bl	8000522 <lsm6dsr_read_reg>
 8000a38:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <lsm6dsr_gy_data_rate_set+0x1ec>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	7a3b      	ldrb	r3, [r7, #8]
 8000a4a:	f362 1307 	bfi	r3, r2, #4, #4
 8000a4e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	2301      	movs	r3, #1
 8000a56:	2111      	movs	r1, #17
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fd7a 	bl	8000552 <lsm6dsr_write_reg>
 8000a5e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8000a60:	693b      	ldr	r3, [r7, #16]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop

08000a6c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000a78:	f107 0208 	add.w	r2, r7, #8
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	2112      	movs	r1, #18
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fd4e 	bl	8000522 <lsm6dsr_read_reg>
 8000a86:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10f      	bne.n	8000aae <lsm6dsr_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	7a3b      	ldrb	r3, [r7, #8]
 8000a98:	f362 1386 	bfi	r3, r2, #6, #1
 8000a9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000a9e:	f107 0208 	add.w	r2, r7, #8
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2112      	movs	r1, #18
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fd53 	bl	8000552 <lsm6dsr_write_reg>
 8000aac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8000ac2:	f107 0208 	add.w	r2, r7, #8
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	211e      	movs	r1, #30
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fd29 	bl	8000522 <lsm6dsr_read_reg>
 8000ad0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8000ad2:	7a3b      	ldrb	r3, [r7, #8]
 8000ad4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	701a      	strb	r2, [r3, #0]
  return ret;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	2301      	movs	r3, #1
 8000afa:	211e      	movs	r1, #30
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fd10 	bl	8000522 <lsm6dsr_read_reg>
 8000b02:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8000b04:	7a3b      	ldrb	r3, [r7, #8]
 8000b06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	701a      	strb	r2, [r3, #0]
  return ret;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8000b26:	f107 020c 	add.w	r2, r7, #12
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	2122      	movs	r1, #34	; 0x22
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fcf7 	bl	8000522 <lsm6dsr_read_reg>
 8000b34:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000b36:	7b7b      	ldrb	r3, [r7, #13]
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	7b3b      	ldrb	r3, [r7, #12]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	b212      	sxth	r2, r2
 8000b60:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3302      	adds	r3, #2
 8000b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	b212      	sxth	r2, r2
 8000b7e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000b80:	7c7a      	ldrb	r2, [r7, #17]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3304      	adds	r3, #4
 8000b86:	b212      	sxth	r2, r2
 8000b88:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	7c3b      	ldrb	r3, [r7, #16]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	b212      	sxth	r2, r2
 8000ba6:	801a      	strh	r2, [r3, #0]
  return ret;
 8000ba8:	697b      	ldr	r3, [r7, #20]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8000bbc:	f107 020c 	add.w	r2, r7, #12
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	2128      	movs	r1, #40	; 0x28
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fcac 	bl	8000522 <lsm6dsr_read_reg>
 8000bca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000bcc:	7b7b      	ldrb	r3, [r7, #13]
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	7b3b      	ldrb	r3, [r7, #12]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	4413      	add	r3, r2
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	b212      	sxth	r2, r2
 8000bf6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3302      	adds	r3, #2
 8000c12:	b212      	sxth	r2, r2
 8000c14:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000c16:	7c7a      	ldrb	r2, [r7, #17]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	b212      	sxth	r2, r2
 8000c1e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3304      	adds	r3, #4
 8000c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	7c3b      	ldrb	r3, [r7, #16]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	b212      	sxth	r2, r2
 8000c3c:	801a      	strh	r2, [r3, #0]
  return ret;
 8000c3e:	697b      	ldr	r3, [r7, #20]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8000c54:	f107 0208 	add.w	r2, r7, #8
 8000c58:	2301      	movs	r3, #1
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fc60 	bl	8000522 <lsm6dsr_read_reg>
 8000c62:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <lsm6dsr_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	7a3b      	ldrb	r3, [r7, #8]
 8000c74:	f362 1387 	bfi	r3, r2, #6, #2
 8000c78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8000c7a:	f107 0208 	add.w	r2, r7, #8
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2101      	movs	r1, #1
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fc65 	bl	8000552 <lsm6dsr_write_reg>
 8000c88:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fc3c 	bl	8000522 <lsm6dsr_read_reg>
 8000caa:	60f8      	str	r0, [r7, #12]
  return ret;
 8000cac:	68fb      	ldr	r3, [r7, #12]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cc2:	f107 0208 	add.w	r2, r7, #8
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2112      	movs	r1, #18
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fc29 	bl	8000522 <lsm6dsr_read_reg>
 8000cd0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10f      	bne.n	8000cf8 <lsm6dsr_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	f362 0300 	bfi	r3, r2, #0, #1
 8000ce6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	2301      	movs	r3, #1
 8000cee:	2112      	movs	r1, #18
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fc2e 	bl	8000552 <lsm6dsr_write_reg>
 8000cf6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000d0c:	f107 0208 	add.w	r2, r7, #8
 8000d10:	2301      	movs	r3, #1
 8000d12:	2112      	movs	r1, #18
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fc04 	bl	8000522 <lsm6dsr_read_reg>
 8000d1a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000d1c:	7a3b      	ldrb	r3, [r7, #8]
 8000d1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	701a      	strb	r2, [r3, #0]
  return ret;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8000d40:	f107 0208 	add.w	r2, r7, #8
 8000d44:	2301      	movs	r3, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fbea 	bl	8000522 <lsm6dsr_read_reg>
 8000d4e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <lsm6dsr_xl_filter_lp2_set+0x42>
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	7a3b      	ldrb	r3, [r7, #8]
 8000d60:	f362 0341 	bfi	r3, r2, #1, #1
 8000d64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8000d66:	f107 0208 	add.w	r2, r7, #8
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fbef 	bl	8000552 <lsm6dsr_write_reg>
 8000d74:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl,
 8000d8c:	f107 0208 	add.w	r2, r7, #8
 8000d90:	2301      	movs	r3, #1
 8000d92:	2117      	movs	r1, #23
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fbc4 	bl	8000522 <lsm6dsr_read_reg>
 8000d9a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d121      	bne.n	8000de6 <lsm6dsr_xl_hp_path_on_out_set+0x66>
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	7a3b      	ldrb	r3, [r7, #8]
 8000dae:	f362 0382 	bfi	r3, r2, #2, #1
 8000db2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	f362 1304 	bfi	r3, r2, #4, #1
 8000dc4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	7a3b      	ldrb	r3, [r7, #8]
 8000dd0:	f362 1347 	bfi	r3, r2, #5, #3
 8000dd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8000dd6:	f107 0208 	add.w	r2, r7, #8
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2117      	movs	r1, #23
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fbb7 	bl	8000552 <lsm6dsr_write_reg>
 8000de4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	2301      	movs	r3, #1
 8000e02:	2118      	movs	r1, #24
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fb8c 	bl	8000522 <lsm6dsr_read_reg>
 8000e0a:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d111      	bne.n	8000e36 <lsm6dsr_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	09db      	lsrs	r3, r3, #7
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	7c3b      	ldrb	r3, [r7, #16]
 8000e20:	f362 0341 	bfi	r3, r2, #1, #1
 8000e24:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8000e26:	f107 0210 	add.w	r2, r7, #16
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	2118      	movs	r1, #24
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fb8f 	bl	8000552 <lsm6dsr_write_reg>
 8000e34:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d107      	bne.n	8000e4c <lsm6dsr_i3c_disable_set+0x5c>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	2301      	movs	r3, #1
 8000e42:	2162      	movs	r1, #98	; 0x62
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fb6c 	bl	8000522 <lsm6dsr_read_reg>
 8000e4a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <lsm6dsr_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	f362 03c4 	bfi	r3, r2, #3, #2
 8000e60:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000e62:	f107 020c 	add.w	r2, r7, #12
 8000e66:	2301      	movs	r3, #1
 8000e68:	2162      	movs	r1, #98	; 0x62
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fb71 	bl	8000552 <lsm6dsr_write_reg>
 8000e70:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8000e72:	697b      	ldr	r3, [r7, #20]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000e86:	2102      	movs	r1, #2
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fedd 	bl	8000c48 <lsm6dsr_mem_bank_set>
 8000e8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <lsm6dsr_fsm_enable_get+0x28>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8000e96:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2146      	movs	r1, #70	; 0x46
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fb40 	bl	8000522 <lsm6dsr_read_reg>
 8000ea2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <lsm6dsr_fsm_enable_get+0x3e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2147      	movs	r1, #71	; 0x47
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fb35 	bl	8000522 <lsm6dsr_read_reg>
 8000eb8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <lsm6dsr_fsm_enable_get+0x4e>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fec0 	bl	8000c48 <lsm6dsr_mem_bank_set>
 8000ec8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000ede:	2102      	movs	r1, #2
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff feb1 	bl	8000c48 <lsm6dsr_mem_bank_set>
 8000ee6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d107      	bne.n	8000efe <lsm6dsr_fsm_data_rate_get+0x2a>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8000eee:	f107 0208 	add.w	r2, r7, #8
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	215f      	movs	r1, #95	; 0x5f
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fb13 	bl	8000522 <lsm6dsr_read_reg>
 8000efc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <lsm6dsr_fsm_data_rate_get+0x3a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000f04:	2100      	movs	r1, #0
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fe9e 	bl	8000c48 <lsm6dsr_mem_bank_set>
 8000f0c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8000f0e:	7a3b      	ldrb	r3, [r7, #8]
 8000f10:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d81a      	bhi.n	8000f50 <lsm6dsr_fsm_data_rate_get+0x7c>
 8000f1a:	a201      	add	r2, pc, #4	; (adr r2, 8000f20 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f31 	.word	0x08000f31
 8000f24:	08000f39 	.word	0x08000f39
 8000f28:	08000f41 	.word	0x08000f41
 8000f2c:	08000f49 	.word	0x08000f49
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
      break;
 8000f36:	e00f      	b.n	8000f58 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
      break;
 8000f3e:	e00b      	b.n	8000f58 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
      break;
 8000f46:	e007      	b.n	8000f58 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	701a      	strb	r2, [r3, #0]
      break;
 8000f4e:	e003      	b.n	8000f58 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
      break;
 8000f56:	bf00      	nop
  }

  return ret;
 8000f58:	68fb      	ldr	r3, [r7, #12]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b095      	sub	sp, #84	; 0x54
 8000f68:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fd49 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f89f 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f96d 	bl	8001250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 f93b 	bl	80011f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f8f9 	bl	8001170 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors
  stmdev_ctx_t dev_ctx_lsm = lsm6dsr_init();
 8000f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f9d4 	bl	8001330 <lsm6dsr_init>
  stmdev_ctx_t dev_ctx_lps = lps22hh_init();
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fac9 	bl	8001524 <lps22hh_init>

  // Variables to store converted sensor data
  float acceleration[] = {0, 0, 0};
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  float angular_rate[]= {0, 0, 0};
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  float pressure = 0;
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  float temperature = 0;
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	get_acceleration(dev_ctx_lsm, acceleration);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	f000 fa1e 	bl	800140c <get_acceleration>
	get_angvelocity(dev_ctx_lsm, angular_rate);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fda:	f000 fa5d 	bl	8001498 <get_angvelocity>
	get_pressure(dev_ctx_lps, &pressure);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	f107 0220 	add.w	r2, r7, #32
 8000fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe6:	f000 faeb 	bl	80015c0 <get_pressure>
	get_temperature(dev_ctx_lps,  &temperature);
 8000fea:	463b      	mov	r3, r7
 8000fec:	f107 0220 	add.w	r2, r7, #32
 8000ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff2:	f000 fb0d 	bl	8001610 <get_temperature>

	sprintf((char *)tx_buffer, "Acceleration [mg]:%hu\t%hu\t%hu\r\nAngular rate [mdps]:%hu\t%hu\t%hu\r\nPressure [hPa]:%hu\t Temperature [degC]:%hu\r\n",
						  (uint16_t)acceleration[0], (uint16_t)acceleration[1], (uint16_t)acceleration[2],
 8000ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	b29b      	uxth	r3, r3
	sprintf((char *)tx_buffer, "Acceleration [mg]:%hu\t%hu\t%hu\r\nAngular rate [mdps]:%hu\t%hu\t%hu\r\nPressure [hPa]:%hu\t Temperature [degC]:%hu\r\n",
 8001004:	461e      	mov	r6, r3
						  (uint16_t)acceleration[0], (uint16_t)acceleration[1], (uint16_t)acceleration[2],
 8001006:	edd7 7a06 	vldr	s15, [r7, #24]
 800100a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	b29b      	uxth	r3, r3
	sprintf((char *)tx_buffer, "Acceleration [mg]:%hu\t%hu\t%hu\r\nAngular rate [mdps]:%hu\t%hu\t%hu\r\nPressure [hPa]:%hu\t Temperature [degC]:%hu\r\n",
 8001014:	469c      	mov	ip, r3
						  (uint16_t)acceleration[0], (uint16_t)acceleration[1], (uint16_t)acceleration[2],
 8001016:	edd7 7a07 	vldr	s15, [r7, #28]
 800101a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	b29b      	uxth	r3, r3
						  (uint16_t)angular_rate[0], (uint16_t)angular_rate[1], (uint16_t)angular_rate[2],
 8001024:	edd7 7a02 	vldr	s15, [r7, #8]
 8001028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800102c:	ee17 2a90 	vmov	r2, s15
 8001030:	b292      	uxth	r2, r2
 8001032:	edd7 7a03 	vldr	s15, [r7, #12]
 8001036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103a:	ee17 1a90 	vmov	r1, s15
 800103e:	b289      	uxth	r1, r1
 8001040:	edd7 7a04 	vldr	s15, [r7, #16]
 8001044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001048:	ee17 0a90 	vmov	r0, s15
 800104c:	b280      	uxth	r0, r0
						  (uint16_t)pressure, (uint16_t)temperature);
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001056:	ee17 4a90 	vmov	r4, s15
 800105a:	b2a4      	uxth	r4, r4
 800105c:	edd7 7a00 	vldr	s15, [r7]
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	ee17 5a90 	vmov	r5, s15
 8001068:	b2ad      	uxth	r5, r5
	sprintf((char *)tx_buffer, "Acceleration [mg]:%hu\t%hu\t%hu\r\nAngular rate [mdps]:%hu\t%hu\t%hu\r\nPressure [hPa]:%hu\t Temperature [degC]:%hu\r\n",
 800106a:	9505      	str	r5, [sp, #20]
 800106c:	9404      	str	r4, [sp, #16]
 800106e:	9003      	str	r0, [sp, #12]
 8001070:	9102      	str	r1, [sp, #8]
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4663      	mov	r3, ip
 8001078:	4632      	mov	r2, r6
 800107a:	490a      	ldr	r1, [pc, #40]	; (80010a4 <main+0x140>)
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <main+0x144>)
 800107e:	f003 fcfb 	bl	8004a78 <siprintf>
	HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer ), 1000);
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <main+0x144>)
 8001084:	f7ff f8ac 	bl	80001e0 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	4905      	ldr	r1, [pc, #20]	; (80010a8 <main+0x144>)
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <main+0x148>)
 8001094:	f003 f8ee 	bl	8004274 <HAL_UART_Transmit>


	HAL_Delay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f000 fd16 	bl	8001acc <HAL_Delay>
	get_acceleration(dev_ctx_lsm, acceleration);
 80010a0:	e78f      	b.n	8000fc2 <main+0x5e>
 80010a2:	bf00      	nop
 80010a4:	0800529c 	.word	0x0800529c
 80010a8:	2000008c 	.word	0x2000008c
 80010ac:	200004e8 	.word	0x200004e8

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a6      	sub	sp, #152	; 0x98
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fcd2 	bl	8004a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2258      	movs	r2, #88	; 0x58
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fcc4 	bl	8004a68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fcf8 	bl	8002b04 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800111a:	f000 f901 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fbf8 	bl	8003930 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001146:	f000 f8eb 	bl	8001320 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800114a:	2322      	movs	r3, #34	; 0x22
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fe1f 	bl	8003d9c <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001164:	f000 f8dc 	bl	8001320 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3798      	adds	r7, #152	; 0x98
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C1_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C1_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011ac:	f000 ff38 	bl	8002020 <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 f8b3 	bl	8001320 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011be:	f001 fc09 	bl	80029d4 <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 f8aa 	bl	8001320 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011d0:	f001 fc4b 	bl	8002a6a <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 f8a1 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000049c 	.word	0x2000049c
 80011e8:	40005400 	.word	0x40005400
 80011ec:	2000090e 	.word	0x2000090e

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USART2_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_USART2_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_USART2_UART_Init+0x58>)
 80011fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USART2_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART2_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART2_UART_Init+0x58>)
 8001234:	f002 ffd0 	bl	80041d8 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f86f 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200004e8 	.word	0x200004e8
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_GPIO_Init+0xc4>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <MX_GPIO_Init+0xc4>)
 800126c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_GPIO_Init+0xc4>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <MX_GPIO_Init+0xc4>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a24      	ldr	r2, [pc, #144]	; (8001314 <MX_GPIO_Init+0xc4>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_GPIO_Init+0xc4>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_GPIO_Init+0xc4>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_GPIO_Init+0xc4>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_GPIO_Init+0xc4>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_GPIO_Init+0xc4>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <MX_GPIO_Init+0xc4>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_GPIO_Init+0xc4>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f000 fe8f 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_GPIO_Init+0xc8>)
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_GPIO_Init+0xcc>)
 80012e8:	f000 fcf8 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ec:	2320      	movs	r3, #32
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f000 fce9 	bl	8001cdc <HAL_GPIO_Init>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	10210000 	.word	0x10210000
 800131c:	48000800 	.word	0x48000800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <lsm6dsr_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSR Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsr_init(void){
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsr;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsr.write_reg = lsm6dsr_write;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <lsm6dsr_init+0xc8>)
 800133a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsr.read_reg = lsm6dsr_read;
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <lsm6dsr_init+0xcc>)
 800133e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsr.handle = &SENSOR_BUS;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <lsm6dsr_init+0xd0>)
 8001342:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001344:	200a      	movs	r0, #10
 8001346:	f000 fa05 	bl	8001754 <platform_delay>

	/* Check device ID */
	lsm6dsr_device_id_get(&dev_ctx_lsm6dsr, &whoamI_lsm6dsr);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	492d      	ldr	r1, [pc, #180]	; (8001404 <lsm6dsr_init+0xd4>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fc9f 	bl	8000c94 <lsm6dsr_device_id_get>

	if (whoamI_lsm6dsr != LSM6DSR_ID)
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <lsm6dsr_init+0xd4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b6b      	cmp	r3, #107	; 0x6b
 800135c:	d000      	beq.n	8001360 <lsm6dsr_init+0x30>
	while (1);
 800135e:	e7fe      	b.n	800135e <lsm6dsr_init+0x2e>

	/* Restore default configuration */
	lsm6dsr_reset_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fca5 	bl	8000cb6 <lsm6dsr_reset_set>

	do {
	lsm6dsr_reset_get(&dev_ctx_lsm6dsr, &rst_lsm6dsr);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4925      	ldr	r1, [pc, #148]	; (8001408 <lsm6dsr_init+0xd8>)
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fcc5 	bl	8000d02 <lsm6dsr_reset_get>
	} while (rst_lsm6dsr);
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <lsm6dsr_init+0xd8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f5      	bne.n	800136c <lsm6dsr_init+0x3c>

	/* Disable I3C interface */
	lsm6dsr_i3c_disable_set(&dev_ctx_lsm6dsr, LSM6DSR_I3C_DISABLE);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fd32 	bl	8000df0 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb6a 	bl	8000a6c <lsm6dsr_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_XL_ODR_12Hz5);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f946 	bl	8000630 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_GY_ODR_12Hz5);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fa62 	bl	8000874 <lsm6dsr_gy_data_rate_set>

	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2g);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f914 	bl	80005e4 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2000dps);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	210c      	movs	r1, #12
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fa30 	bl	8000828 <lsm6dsr_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&dev_ctx_lsm6dsr, LSM6DSR_LP_ODR_DIV_100);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2104      	movs	r1, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcd6 	bl	8000d80 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fcaa 	bl	8000d34 <lsm6dsr_xl_filter_lp2_set>

	return dev_ctx_lsm6dsr;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	461c      	mov	r4, r3
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	0800166d 	.word	0x0800166d
 80013fc:	080016a7 	.word	0x080016a7
 8001400:	2000049c 	.word	0x2000049c
 8001404:	20000484 	.word	0x20000484
 8001408:	20000485 	.word	0x20000485

0800140c <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsr, float *acceleration_mg){
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	1d3c      	adds	r4, r7, #4
 8001414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001418:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsr_xl_flag_data_ready_get(&dev_ctx_lsm6dsr, &reg);
 800141a:	f107 0217 	add.w	r2, r7, #23
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb48 	bl	8000ab8 <lsm6dsr_xl_flag_data_ready_get>

	if (reg) {
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d02d      	beq.n	800148a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800142e:	2206      	movs	r2, #6
 8001430:	2100      	movs	r1, #0
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <get_acceleration+0x88>)
 8001434:	f003 fb18 	bl	8004a68 <memset>
	  lsm6dsr_acceleration_raw_get(&dev_ctx_lsm6dsr, data_raw_acceleration);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4916      	ldr	r1, [pc, #88]	; (8001494 <get_acceleration+0x88>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fbb8 	bl	8000bb2 <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <get_acceleration+0x88>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89b 	bl	8000584 <lsm6dsr_from_fs2g_to_mg>
 800144e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <get_acceleration+0x88>)
 800145a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	1d1c      	adds	r4, r3, #4
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff f88e 	bl	8000584 <lsm6dsr_from_fs2g_to_mg>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 800146c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <get_acceleration+0x88>)
 8001472:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f103 0408 	add.w	r4, r3, #8
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff f881 	bl	8000584 <lsm6dsr_from_fs2g_to_mg>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001486:	edc4 7a00 	vstr	s15, [r4]
	}

}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	20000474 	.word	0x20000474

08001498 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsr, float *angular_rate_mdps){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	1d3c      	adds	r4, r7, #4
 80014a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014a4:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsr_gy_flag_data_ready_get(&dev_ctx_lsm6dsr, &reg);
 80014a6:	f107 0217 	add.w	r2, r7, #23
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fb1b 	bl	8000aea <lsm6dsr_gy_flag_data_ready_get>

	if (reg) {
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d02d      	beq.n	8001516 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80014ba:	2206      	movs	r2, #6
 80014bc:	2100      	movs	r1, #0
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <get_angvelocity+0x88>)
 80014c0:	f003 fad2 	bl	8004a68 <memset>
	  lsm6dsr_angular_rate_raw_get(&dev_ctx_lsm6dsr, data_raw_angular_rate);
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4916      	ldr	r1, [pc, #88]	; (8001520 <get_angvelocity+0x88>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb27 	bl	8000b1c <lsm6dsr_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <get_angvelocity+0x88>)
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f86d 	bl	80005b4 <lsm6dsr_from_fs2000dps_to_mdps>
 80014da:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <get_angvelocity+0x88>)
 80014e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	1d1c      	adds	r4, r3, #4
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff f860 	bl	80005b4 <lsm6dsr_from_fs2000dps_to_mdps>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 80014f8:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <get_angvelocity+0x88>)
 80014fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f103 0408 	add.w	r4, r3, #8
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff f853 	bl	80005b4 <lsm6dsr_from_fs2000dps_to_mdps>
 800150e:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001512:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	2000047c 	.word	0x2000047c

08001524 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <lps22hh_init+0x88>)
 800152e:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <lps22hh_init+0x8c>)
 8001532:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <lps22hh_init+0x90>)
 8001536:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001538:	200a      	movs	r0, #10
 800153a:	f000 f90b 	bl	8001754 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <lps22hh_init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	491b      	ldr	r1, [pc, #108]	; (80015b8 <lps22hh_init+0x94>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff99 	bl	8000482 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID )
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <lps22hh_init+0x94>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2bb3      	cmp	r3, #179	; 0xb3
 8001556:	d000      	beq.n	800155a <lps22hh_init+0x36>
	while (1); /*manage here device not found */
 8001558:	e7fe      	b.n	8001558 <lps22hh_init+0x34>

	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff9f 	bl	80004a4 <lps22hh_reset_set>

	do {
	lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4914      	ldr	r1, [pc, #80]	; (80015bc <lps22hh_init+0x98>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffbf 	bl	80004f0 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <lps22hh_init+0x98>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f5      	bne.n	8001566 <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2101      	movs	r1, #1
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fee7 	bl	8000354 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_10_Hz_LOW_NOISE);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2112      	movs	r1, #18
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff07 	bl	80003a0 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	461c      	mov	r4, r3
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800159e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	080016e1 	.word	0x080016e1
 80015b0:	0800171b 	.word	0x0800171b
 80015b4:	2000049c 	.word	0x2000049c
 80015b8:	2000048c 	.word	0x2000048c
 80015bc:	2000048d 	.word	0x2000048d

080015c0 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	1d3c      	adds	r4, r7, #4
 80015c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015cc:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80015ce:	f107 0214 	add.w	r2, r7, #20
 80015d2:	1d38      	adds	r0, r7, #4
 80015d4:	2301      	movs	r3, #1
 80015d6:	2127      	movs	r1, #39	; 0x27
 80015d8:	f7fe fe5a 	bl	8000290 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <get_pressure+0x42>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <get_pressure+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <get_pressure+0x4c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fe7c 	bl	80002f0 <lps22hh_from_lsb_to_hpa>
 80015f8:	eef0 7a40 	vmov.f32	s15, s0
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000488 	.word	0x20000488

08001610 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	1d3c      	adds	r4, r7, #4
 8001618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800161c:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800161e:	f107 0214 	add.w	r2, r7, #20
 8001622:	1d38      	adds	r0, r7, #4
 8001624:	2301      	movs	r3, #1
 8001626:	2127      	movs	r1, #39	; 0x27
 8001628:	f7fe fe32 	bl	8000290 <lps22hh_read_reg>

	if (reg.status.t_da) {
 800162c:	7d3b      	ldrb	r3, [r7, #20]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <get_temperature+0x4e>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <get_temperature+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	801a      	strh	r2, [r3, #0]
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <get_temperature+0x58>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fefa 	bl	800043c <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <get_temperature+0x58>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fe66 	bl	8000320 <lps22hh_from_lsb_to_celsius>
 8001654:	eef0 7a40 	vmov.f32	s15, s0
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	20000482 	.word	0x20000482

0800166c <lsm6dsr_write>:
 *
 */
static int32_t lsm6dsr_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af04      	add	r7, sp, #16
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	72fb      	strb	r3, [r7, #11]
 800167c:	4613      	mov	r3, r2
 800167e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg,
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	893b      	ldrh	r3, [r7, #8]
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2301      	movs	r3, #1
 8001694:	21d5      	movs	r1, #213	; 0xd5
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fd52 	bl	8002140 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <lsm6dsr_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsr_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b088      	sub	sp, #32
 80016aa:	af04      	add	r7, sp, #16
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	460b      	mov	r3, r1
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	4613      	mov	r3, r2
 80016b8:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	893b      	ldrh	r3, [r7, #8]
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	21d5      	movs	r1, #213	; 0xd5
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fe49 	bl	8002368 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	460b      	mov	r3, r1
 80016ee:	72fb      	strb	r3, [r7, #11]
 80016f0:	4613      	mov	r3, r2
 80016f2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	893b      	ldrh	r3, [r7, #8]
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	21bb      	movs	r1, #187	; 0xbb
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fd18 	bl	8002140 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b088      	sub	sp, #32
 800171e:	af04      	add	r7, sp, #16
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	72fb      	strb	r3, [r7, #11]
 800172a:	4613      	mov	r3, r2
 800172c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	b29a      	uxth	r2, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	893b      	ldrh	r3, [r7, #8]
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	21bb      	movs	r1, #187	; 0xbb
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fe0f 	bl	8002368 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9b5 	bl	8001acc <HAL_Delay>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x44>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x44>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x44>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x44>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f000 fa66 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_I2C_MspInit+0x7c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d128      	bne.n	8001828 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_I2C_MspInit+0x80>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_I2C_MspInit+0x80>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_I2C_MspInit+0x80>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001800:	2304      	movs	r3, #4
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <HAL_I2C_MspInit+0x84>)
 800180c:	f000 fa66 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0x80>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_I2C_MspInit+0x80>)
 8001816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181a:	61d3      	str	r3, [r2, #28]
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_I2C_MspInit+0x80>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005400 	.word	0x40005400
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_UART_MspInit+0x7c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d128      	bne.n	80018b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_UART_MspInit+0x80>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_UART_MspInit+0x80>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_UART_MspInit+0x80>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_UART_MspInit+0x80>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_UART_MspInit+0x80>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_UART_MspInit+0x80>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800188e:	230c      	movs	r3, #12
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189e:	2307      	movs	r3, #7
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 fa16 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40004400 	.word	0x40004400
 80018bc:	40021000 	.word	0x40021000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f8ba 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f003 f862 	bl	8004a14 <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20010000 	.word	0x20010000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000490 	.word	0x20000490
 8001984:	20000578 	.word	0x20000578

08001988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d6:	f7ff ffd7 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f003 f821 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fac1 	bl	8000f64 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019f0:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 80019f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019f8:	20000574 	.word	0x20000574

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x28>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x28>)
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f92f 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fea6 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f939 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 f90f 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000056c 	.word	0x2000056c

08001ab4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000056c 	.word	0x2000056c

08001acc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_Delay+0x40>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff47 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff5c 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffb0 	bl	8001c30 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e160      	b.n	8001fae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8152 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d00b      	beq.n	8001d24 <HAL_GPIO_Init+0x48>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	2203      	movs	r2, #3
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0xea>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ac 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e68:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e92:	d025      	beq.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01f      	beq.n	8001edc <HAL_GPIO_Init+0x200>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d019      	beq.n	8001ed8 <HAL_GPIO_Init+0x1fc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1f0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e00c      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef2:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f24:	4a31      	ldr	r2, [pc, #196]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae97 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48001000 	.word	0x48001000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	48001800 	.word	0x48001800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e081      	b.n	8002136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fbb4 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e006      	b.n	80020a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d104      	bne.n	80020ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	ea42 0103 	orr.w	r1, r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	021a      	lsls	r2, r3, #8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69d9      	ldr	r1, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	817b      	strh	r3, [r7, #10]
 8002152:	460b      	mov	r3, r1
 8002154:	813b      	strh	r3, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	f040 80f9 	bne.w	800235a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_I2C_Mem_Write+0x34>
 800216e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0ed      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write+0x4e>
 800218a:	2302      	movs	r3, #2
 800218c:	e0e6      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002196:	f7ff fc8d 	bl	8001ab4 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fac3 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d1      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2221      	movs	r2, #33	; 0x21
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e0:	88f8      	ldrh	r0, [r7, #6]
 80021e2:	893a      	ldrh	r2, [r7, #8]
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4603      	mov	r3, r0
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f9d3 	bl	800259c <I2C_RequestMemoryWrite>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0a9      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d90e      	bls.n	8002230 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	2300      	movs	r3, #0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fba5 	bl	8002978 <I2C_TransferConfig>
 800222e:	e00f      	b.n	8002250 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	b2da      	uxtb	r2, r3
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fb94 	bl	8002978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 faad 	bl	80027b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e07b      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d034      	beq.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d130      	bne.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fa3f 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04d      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d90e      	bls.n	80022e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb49 	bl	8002978 <I2C_TransferConfig>
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb38 	bl	8002978 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d19e      	bne.n	8002250 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fa8c 	bl	8002834 <I2C_WaitOnSTOPFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e01a      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2220      	movs	r2, #32
 800232c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_I2C_Mem_Write+0x224>)
 800233a:	400b      	ands	r3, r1
 800233c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800235a:	2302      	movs	r3, #2
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	f040 80fd 	bne.w	800258a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_I2C_Mem_Read+0x34>
 8002396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0f1      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x4e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0ea      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023be:	f7ff fb79 	bl	8001ab4 <HAL_GetTick>
 80023c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2319      	movs	r3, #25
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f9af 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d5      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2222      	movs	r2, #34	; 0x22
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002408:	88f8      	ldrh	r0, [r7, #6]
 800240a:	893a      	ldrh	r2, [r7, #8]
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	4603      	mov	r3, r0
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f913 	bl	8002644 <I2C_RequestMemoryRead>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0ad      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d90e      	bls.n	8002458 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	b2da      	uxtb	r2, r3
 8002446:	8979      	ldrh	r1, [r7, #10]
 8002448:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_I2C_Mem_Read+0x22c>)
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fa91 	bl	8002978 <I2C_TransferConfig>
 8002456:	e00f      	b.n	8002478 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_I2C_Mem_Read+0x22c>)
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fa80 	bl	8002978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	2104      	movs	r1, #4
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f956 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07c      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d034      	beq.n	8002538 <HAL_I2C_Mem_Read+0x1d0>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d130      	bne.n	8002538 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	2200      	movs	r2, #0
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f927 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e04d      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2bff      	cmp	r3, #255	; 0xff
 80024f8:	d90e      	bls.n	8002518 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa31 	bl	8002978 <I2C_TransferConfig>
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fa20 	bl	8002978 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d19a      	bne.n	8002478 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f974 	bl	8002834 <I2C_WaitOnSTOPFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01a      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2220      	movs	r2, #32
 800255c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_I2C_Mem_Read+0x230>)
 800256a:	400b      	ands	r3, r1
 800256c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	80002400 	.word	0x80002400
 8002598:	fe00e800 	.word	0xfe00e800

0800259c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	460b      	mov	r3, r1
 80025b0:	813b      	strh	r3, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <I2C_RequestMemoryWrite+0xa4>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f9d7 	bl	8002978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	69b9      	ldr	r1, [r7, #24]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8f0 	bl	80027b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02c      	b.n	8002638 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025e4:	893b      	ldrh	r3, [r7, #8]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
 80025ee:	e015      	b.n	800261c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f8d6 	bl	80027b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e012      	b.n	8002638 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2200      	movs	r2, #0
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f884 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	80002000 	.word	0x80002000

08002644 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <I2C_RequestMemoryRead+0xa4>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f984 	bl	8002978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f89d 	bl	80027b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e02c      	b.n	80026de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800268a:	893b      	ldrh	r3, [r7, #8]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
 8002694:	e015      	b.n	80026c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	b29b      	uxth	r3, r3
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f883 	bl	80027b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e012      	b.n	80026de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f831 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	80002000 	.word	0x80002000

080026ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d007      	beq.n	8002728 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	619a      	str	r2, [r3, #24]
  }
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002744:	e022      	b.n	800278c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d01e      	beq.n	800278c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f9b1 	bl	8001ab4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d113      	bne.n	800278c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e00f      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d0cd      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c0:	e02c      	b.n	800281c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f870 	bl	80028ac <I2C_IsAcknowledgeFailed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e02a      	b.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d01e      	beq.n	800281c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7ff f969 	bl	8001ab4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d113      	bne.n	800281c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e007      	b.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d1cb      	bne.n	80027c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002840:	e028      	b.n	8002894 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f830 	bl	80028ac <I2C_IsAcknowledgeFailed>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e026      	b.n	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7ff f92d 	bl	8001ab4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d113      	bne.n	8002894 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e007      	b.n	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d1cf      	bne.n	8002842 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d151      	bne.n	800296a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c6:	e022      	b.n	800290e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d01e      	beq.n	800290e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7ff f8f0 	bl	8001ab4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_IsAcknowledgeFailed+0x3a>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e02e      	b.n	800296c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b20      	cmp	r3, #32
 800291a:	d1d5      	bne.n	80028c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2220      	movs	r2, #32
 800292a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff fedd 	bl	80026ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <I2C_IsAcknowledgeFailed+0xc8>)
 800293e:	400b      	ands	r3, r1
 8002940:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	fe00e800 	.word	0xfe00e800

08002978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	4613      	mov	r3, r2
 8002988:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	0d5b      	lsrs	r3, r3, #21
 8002994:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <I2C_TransferConfig+0x58>)
 800299a:	430b      	orrs	r3, r1
 800299c:	43db      	mvns	r3, r3
 800299e:	ea02 0103 	and.w	r1, r2, r3
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029a8:	7a7b      	ldrb	r3, [r7, #9]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	03ff63ff 	.word	0x03ff63ff

080029d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d138      	bne.n	8002a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e032      	b.n	8002a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	; 0x24
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d139      	bne.n	8002af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e033      	b.n	8002af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2224      	movs	r2, #36	; 0x24
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f000 bf01 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8160 	beq.w	8002dee <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b2e:	4bae      	ldr	r3, [pc, #696]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b3a:	4bab      	ldr	r3, [pc, #684]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d159      	bne.n	8002bfa <HAL_RCC_OscConfig+0xf6>
 8002b46:	4ba8      	ldr	r3, [pc, #672]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b52:	d152      	bne.n	8002bfa <HAL_RCC_OscConfig+0xf6>
 8002b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x82>
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0xae>
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ba2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bae:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002bba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002bc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8102 	beq.w	8002dec <HAL_RCC_OscConfig+0x2e8>
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 80fc 	bne.w	8002dec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f000 be93 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x110>
 8002c06:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e030      	b.n	8002c76 <HAL_RCC_OscConfig+0x172>
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x134>
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a71      	ldr	r2, [pc, #452]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01e      	b.n	8002c76 <HAL_RCC_OscConfig+0x172>
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x15a>
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a64      	ldr	r2, [pc, #400]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x172>
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d059      	beq.n	8002d34 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff18 	bl	8001ab4 <HAL_GetTick>
 8002c84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8a:	f7fe ff13 	bl	8001ab4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d902      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	f000 be40 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
 8002ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002cb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x1ce>
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x1fa>
 8002cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d16:	fab2 f282 	clz	r2, r2
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f042 0220 	orr.w	r2, r2, #32
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f002 021f 	and.w	r2, r2, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ab      	beq.n	8002c8a <HAL_RCC_OscConfig+0x186>
 8002d32:	e05c      	b.n	8002dee <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe febe 	bl	8001ab4 <HAL_GetTick>
 8002d38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3e:	f7fe feb9 	bl	8001ab4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f000 bde6 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x282>
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ae>
 8002d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x2e4>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002dba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002dc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ab      	bne.n	8002d3e <HAL_RCC_OscConfig+0x23a>
 8002de6:	e002      	b.n	8002dee <HAL_RCC_OscConfig+0x2ea>
 8002de8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8170 	beq.w	80030de <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dfe:	4bd0      	ldr	r3, [pc, #832]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e0a:	4bcd      	ldr	r3, [pc, #820]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d16d      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3ee>
 8002e16:	4bca      	ldr	r3, [pc, #808]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d166      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3ee>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_OscConfig+0x350>
 8002e4e:	4bbc      	ldr	r3, [pc, #752]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	e013      	b.n	8002e7c <HAL_RCC_OscConfig+0x378>
 8002e54:	2302      	movs	r3, #2
 8002e56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e78:	4bb1      	ldr	r3, [pc, #708]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e82:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e86:	fa92 f2a2 	rbit	r2, r2
 8002e8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3ba>
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d002      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f000 bd31 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4ba0      	ldr	r3, [pc, #640]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	21f8      	movs	r1, #248	; 0xf8
 8002ece:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ed6:	fa91 f1a1 	rbit	r1, r1
 8002eda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ede:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ee2:	fab1 f181 	clz	r1, r1
 8002ee6:	b2c9      	uxtb	r1, r1
 8002ee8:	408b      	lsls	r3, r1
 8002eea:	4995      	ldr	r1, [pc, #596]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef0:	e0f5      	b.n	80030de <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8085 	beq.w	8003008 <HAL_RCC_OscConfig+0x504>
 8002efe:	2301      	movs	r3, #1
 8002f00:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	461a      	mov	r2, r3
 8002f26:	2301      	movs	r3, #1
 8002f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fdc3 	bl	8001ab4 <HAL_GetTick>
 8002f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe fdbe 	bl	8001ab4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d902      	bls.n	8002f4a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	f000 bceb 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f5c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_OscConfig+0x476>
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	e013      	b.n	8002fa2 <HAL_RCC_OscConfig+0x49e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f9e:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002fa8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002fb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fb8:	fab2 f282 	clz	r2, r2
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f042 0220 	orr.w	r2, r2, #32
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f002 021f 	and.w	r2, r2, #31
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0af      	beq.n	8002f34 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b5a      	ldr	r3, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	21f8      	movs	r1, #248	; 0xf8
 8002fe4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002fec:	fa91 f1a1 	rbit	r1, r1
 8002ff0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ff4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ff8:	fab1 f181 	clz	r1, r1
 8002ffc:	b2c9      	uxtb	r1, r1
 8002ffe:	408b      	lsls	r3, r1
 8003000:	494f      	ldr	r1, [pc, #316]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
 8003006:	e06a      	b.n	80030de <HAL_RCC_OscConfig+0x5da>
 8003008:	2301      	movs	r3, #1
 800300a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800301a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	2300      	movs	r3, #0
 8003032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fd3e 	bl	8001ab4 <HAL_GetTick>
 8003038:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe fd39 	bl	8001ab4 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	f000 bc66 	b.w	8003920 <HAL_RCC_OscConfig+0xe1c>
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003066:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <HAL_RCC_OscConfig+0x580>
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	e013      	b.n	80030ac <HAL_RCC_OscConfig+0x5a8>
 8003084:	2302      	movs	r3, #2
 8003086:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003096:	2302      	movs	r3, #2
 8003098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800309c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_OscConfig+0x63c>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2202      	movs	r2, #2
 80030ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80030be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f042 0220 	orr.w	r2, r2, #32
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1af      	bne.n	800303e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80da 	beq.w	80032a2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d069      	beq.n	80031cc <HAL_RCC_OscConfig+0x6c8>
 80030f8:	2301      	movs	r3, #1
 80030fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800310a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x640>)
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	461a      	mov	r2, r3
 800311e:	2301      	movs	r3, #1
 8003120:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe fcc7 	bl	8001ab4 <HAL_GetTick>
 8003126:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e00d      	b.n	8003148 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe fcc2 	bl	8001ab4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d905      	bls.n	8003148 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e3ef      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 8003140:	40021000 	.word	0x40021000
 8003144:	10908120 	.word	0x10908120
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800318a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318c:	4ba4      	ldr	r3, [pc, #656]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800318e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003190:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003194:	2102      	movs	r1, #2
 8003196:	6019      	str	r1, [r3, #0]
 8003198:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fa93 f1a3 	rbit	r1, r3
 80031a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031a6:	6019      	str	r1, [r3, #0]
  return result;
 80031a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0b0      	beq.n	800312c <HAL_RCC_OscConfig+0x628>
 80031ca:	e06a      	b.n	80032a2 <HAL_RCC_OscConfig+0x79e>
 80031cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031e2:	601a      	str	r2, [r3, #0]
  return result;
 80031e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <HAL_RCC_OscConfig+0x920>)
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fc59 	bl	8001ab4 <HAL_GetTick>
 8003202:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7fe fc54 	bl	8001ab4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e381      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 800321c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003220:	2202      	movs	r2, #2
 8003222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003238:	2202      	movs	r2, #2
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003250:	2202      	movs	r2, #2
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003262:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003268:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800326c:	2102      	movs	r1, #2
 800326e:	6019      	str	r1, [r3, #0]
 8003270:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f1a3 	rbit	r1, r3
 800327a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800327e:	6019      	str	r1, [r3, #0]
  return result;
 8003280:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1b2      	bne.n	8003208 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8157 	beq.w	8003560 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ce:	61d3      	str	r3, [r2, #28]
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <HAL_RCC_OscConfig+0x924>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11a      	bne.n	800332c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HAL_RCC_OscConfig+0x924>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4b      	ldr	r2, [pc, #300]	; (8003428 <HAL_RCC_OscConfig+0x924>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe fbd7 	bl	8001ab4 <HAL_GetTick>
 8003306:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e009      	b.n	8003320 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe fbd2 	bl	8001ab4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e2ff      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCC_OscConfig+0x924>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x840>
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a39      	ldr	r2, [pc, #228]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6213      	str	r3, [r2, #32]
 8003342:	e02f      	b.n	80033a4 <HAL_RCC_OscConfig+0x8a0>
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x864>
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a33      	ldr	r2, [pc, #204]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a30      	ldr	r2, [pc, #192]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0x8a0>
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x888>
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a27      	ldr	r2, [pc, #156]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x8a0>
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a20      	ldr	r2, [pc, #128]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06a      	beq.n	8003484 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fb81 	bl	8001ab4 <HAL_GetTick>
 80033b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fb7c 	bl	8001ab4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e2a7      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 80033d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033d4:	2202      	movs	r2, #2
 80033d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033fe:	601a      	str	r2, [r3, #0]
  return result;
 8003400:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003404:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d108      	bne.n	800342c <HAL_RCC_OscConfig+0x928>
 800341a:	4b01      	ldr	r3, [pc, #4]	; (8003420 <HAL_RCC_OscConfig+0x91c>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	e013      	b.n	8003448 <HAL_RCC_OscConfig+0x944>
 8003420:	40021000 	.word	0x40021000
 8003424:	10908120 	.word	0x10908120
 8003428:	40007000 	.word	0x40007000
 800342c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003430:	2202      	movs	r2, #2
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4bc0      	ldr	r3, [pc, #768]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800344c:	2102      	movs	r1, #2
 800344e:	6011      	str	r1, [r2, #0]
 8003450:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fa92 f1a2 	rbit	r1, r2
 800345a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800345e:	6011      	str	r1, [r2, #0]
  return result;
 8003460:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d09a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x8b4>
 8003482:	e063      	b.n	800354c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fb16 	bl	8001ab4 <HAL_GetTick>
 8003488:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fb11 	bl	8001ab4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e23c      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 80034a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034aa:	2202      	movs	r2, #2
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034c2:	2202      	movs	r2, #2
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034d4:	601a      	str	r2, [r3, #0]
  return result;
 80034d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_OscConfig+0x9f2>
 80034f0:	4b95      	ldr	r3, [pc, #596]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	e00d      	b.n	8003512 <HAL_RCC_OscConfig+0xa0e>
 80034f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034fa:	2202      	movs	r2, #2
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003516:	2102      	movs	r1, #2
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fa92 f1a2 	rbit	r1, r2
 8003524:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003528:	6011      	str	r1, [r2, #0]
  return result;
 800352a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1a0      	bne.n	800348e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800354c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4a7b      	ldr	r2, [pc, #492]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 81d9 	beq.w	800391e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	f000 81a6 	beq.w	80038c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b02      	cmp	r3, #2
 8003582:	f040 811e 	bne.w	80037c2 <HAL_RCC_OscConfig+0xcbe>
 8003586:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800358a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800359e:	601a      	str	r2, [r3, #0]
  return result;
 80035a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	461a      	mov	r2, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fa7a 	bl	8001ab4 <HAL_GetTick>
 80035c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	e009      	b.n	80035da <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fa75 	bl	8001ab4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1a2      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 80035da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035f2:	601a      	str	r2, [r3, #0]
  return result;
 80035f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0xb10>
 800360e:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0xb48>
 8003614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	fa93 f2a3 	rbit	r2, r3
 8003628:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003650:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fa92 f1a2 	rbit	r1, r2
 8003660:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003664:	6011      	str	r1, [r2, #0]
  return result;
 8003666:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	f042 0220 	orr.w	r2, r2, #32
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f002 021f 	and.w	r2, r2, #31
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f202 	lsl.w	r2, r1, r2
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d19e      	bne.n	80035c6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f023 020f 	bic.w	r2, r3, #15
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	492c      	ldr	r1, [pc, #176]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003698:	4313      	orrs	r3, r2
 800369a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a19      	ldr	r1, [r3, #32]
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	4925      	ldr	r1, [pc, #148]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
 80036b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036d0:	601a      	str	r2, [r3, #0]
  return result;
 80036d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	461a      	mov	r2, r3
 80036ea:	2301      	movs	r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe f9e1 	bl	8001ab4 <HAL_GetTick>
 80036f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f6:	e009      	b.n	800370c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f9dc 	bl	8001ab4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e109      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 800370c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003724:	601a      	str	r2, [r3, #0]
  return result;
 8003726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800372a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0xc48>
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <HAL_RCC_OscConfig+0xc44>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	e01e      	b.n	8003784 <HAL_RCC_OscConfig+0xc80>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	fa93 f2a3 	rbit	r2, r3
 8003760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800376a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCC_OscConfig+0xe28>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	fa92 f1a2 	rbit	r1, r2
 8003798:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800379c:	6011      	str	r1, [r2, #0]
  return result;
 800379e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f042 0220 	orr.w	r2, r2, #32
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f002 021f 	and.w	r2, r2, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d09b      	beq.n	80036f8 <HAL_RCC_OscConfig+0xbf4>
 80037c0:	e0ad      	b.n	800391e <HAL_RCC_OscConfig+0xe1a>
 80037c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037da:	601a      	str	r2, [r3, #0]
  return result;
 80037dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe f95c 	bl	8001ab4 <HAL_GetTick>
 80037fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003800:	e009      	b.n	8003816 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe f957 	bl	8001ab4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e084      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
 8003816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	fa93 f2a3 	rbit	r2, r3
 800382a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382e:	601a      	str	r2, [r3, #0]
  return result;
 8003830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003834:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_RCC_OscConfig+0xd4c>
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_RCC_OscConfig+0xe28>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	e01b      	b.n	8003888 <HAL_RCC_OscConfig+0xd84>
 8003850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	fa93 f2a3 	rbit	r2, r3
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f107 031c 	add.w	r3, r7, #28
 800386e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f107 031c 	add.w	r3, r7, #28
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f107 0318 	add.w	r3, r7, #24
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_RCC_OscConfig+0xe28>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f107 0214 	add.w	r2, r7, #20
 800388c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003890:	6011      	str	r1, [r2, #0]
 8003892:	f107 0214 	add.w	r2, r7, #20
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	fa92 f1a2 	rbit	r1, r2
 800389c:	f107 0210 	add.w	r2, r7, #16
 80038a0:	6011      	str	r1, [r2, #0]
  return result;
 80038a2:	f107 0210 	add.w	r2, r7, #16
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0220 	orr.w	r2, r2, #32
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d19e      	bne.n	8003802 <HAL_RCC_OscConfig+0xcfe>
 80038c4:	e02b      	b.n	800391e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e025      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_OscConfig+0xe28>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCC_OscConfig+0xe28>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d111      	bne.n	800391a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80038f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003904:	429a      	cmp	r2, r3
 8003906:	d108      	bne.n	800391a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b09e      	sub	sp, #120	; 0x78
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e162      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b90      	ldr	r3, [pc, #576]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	498b      	ldr	r1, [pc, #556]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e14a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	497f      	ldr	r1, [pc, #508]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80dc 	beq.w	8003b5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d13c      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xf6>
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xa6>
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	e00f      	b.n	80039f6 <HAL_RCC_ClockConfig+0xc6>
 80039d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	667b      	str	r3, [r7, #100]	; 0x64
 80039e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e8:	663b      	str	r3, [r7, #96]	; 0x60
 80039ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f2:	4b67      	ldr	r3, [pc, #412]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80039fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fe:	fa92 f2a2 	rbit	r2, r2
 8003a02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a06:	fab2 f282 	clz	r2, r2
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f042 0220 	orr.w	r2, r2, #32
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f002 021f 	and.w	r2, r2, #31
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d17b      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0f3      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d13c      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x178>
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x128>
 8003a52:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e00f      	b.n	8003a78 <HAL_RCC_ClockConfig+0x148>
 8003a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	647b      	str	r3, [r7, #68]	; 0x44
 8003a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a80:	fa92 f2a2 	rbit	r2, r2
 8003a84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d13a      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b2      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d102      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x1a0>
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	e00d      	b.n	8003aec <HAL_RCC_ClockConfig+0x1bc>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	2302      	movs	r3, #2
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2202      	movs	r2, #2
 8003aee:	61ba      	str	r2, [r7, #24]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	fa92 f2a2 	rbit	r2, r2
 8003af6:	617a      	str	r2, [r7, #20]
  return result;
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	fab2 f282 	clz	r2, r2
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f042 0220 	orr.w	r2, r2, #32
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	f002 021f 	and.w	r2, r2, #31
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e079      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	491a      	ldr	r1, [pc, #104]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fd ffc2 	bl	8001ab4 <HAL_GetTick>
 8003b30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fd ffbe 	bl	8001ab4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e061      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d214      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4906      	ldr	r1, [pc, #24]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e040      	b.n	8003c0e <HAL_RCC_ClockConfig+0x2de>
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_ClockConfig+0x2e8>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	491a      	ldr	r1, [pc, #104]	; (8003c18 <HAL_RCC_ClockConfig+0x2e8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <HAL_RCC_ClockConfig+0x2e8>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4912      	ldr	r1, [pc, #72]	; (8003c18 <HAL_RCC_ClockConfig+0x2e8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bd2:	f000 f829 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <HAL_RCC_ClockConfig+0x2e8>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be0:	22f0      	movs	r2, #240	; 0xf0
 8003be2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	fa92 f2a2 	rbit	r2, r2
 8003bea:	60fa      	str	r2, [r7, #12]
  return result;
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	fab2 f282 	clz	r2, r2
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	40d3      	lsrs	r3, r2
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x2ec>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_RCC_ClockConfig+0x2f0>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_RCC_ClockConfig+0x2f4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd ff10 	bl	8001a2c <HAL_InitTick>
  
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3778      	adds	r7, #120	; 0x78
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	0800530c 	.word	0x0800530c
 8003c20:	20000000 	.word	0x20000000
 8003c24:	20000004 	.word	0x20000004

08003c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b08b      	sub	sp, #44	; 0x2c
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x30>
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x36>
 8003c56:	e03f      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c5a:	623b      	str	r3, [r7, #32]
      break;
 8003c5c:	e03f      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	607a      	str	r2, [r7, #4]
  return result;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	40d3      	lsrs	r3, r2
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	fa92 f2a2 	rbit	r2, r2
 8003c94:	60fa      	str	r2, [r7, #12]
  return result;
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	40d3      	lsrs	r3, r2
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	e007      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	623b      	str	r3, [r7, #32]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cda:	623b      	str	r3, [r7, #32]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	372c      	adds	r7, #44	; 0x2c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	007a1200 	.word	0x007a1200
 8003cf4:	08005324 	.word	0x08005324
 8003cf8:	08005334 	.word	0x08005334

08003cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d1a:	f7ff ffef 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d1e:	4601      	mov	r1, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	fa92 f2a2 	rbit	r2, r2
 8003d34:	603a      	str	r2, [r7, #0]
  return result;
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	fab2 f282 	clz	r2, r2
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	40d3      	lsrs	r3, r2
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	0800531c 	.word	0x0800531c

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d5e:	f7ff ffcd 	bl	8003cfc <HAL_RCC_GetHCLKFreq>
 8003d62:	4601      	mov	r1, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	fa92 f2a2 	rbit	r2, r2
 8003d78:	603a      	str	r2, [r7, #0]
  return result;
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	fab2 f282 	clz	r2, r2
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	40d3      	lsrs	r3, r2
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d86:	5cd3      	ldrb	r3, [r2, r3]
 8003d88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	0800531c 	.word	0x0800531c

08003d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b092      	sub	sp, #72	; 0x48
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80d4 	beq.w	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc0:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10e      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	61d3      	str	r3, [r2, #28]
 8003dd8:	4b48      	ldr	r3, [pc, #288]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b45      	ldr	r3, [pc, #276]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fe57 	bl	8001ab4 <HAL_GetTick>
 8003e06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fd fe53 	bl	8001ab4 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b64      	cmp	r3, #100	; 0x64
 8003e16:	d901      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1d6      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8084 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d07c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e48:	4b2c      	ldr	r3, [pc, #176]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	461a      	mov	r2, r3
 8003e72:	2301      	movs	r3, #1
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	461a      	mov	r2, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fe03 	bl	8001ab4 <HAL_GetTick>
 8003eae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fd fdff 	bl	8001ab4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e180      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	61fb      	str	r3, [r7, #28]
  return result;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ef6:	4b01      	ldr	r3, [pc, #4]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	e00d      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
 8003f04:	10908100 	.word	0x10908100
 8003f08:	2302      	movs	r3, #2
 8003f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4ba0      	ldr	r3, [pc, #640]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	613a      	str	r2, [r7, #16]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	60fa      	str	r2, [r7, #12]
  return result;
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	fab2 f282 	clz	r2, r2
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f002 021f 	and.w	r2, r2, #31
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0b7      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f42:	4b95      	ldr	r3, [pc, #596]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4992      	ldr	r1, [pc, #584]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b8e      	ldr	r3, [pc, #568]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	4a8d      	ldr	r2, [pc, #564]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f023 0203 	bic.w	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4985      	ldr	r1, [pc, #532]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f92:	4b81      	ldr	r3, [pc, #516]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	497e      	ldr	r1, [pc, #504]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb0:	4b79      	ldr	r3, [pc, #484]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4976      	ldr	r1, [pc, #472]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fce:	4b72      	ldr	r3, [pc, #456]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f023 0210 	bic.w	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	496f      	ldr	r1, [pc, #444]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fec:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	4967      	ldr	r1, [pc, #412]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400a:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f023 0220 	bic.w	r2, r3, #32
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	4960      	ldr	r1, [pc, #384]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004028:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	4958      	ldr	r1, [pc, #352]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4951      	ldr	r1, [pc, #324]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004064:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4949      	ldr	r1, [pc, #292]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4942      	ldr	r1, [pc, #264]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	493a      	ldr	r1, [pc, #232]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	4933      	ldr	r1, [pc, #204]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	492b      	ldr	r1, [pc, #172]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4924      	ldr	r1, [pc, #144]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	491c      	ldr	r1, [pc, #112]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	4915      	ldr	r1, [pc, #84]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	490d      	ldr	r1, [pc, #52]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	4906      	ldr	r1, [pc, #24]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	4904      	ldr	r1, [pc, #16]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3748      	adds	r7, #72	; 0x48
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e040      	b.n	800426c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fb1e 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8c0 	bl	800439c <UART_SetConfig>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e022      	b.n	800426c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa88 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004242:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004252:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fb0f 	bl	8004888 <UART_CheckIdleState>
 800426a:	4603      	mov	r3, r0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004288:	2b20      	cmp	r3, #32
 800428a:	f040 8082 	bne.w	8004392 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_Transmit+0x26>
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07a      	b.n	8004394 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Transmit+0x38>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e073      	b.n	8004394 <HAL_UART_Transmit+0x120>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2221      	movs	r2, #33	; 0x21
 80042c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fd fbf7 	bl	8001ab4 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d108      	bne.n	80042f4 <HAL_UART_Transmit+0x80>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e003      	b.n	80042fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004304:	e02d      	b.n	8004362 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fb02 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e039      	b.n	8004394 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004332:	b292      	uxth	r2, r2
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3302      	adds	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e008      	b.n	8004350 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b292      	uxth	r2, r2
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1cb      	bne.n	8004306 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 face 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e005      	b.n	8004394 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4baa      	ldr	r3, [pc, #680]	; (8004670 <UART_SetConfig+0x2d4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a98      	ldr	r2, [pc, #608]	; (8004674 <UART_SetConfig+0x2d8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d121      	bne.n	800445c <UART_SetConfig+0xc0>
 8004418:	4b97      	ldr	r3, [pc, #604]	; (8004678 <UART_SetConfig+0x2dc>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b03      	cmp	r3, #3
 8004422:	d817      	bhi.n	8004454 <UART_SetConfig+0xb8>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x90>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004449 	.word	0x08004449
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004443 	.word	0x08004443
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e0b2      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e0af      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e0ac      	b.n	80045a8 <UART_SetConfig+0x20c>
 800444e:	2308      	movs	r3, #8
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e0a9      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	bf00      	nop
 800445a:	e0a5      	b.n	80045a8 <UART_SetConfig+0x20c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a86      	ldr	r2, [pc, #536]	; (800467c <UART_SetConfig+0x2e0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d123      	bne.n	80044ae <UART_SetConfig+0x112>
 8004466:	4b84      	ldr	r3, [pc, #528]	; (8004678 <UART_SetConfig+0x2dc>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d012      	beq.n	800449a <UART_SetConfig+0xfe>
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d802      	bhi.n	8004480 <UART_SetConfig+0xe4>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <UART_SetConfig+0xf2>
 800447e:	e012      	b.n	80044a6 <UART_SetConfig+0x10a>
 8004480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004484:	d00c      	beq.n	80044a0 <UART_SetConfig+0x104>
 8004486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800448a:	d003      	beq.n	8004494 <UART_SetConfig+0xf8>
 800448c:	e00b      	b.n	80044a6 <UART_SetConfig+0x10a>
 800448e:	2300      	movs	r3, #0
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e089      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004494:	2302      	movs	r3, #2
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e086      	b.n	80045a8 <UART_SetConfig+0x20c>
 800449a:	2304      	movs	r3, #4
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e083      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044a0:	2308      	movs	r3, #8
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e080      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044a6:	2310      	movs	r3, #16
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	bf00      	nop
 80044ac:	e07c      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <UART_SetConfig+0x2e4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d123      	bne.n	8004500 <UART_SetConfig+0x164>
 80044b8:	4b6f      	ldr	r3, [pc, #444]	; (8004678 <UART_SetConfig+0x2dc>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80044c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044c4:	d012      	beq.n	80044ec <UART_SetConfig+0x150>
 80044c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ca:	d802      	bhi.n	80044d2 <UART_SetConfig+0x136>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <UART_SetConfig+0x144>
 80044d0:	e012      	b.n	80044f8 <UART_SetConfig+0x15c>
 80044d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044d6:	d00c      	beq.n	80044f2 <UART_SetConfig+0x156>
 80044d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044dc:	d003      	beq.n	80044e6 <UART_SetConfig+0x14a>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x15c>
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e060      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044e6:	2302      	movs	r3, #2
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e05d      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044ec:	2304      	movs	r3, #4
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e05a      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044f2:	2308      	movs	r3, #8
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e057      	b.n	80045a8 <UART_SetConfig+0x20c>
 80044f8:	2310      	movs	r3, #16
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	bf00      	nop
 80044fe:	e053      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5f      	ldr	r2, [pc, #380]	; (8004684 <UART_SetConfig+0x2e8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d123      	bne.n	8004552 <UART_SetConfig+0x1b6>
 800450a:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <UART_SetConfig+0x2dc>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d012      	beq.n	800453e <UART_SetConfig+0x1a2>
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d802      	bhi.n	8004524 <UART_SetConfig+0x188>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <UART_SetConfig+0x196>
 8004522:	e012      	b.n	800454a <UART_SetConfig+0x1ae>
 8004524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004528:	d00c      	beq.n	8004544 <UART_SetConfig+0x1a8>
 800452a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x19c>
 8004530:	e00b      	b.n	800454a <UART_SetConfig+0x1ae>
 8004532:	2300      	movs	r3, #0
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e037      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004538:	2302      	movs	r3, #2
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e034      	b.n	80045a8 <UART_SetConfig+0x20c>
 800453e:	2304      	movs	r3, #4
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e031      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004544:	2308      	movs	r3, #8
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e02e      	b.n	80045a8 <UART_SetConfig+0x20c>
 800454a:	2310      	movs	r3, #16
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	bf00      	nop
 8004550:	e02a      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <UART_SetConfig+0x2ec>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d123      	bne.n	80045a4 <UART_SetConfig+0x208>
 800455c:	4b46      	ldr	r3, [pc, #280]	; (8004678 <UART_SetConfig+0x2dc>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004568:	d012      	beq.n	8004590 <UART_SetConfig+0x1f4>
 800456a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456e:	d802      	bhi.n	8004576 <UART_SetConfig+0x1da>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <UART_SetConfig+0x1e8>
 8004574:	e012      	b.n	800459c <UART_SetConfig+0x200>
 8004576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800457a:	d00c      	beq.n	8004596 <UART_SetConfig+0x1fa>
 800457c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004580:	d003      	beq.n	800458a <UART_SetConfig+0x1ee>
 8004582:	e00b      	b.n	800459c <UART_SetConfig+0x200>
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e00e      	b.n	80045a8 <UART_SetConfig+0x20c>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e00b      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e008      	b.n	80045a8 <UART_SetConfig+0x20c>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e005      	b.n	80045a8 <UART_SetConfig+0x20c>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	bf00      	nop
 80045a2:	e001      	b.n	80045a8 <UART_SetConfig+0x20c>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d16e      	bne.n	8004690 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80045b2:	7ffb      	ldrb	r3, [r7, #31]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d828      	bhi.n	800460a <UART_SetConfig+0x26e>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x224>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045f5 	.word	0x080045f5
 80045cc:	0800460b 	.word	0x0800460b
 80045d0:	080045fb 	.word	0x080045fb
 80045d4:	0800460b 	.word	0x0800460b
 80045d8:	0800460b 	.word	0x0800460b
 80045dc:	0800460b 	.word	0x0800460b
 80045e0:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7ff fb96 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 80045e8:	61b8      	str	r0, [r7, #24]
        break;
 80045ea:	e013      	b.n	8004614 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7ff fbb4 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 80045f0:	61b8      	str	r0, [r7, #24]
        break;
 80045f2:	e00f      	b.n	8004614 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <UART_SetConfig+0x2f0>)
 80045f6:	61bb      	str	r3, [r7, #24]
        break;
 80045f8:	e00c      	b.n	8004614 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7ff fb15 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 80045fe:	61b8      	str	r0, [r7, #24]
        break;
 8004600:	e008      	b.n	8004614 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	61bb      	str	r3, [r7, #24]
        break;
 8004608:	e004      	b.n	8004614 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	77bb      	strb	r3, [r7, #30]
        break;
 8004612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8086 	beq.w	8004728 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	005a      	lsls	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d916      	bls.n	8004668 <UART_SetConfig+0x2cc>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d212      	bcs.n	8004668 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	4313      	orrs	r3, r2
 800465c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	89fa      	ldrh	r2, [r7, #14]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e05f      	b.n	8004728 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77bb      	strb	r3, [r7, #30]
 800466c:	e05c      	b.n	8004728 <UART_SetConfig+0x38c>
 800466e:	bf00      	nop
 8004670:	efff69f3 	.word	0xefff69f3
 8004674:	40013800 	.word	0x40013800
 8004678:	40021000 	.word	0x40021000
 800467c:	40004400 	.word	0x40004400
 8004680:	40004800 	.word	0x40004800
 8004684:	40004c00 	.word	0x40004c00
 8004688:	40005000 	.word	0x40005000
 800468c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004690:	7ffb      	ldrb	r3, [r7, #31]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d827      	bhi.n	80046e6 <UART_SetConfig+0x34a>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0x300>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d7 	.word	0x080046d7
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046e7 	.word	0x080046e7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7ff fb28 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 80046c4:	61b8      	str	r0, [r7, #24]
        break;
 80046c6:	e013      	b.n	80046f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7ff fb46 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 80046cc:	61b8      	str	r0, [r7, #24]
        break;
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <UART_SetConfig+0x3a4>)
 80046d2:	61bb      	str	r3, [r7, #24]
        break;
 80046d4:	e00c      	b.n	80046f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7ff faa7 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 80046da:	61b8      	str	r0, [r7, #24]
        break;
 80046dc:	e008      	b.n	80046f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	61bb      	str	r3, [r7, #24]
        break;
 80046e4:	e004      	b.n	80046f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77bb      	strb	r3, [r7, #30]
        break;
 80046ee:	bf00      	nop
    }

    if (pclk != 0U)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	085a      	lsrs	r2, r3, #1
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	b29b      	uxth	r3, r3
 800470a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d908      	bls.n	8004724 <UART_SetConfig+0x388>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d204      	bcs.n	8004724 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e001      	b.n	8004728 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004734:	7fbb      	ldrb	r3, [r7, #30]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	007a1200 	.word	0x007a1200

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004842:	d10a      	bne.n	800485a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004898:	f7fd f90c 	bl	8001ab4 <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d10e      	bne.n	80048ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f82d 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e023      	b.n	8004912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d10e      	bne.n	80048f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f817 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e00d      	b.n	8004912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4613      	mov	r3, r2
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	e05e      	b.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d05a      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004934:	f7fd f8be 	bl	8001ab4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	429a      	cmp	r2, r3
 8004942:	d302      	bcc.n	800494a <UART_WaitOnFlagUntilTimeout+0x30>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d11b      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e043      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02c      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499e:	d124      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e00f      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d091      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <__errno>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <__errno+0x8>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4e0d      	ldr	r6, [pc, #52]	; (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1ba4      	subs	r4, r4, r6
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	42a5      	cmp	r5, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4e0b      	ldr	r6, [pc, #44]	; (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	; (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 fc26 	bl	8005284 <_init>
 8004a38:	1ba4      	subs	r4, r4, r6
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2500      	movs	r5, #0
 8004a3e:	42a5      	cmp	r5, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a48:	4798      	blx	r3
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a52:	4798      	blx	r3
 8004a54:	3501      	adds	r5, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	08005378 	.word	0x08005378
 8004a5c:	08005378 	.word	0x08005378
 8004a60:	08005378 	.word	0x08005378
 8004a64:	0800537c 	.word	0x0800537c

08004a68 <memset>:
 8004a68:	4402      	add	r2, r0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <memset+0xa>
 8004a70:	4770      	bx	lr
 8004a72:	f803 1b01 	strb.w	r1, [r3], #1
 8004a76:	e7f9      	b.n	8004a6c <memset+0x4>

08004a78 <siprintf>:
 8004a78:	b40e      	push	{r1, r2, r3}
 8004a7a:	b500      	push	{lr}
 8004a7c:	b09c      	sub	sp, #112	; 0x70
 8004a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a80:	9002      	str	r0, [sp, #8]
 8004a82:	9006      	str	r0, [sp, #24]
 8004a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a88:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <siprintf+0x38>)
 8004a8a:	9107      	str	r1, [sp, #28]
 8004a8c:	9104      	str	r1, [sp, #16]
 8004a8e:	4909      	ldr	r1, [pc, #36]	; (8004ab4 <siprintf+0x3c>)
 8004a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a94:	9105      	str	r1, [sp, #20]
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	a902      	add	r1, sp, #8
 8004a9c:	f000 f866 	bl	8004b6c <_svfiprintf_r>
 8004aa0:	9b02      	ldr	r3, [sp, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	b01c      	add	sp, #112	; 0x70
 8004aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aac:	b003      	add	sp, #12
 8004aae:	4770      	bx	lr
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	ffff0208 	.word	0xffff0208

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	429e      	cmp	r6, r3
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4690      	mov	r8, r2
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	d837      	bhi.n	8004b3a <__ssputs_r+0x82>
 8004aca:	898a      	ldrh	r2, [r1, #12]
 8004acc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad0:	d031      	beq.n	8004b36 <__ssputs_r+0x7e>
 8004ad2:	6825      	ldr	r5, [r4, #0]
 8004ad4:	6909      	ldr	r1, [r1, #16]
 8004ad6:	1a6f      	subs	r7, r5, r1
 8004ad8:	6965      	ldr	r5, [r4, #20]
 8004ada:	2302      	movs	r3, #2
 8004adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ae4:	f109 0301 	add.w	r3, r9, #1
 8004ae8:	443b      	add	r3, r7
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf38      	it	cc
 8004aee:	461d      	movcc	r5, r3
 8004af0:	0553      	lsls	r3, r2, #21
 8004af2:	d530      	bpl.n	8004b56 <__ssputs_r+0x9e>
 8004af4:	4629      	mov	r1, r5
 8004af6:	f000 fb2b 	bl	8005150 <_malloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	b950      	cbnz	r0, 8004b14 <__ssputs_r+0x5c>
 8004afe:	230c      	movs	r3, #12
 8004b00:	f8ca 3000 	str.w	r3, [sl]
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	463a      	mov	r2, r7
 8004b16:	6921      	ldr	r1, [r4, #16]
 8004b18:	f000 faa8 	bl	800506c <memcpy>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	6126      	str	r6, [r4, #16]
 8004b2a:	6165      	str	r5, [r4, #20]
 8004b2c:	443e      	add	r6, r7
 8004b2e:	1bed      	subs	r5, r5, r7
 8004b30:	6026      	str	r6, [r4, #0]
 8004b32:	60a5      	str	r5, [r4, #8]
 8004b34:	464e      	mov	r6, r9
 8004b36:	454e      	cmp	r6, r9
 8004b38:	d900      	bls.n	8004b3c <__ssputs_r+0x84>
 8004b3a:	464e      	mov	r6, r9
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4641      	mov	r1, r8
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	f000 fa9e 	bl	8005082 <memmove>
 8004b46:	68a3      	ldr	r3, [r4, #8]
 8004b48:	1b9b      	subs	r3, r3, r6
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	441e      	add	r6, r3
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	2000      	movs	r0, #0
 8004b54:	e7dc      	b.n	8004b10 <__ssputs_r+0x58>
 8004b56:	462a      	mov	r2, r5
 8004b58:	f000 fb54 	bl	8005204 <_realloc_r>
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d1e2      	bne.n	8004b28 <__ssputs_r+0x70>
 8004b62:	6921      	ldr	r1, [r4, #16]
 8004b64:	4650      	mov	r0, sl
 8004b66:	f000 faa5 	bl	80050b4 <_free_r>
 8004b6a:	e7c8      	b.n	8004afe <__ssputs_r+0x46>

08004b6c <_svfiprintf_r>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	461d      	mov	r5, r3
 8004b72:	898b      	ldrh	r3, [r1, #12]
 8004b74:	061f      	lsls	r7, r3, #24
 8004b76:	b09d      	sub	sp, #116	; 0x74
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	d50f      	bpl.n	8004ba0 <_svfiprintf_r+0x34>
 8004b80:	690b      	ldr	r3, [r1, #16]
 8004b82:	b96b      	cbnz	r3, 8004ba0 <_svfiprintf_r+0x34>
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	f000 fae3 	bl	8005150 <_malloc_r>
 8004b8a:	6020      	str	r0, [r4, #0]
 8004b8c:	6120      	str	r0, [r4, #16]
 8004b8e:	b928      	cbnz	r0, 8004b9c <_svfiprintf_r+0x30>
 8004b90:	230c      	movs	r3, #12
 8004b92:	f8c8 3000 	str.w	r3, [r8]
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	e0c8      	b.n	8004d2e <_svfiprintf_r+0x1c2>
 8004b9c:	2340      	movs	r3, #64	; 0x40
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004baa:	2330      	movs	r3, #48	; 0x30
 8004bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bb0:	9503      	str	r5, [sp, #12]
 8004bb2:	f04f 0b01 	mov.w	fp, #1
 8004bb6:	4637      	mov	r7, r6
 8004bb8:	463d      	mov	r5, r7
 8004bba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bbe:	b10b      	cbz	r3, 8004bc4 <_svfiprintf_r+0x58>
 8004bc0:	2b25      	cmp	r3, #37	; 0x25
 8004bc2:	d13e      	bne.n	8004c42 <_svfiprintf_r+0xd6>
 8004bc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bc8:	d00b      	beq.n	8004be2 <_svfiprintf_r+0x76>
 8004bca:	4653      	mov	r3, sl
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	f7ff ff71 	bl	8004ab8 <__ssputs_r>
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f000 80a4 	beq.w	8004d24 <_svfiprintf_r+0x1b8>
 8004bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bde:	4453      	add	r3, sl
 8004be0:	9309      	str	r3, [sp, #36]	; 0x24
 8004be2:	783b      	ldrb	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 809d 	beq.w	8004d24 <_svfiprintf_r+0x1b8>
 8004bea:	2300      	movs	r3, #0
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8004bfe:	462f      	mov	r7, r5
 8004c00:	2205      	movs	r2, #5
 8004c02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c06:	4850      	ldr	r0, [pc, #320]	; (8004d48 <_svfiprintf_r+0x1dc>)
 8004c08:	f7fb faf2 	bl	80001f0 <memchr>
 8004c0c:	9b04      	ldr	r3, [sp, #16]
 8004c0e:	b9d0      	cbnz	r0, 8004c46 <_svfiprintf_r+0xda>
 8004c10:	06d9      	lsls	r1, r3, #27
 8004c12:	bf44      	itt	mi
 8004c14:	2220      	movmi	r2, #32
 8004c16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c1a:	071a      	lsls	r2, r3, #28
 8004c1c:	bf44      	itt	mi
 8004c1e:	222b      	movmi	r2, #43	; 0x2b
 8004c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c24:	782a      	ldrb	r2, [r5, #0]
 8004c26:	2a2a      	cmp	r2, #42	; 0x2a
 8004c28:	d015      	beq.n	8004c56 <_svfiprintf_r+0xea>
 8004c2a:	9a07      	ldr	r2, [sp, #28]
 8004c2c:	462f      	mov	r7, r5
 8004c2e:	2000      	movs	r0, #0
 8004c30:	250a      	movs	r5, #10
 8004c32:	4639      	mov	r1, r7
 8004c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c38:	3b30      	subs	r3, #48	; 0x30
 8004c3a:	2b09      	cmp	r3, #9
 8004c3c:	d94d      	bls.n	8004cda <_svfiprintf_r+0x16e>
 8004c3e:	b1b8      	cbz	r0, 8004c70 <_svfiprintf_r+0x104>
 8004c40:	e00f      	b.n	8004c62 <_svfiprintf_r+0xf6>
 8004c42:	462f      	mov	r7, r5
 8004c44:	e7b8      	b.n	8004bb8 <_svfiprintf_r+0x4c>
 8004c46:	4a40      	ldr	r2, [pc, #256]	; (8004d48 <_svfiprintf_r+0x1dc>)
 8004c48:	1a80      	subs	r0, r0, r2
 8004c4a:	fa0b f000 	lsl.w	r0, fp, r0
 8004c4e:	4318      	orrs	r0, r3
 8004c50:	9004      	str	r0, [sp, #16]
 8004c52:	463d      	mov	r5, r7
 8004c54:	e7d3      	b.n	8004bfe <_svfiprintf_r+0x92>
 8004c56:	9a03      	ldr	r2, [sp, #12]
 8004c58:	1d11      	adds	r1, r2, #4
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	9103      	str	r1, [sp, #12]
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	db01      	blt.n	8004c66 <_svfiprintf_r+0xfa>
 8004c62:	9207      	str	r2, [sp, #28]
 8004c64:	e004      	b.n	8004c70 <_svfiprintf_r+0x104>
 8004c66:	4252      	negs	r2, r2
 8004c68:	f043 0302 	orr.w	r3, r3, #2
 8004c6c:	9207      	str	r2, [sp, #28]
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	783b      	ldrb	r3, [r7, #0]
 8004c72:	2b2e      	cmp	r3, #46	; 0x2e
 8004c74:	d10c      	bne.n	8004c90 <_svfiprintf_r+0x124>
 8004c76:	787b      	ldrb	r3, [r7, #1]
 8004c78:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7a:	d133      	bne.n	8004ce4 <_svfiprintf_r+0x178>
 8004c7c:	9b03      	ldr	r3, [sp, #12]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	9203      	str	r2, [sp, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bfb8      	it	lt
 8004c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c8c:	3702      	adds	r7, #2
 8004c8e:	9305      	str	r3, [sp, #20]
 8004c90:	4d2e      	ldr	r5, [pc, #184]	; (8004d4c <_svfiprintf_r+0x1e0>)
 8004c92:	7839      	ldrb	r1, [r7, #0]
 8004c94:	2203      	movs	r2, #3
 8004c96:	4628      	mov	r0, r5
 8004c98:	f7fb faaa 	bl	80001f0 <memchr>
 8004c9c:	b138      	cbz	r0, 8004cae <_svfiprintf_r+0x142>
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	1b40      	subs	r0, r0, r5
 8004ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	4303      	orrs	r3, r0
 8004caa:	3701      	adds	r7, #1
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	7839      	ldrb	r1, [r7, #0]
 8004cb0:	4827      	ldr	r0, [pc, #156]	; (8004d50 <_svfiprintf_r+0x1e4>)
 8004cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cb6:	2206      	movs	r2, #6
 8004cb8:	1c7e      	adds	r6, r7, #1
 8004cba:	f7fb fa99 	bl	80001f0 <memchr>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d038      	beq.n	8004d34 <_svfiprintf_r+0x1c8>
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <_svfiprintf_r+0x1e8>)
 8004cc4:	bb13      	cbnz	r3, 8004d0c <_svfiprintf_r+0x1a0>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	3307      	adds	r3, #7
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	3308      	adds	r3, #8
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd4:	444b      	add	r3, r9
 8004cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd8:	e76d      	b.n	8004bb6 <_svfiprintf_r+0x4a>
 8004cda:	fb05 3202 	mla	r2, r5, r2, r3
 8004cde:	2001      	movs	r0, #1
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	e7a6      	b.n	8004c32 <_svfiprintf_r+0xc6>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	3701      	adds	r7, #1
 8004ce8:	9305      	str	r3, [sp, #20]
 8004cea:	4619      	mov	r1, r3
 8004cec:	250a      	movs	r5, #10
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf4:	3a30      	subs	r2, #48	; 0x30
 8004cf6:	2a09      	cmp	r2, #9
 8004cf8:	d903      	bls.n	8004d02 <_svfiprintf_r+0x196>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0c8      	beq.n	8004c90 <_svfiprintf_r+0x124>
 8004cfe:	9105      	str	r1, [sp, #20]
 8004d00:	e7c6      	b.n	8004c90 <_svfiprintf_r+0x124>
 8004d02:	fb05 2101 	mla	r1, r5, r1, r2
 8004d06:	2301      	movs	r3, #1
 8004d08:	4607      	mov	r7, r0
 8004d0a:	e7f0      	b.n	8004cee <_svfiprintf_r+0x182>
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4622      	mov	r2, r4
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4640      	mov	r0, r8
 8004d18:	f3af 8000 	nop.w
 8004d1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d20:	4681      	mov	r9, r0
 8004d22:	d1d6      	bne.n	8004cd2 <_svfiprintf_r+0x166>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	065b      	lsls	r3, r3, #25
 8004d28:	f53f af35 	bmi.w	8004b96 <_svfiprintf_r+0x2a>
 8004d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d2e:	b01d      	add	sp, #116	; 0x74
 8004d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d34:	ab03      	add	r3, sp, #12
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004d3c:	a904      	add	r1, sp, #16
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f000 f882 	bl	8004e48 <_printf_i>
 8004d44:	e7ea      	b.n	8004d1c <_svfiprintf_r+0x1b0>
 8004d46:	bf00      	nop
 8004d48:	08005344 	.word	0x08005344
 8004d4c:	0800534a 	.word	0x0800534a
 8004d50:	0800534e 	.word	0x0800534e
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004ab9 	.word	0x08004ab9

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4691      	mov	r9, r2
 8004d62:	461f      	mov	r7, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bfb8      	it	lt
 8004d70:	4613      	movlt	r3, r2
 8004d72:	f8c9 3000 	str.w	r3, [r9]
 8004d76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	b112      	cbz	r2, 8004d86 <_printf_common+0x2a>
 8004d80:	3301      	adds	r3, #1
 8004d82:	f8c9 3000 	str.w	r3, [r9]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	0699      	lsls	r1, r3, #26
 8004d8a:	bf42      	ittt	mi
 8004d8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d90:	3302      	addmi	r3, #2
 8004d92:	f8c9 3000 	strmi.w	r3, [r9]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	f015 0506 	ands.w	r5, r5, #6
 8004d9c:	d107      	bne.n	8004dae <_printf_common+0x52>
 8004d9e:	f104 0a19 	add.w	sl, r4, #25
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	f8d9 2000 	ldr.w	r2, [r9]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	42ab      	cmp	r3, r5
 8004dac:	dc28      	bgt.n	8004e00 <_printf_common+0xa4>
 8004dae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	3300      	adds	r3, #0
 8004db6:	bf18      	it	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	0692      	lsls	r2, r2, #26
 8004dbc:	d42d      	bmi.n	8004e1a <_printf_common+0xbe>
 8004dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d020      	beq.n	8004e0e <_printf_common+0xb2>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	68e5      	ldr	r5, [r4, #12]
 8004dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd4:	f003 0306 	and.w	r3, r3, #6
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	bf08      	it	eq
 8004ddc:	1aad      	subeq	r5, r5, r2
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	6922      	ldr	r2, [r4, #16]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	f04f 0900 	mov.w	r9, #0
 8004df6:	341a      	adds	r4, #26
 8004df8:	454d      	cmp	r5, r9
 8004dfa:	d11a      	bne.n	8004e32 <_printf_common+0xd6>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e008      	b.n	8004e12 <_printf_common+0xb6>
 8004e00:	2301      	movs	r3, #1
 8004e02:	4652      	mov	r2, sl
 8004e04:	4639      	mov	r1, r7
 8004e06:	4630      	mov	r0, r6
 8004e08:	47c0      	blx	r8
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d103      	bne.n	8004e16 <_printf_common+0xba>
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e16:	3501      	adds	r5, #1
 8004e18:	e7c3      	b.n	8004da2 <_printf_common+0x46>
 8004e1a:	18e1      	adds	r1, r4, r3
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	2030      	movs	r0, #48	; 0x30
 8004e20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e24:	4422      	add	r2, r4
 8004e26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2e:	3302      	adds	r3, #2
 8004e30:	e7c5      	b.n	8004dbe <_printf_common+0x62>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4622      	mov	r2, r4
 8004e36:	4639      	mov	r1, r7
 8004e38:	4630      	mov	r0, r6
 8004e3a:	47c0      	blx	r8
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d0e6      	beq.n	8004e0e <_printf_common+0xb2>
 8004e40:	f109 0901 	add.w	r9, r9, #1
 8004e44:	e7d8      	b.n	8004df8 <_printf_common+0x9c>
	...

08004e48 <_printf_i>:
 8004e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e50:	460c      	mov	r4, r1
 8004e52:	7e09      	ldrb	r1, [r1, #24]
 8004e54:	b085      	sub	sp, #20
 8004e56:	296e      	cmp	r1, #110	; 0x6e
 8004e58:	4617      	mov	r7, r2
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e60:	f000 80b3 	beq.w	8004fca <_printf_i+0x182>
 8004e64:	d822      	bhi.n	8004eac <_printf_i+0x64>
 8004e66:	2963      	cmp	r1, #99	; 0x63
 8004e68:	d036      	beq.n	8004ed8 <_printf_i+0x90>
 8004e6a:	d80a      	bhi.n	8004e82 <_printf_i+0x3a>
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	f000 80b9 	beq.w	8004fe4 <_printf_i+0x19c>
 8004e72:	2958      	cmp	r1, #88	; 0x58
 8004e74:	f000 8083 	beq.w	8004f7e <_printf_i+0x136>
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e80:	e032      	b.n	8004ee8 <_printf_i+0xa0>
 8004e82:	2964      	cmp	r1, #100	; 0x64
 8004e84:	d001      	beq.n	8004e8a <_printf_i+0x42>
 8004e86:	2969      	cmp	r1, #105	; 0x69
 8004e88:	d1f6      	bne.n	8004e78 <_printf_i+0x30>
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	0605      	lsls	r5, r0, #24
 8004e90:	f103 0104 	add.w	r1, r3, #4
 8004e94:	d52a      	bpl.n	8004eec <_printf_i+0xa4>
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	da03      	bge.n	8004ea6 <_printf_i+0x5e>
 8004e9e:	222d      	movs	r2, #45	; 0x2d
 8004ea0:	425b      	negs	r3, r3
 8004ea2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ea6:	486f      	ldr	r0, [pc, #444]	; (8005064 <_printf_i+0x21c>)
 8004ea8:	220a      	movs	r2, #10
 8004eaa:	e039      	b.n	8004f20 <_printf_i+0xd8>
 8004eac:	2973      	cmp	r1, #115	; 0x73
 8004eae:	f000 809d 	beq.w	8004fec <_printf_i+0x1a4>
 8004eb2:	d808      	bhi.n	8004ec6 <_printf_i+0x7e>
 8004eb4:	296f      	cmp	r1, #111	; 0x6f
 8004eb6:	d020      	beq.n	8004efa <_printf_i+0xb2>
 8004eb8:	2970      	cmp	r1, #112	; 0x70
 8004eba:	d1dd      	bne.n	8004e78 <_printf_i+0x30>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	f043 0320 	orr.w	r3, r3, #32
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	e003      	b.n	8004ece <_printf_i+0x86>
 8004ec6:	2975      	cmp	r1, #117	; 0x75
 8004ec8:	d017      	beq.n	8004efa <_printf_i+0xb2>
 8004eca:	2978      	cmp	r1, #120	; 0x78
 8004ecc:	d1d4      	bne.n	8004e78 <_printf_i+0x30>
 8004ece:	2378      	movs	r3, #120	; 0x78
 8004ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ed4:	4864      	ldr	r0, [pc, #400]	; (8005068 <_printf_i+0x220>)
 8004ed6:	e055      	b.n	8004f84 <_printf_i+0x13c>
 8004ed8:	6813      	ldr	r3, [r2, #0]
 8004eda:	1d19      	adds	r1, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6011      	str	r1, [r2, #0]
 8004ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e08c      	b.n	8005006 <_printf_i+0x1be>
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6011      	str	r1, [r2, #0]
 8004ef0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef4:	bf18      	it	ne
 8004ef6:	b21b      	sxthne	r3, r3
 8004ef8:	e7cf      	b.n	8004e9a <_printf_i+0x52>
 8004efa:	6813      	ldr	r3, [r2, #0]
 8004efc:	6825      	ldr	r5, [r4, #0]
 8004efe:	1d18      	adds	r0, r3, #4
 8004f00:	6010      	str	r0, [r2, #0]
 8004f02:	0628      	lsls	r0, r5, #24
 8004f04:	d501      	bpl.n	8004f0a <_printf_i+0xc2>
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	e002      	b.n	8004f10 <_printf_i+0xc8>
 8004f0a:	0668      	lsls	r0, r5, #25
 8004f0c:	d5fb      	bpl.n	8004f06 <_printf_i+0xbe>
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	4854      	ldr	r0, [pc, #336]	; (8005064 <_printf_i+0x21c>)
 8004f12:	296f      	cmp	r1, #111	; 0x6f
 8004f14:	bf14      	ite	ne
 8004f16:	220a      	movne	r2, #10
 8004f18:	2208      	moveq	r2, #8
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f20:	6865      	ldr	r5, [r4, #4]
 8004f22:	60a5      	str	r5, [r4, #8]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	f2c0 8095 	blt.w	8005054 <_printf_i+0x20c>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	f021 0104 	bic.w	r1, r1, #4
 8004f30:	6021      	str	r1, [r4, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d13d      	bne.n	8004fb2 <_printf_i+0x16a>
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	f040 808e 	bne.w	8005058 <_printf_i+0x210>
 8004f3c:	4665      	mov	r5, ip
 8004f3e:	2a08      	cmp	r2, #8
 8004f40:	d10b      	bne.n	8004f5a <_printf_i+0x112>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	07db      	lsls	r3, r3, #31
 8004f46:	d508      	bpl.n	8004f5a <_printf_i+0x112>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	bfde      	ittt	le
 8004f50:	2330      	movle	r3, #48	; 0x30
 8004f52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f5a:	ebac 0305 	sub.w	r3, ip, r5
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	f8cd 8000 	str.w	r8, [sp]
 8004f64:	463b      	mov	r3, r7
 8004f66:	aa03      	add	r2, sp, #12
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7ff fef6 	bl	8004d5c <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d14d      	bne.n	8005010 <_printf_i+0x1c8>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	b005      	add	sp, #20
 8004f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f7e:	4839      	ldr	r0, [pc, #228]	; (8005064 <_printf_i+0x21c>)
 8004f80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	1d1d      	adds	r5, r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6015      	str	r5, [r2, #0]
 8004f8e:	060a      	lsls	r2, r1, #24
 8004f90:	d50b      	bpl.n	8004faa <_printf_i+0x162>
 8004f92:	07ca      	lsls	r2, r1, #31
 8004f94:	bf44      	itt	mi
 8004f96:	f041 0120 	orrmi.w	r1, r1, #32
 8004f9a:	6021      	strmi	r1, [r4, #0]
 8004f9c:	b91b      	cbnz	r3, 8004fa6 <_printf_i+0x15e>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	f022 0220 	bic.w	r2, r2, #32
 8004fa4:	6022      	str	r2, [r4, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	e7b7      	b.n	8004f1a <_printf_i+0xd2>
 8004faa:	064d      	lsls	r5, r1, #25
 8004fac:	bf48      	it	mi
 8004fae:	b29b      	uxthmi	r3, r3
 8004fb0:	e7ef      	b.n	8004f92 <_printf_i+0x14a>
 8004fb2:	4665      	mov	r5, ip
 8004fb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fb8:	fb02 3311 	mls	r3, r2, r1, r3
 8004fbc:	5cc3      	ldrb	r3, [r0, r3]
 8004fbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d1f5      	bne.n	8004fb4 <_printf_i+0x16c>
 8004fc8:	e7b9      	b.n	8004f3e <_printf_i+0xf6>
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	6961      	ldr	r1, [r4, #20]
 8004fd0:	1d18      	adds	r0, r3, #4
 8004fd2:	6010      	str	r0, [r2, #0]
 8004fd4:	0628      	lsls	r0, r5, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	d501      	bpl.n	8004fde <_printf_i+0x196>
 8004fda:	6019      	str	r1, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <_printf_i+0x19c>
 8004fde:	066a      	lsls	r2, r5, #25
 8004fe0:	d5fb      	bpl.n	8004fda <_printf_i+0x192>
 8004fe2:	8019      	strh	r1, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	4665      	mov	r5, ip
 8004fea:	e7b9      	b.n	8004f60 <_printf_i+0x118>
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	1d19      	adds	r1, r3, #4
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	681d      	ldr	r5, [r3, #0]
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7fb f8f9 	bl	80001f0 <memchr>
 8004ffe:	b108      	cbz	r0, 8005004 <_printf_i+0x1bc>
 8005000:	1b40      	subs	r0, r0, r5
 8005002:	6060      	str	r0, [r4, #4]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2300      	movs	r3, #0
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500e:	e7a7      	b.n	8004f60 <_printf_i+0x118>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	462a      	mov	r2, r5
 8005014:	4639      	mov	r1, r7
 8005016:	4630      	mov	r0, r6
 8005018:	47c0      	blx	r8
 800501a:	3001      	adds	r0, #1
 800501c:	d0aa      	beq.n	8004f74 <_printf_i+0x12c>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	079b      	lsls	r3, r3, #30
 8005022:	d413      	bmi.n	800504c <_printf_i+0x204>
 8005024:	68e0      	ldr	r0, [r4, #12]
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	4298      	cmp	r0, r3
 800502a:	bfb8      	it	lt
 800502c:	4618      	movlt	r0, r3
 800502e:	e7a3      	b.n	8004f78 <_printf_i+0x130>
 8005030:	2301      	movs	r3, #1
 8005032:	464a      	mov	r2, r9
 8005034:	4639      	mov	r1, r7
 8005036:	4630      	mov	r0, r6
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d09a      	beq.n	8004f74 <_printf_i+0x12c>
 800503e:	3501      	adds	r5, #1
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	9a03      	ldr	r2, [sp, #12]
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	42ab      	cmp	r3, r5
 8005048:	dcf2      	bgt.n	8005030 <_printf_i+0x1e8>
 800504a:	e7eb      	b.n	8005024 <_printf_i+0x1dc>
 800504c:	2500      	movs	r5, #0
 800504e:	f104 0919 	add.w	r9, r4, #25
 8005052:	e7f5      	b.n	8005040 <_printf_i+0x1f8>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ac      	bne.n	8004fb2 <_printf_i+0x16a>
 8005058:	7803      	ldrb	r3, [r0, #0]
 800505a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005062:	e76c      	b.n	8004f3e <_printf_i+0xf6>
 8005064:	08005355 	.word	0x08005355
 8005068:	08005366 	.word	0x08005366

0800506c <memcpy>:
 800506c:	b510      	push	{r4, lr}
 800506e:	1e43      	subs	r3, r0, #1
 8005070:	440a      	add	r2, r1
 8005072:	4291      	cmp	r1, r2
 8005074:	d100      	bne.n	8005078 <memcpy+0xc>
 8005076:	bd10      	pop	{r4, pc}
 8005078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005080:	e7f7      	b.n	8005072 <memcpy+0x6>

08005082 <memmove>:
 8005082:	4288      	cmp	r0, r1
 8005084:	b510      	push	{r4, lr}
 8005086:	eb01 0302 	add.w	r3, r1, r2
 800508a:	d807      	bhi.n	800509c <memmove+0x1a>
 800508c:	1e42      	subs	r2, r0, #1
 800508e:	4299      	cmp	r1, r3
 8005090:	d00a      	beq.n	80050a8 <memmove+0x26>
 8005092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005096:	f802 4f01 	strb.w	r4, [r2, #1]!
 800509a:	e7f8      	b.n	800508e <memmove+0xc>
 800509c:	4283      	cmp	r3, r0
 800509e:	d9f5      	bls.n	800508c <memmove+0xa>
 80050a0:	1881      	adds	r1, r0, r2
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	42d3      	cmn	r3, r2
 80050a6:	d100      	bne.n	80050aa <memmove+0x28>
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80050b2:	e7f7      	b.n	80050a4 <memmove+0x22>

080050b4 <_free_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4605      	mov	r5, r0
 80050b8:	2900      	cmp	r1, #0
 80050ba:	d045      	beq.n	8005148 <_free_r+0x94>
 80050bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c0:	1f0c      	subs	r4, r1, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfb8      	it	lt
 80050c6:	18e4      	addlt	r4, r4, r3
 80050c8:	f000 f8d2 	bl	8005270 <__malloc_lock>
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <_free_r+0x98>)
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	4610      	mov	r0, r2
 80050d2:	b933      	cbnz	r3, 80050e2 <_free_r+0x2e>
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	6014      	str	r4, [r2, #0]
 80050d8:	4628      	mov	r0, r5
 80050da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050de:	f000 b8c8 	b.w	8005272 <__malloc_unlock>
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	d90c      	bls.n	8005100 <_free_r+0x4c>
 80050e6:	6821      	ldr	r1, [r4, #0]
 80050e8:	1862      	adds	r2, r4, r1
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bf04      	itt	eq
 80050ee:	681a      	ldreq	r2, [r3, #0]
 80050f0:	685b      	ldreq	r3, [r3, #4]
 80050f2:	6063      	str	r3, [r4, #4]
 80050f4:	bf04      	itt	eq
 80050f6:	1852      	addeq	r2, r2, r1
 80050f8:	6022      	streq	r2, [r4, #0]
 80050fa:	6004      	str	r4, [r0, #0]
 80050fc:	e7ec      	b.n	80050d8 <_free_r+0x24>
 80050fe:	4613      	mov	r3, r2
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	b10a      	cbz	r2, 8005108 <_free_r+0x54>
 8005104:	42a2      	cmp	r2, r4
 8005106:	d9fa      	bls.n	80050fe <_free_r+0x4a>
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	1858      	adds	r0, r3, r1
 800510c:	42a0      	cmp	r0, r4
 800510e:	d10b      	bne.n	8005128 <_free_r+0x74>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4401      	add	r1, r0
 8005114:	1858      	adds	r0, r3, r1
 8005116:	4282      	cmp	r2, r0
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	d1dd      	bne.n	80050d8 <_free_r+0x24>
 800511c:	6810      	ldr	r0, [r2, #0]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	4401      	add	r1, r0
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e7d7      	b.n	80050d8 <_free_r+0x24>
 8005128:	d902      	bls.n	8005130 <_free_r+0x7c>
 800512a:	230c      	movs	r3, #12
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7d3      	b.n	80050d8 <_free_r+0x24>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428a      	cmp	r2, r1
 8005136:	bf04      	itt	eq
 8005138:	6811      	ldreq	r1, [r2, #0]
 800513a:	6852      	ldreq	r2, [r2, #4]
 800513c:	6062      	str	r2, [r4, #4]
 800513e:	bf04      	itt	eq
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	605c      	str	r4, [r3, #4]
 8005146:	e7c7      	b.n	80050d8 <_free_r+0x24>
 8005148:	bd38      	pop	{r3, r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	20000494 	.word	0x20000494

08005150 <_malloc_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	1ccd      	adds	r5, r1, #3
 8005154:	f025 0503 	bic.w	r5, r5, #3
 8005158:	3508      	adds	r5, #8
 800515a:	2d0c      	cmp	r5, #12
 800515c:	bf38      	it	cc
 800515e:	250c      	movcc	r5, #12
 8005160:	2d00      	cmp	r5, #0
 8005162:	4606      	mov	r6, r0
 8005164:	db01      	blt.n	800516a <_malloc_r+0x1a>
 8005166:	42a9      	cmp	r1, r5
 8005168:	d903      	bls.n	8005172 <_malloc_r+0x22>
 800516a:	230c      	movs	r3, #12
 800516c:	6033      	str	r3, [r6, #0]
 800516e:	2000      	movs	r0, #0
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	f000 f87d 	bl	8005270 <__malloc_lock>
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <_malloc_r+0xac>)
 8005178:	6814      	ldr	r4, [r2, #0]
 800517a:	4621      	mov	r1, r4
 800517c:	b991      	cbnz	r1, 80051a4 <_malloc_r+0x54>
 800517e:	4c20      	ldr	r4, [pc, #128]	; (8005200 <_malloc_r+0xb0>)
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	b91b      	cbnz	r3, 800518c <_malloc_r+0x3c>
 8005184:	4630      	mov	r0, r6
 8005186:	f000 f863 	bl	8005250 <_sbrk_r>
 800518a:	6020      	str	r0, [r4, #0]
 800518c:	4629      	mov	r1, r5
 800518e:	4630      	mov	r0, r6
 8005190:	f000 f85e 	bl	8005250 <_sbrk_r>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d124      	bne.n	80051e2 <_malloc_r+0x92>
 8005198:	230c      	movs	r3, #12
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	4630      	mov	r0, r6
 800519e:	f000 f868 	bl	8005272 <__malloc_unlock>
 80051a2:	e7e4      	b.n	800516e <_malloc_r+0x1e>
 80051a4:	680b      	ldr	r3, [r1, #0]
 80051a6:	1b5b      	subs	r3, r3, r5
 80051a8:	d418      	bmi.n	80051dc <_malloc_r+0x8c>
 80051aa:	2b0b      	cmp	r3, #11
 80051ac:	d90f      	bls.n	80051ce <_malloc_r+0x7e>
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	50cd      	str	r5, [r1, r3]
 80051b2:	18cc      	adds	r4, r1, r3
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f85c 	bl	8005272 <__malloc_unlock>
 80051ba:	f104 000b 	add.w	r0, r4, #11
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	f020 0007 	bic.w	r0, r0, #7
 80051c4:	1ac3      	subs	r3, r0, r3
 80051c6:	d0d3      	beq.n	8005170 <_malloc_r+0x20>
 80051c8:	425a      	negs	r2, r3
 80051ca:	50e2      	str	r2, [r4, r3]
 80051cc:	e7d0      	b.n	8005170 <_malloc_r+0x20>
 80051ce:	428c      	cmp	r4, r1
 80051d0:	684b      	ldr	r3, [r1, #4]
 80051d2:	bf16      	itet	ne
 80051d4:	6063      	strne	r3, [r4, #4]
 80051d6:	6013      	streq	r3, [r2, #0]
 80051d8:	460c      	movne	r4, r1
 80051da:	e7eb      	b.n	80051b4 <_malloc_r+0x64>
 80051dc:	460c      	mov	r4, r1
 80051de:	6849      	ldr	r1, [r1, #4]
 80051e0:	e7cc      	b.n	800517c <_malloc_r+0x2c>
 80051e2:	1cc4      	adds	r4, r0, #3
 80051e4:	f024 0403 	bic.w	r4, r4, #3
 80051e8:	42a0      	cmp	r0, r4
 80051ea:	d005      	beq.n	80051f8 <_malloc_r+0xa8>
 80051ec:	1a21      	subs	r1, r4, r0
 80051ee:	4630      	mov	r0, r6
 80051f0:	f000 f82e 	bl	8005250 <_sbrk_r>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d0cf      	beq.n	8005198 <_malloc_r+0x48>
 80051f8:	6025      	str	r5, [r4, #0]
 80051fa:	e7db      	b.n	80051b4 <_malloc_r+0x64>
 80051fc:	20000494 	.word	0x20000494
 8005200:	20000498 	.word	0x20000498

08005204 <_realloc_r>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	4607      	mov	r7, r0
 8005208:	4614      	mov	r4, r2
 800520a:	460e      	mov	r6, r1
 800520c:	b921      	cbnz	r1, 8005218 <_realloc_r+0x14>
 800520e:	4611      	mov	r1, r2
 8005210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005214:	f7ff bf9c 	b.w	8005150 <_malloc_r>
 8005218:	b922      	cbnz	r2, 8005224 <_realloc_r+0x20>
 800521a:	f7ff ff4b 	bl	80050b4 <_free_r>
 800521e:	4625      	mov	r5, r4
 8005220:	4628      	mov	r0, r5
 8005222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005224:	f000 f826 	bl	8005274 <_malloc_usable_size_r>
 8005228:	42a0      	cmp	r0, r4
 800522a:	d20f      	bcs.n	800524c <_realloc_r+0x48>
 800522c:	4621      	mov	r1, r4
 800522e:	4638      	mov	r0, r7
 8005230:	f7ff ff8e 	bl	8005150 <_malloc_r>
 8005234:	4605      	mov	r5, r0
 8005236:	2800      	cmp	r0, #0
 8005238:	d0f2      	beq.n	8005220 <_realloc_r+0x1c>
 800523a:	4631      	mov	r1, r6
 800523c:	4622      	mov	r2, r4
 800523e:	f7ff ff15 	bl	800506c <memcpy>
 8005242:	4631      	mov	r1, r6
 8005244:	4638      	mov	r0, r7
 8005246:	f7ff ff35 	bl	80050b4 <_free_r>
 800524a:	e7e9      	b.n	8005220 <_realloc_r+0x1c>
 800524c:	4635      	mov	r5, r6
 800524e:	e7e7      	b.n	8005220 <_realloc_r+0x1c>

08005250 <_sbrk_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4c06      	ldr	r4, [pc, #24]	; (800526c <_sbrk_r+0x1c>)
 8005254:	2300      	movs	r3, #0
 8005256:	4605      	mov	r5, r0
 8005258:	4608      	mov	r0, r1
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	f7fc fb5e 	bl	800191c <_sbrk>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_sbrk_r+0x1a>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	b103      	cbz	r3, 800526a <_sbrk_r+0x1a>
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20000570 	.word	0x20000570

08005270 <__malloc_lock>:
 8005270:	4770      	bx	lr

08005272 <__malloc_unlock>:
 8005272:	4770      	bx	lr

08005274 <_malloc_usable_size_r>:
 8005274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005278:	1f18      	subs	r0, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	bfbc      	itt	lt
 800527e:	580b      	ldrlt	r3, [r1, r0]
 8005280:	18c0      	addlt	r0, r0, r3
 8005282:	4770      	bx	lr

08005284 <_init>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

08005290 <_fini>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr
