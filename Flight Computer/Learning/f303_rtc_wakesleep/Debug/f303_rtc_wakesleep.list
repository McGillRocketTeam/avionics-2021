
f303_rtc_wakesleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f20  08004f20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f20  08004f20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08004f98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004f98  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eba5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d56  00000000  00000000  0002ec45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  000309a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021848  00000000  00000000  000323e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf8d  00000000  00000000  00053c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cff81  00000000  00000000  0005fbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fb3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  0012fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ca0 	.word	0x08004ca0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ca0 	.word	0x08004ca0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fe49 	bl	8000f2c <HAL_Init>

//  HAL_PWR_DisableSleepOnExit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f969 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 fa63 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 fa31 	bl	8000708 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80002a6:	f000 f9cb 	bl	8000640 <MX_RTC_Init>
  MX_TIM16_Init();
 80002aa:	f000 fa05 	bl	80006b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 80002ae:	48a0      	ldr	r0, [pc, #640]	; (8000530 <main+0x2a0>)
 80002b0:	f003 fa2c 	bl	800370c <HAL_TIM_Base_Start_IT>
	// reset LED
	HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	489e      	ldr	r0, [pc, #632]	; (8000534 <main+0x2a4>)
 80002ba:	f001 f96b 	bl	8001594 <HAL_GPIO_WritePin>

	// check if system woke from standby mode, if so, clear flags
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80002be:	4b9e      	ldr	r3, [pc, #632]	; (8000538 <main+0x2a8>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d134      	bne.n	8000334 <main+0xa4>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80002ca:	4b9b      	ldr	r3, [pc, #620]	; (8000538 <main+0x2a8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a9a      	ldr	r2, [pc, #616]	; (8000538 <main+0x2a8>)
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80002d6:	4b98      	ldr	r3, [pc, #608]	; (8000538 <main+0x2a8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a97      	ldr	r2, [pc, #604]	; (8000538 <main+0x2a8>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]

		// if we woke from standby, then alarm B triggered the wakeup so run the callback
		HAL_RTCEx_AlarmBEventCallback(&hrtc);
 80002e2:	4896      	ldr	r0, [pc, #600]	; (800053c <main+0x2ac>)
 80002e4:	f000 fb58 	bl	8000998 <HAL_RTCEx_AlarmBEventCallback>
		sprintf((char *) msg, "inside flag clearing about beginning of main\n");
 80002e8:	4b95      	ldr	r3, [pc, #596]	; (8000540 <main+0x2b0>)
 80002ea:	4a96      	ldr	r2, [pc, #600]	; (8000544 <main+0x2b4>)
 80002ec:	4614      	mov	r4, r2
 80002ee:	469c      	mov	ip, r3
 80002f0:	f104 0e20 	add.w	lr, r4, #32
 80002f4:	4665      	mov	r5, ip
 80002f6:	4626      	mov	r6, r4
 80002f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80002fa:	6028      	str	r0, [r5, #0]
 80002fc:	6069      	str	r1, [r5, #4]
 80002fe:	60aa      	str	r2, [r5, #8]
 8000300:	60eb      	str	r3, [r5, #12]
 8000302:	3410      	adds	r4, #16
 8000304:	f10c 0c10 	add.w	ip, ip, #16
 8000308:	4574      	cmp	r4, lr
 800030a:	d1f3      	bne.n	80002f4 <main+0x64>
 800030c:	4665      	mov	r5, ip
 800030e:	4623      	mov	r3, r4
 8000310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000312:	6028      	str	r0, [r5, #0]
 8000314:	6069      	str	r1, [r5, #4]
 8000316:	60aa      	str	r2, [r5, #8]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	81ab      	strh	r3, [r5, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 800031c:	4888      	ldr	r0, [pc, #544]	; (8000540 <main+0x2b0>)
 800031e:	f7ff ff5f 	bl	80001e0 <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	b29a      	uxth	r2, r3
 8000326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032a:	4985      	ldr	r1, [pc, #532]	; (8000540 <main+0x2b0>)
 800032c:	4886      	ldr	r0, [pc, #536]	; (8000548 <main+0x2b8>)
 800032e:	f003 fcaf 	bl	8003c90 <HAL_UART_Transmit>
 8000332:	e0c5      	b.n	80004c0 <main+0x230>
	} else {


		sprintf((char*) msg, "Setting RTC time and date\r\n");
 8000334:	4a82      	ldr	r2, [pc, #520]	; (8000540 <main+0x2b0>)
 8000336:	4b85      	ldr	r3, [pc, #532]	; (800054c <main+0x2bc>)
 8000338:	4615      	mov	r5, r2
 800033a:	461c      	mov	r4, r3
 800033c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033e:	6028      	str	r0, [r5, #0]
 8000340:	6069      	str	r1, [r5, #4]
 8000342:	60aa      	str	r2, [r5, #8]
 8000344:	60eb      	str	r3, [r5, #12]
 8000346:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000348:	6128      	str	r0, [r5, #16]
 800034a:	6169      	str	r1, [r5, #20]
 800034c:	61aa      	str	r2, [r5, #24]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 800034e:	487c      	ldr	r0, [pc, #496]	; (8000540 <main+0x2b0>)
 8000350:	f7ff ff46 	bl	80001e0 <strlen>
 8000354:	4603      	mov	r3, r0
 8000356:	b29a      	uxth	r2, r3
 8000358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035c:	4978      	ldr	r1, [pc, #480]	; (8000540 <main+0x2b0>)
 800035e:	487a      	ldr	r0, [pc, #488]	; (8000548 <main+0x2b8>)
 8000360:	f003 fc96 	bl	8003c90 <HAL_UART_Transmit>

		HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000364:	2200      	movs	r2, #0
 8000366:	497a      	ldr	r1, [pc, #488]	; (8000550 <main+0x2c0>)
 8000368:	4874      	ldr	r0, [pc, #464]	; (800053c <main+0x2ac>)
 800036a:	f002 fe15 	bl	8002f98 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800036e:	2200      	movs	r2, #0
 8000370:	4978      	ldr	r1, [pc, #480]	; (8000554 <main+0x2c4>)
 8000372:	4872      	ldr	r0, [pc, #456]	; (800053c <main+0x2ac>)
 8000374:	f002 ff15 	bl	80031a2 <HAL_RTC_GetDate>
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
				stimestructureget.Hours, stimestructureget.Minutes,
 8000378:	4b75      	ldr	r3, [pc, #468]	; (8000550 <main+0x2c0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 800037c:	461a      	mov	r2, r3
				stimestructureget.Hours, stimestructureget.Minutes,
 800037e:	4b74      	ldr	r3, [pc, #464]	; (8000550 <main+0x2c0>)
 8000380:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000382:	4619      	mov	r1, r3
				stimestructureget.Seconds);
 8000384:	4b72      	ldr	r3, [pc, #456]	; (8000550 <main+0x2c0>)
 8000386:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	460b      	mov	r3, r1
 800038c:	4972      	ldr	r1, [pc, #456]	; (8000558 <main+0x2c8>)
 800038e:	486c      	ldr	r0, [pc, #432]	; (8000540 <main+0x2b0>)
 8000390:	f004 f880 	bl	8004494 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000394:	486a      	ldr	r0, [pc, #424]	; (8000540 <main+0x2b0>)
 8000396:	f7ff ff23 	bl	80001e0 <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a2:	4967      	ldr	r1, [pc, #412]	; (8000540 <main+0x2b0>)
 80003a4:	4868      	ldr	r0, [pc, #416]	; (8000548 <main+0x2b8>)
 80003a6:	f003 fc73 	bl	8003c90 <HAL_UART_Transmit>

		stimestructureget.Hours = 0x11;
 80003aa:	4b69      	ldr	r3, [pc, #420]	; (8000550 <main+0x2c0>)
 80003ac:	2211      	movs	r2, #17
 80003ae:	701a      	strb	r2, [r3, #0]
		stimestructureget.Minutes = 0x11;
 80003b0:	4b67      	ldr	r3, [pc, #412]	; (8000550 <main+0x2c0>)
 80003b2:	2211      	movs	r2, #17
 80003b4:	705a      	strb	r2, [r3, #1]
		stimestructureget.Seconds = 0x00;
 80003b6:	4b66      	ldr	r3, [pc, #408]	; (8000550 <main+0x2c0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	709a      	strb	r2, [r3, #2]
		stimestructureget.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003bc:	4b64      	ldr	r3, [pc, #400]	; (8000550 <main+0x2c0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
		stimestructureget.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c2:	4b63      	ldr	r3, [pc, #396]	; (8000550 <main+0x2c0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BCD)
 80003c8:	2201      	movs	r2, #1
 80003ca:	4961      	ldr	r1, [pc, #388]	; (8000550 <main+0x2c0>)
 80003cc:	485b      	ldr	r0, [pc, #364]	; (800053c <main+0x2ac>)
 80003ce:	f002 fd26 	bl	8002e1e <HAL_RTC_SetTime>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <main+0x14c>
				!= HAL_OK) {
			Error_Handler();
 80003d8:	f000 fc2a 	bl	8000c30 <Error_Handler>
		}
		sdatestructureget.WeekDay = RTC_WEEKDAY_MONDAY;
 80003dc:	4b5d      	ldr	r3, [pc, #372]	; (8000554 <main+0x2c4>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
		sdatestructureget.Month = RTC_MONTH_APRIL;
 80003e2:	4b5c      	ldr	r3, [pc, #368]	; (8000554 <main+0x2c4>)
 80003e4:	2204      	movs	r2, #4
 80003e6:	705a      	strb	r2, [r3, #1]
		sdatestructureget.Date = 0x12;
 80003e8:	4b5a      	ldr	r3, [pc, #360]	; (8000554 <main+0x2c4>)
 80003ea:	2212      	movs	r2, #18
 80003ec:	709a      	strb	r2, [r3, #2]
		sdatestructureget.Year = 0x21;
 80003ee:	4b59      	ldr	r3, [pc, #356]	; (8000554 <main+0x2c4>)
 80003f0:	2221      	movs	r2, #33	; 0x21
 80003f2:	70da      	strb	r2, [r3, #3]

		if (HAL_RTC_SetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BCD)
 80003f4:	2201      	movs	r2, #1
 80003f6:	4957      	ldr	r1, [pc, #348]	; (8000554 <main+0x2c4>)
 80003f8:	4850      	ldr	r0, [pc, #320]	; (800053c <main+0x2ac>)
 80003fa:	f002 fe2b 	bl	8003054 <HAL_RTC_SetDate>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <main+0x178>
				!= HAL_OK) {
			Error_Handler();
 8000404:	f000 fc14 	bl	8000c30 <Error_Handler>
		}

		/** Enable the Alarm A */
		sAlarmA.AlarmTime.Hours = 0x11;
 8000408:	4b54      	ldr	r3, [pc, #336]	; (800055c <main+0x2cc>)
 800040a:	2211      	movs	r2, #17
 800040c:	701a      	strb	r2, [r3, #0]
		sAlarmA.AlarmTime.Minutes = 0x55;
 800040e:	4b53      	ldr	r3, [pc, #332]	; (800055c <main+0x2cc>)
 8000410:	2255      	movs	r2, #85	; 0x55
 8000412:	705a      	strb	r2, [r3, #1]
		sAlarmA.AlarmTime.Seconds = 0x03;
 8000414:	4b51      	ldr	r3, [pc, #324]	; (800055c <main+0x2cc>)
 8000416:	2203      	movs	r2, #3
 8000418:	709a      	strb	r2, [r3, #2]
		sAlarmA.AlarmTime.SubSeconds = 0x0;
 800041a:	4b50      	ldr	r3, [pc, #320]	; (800055c <main+0x2cc>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
		sAlarmA.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000420:	4b4e      	ldr	r3, [pc, #312]	; (800055c <main+0x2cc>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
		sAlarmA.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000426:	4b4d      	ldr	r3, [pc, #308]	; (800055c <main+0x2cc>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
		sAlarmA.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES; // triggers alarm every minute at the specified second
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <main+0x2cc>)
 800042e:	4a4c      	ldr	r2, [pc, #304]	; (8000560 <main+0x2d0>)
 8000430:	615a      	str	r2, [r3, #20]
//		sAlarmA.AlarmMask = RTC_ALARMMASK_ALL; // triggers alarm every second
		sAlarmA.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000432:	4b4a      	ldr	r3, [pc, #296]	; (800055c <main+0x2cc>)
 8000434:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000438:	619a      	str	r2, [r3, #24]
		sAlarmA.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800043a:	4b48      	ldr	r3, [pc, #288]	; (800055c <main+0x2cc>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
		sAlarmA.AlarmDateWeekDay = 0x1;
 8000440:	4b46      	ldr	r3, [pc, #280]	; (800055c <main+0x2cc>)
 8000442:	2201      	movs	r2, #1
 8000444:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarmA.Alarm = RTC_ALARM_A;
 8000448:	4b44      	ldr	r3, [pc, #272]	; (800055c <main+0x2cc>)
 800044a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044e:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmA, RTC_FORMAT_BCD) != HAL_OK) {
 8000450:	2201      	movs	r2, #1
 8000452:	4942      	ldr	r1, [pc, #264]	; (800055c <main+0x2cc>)
 8000454:	4839      	ldr	r0, [pc, #228]	; (800053c <main+0x2ac>)
 8000456:	f002 fef3 	bl	8003240 <HAL_RTC_SetAlarm_IT>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <main+0x1d4>
			Error_Handler();
 8000460:	f000 fbe6 	bl	8000c30 <Error_Handler>
		}
		/** Enable the Alarm B */
		sAlarmB.AlarmTime.Hours = 0x11;
 8000464:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <main+0x2d4>)
 8000466:	2211      	movs	r2, #17
 8000468:	701a      	strb	r2, [r3, #0]
		sAlarmB.AlarmTime.Minutes = 0x42;
 800046a:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <main+0x2d4>)
 800046c:	2242      	movs	r2, #66	; 0x42
 800046e:	705a      	strb	r2, [r3, #1]
		sAlarmB.AlarmTime.Seconds = 0x12;
 8000470:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <main+0x2d4>)
 8000472:	2212      	movs	r2, #18
 8000474:	709a      	strb	r2, [r3, #2]
		sAlarmB.AlarmTime.SubSeconds = 0x0;
 8000476:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <main+0x2d4>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
		sAlarmB.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <main+0x2d4>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
		sAlarmB.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000482:	4b38      	ldr	r3, [pc, #224]	; (8000564 <main+0x2d4>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
		sAlarmB.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES; // triggers alarm every minute at the specified second
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <main+0x2d4>)
 800048a:	4a35      	ldr	r2, [pc, #212]	; (8000560 <main+0x2d0>)
 800048c:	615a      	str	r2, [r3, #20]
//		sAlarmB.AlarmMask = RTC_ALARMMASK_ALL; // triggers alarm every second
		sAlarmB.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <main+0x2d4>)
 8000490:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000494:	619a      	str	r2, [r3, #24]
		sAlarmB.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <main+0x2d4>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
		sAlarmB.AlarmDateWeekDay = 0x1;
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <main+0x2d4>)
 800049e:	2201      	movs	r2, #1
 80004a0:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarmB.Alarm = RTC_ALARM_B;
 80004a4:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <main+0x2d4>)
 80004a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmB, RTC_FORMAT_BCD) != HAL_OK) {
 80004ac:	2201      	movs	r2, #1
 80004ae:	492d      	ldr	r1, [pc, #180]	; (8000564 <main+0x2d4>)
 80004b0:	4822      	ldr	r0, [pc, #136]	; (800053c <main+0x2ac>)
 80004b2:	f002 fec5 	bl	8003240 <HAL_RTC_SetAlarm_IT>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <main+0x230>
			Error_Handler();
 80004bc:	f000 fbb8 	bl	8000c30 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pollAlarmInterruptFlag();
 80004c0:	f000 fb9c 	bl	8000bfc <pollAlarmInterruptFlag>

	  // alarmAOccurred is a flag indicating time to sleep
	  if (alarmAOccurred) {
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <main+0x2d8>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f8      	beq.n	80004c0 <main+0x230>
		  sprintf((char *)msg, "entered alarmAOccurred in while loop, going to sleep\r\n");
 80004ce:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <main+0x2b0>)
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <main+0x2dc>)
 80004d2:	4614      	mov	r4, r2
 80004d4:	469c      	mov	ip, r3
 80004d6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80004da:	4665      	mov	r5, ip
 80004dc:	4626      	mov	r6, r4
 80004de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004e0:	6028      	str	r0, [r5, #0]
 80004e2:	6069      	str	r1, [r5, #4]
 80004e4:	60aa      	str	r2, [r5, #8]
 80004e6:	60eb      	str	r3, [r5, #12]
 80004e8:	3410      	adds	r4, #16
 80004ea:	f10c 0c10 	add.w	ip, ip, #16
 80004ee:	4574      	cmp	r4, lr
 80004f0:	d1f3      	bne.n	80004da <main+0x24a>
 80004f2:	4663      	mov	r3, ip
 80004f4:	4622      	mov	r2, r4
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	6018      	str	r0, [r3, #0]
 80004fa:	8891      	ldrh	r1, [r2, #4]
 80004fc:	7992      	ldrb	r2, [r2, #6]
 80004fe:	8099      	strh	r1, [r3, #4]
 8000500:	719a      	strb	r2, [r3, #6]
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x2b0>)
 8000504:	f7ff fe6c 	bl	80001e0 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b29a      	uxth	r2, r3
 800050c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000510:	490b      	ldr	r1, [pc, #44]	; (8000540 <main+0x2b0>)
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <main+0x2b8>)
 8000514:	f003 fbbc 	bl	8003c90 <HAL_UART_Transmit>

		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x2a8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <main+0x2a8>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6013      	str	r3, [r2, #0]
		  HAL_SuspendTick(); // systick generates interrupts which may wake the processor
 8000524:	f000 fd8a 	bl	800103c <HAL_SuspendTick>
		  HAL_PWR_EnterSTANDBYMode();
 8000528:	f001 f866 	bl	80015f8 <HAL_PWR_EnterSTANDBYMode>
	  pollAlarmInterruptFlag();
 800052c:	e7c8      	b.n	80004c0 <main+0x230>
 800052e:	bf00      	nop
 8000530:	2000020c 	.word	0x2000020c
 8000534:	48000800 	.word	0x48000800
 8000538:	40007000 	.word	0x40007000
 800053c:	20000154 	.word	0x20000154
 8000540:	200000c4 	.word	0x200000c4
 8000544:	08004cb8 	.word	0x08004cb8
 8000548:	20000188 	.word	0x20000188
 800054c:	08004ce8 	.word	0x08004ce8
 8000550:	20000174 	.word	0x20000174
 8000554:	20000128 	.word	0x20000128
 8000558:	08004d04 	.word	0x08004d04
 800055c:	2000012c 	.word	0x2000012c
 8000560:	80808000 	.word	0x80808000
 8000564:	2000009c 	.word	0x2000009c
 8000568:	2000008c 	.word	0x2000008c
 800056c:	08004d30 	.word	0x08004d30

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b0a6      	sub	sp, #152	; 0x98
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 ff80 	bl	8004484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2258      	movs	r2, #88	; 0x58
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 ff72 	bl	8004484 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005a0:	230a      	movs	r3, #10
 80005a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f827 	bl	8001628 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e0:	f000 fb26 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ff27 	bl	8002454 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800060c:	f000 fb10 	bl	8000c30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <SystemClock_Config+0xcc>)
 8000612:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800061e:	2300      	movs	r3, #0
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f94b 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 fafe 	bl	8000c30 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3798      	adds	r7, #152	; 0x98
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	00810002 	.word	0x00810002

08000640 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2228      	movs	r2, #40	; 0x28
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 ff0f 	bl	8004484 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_RTC_Init+0x70>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_RTC_Init+0x74>)
 800066a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_RTC_Init+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_RTC_Init+0x70>)
 8000674:	227f      	movs	r2, #127	; 0x7f
 8000676:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_RTC_Init+0x70>)
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_RTC_Init+0x70>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_RTC_Init+0x70>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_RTC_Init+0x70>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <MX_RTC_Init+0x70>)
 8000692:	f002 fb33 	bl	8002cfc <HAL_RTC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800069c:	f000 fac8 	bl	8000c30 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_MspInit(&hrtc);
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <MX_RTC_Init+0x70>)
 80006a2:	f000 faff 	bl	8000ca4 <HAL_RTC_MspInit>
  /* USER CODE END RTC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3740      	adds	r7, #64	; 0x40
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000154 	.word	0x20000154
 80006b4:	40002800 	.word	0x40002800

080006b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_TIM16_Init+0x48>)
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <MX_TIM16_Init+0x4c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200 - 1;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_TIM16_Init+0x48>)
 80006c4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80006c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_TIM16_Init+0x48>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_TIM16_Init+0x48>)
 80006d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_TIM16_Init+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_TIM16_Init+0x48>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_TIM16_Init+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_TIM16_Init+0x48>)
 80006ec:	f002 ffb6 	bl	800365c <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006f6:	f000 fa9b 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000020c 	.word	0x2000020c
 8000704:	40014400 	.word	0x40014400

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART2_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART2_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000714:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x58>)
 800074c:	f003 fa52 	bl	8003bf4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 fa6b 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000188 	.word	0x20000188
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0xe8>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0xe8>)
 8000784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_GPIO_Init+0xe8>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_GPIO_Init+0xe8>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <MX_GPIO_Init+0xe8>)
 800079c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a27      	ldr	r2, [pc, #156]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_GPIO_Init+0xe8>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	481c      	ldr	r0, [pc, #112]	; (8000854 <MX_GPIO_Init+0xec>)
 80007e4:	f000 fed6 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2120      	movs	r1, #32
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fed0 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_GPIO_Init+0xf0>)
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xec>)
 800080a:	f000 fd39 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 800080e:	2304      	movs	r3, #4
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0xec>)
 8000826:	f000 fd2b 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f000 fd1c 	bl	8001280 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000800 	.word	0x48000800
 8000858:	10210000 	.word	0x10210000

0800085c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Callbacks
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	sprintf((char*) msg, "Alarm A callback entered\r\n");
 8000864:	4a45      	ldr	r2, [pc, #276]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 8000866:	4b46      	ldr	r3, [pc, #280]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x124>)
 8000868:	4615      	mov	r5, r2
 800086a:	461c      	mov	r4, r3
 800086c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086e:	6028      	str	r0, [r5, #0]
 8000870:	6069      	str	r1, [r5, #4]
 8000872:	60aa      	str	r2, [r5, #8]
 8000874:	60eb      	str	r3, [r5, #12]
 8000876:	cc03      	ldmia	r4!, {r0, r1}
 8000878:	6128      	str	r0, [r5, #16]
 800087a:	6169      	str	r1, [r5, #20]
 800087c:	8823      	ldrh	r3, [r4, #0]
 800087e:	78a2      	ldrb	r2, [r4, #2]
 8000880:	832b      	strh	r3, [r5, #24]
 8000882:	4613      	mov	r3, r2
 8000884:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char const*) msg), 1000);
 8000886:	483d      	ldr	r0, [pc, #244]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 8000888:	f7ff fcaa 	bl	80001e0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	4939      	ldr	r1, [pc, #228]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 8000896:	483b      	ldr	r0, [pc, #236]	; (8000984 <HAL_RTC_AlarmAEventCallback+0x128>)
 8000898:	f003 f9fa 	bl	8003c90 <HAL_UART_Transmit>
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf14      	ite	ne
 80008c0:	2301      	movne	r3, #1
 80008c2:	2300      	moveq	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4930      	ldr	r1, [pc, #192]	; (8000988 <HAL_RTC_AlarmAEventCallback+0x12c>)
 80008c8:	482c      	ldr	r0, [pc, #176]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 80008ca:	f003 fde3 	bl	8004494 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 80008ce:	482b      	ldr	r0, [pc, #172]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 80008d0:	f7ff fc86 	bl	80001e0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	4927      	ldr	r1, [pc, #156]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 80008de:	4829      	ldr	r0, [pc, #164]	; (8000984 <HAL_RTC_AlarmAEventCallback+0x128>)
 80008e0:	f003 f9d6 	bl	8003c90 <HAL_UART_Transmit>
	// clear the alarm flag
		__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	22ca      	movs	r2, #202	; 0xca
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2253      	movs	r2, #83	; 0x53
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RTC_AlarmAEventCallback+0xac>
			__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8000906:	60da      	str	r2, [r3, #12]
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1ef      	bne.n	80008f6 <HAL_RTC_AlarmAEventCallback+0x9a>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_RTC_AlarmAEventCallback+0x130>)
 8000920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000924:	615a      	str	r2, [r3, #20]

		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	f403 7380 	and.w	r3, r3, #256	; 0x100
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f403 7300 	and.w	r3, r3, #512	; 0x200
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	490f      	ldr	r1, [pc, #60]	; (8000990 <HAL_RTC_AlarmAEventCallback+0x134>)
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 8000954:	f003 fd9e 	bl	8004494 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 800095a:	f7ff fc41 	bl	80001e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	4905      	ldr	r1, [pc, #20]	; (800097c <HAL_RTC_AlarmAEventCallback+0x120>)
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_RTC_AlarmAEventCallback+0x128>)
 800096a:	f003 f991 	bl	8003c90 <HAL_UART_Transmit>
	alarmAOccurred = 1;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_RTC_AlarmAEventCallback+0x138>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bdb0      	pop	{r4, r5, r7, pc}
 800097c:	200000c4 	.word	0x200000c4
 8000980:	08004d68 	.word	0x08004d68
 8000984:	20000188 	.word	0x20000188
 8000988:	08004d84 	.word	0x08004d84
 800098c:	40010400 	.word	0x40010400
 8000990:	08004da8 	.word	0x08004da8
 8000994:	2000008c 	.word	0x2000008c

08000998 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	sprintf((char *)msg, "Alarm B callback entered\r\n");
 80009a0:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 80009a2:	4b4e      	ldr	r3, [pc, #312]	; (8000adc <HAL_RTCEx_AlarmBEventCallback+0x144>)
 80009a4:	4615      	mov	r5, r2
 80009a6:	461c      	mov	r4, r3
 80009a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009aa:	6028      	str	r0, [r5, #0]
 80009ac:	6069      	str	r1, [r5, #4]
 80009ae:	60aa      	str	r2, [r5, #8]
 80009b0:	60eb      	str	r3, [r5, #12]
 80009b2:	cc03      	ldmia	r4!, {r0, r1}
 80009b4:	6128      	str	r0, [r5, #16]
 80009b6:	6169      	str	r1, [r5, #20]
 80009b8:	8823      	ldrh	r3, [r4, #0]
 80009ba:	78a2      	ldrb	r2, [r4, #2]
 80009bc:	832b      	strh	r3, [r5, #24]
 80009be:	4613      	mov	r3, r2
 80009c0:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 80009c2:	4845      	ldr	r0, [pc, #276]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 80009c4:	f7ff fc0c 	bl	80001e0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	4941      	ldr	r1, [pc, #260]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 80009d2:	4843      	ldr	r0, [pc, #268]	; (8000ae0 <HAL_RTCEx_AlarmBEventCallback+0x148>)
 80009d4:	f003 f95c 	bl	8003c90 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 80009d8:	483f      	ldr	r0, [pc, #252]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 80009da:	f7ff fc01 	bl	80001e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	493c      	ldr	r1, [pc, #240]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 80009e8:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <HAL_RTCEx_AlarmBEventCallback+0x148>)
 80009ea:	f003 f951 	bl	8003c90 <HAL_UART_Transmit>
		sprintf((char*) msg, "before clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf14      	ite	ne
 80009fc:	2301      	movne	r3, #1
 80009fe:	2300      	moveq	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4932      	ldr	r1, [pc, #200]	; (8000ae4 <HAL_RTCEx_AlarmBEventCallback+0x14c>)
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000a1c:	f003 fd3a 	bl	8004494 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000a20:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000a22:	f7ff fbdd 	bl	80001e0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	492a      	ldr	r1, [pc, #168]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000a30:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <HAL_RTCEx_AlarmBEventCallback+0x148>)
 8000a32:	f003 f92d 	bl	8003c90 <HAL_UART_Transmit>

	// clear the alarm flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	22ca      	movs	r2, #202	; 0xca
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2253      	movs	r2, #83	; 0x53
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8000a46:	e008      	b.n	8000a5a <HAL_RTCEx_AlarmBEventCallback+0xc2>
		__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f462 7220 	orn	r2, r2, #640	; 0x280
 8000a58:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1ef      	bne.n	8000a48 <HAL_RTCEx_AlarmBEventCallback+0xb0>
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_RTCEx_AlarmBEventCallback+0x150>)
 8000a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6e:	615a      	str	r2, [r3, #20]
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_RTCEx_AlarmBEventCallback+0x150>)
 8000a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a7e:	615a      	str	r2, [r3, #20]

	sprintf((char*) msg, "after clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4910      	ldr	r1, [pc, #64]	; (8000aec <HAL_RTCEx_AlarmBEventCallback+0x154>)
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000aae:	f003 fcf1 	bl	8004494 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000ab4:	f7ff fb94 	bl	80001e0 <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <HAL_RTCEx_AlarmBEventCallback+0x140>)
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <HAL_RTCEx_AlarmBEventCallback+0x148>)
 8000ac4:	f003 f8e4 	bl	8003c90 <HAL_UART_Transmit>
	alarmAOccurred = 0;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_RTCEx_AlarmBEventCallback+0x158>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c4 	.word	0x200000c4
 8000adc:	08004dd8 	.word	0x08004dd8
 8000ae0:	20000188 	.word	0x20000188
 8000ae4:	08004df4 	.word	0x08004df4
 8000ae8:	40010400 	.word	0x40010400
 8000aec:	08004e30 	.word	0x08004e30
 8000af0:	2000008c 	.word	0x2000008c

08000af4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a35      	ldr	r2, [pc, #212]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d163      	bne.n	8000bcc <HAL_TIM_PeriodElapsedCallback+0xd8>
		sprintf((char*) msg, "TIM16 callback entered\r\n");
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b08:	4615      	mov	r5, r2
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0e:	6028      	str	r0, [r5, #0]
 8000b10:	6069      	str	r1, [r5, #4]
 8000b12:	60aa      	str	r2, [r5, #8]
 8000b14:	60eb      	str	r3, [r5, #12]
 8000b16:	cc03      	ldmia	r4!, {r0, r1}
 8000b18:	6128      	str	r0, [r5, #16]
 8000b1a:	6169      	str	r1, [r5, #20]
 8000b1c:	7823      	ldrb	r3, [r4, #0]
 8000b1e:	762b      	strb	r3, [r5, #24]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char const*) msg),
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b22:	f7ff fb5d 	bl	80001e0 <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	492a      	ldr	r1, [pc, #168]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b30:	482b      	ldr	r0, [pc, #172]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b32:	f003 f8ad 	bl	8003c90 <HAL_UART_Transmit>
				1000);

		HAL_GPIO_TogglePin(LED_Output_GPIO_Port, LED_Output_Pin);
 8000b36:	2104      	movs	r1, #4
 8000b38:	482a      	ldr	r0, [pc, #168]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000b3a:	f000 fd43 	bl	80015c4 <HAL_GPIO_TogglePin>

		// print current RTC time for debugging
		HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4929      	ldr	r1, [pc, #164]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b42:	482a      	ldr	r0, [pc, #168]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b44:	f002 fa28 	bl	8002f98 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4929      	ldr	r1, [pc, #164]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b4c:	4827      	ldr	r0, [pc, #156]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b4e:	f002 fb28 	bl	80031a2 <HAL_RTC_GetDate>
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
				stimestructureget.Hours, stimestructureget.Minutes,
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000b56:	461a      	mov	r2, r3
				stimestructureget.Hours, stimestructureget.Minutes,
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000b5c:	4619      	mov	r1, r3
				stimestructureget.Seconds);
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b60:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	460b      	mov	r3, r1
 8000b66:	4923      	ldr	r1, [pc, #140]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b6a:	f003 fc93 	bl	8004494 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000b6e:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b70:	f7ff fb36 	bl	80001e0 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b80:	f003 f886 	bl	8003c90 <HAL_UART_Transmit>

//		// print status of alarm flags for debugging
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
				__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF),
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
				__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF));
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4912      	ldr	r1, [pc, #72]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bb2:	f003 fc6f 	bl	8004494 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bb8:	f7ff fb12 	bl	80001e0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000bc8:	f003 f862 	bl	8003c90 <HAL_UART_Transmit>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd4:	2000020c 	.word	0x2000020c
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	08004e68 	.word	0x08004e68
 8000be0:	20000188 	.word	0x20000188
 8000be4:	48000800 	.word	0x48000800
 8000be8:	20000174 	.word	0x20000174
 8000bec:	20000154 	.word	0x20000154
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	08004e84 	.word	0x08004e84
 8000bf8:	08004d84 	.word	0x08004d84

08000bfc <pollAlarmInterruptFlag>:

/*
 * polls the alarm interrupt flags and calls the appropriate callback functions.
 */
void pollAlarmInterruptFlag(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET)
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <pollAlarmInterruptFlag+0x30>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <pollAlarmInterruptFlag+0x18>
		HAL_RTC_AlarmAEventCallback(&hrtc);
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <pollAlarmInterruptFlag+0x30>)
 8000c10:	f7ff fe24 	bl	800085c <HAL_RTC_AlarmAEventCallback>
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET)
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <pollAlarmInterruptFlag+0x30>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <pollAlarmInterruptFlag+0x2c>
		HAL_RTCEx_AlarmBEventCallback(&hrtc);
 8000c22:	4802      	ldr	r0, [pc, #8]	; (8000c2c <pollAlarmInterruptFlag+0x30>)
 8000c24:	f7ff feb8 	bl	8000998 <HAL_RTCEx_AlarmBEventCallback>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000154 	.word	0x20000154

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <Error_Handler+0x28>)
 8000c3a:	f000 fcab 	bl	8001594 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000c3e:	20fa      	movs	r0, #250	; 0xfa
 8000c40:	f000 f9da 	bl	8000ff8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2104      	movs	r1, #4
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <Error_Handler+0x28>)
 8000c4a:	f000 fca3 	bl	8001594 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f000 f9d1 	bl	8000ff8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 8000c56:	e7ed      	b.n	8000c34 <Error_Handler+0x4>
 8000c58:	48000800 	.word	0x48000800

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c92:	2007      	movs	r0, #7
 8000c94:	f000 fab2 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_RTC_MspInit+0x50>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d119      	bne.n	8000cea <HAL_RTC_MspInit+0x46>
 8000cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cba:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_RTC_MspInit+0x54>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2029      	movs	r0, #41	; 0x29
 8000ce0:	f000 fa97 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ce4:	2029      	movs	r0, #41	; 0x29
 8000ce6:	f000 fab0 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	10908100 	.word	0x10908100

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2019      	movs	r0, #25
 8000d2c:	f000 fa71 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d30:	2019      	movs	r0, #25
 8000d32:	f000 fa8a 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40014400 	.word	0x40014400
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x7c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d128      	bne.n	8000dbc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 fa62 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f8ce 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e26:	f002 fce1 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000020c 	.word	0x2000020c

08000e34 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <RTC_Alarm_IRQHandler+0x10>)
 8000e3a:	f002 fb39 	bl	80034b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000154 	.word	0x20000154

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f003 fada 	bl	8004430 <__errno>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	230c      	movs	r3, #12
 8000e80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20010000 	.word	0x20010000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000090 	.word	0x20000090
 8000eb0:	20000260 	.word	0x20000260

08000eb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f003 fa99 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0a:	f7ff f9c1 	bl	8000290 <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f1c:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000f20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f24:	20000260 	.word	0x20000260

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f95d 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe88 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f975 	bl	8001266 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f93d 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000258 	.word	0x20000258

08000fe0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000258 	.word	0x20000258

08000ff8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_Delay+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_SuspendTick+0x1c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_SuspendTick+0x1c>)
 8001046:	f023 0302 	bic.w	r3, r3, #2
 800104a:	6013      	str	r3, [r2, #0]
                                                   
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff29 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff3e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff31 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa2 	bl	80011b8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e160      	b.n	8001552 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8152 	beq.w	800154c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d00b      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012bc:	2b11      	cmp	r3, #17
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b12      	cmp	r3, #18
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0xea>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b12      	cmp	r3, #18
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80ac 	beq.w	800154c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a5d      	ldr	r2, [pc, #372]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800140c:	4a59      	ldr	r2, [pc, #356]	; (8001574 <HAL_GPIO_Init+0x2f4>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001436:	d025      	beq.n	8001484 <HAL_GPIO_Init+0x204>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x2f8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d01f      	beq.n	8001480 <HAL_GPIO_Init+0x200>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x2fc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d019      	beq.n	800147c <HAL_GPIO_Init+0x1fc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x300>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d013      	beq.n	8001478 <HAL_GPIO_Init+0x1f8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00d      	beq.n	8001474 <HAL_GPIO_Init+0x1f4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x308>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0x1f0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_GPIO_Init+0x30c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_GPIO_Init+0x1ec>
 8001468:	2306      	movs	r3, #6
 800146a:	e00c      	b.n	8001486 <HAL_GPIO_Init+0x206>
 800146c:	2307      	movs	r3, #7
 800146e:	e00a      	b.n	8001486 <HAL_GPIO_Init+0x206>
 8001470:	2305      	movs	r3, #5
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x206>
 8001474:	2304      	movs	r3, #4
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x206>
 8001478:	2303      	movs	r3, #3
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x206>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x206>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x206>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2f4>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800151c:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <HAL_GPIO_Init+0x310>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_GPIO_Init+0x310>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_GPIO_Init+0x310>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f ae97 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	48001000 	.word	0x48001000
 8001588:	48001400 	.word	0x48001400
 800158c:	48001800 	.word	0x48001800
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43d9      	mvns	r1, r3
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	400b      	ands	r3, r1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001614:	bf30      	wfi
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40007000 	.word	0x40007000
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800162e:	af00      	add	r7, sp, #0
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	f000 bf01 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8160 	beq.w	8001912 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001652:	4bae      	ldr	r3, [pc, #696]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165e:	4bab      	ldr	r3, [pc, #684]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d159      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 800166a:	4ba8      	ldr	r3, [pc, #672]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001676:	d152      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800168c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x82>
 80016a4:	4b99      	ldr	r3, [pc, #612]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0xae>
 80016aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016d2:	4b8e      	ldr	r3, [pc, #568]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80016de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80016ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8102 	beq.w	8001910 <HAL_RCC_OscConfig+0x2e8>
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 80fc 	bne.w	8001910 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	f000 be93 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x110>
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e030      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x134>
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6e      	ldr	r2, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01e      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x15a>
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a64      	ldr	r2, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a61      	ldr	r2, [pc, #388]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a5e      	ldr	r2, [pc, #376]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d059      	beq.n	8001858 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc1c 	bl	8000fe0 <HAL_GetTick>
 80017a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ae:	f7ff fc17 	bl	8000fe0 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d902      	bls.n	80017c4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f000 be40 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1ce>
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x1fa>
 80017f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001812:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001826:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800182a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800182e:	fa92 f2a2 	rbit	r2, r2
 8001832:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001836:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f042 0220 	orr.w	r2, r2, #32
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f002 021f 	and.w	r2, r2, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ab      	beq.n	80017ae <HAL_RCC_OscConfig+0x186>
 8001856:	e05c      	b.n	8001912 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fbc2 	bl	8000fe0 <HAL_GetTick>
 800185c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001862:	f7ff fbbd 	bl	8000fe0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d902      	bls.n	8001878 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	f000 bde6 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800188c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_OscConfig+0x282>
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x2ae>
 80018aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0x2e4>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018e2:	fa92 f2a2 	rbit	r2, r2
 80018e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ab      	bne.n	8001862 <HAL_RCC_OscConfig+0x23a>
 800190a:	e002      	b.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 800190c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8170 	beq.w	8001c02 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001922:	4bd0      	ldr	r3, [pc, #832]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00c      	beq.n	8001948 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800192e:	4bcd      	ldr	r3, [pc, #820]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	d16d      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3ee>
 800193a:	4bca      	ldr	r3, [pc, #808]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001946:	d166      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3ee>
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800195a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0x350>
 8001972:	4bbc      	ldr	r3, [pc, #752]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e013      	b.n	80019a0 <HAL_RCC_OscConfig+0x378>
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001990:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800199c:	4bb1      	ldr	r3, [pc, #708]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2202      	movs	r2, #2
 80019a2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019aa:	fa92 f2a2 	rbit	r2, r2
 80019ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019b6:	fab2 f282 	clz	r2, r2
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f002 021f 	and.w	r2, r2, #31
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3ba>
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d002      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f000 bd31 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4ba0      	ldr	r3, [pc, #640]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	21f8      	movs	r1, #248	; 0xf8
 80019f2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80019fa:	fa91 f1a1 	rbit	r1, r1
 80019fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a02:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a06:	fab1 f181 	clz	r1, r1
 8001a0a:	b2c9      	uxtb	r1, r1
 8001a0c:	408b      	lsls	r3, r1
 8001a0e:	4995      	ldr	r1, [pc, #596]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a14:	e0f5      	b.n	8001c02 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8085 	beq.w	8001b2c <HAL_RCC_OscConfig+0x504>
 8001a22:	2301      	movs	r3, #1
 8001a24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fac7 	bl	8000fe0 <HAL_GetTick>
 8001a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fac2 	bl	8000fe0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d902      	bls.n	8001a6e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f000 bceb 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x476>
 8001a98:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e013      	b.n	8001ac6 <HAL_RCC_OscConfig+0x49e>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ab6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ac2:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001acc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ad0:	fa92 f2a2 	rbit	r2, r2
 8001ad4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ad8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001adc:	fab2 f282 	clz	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f002 021f 	and.w	r2, r2, #31
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0af      	beq.n	8001a58 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	21f8      	movs	r1, #248	; 0xf8
 8001b08:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b10:	fa91 f1a1 	rbit	r1, r1
 8001b14:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b1c:	fab1 f181 	clz	r1, r1
 8001b20:	b2c9      	uxtb	r1, r1
 8001b22:	408b      	lsls	r3, r1
 8001b24:	494f      	ldr	r1, [pc, #316]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
 8001b2a:	e06a      	b.n	8001c02 <HAL_RCC_OscConfig+0x5da>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fa42 	bl	8000fe0 <HAL_GetTick>
 8001b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa3d 	bl	8000fe0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d902      	bls.n	8001b78 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f000 bc66 	b.w	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x580>
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x5a8>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_OscConfig+0x63c>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001bd6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bda:	fa92 f2a2 	rbit	r2, r2
 8001bde:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001be2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1af      	bne.n	8001b62 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80da 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d069      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x6c8>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x640>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	461a      	mov	r2, r3
 8001c42:	2301      	movs	r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f9cb 	bl	8000fe0 <HAL_GetTick>
 8001c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e00d      	b.n	8001c6c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f9c6 	bl	8000fe0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d905      	bls.n	8001c6c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e3ef      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	10908120 	.word	0x10908120
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c84:	2202      	movs	r2, #2
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	4ba4      	ldr	r3, [pc, #656]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cb8:	2102      	movs	r1, #2
 8001cba:	6019      	str	r1, [r3, #0]
 8001cbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f1a3 	rbit	r1, r3
 8001cc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cca:	6019      	str	r1, [r3, #0]
  return result;
 8001ccc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0b0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x628>
 8001cee:	e06a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x79e>
 8001cf0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d06:	601a      	str	r2, [r3, #0]
  return result;
 8001d08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b8c      	ldr	r3, [pc, #560]	; (8001f48 <HAL_RCC_OscConfig+0x920>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f95d 	bl	8000fe0 <HAL_GetTick>
 8001d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	e009      	b.n	8001d40 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f958 	bl	8000fe0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e381      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001d40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d74:	2202      	movs	r2, #2
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d90:	2102      	movs	r1, #2
 8001d92:	6019      	str	r1, [r3, #0]
 8001d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f1a3 	rbit	r1, r3
 8001d9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001da2:	6019      	str	r1, [r3, #0]
  return result;
 8001da4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1b2      	bne.n	8001d2c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8157 	beq.w	8002084 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	61d3      	str	r3, [r2, #28]
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_OscConfig+0x924>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x924>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x924>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f8db 	bl	8000fe0 <HAL_GetTick>
 8001e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	e009      	b.n	8001e44 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7ff f8d6 	bl	8000fe0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e2ff      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCC_OscConfig+0x924>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x840>
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e02f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x8a0>
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x864>
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a30      	ldr	r2, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x8a0>
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x888>
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x8a0>
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06a      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f885 	bl	8000fe0 <HAL_GetTick>
 8001ed6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7ff f880 	bl	8000fe0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e2a7      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001ef4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f22:	601a      	str	r2, [r3, #0]
  return result;
 8001f24:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x928>
 8001f3e:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <HAL_RCC_OscConfig+0x91c>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x944>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	10908120 	.word	0x10908120
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4bc0      	ldr	r3, [pc, #768]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f70:	2102      	movs	r1, #2
 8001f72:	6011      	str	r1, [r2, #0]
 8001f74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	fa92 f1a2 	rbit	r1, r2
 8001f7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f82:	6011      	str	r1, [r2, #0]
  return result;
 8001f84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d09a      	beq.n	8001edc <HAL_RCC_OscConfig+0x8b4>
 8001fa6:	e063      	b.n	8002070 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f81a 	bl	8000fe0 <HAL_GetTick>
 8001fac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00b      	b.n	8001fca <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff f815 	bl	8000fe0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e23c      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 8001fca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fce:	2202      	movs	r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ff8:	601a      	str	r2, [r3, #0]
  return result;
 8001ffa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d102      	bne.n	800201a <HAL_RCC_OscConfig+0x9f2>
 8002014:	4b95      	ldr	r3, [pc, #596]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	e00d      	b.n	8002036 <HAL_RCC_OscConfig+0xa0e>
 800201a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	4b8e      	ldr	r3, [pc, #568]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800203a:	2102      	movs	r1, #2
 800203c:	6011      	str	r1, [r2, #0]
 800203e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	fa92 f1a2 	rbit	r1, r2
 8002048:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800204c:	6011      	str	r1, [r2, #0]
  return result;
 800204e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f002 021f 	and.w	r2, r2, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1a0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002070:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a7b      	ldr	r2, [pc, #492]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 81d9 	beq.w	8002442 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	f000 81a6 	beq.w	80023ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	f040 811e 	bne.w	80022e6 <HAL_RCC_OscConfig+0xcbe>
 80020aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020c2:	601a      	str	r2, [r3, #0]
  return result;
 80020c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ff7e 	bl	8000fe0 <HAL_GetTick>
 80020e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe ff79 	bl	8000fe0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1a2      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 80020fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002116:	601a      	str	r2, [r3, #0]
  return result;
 8002118:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800211c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0xb10>
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e01b      	b.n	8002170 <HAL_RCC_OscConfig+0xb48>
 8002138:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002178:	6011      	str	r1, [r2, #0]
 800217a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fa92 f1a2 	rbit	r1, r2
 8002184:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002188:	6011      	str	r1, [r2, #0]
  return result;
 800218a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d19e      	bne.n	80020ea <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f023 020f 	bic.w	r2, r3, #15
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	492c      	ldr	r1, [pc, #176]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	62cb      	str	r3, [r1, #44]	; 0x2c
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a19      	ldr	r1, [r3, #32]
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	4925      	ldr	r1, [pc, #148]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	461a      	mov	r2, r3
 800220e:	2301      	movs	r3, #1
 8002210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fee5 	bl	8000fe0 <HAL_GetTick>
 8002216:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221a:	e009      	b.n	8002230 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fee0 	bl	8000fe0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e109      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 8002230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002248:	601a      	str	r2, [r3, #0]
  return result;
 800224a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800224e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0xc48>
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e01e      	b.n	80022a8 <HAL_RCC_OscConfig+0xc80>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0xe28>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fa92 f1a2 	rbit	r1, r2
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	6011      	str	r1, [r2, #0]
  return result;
 80022c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f002 021f 	and.w	r2, r2, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d09b      	beq.n	800221c <HAL_RCC_OscConfig+0xbf4>
 80022e4:	e0ad      	b.n	8002442 <HAL_RCC_OscConfig+0xe1a>
 80022e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022fe:	601a      	str	r2, [r3, #0]
  return result;
 8002300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002304:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fe60 	bl	8000fe0 <HAL_GetTick>
 8002320:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	e009      	b.n	800233a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fe5b 	bl	8000fe0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e084      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
 800233a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002358:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0xd4c>
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_RCC_OscConfig+0xe28>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e01b      	b.n	80023ac <HAL_RCC_OscConfig+0xd84>
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_OscConfig+0xe28>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f107 0214 	add.w	r2, r7, #20
 80023b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	f107 0214 	add.w	r2, r7, #20
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fa92 f1a2 	rbit	r1, r2
 80023c0:	f107 0210 	add.w	r2, r7, #16
 80023c4:	6011      	str	r1, [r2, #0]
  return result;
 80023c6:	f107 0210 	add.w	r2, r7, #16
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d19e      	bne.n	8002326 <HAL_RCC_OscConfig+0xcfe>
 80023e8:	e02b      	b.n	8002442 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e025      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0xe28>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_OscConfig+0xe28>)
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002408:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800240c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	429a      	cmp	r2, r3
 8002418:	d111      	bne.n	800243e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800241a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800241e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002428:	429a      	cmp	r2, r3
 800242a:	d108      	bne.n	800243e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800242c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b09e      	sub	sp, #120	; 0x78
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e162      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	498b      	ldr	r1, [pc, #556]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e14a      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	497f      	ldr	r1, [pc, #508]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80dc 	beq.w	8002680 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d13c      	bne.n	800254a <HAL_RCC_ClockConfig+0xf6>
 80024d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_ClockConfig+0xa6>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	e00f      	b.n	800251a <HAL_RCC_ClockConfig+0xc6>
 80024fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
 800250e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d17b      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0f3      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d13c      	bne.n	80025cc <HAL_RCC_ClockConfig+0x178>
 8002552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d102      	bne.n	800257c <HAL_RCC_ClockConfig+0x128>
 8002576:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	e00f      	b.n	800259c <HAL_RCC_ClockConfig+0x148>
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
 8002590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80025a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d13a      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b2      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
 80025cc:	2302      	movs	r3, #2
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e00d      	b.n	8002610 <HAL_RCC_ClockConfig+0x1bc>
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	61ba      	str	r2, [r7, #24]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	fa92 f2a2 	rbit	r2, r2
 800261a:	617a      	str	r2, [r7, #20]
  return result;
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f042 0220 	orr.w	r2, r2, #32
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f002 021f 	and.w	r2, r2, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e079      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	491a      	ldr	r1, [pc, #104]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fcc6 	bl	8000fe0 <HAL_GetTick>
 8002654:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fcc2 	bl	8000fe0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e061      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d214      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e040      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4912      	ldr	r1, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f6:	f000 f829 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80026fa:	4601      	mov	r1, r0
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002704:	22f0      	movs	r2, #240	; 0xf0
 8002706:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	60fa      	str	r2, [r7, #12]
  return result;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	40d3      	lsrs	r3, r2
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x2ec>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	fa21 f303 	lsr.w	r3, r1, r3
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_RCC_ClockConfig+0x2f0>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCC_ClockConfig+0x2f4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fc14 	bl	8000f58 <HAL_InitTick>
  
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3778      	adds	r7, #120	; 0x78
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	08004eb4 	.word	0x08004eb4
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x30>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x36>
 800277a:	e03f      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc8>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	e03f      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002788:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800278c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	607a      	str	r2, [r7, #4]
  return result;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	40d3      	lsrs	r3, r2
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	220f      	movs	r2, #15
 80027b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	fa92 f2a2 	rbit	r2, r2
 80027b8:	60fa      	str	r2, [r7, #12]
  return result;
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	40d3      	lsrs	r3, r2
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_RCC_GetSysClockFreq+0xd0>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	e007      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	623b      	str	r3, [r7, #32]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6a3b      	ldr	r3, [r7, #32]
}
 8002804:	4618      	mov	r0, r3
 8002806:	372c      	adds	r7, #44	; 0x2c
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08004ecc 	.word	0x08004ecc
 800281c:	08004edc 	.word	0x08004edc

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800283e:	f7ff ffef 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800284c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002850:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	fa92 f2a2 	rbit	r2, r2
 8002858:	603a      	str	r2, [r7, #0]
  return result;
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	40d3      	lsrs	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	08004ec4 	.word	0x08004ec4

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002882:	f7ff ffcd 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002886:	4601      	mov	r1, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002890:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002894:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	fa92 f2a2 	rbit	r2, r2
 800289c:	603a      	str	r2, [r7, #0]
  return result;
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	40d3      	lsrs	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08004ec4 	.word	0x08004ec4

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b092      	sub	sp, #72	; 0x48
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80d4 	beq.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	4b4e      	ldr	r3, [pc, #312]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	61d3      	str	r3, [r2, #28]
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d118      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a41      	ldr	r2, [pc, #260]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7fe fb5b 	bl	8000fe0 <HAL_GetTick>
 800292a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fb57 	bl	8000fe0 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e1d6      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8084 	beq.w	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002968:	429a      	cmp	r2, r3
 800296a:	d07c      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	2301      	movs	r3, #1
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	461a      	mov	r2, r3
 80029ba:	2300      	movs	r3, #0
 80029bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d04b      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fb07 	bl	8000fe0 <HAL_GetTick>
 80029d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fb03 	bl	8000fe0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e180      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029ec:	2302      	movs	r3, #2
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	2302      	movs	r3, #2
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	61fb      	str	r3, [r7, #28]
  return result;
 8002a04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d108      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a1a:	4b01      	ldr	r3, [pc, #4]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	e00d      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	10908100 	.word	0x10908100
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	4ba0      	ldr	r3, [pc, #640]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	613a      	str	r2, [r7, #16]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	60fa      	str	r2, [r7, #12]
  return result;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0b7      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a66:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4992      	ldr	r1, [pc, #584]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4a8d      	ldr	r2, [pc, #564]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a98:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	f023 0203 	bic.w	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4985      	ldr	r1, [pc, #532]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab6:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	497e      	ldr	r1, [pc, #504]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4976      	ldr	r1, [pc, #472]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f023 0210 	bic.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	496f      	ldr	r1, [pc, #444]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	4967      	ldr	r1, [pc, #412]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f023 0220 	bic.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4960      	ldr	r1, [pc, #384]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4c:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	4958      	ldr	r1, [pc, #352]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b6a:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4951      	ldr	r1, [pc, #324]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4949      	ldr	r1, [pc, #292]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba6:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4942      	ldr	r1, [pc, #264]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	493a      	ldr	r1, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4933      	ldr	r1, [pc, #204]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	492b      	ldr	r1, [pc, #172]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c1e:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4924      	ldr	r1, [pc, #144]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	491c      	ldr	r1, [pc, #112]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	4915      	ldr	r1, [pc, #84]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	490d      	ldr	r1, [pc, #52]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	4906      	ldr	r1, [pc, #24]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3748      	adds	r7, #72	; 0x48
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e083      	b.n	8002e16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7f5b      	ldrb	r3, [r3, #29]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd ffc0 	bl	8000ca4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ca      	movs	r2, #202	; 0xca
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2253      	movs	r2, #83	; 0x53
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fc26 	bl	800358c <RTC_EnterInitMode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e05e      	b.n	8002e16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	041a      	lsls	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fbb8 	bl	800353c <HAL_RTC_WaitForSynchro>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e018      	b.n	8002e16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e1e:	b590      	push	{r4, r7, lr}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_RTC_SetTime+0x1c>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0aa      	b.n	8002f90 <HAL_RTC_SetTime+0x172>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2202      	movs	r2, #2
 8002e44:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d126      	bne.n	8002e9a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fbbd 	bl	80035e4 <RTC_ByteToBcd2>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fbb6 	bl	80035e4 <RTC_ByteToBcd2>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e7c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fbae 	bl	80035e4 <RTC_ByteToBcd2>
 8002e88:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e8a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	78db      	ldrb	r3, [r3, #3]
 8002e92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e018      	b.n	8002ecc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002eba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ec0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	78db      	ldrb	r3, [r3, #3]
 8002ec6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	22ca      	movs	r2, #202	; 0xca
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2253      	movs	r2, #83	; 0x53
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb55 	bl	800358c <RTC_EnterInitMode>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e047      	b.n	8002f90 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f0e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d111      	bne.n	8002f7a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 faf0 	bl	800353c <HAL_RTC_WaitForSynchro>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00a      	b.n	8002f90 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	22ff      	movs	r2, #255	; 0xff
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11a      	bne.n	800304a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fb01 	bl	8003620 <RTC_Bcd2ToByte>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 faf8 	bl	8003620 <RTC_Bcd2ToByte>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	789b      	ldrb	r3, [r3, #2]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 faef 	bl	8003620 <RTC_Bcd2ToByte>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	7f1b      	ldrb	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_RTC_SetDate+0x1c>
 800306c:	2302      	movs	r3, #2
 800306e:	e094      	b.n	800319a <HAL_RTC_SetDate+0x146>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2202      	movs	r2, #2
 800307a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_RTC_SetDate+0x4c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	f023 0310 	bic.w	r3, r3, #16
 8003096:	b2db      	uxtb	r3, r3
 8003098:	330a      	adds	r3, #10
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11c      	bne.n	80030e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa9a 	bl	80035e4 <RTC_ByteToBcd2>
 80030b0:	4603      	mov	r3, r0
 80030b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa93 	bl	80035e4 <RTC_ByteToBcd2>
 80030be:	4603      	mov	r3, r0
 80030c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	789b      	ldrb	r3, [r3, #2]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fa8b 	bl	80035e4 <RTC_ByteToBcd2>
 80030ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e00e      	b.n	80030fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	785b      	ldrb	r3, [r3, #1]
 80030ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80030f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	22ca      	movs	r2, #202	; 0xca
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2253      	movs	r2, #83	; 0x53
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa3c 	bl	800358c <RTC_EnterInitMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2204      	movs	r2, #4
 8003126:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e033      	b.n	800319a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800313c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003140:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f9eb 	bl	800353c <HAL_RTC_WaitForSynchro>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2204      	movs	r2, #4
 8003178:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00a      	b.n	800319a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0b5b      	lsrs	r3, r3, #13
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11a      	bne.n	8003236 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	78db      	ldrb	r3, [r3, #3]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fa0b 	bl	8003620 <RTC_Bcd2ToByte>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fa02 	bl	8003620 <RTC_Bcd2ToByte>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	789b      	ldrb	r3, [r3, #2]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f9f9 	bl	8003620 <RTC_Bcd2ToByte>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	7f1b      	ldrb	r3, [r3, #28]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_RTC_SetAlarm_IT+0x24>
 8003260:	2302      	movs	r3, #2
 8003262:	e11f      	b.n	80034a4 <HAL_RTC_SetAlarm_IT+0x264>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2202      	movs	r2, #2
 800326e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d137      	bne.n	80032e6 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f9a8 	bl	80035e4 <RTC_ByteToBcd2>
 8003294:	4603      	mov	r3, r0
 8003296:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f9a1 	bl	80035e4 <RTC_ByteToBcd2>
 80032a2:	4603      	mov	r3, r0
 80032a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80032a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	789b      	ldrb	r3, [r3, #2]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f999 	bl	80035e4 <RTC_ByteToBcd2>
 80032b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80032b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	78db      	ldrb	r3, [r3, #3]
 80032bc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80032be:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f98b 	bl	80035e4 <RTC_ByteToBcd2>
 80032ce:	4603      	mov	r3, r0
 80032d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80032d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80032da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e023      	b.n	800332e <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003306:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800330c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003314:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800331e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003324:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800332a:	4313      	orrs	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	22ca      	movs	r2, #202	; 0xca
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2253      	movs	r2, #83	; 0x53
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003352:	d148      	bne.n	80033e6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003374:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003376:	f7fd fe33 	bl	8000fe0 <HAL_GetTick>
 800337a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800337c:	e013      	b.n	80033a6 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800337e:	f7fd fe2f 	bl	8000fe0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338c:	d90b      	bls.n	80033a6 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2203      	movs	r2, #3
 800339a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e07e      	b.n	80034a4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0e4      	beq.n	800337e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e047      	b.n	8003476 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003406:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003408:	f7fd fdea 	bl	8000fe0 <HAL_GetTick>
 800340c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800340e:	e013      	b.n	8003438 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003410:	f7fd fde6 	bl	8000fe0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800341e:	d90b      	bls.n	8003438 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	22ff      	movs	r2, #255	; 0xff
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2203      	movs	r2, #3
 800342c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e035      	b.n	80034a4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0e4      	beq.n	8003410 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RTC_SetAlarm_IT+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RTC_SetAlarm_IT+0x26c>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RTC_SetAlarm_IT+0x26c>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3724      	adds	r7, #36	; 0x24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40010400 	.word	0x40010400

080034b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd f9c1 	bl	800085c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80034ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd fa45 	bl	8000998 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800351e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003526:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	775a      	strb	r2, [r3, #29]
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40010400 	.word	0x40010400

0800353c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003556:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003558:	f7fd fd42 	bl	8000fe0 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800355e:	e009      	b.n	8003574 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003560:	f7fd fd3e 	bl	8000fe0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356e:	d901      	bls.n	8003574 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e007      	b.n	8003584 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ee      	beq.n	8003560 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295
 80035ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80035b0:	f7fd fd16 	bl	8000fe0 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035b6:	e009      	b.n	80035cc <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035b8:	f7fd fd12 	bl	8000fe0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c6:	d901      	bls.n	80035cc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e007      	b.n	80035dc <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ee      	beq.n	80035b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80035f2:	e005      	b.n	8003600 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	3b0a      	subs	r3, #10
 80035fe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b09      	cmp	r3, #9
 8003604:	d8f6      	bhi.n	80035f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	b2da      	uxtb	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4313      	orrs	r3, r2
 8003612:	b2db      	uxtb	r3, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4413      	add	r3, r2
 800364e:	b2db      	uxtb	r3, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e049      	b.n	8003702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fb3a 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 f9ee 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e04f      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d018      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_TIM_Base_Start_IT+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x76>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d115      	bne.n	80037ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800378a:	4013      	ands	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d015      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0xb4>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379a:	d011      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	e008      	b.n	80037c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e000      	b.n	80037c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40015000 	.word	0x40015000
 80037e8:	00010007 	.word	0x00010007

080037ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0202 	mvn.w	r2, #2
 8003818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f905 	bl	8003a3e <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8f7 	bl	8003a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f908 	bl	8003a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0204 	mvn.w	r2, #4
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8db 	bl	8003a3e <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8cd 	bl	8003a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f8de 	bl	8003a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8b1 	bl	8003a3e <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8a3 	bl	8003a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8b4 	bl	8003a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0210 	mvn.w	r2, #16
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2208      	movs	r2, #8
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f887 	bl	8003a3e <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f879 	bl	8003a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f88a 	bl	8003a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd f8c2 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f918 	bl	8003bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d10e      	bne.n	80039ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d107      	bne.n	80039ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f90b 	bl	8003be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d10e      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f838 	bl	8003a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d10e      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d107      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0220 	mvn.w	r2, #32
 8003a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8cb 	bl	8003bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <TIM_Base_SetConfig+0x11c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	; (8003b9c <TIM_Base_SetConfig+0x120>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <TIM_Base_SetConfig+0x124>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x128>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <TIM_Base_SetConfig+0x11c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <TIM_Base_SetConfig+0x120>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <TIM_Base_SetConfig+0x124>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x128>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <TIM_Base_SetConfig+0x130>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x9a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <TIM_Base_SetConfig+0x11c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <TIM_Base_SetConfig+0x100>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <TIM_Base_SetConfig+0x128>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00f      	beq.n	8003b7c <TIM_Base_SetConfig+0x100>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <TIM_Base_SetConfig+0x130>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <TIM_Base_SetConfig+0x100>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d007      	beq.n	8003b7c <TIM_Base_SetConfig+0x100>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0x100>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40015000 	.word	0x40015000
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800

08003bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e040      	b.n	8003c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd f896 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8c0 	bl	8003db8 <UART_SetConfig>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e022      	b.n	8003c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa88 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fb0f 	bl	80042a4 <UART_CheckIdleState>
 8003c86:	4603      	mov	r3, r0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	f040 8082 	bne.w	8003dae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_UART_Transmit+0x26>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07a      	b.n	8003db0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_UART_Transmit+0x38>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e073      	b.n	8003db0 <HAL_UART_Transmit+0x120>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2221      	movs	r2, #33	; 0x21
 8003cdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cde:	f7fd f97f 	bl	8000fe0 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d108      	bne.n	8003d10 <HAL_UART_Transmit+0x80>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e003      	b.n	8003d18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d20:	e02d      	b.n	8003d7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb02 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e039      	b.n	8003db0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3302      	adds	r3, #2
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e008      	b.n	8003d6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	b292      	uxth	r2, r2
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1cb      	bne.n	8003d22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 face 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e005      	b.n	8003db0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4baa      	ldr	r3, [pc, #680]	; (800408c <UART_SetConfig+0x2d4>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a98      	ldr	r2, [pc, #608]	; (8004090 <UART_SetConfig+0x2d8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d121      	bne.n	8003e78 <UART_SetConfig+0xc0>
 8003e34:	4b97      	ldr	r3, [pc, #604]	; (8004094 <UART_SetConfig+0x2dc>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d817      	bhi.n	8003e70 <UART_SetConfig+0xb8>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x90>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e6b 	.word	0x08003e6b
 8003e54:	08003e5f 	.word	0x08003e5f
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e0b2      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e0af      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e0ac      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e0a9      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	bf00      	nop
 8003e76:	e0a5      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a86      	ldr	r2, [pc, #536]	; (8004098 <UART_SetConfig+0x2e0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d123      	bne.n	8003eca <UART_SetConfig+0x112>
 8003e82:	4b84      	ldr	r3, [pc, #528]	; (8004094 <UART_SetConfig+0x2dc>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d012      	beq.n	8003eb6 <UART_SetConfig+0xfe>
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d802      	bhi.n	8003e9c <UART_SetConfig+0xe4>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <UART_SetConfig+0xf2>
 8003e9a:	e012      	b.n	8003ec2 <UART_SetConfig+0x10a>
 8003e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea0:	d00c      	beq.n	8003ebc <UART_SetConfig+0x104>
 8003ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0xf8>
 8003ea8:	e00b      	b.n	8003ec2 <UART_SetConfig+0x10a>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e089      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e086      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e083      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e080      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	bf00      	nop
 8003ec8:	e07c      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a73      	ldr	r2, [pc, #460]	; (800409c <UART_SetConfig+0x2e4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d123      	bne.n	8003f1c <UART_SetConfig+0x164>
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <UART_SetConfig+0x2dc>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ee0:	d012      	beq.n	8003f08 <UART_SetConfig+0x150>
 8003ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ee6:	d802      	bhi.n	8003eee <UART_SetConfig+0x136>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <UART_SetConfig+0x144>
 8003eec:	e012      	b.n	8003f14 <UART_SetConfig+0x15c>
 8003eee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ef2:	d00c      	beq.n	8003f0e <UART_SetConfig+0x156>
 8003ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef8:	d003      	beq.n	8003f02 <UART_SetConfig+0x14a>
 8003efa:	e00b      	b.n	8003f14 <UART_SetConfig+0x15c>
 8003efc:	2300      	movs	r3, #0
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e060      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f02:	2302      	movs	r3, #2
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e05d      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e05a      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e057      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f14:	2310      	movs	r3, #16
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	bf00      	nop
 8003f1a:	e053      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5f      	ldr	r2, [pc, #380]	; (80040a0 <UART_SetConfig+0x2e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d123      	bne.n	8003f6e <UART_SetConfig+0x1b6>
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <UART_SetConfig+0x2dc>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f32:	d012      	beq.n	8003f5a <UART_SetConfig+0x1a2>
 8003f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f38:	d802      	bhi.n	8003f40 <UART_SetConfig+0x188>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <UART_SetConfig+0x196>
 8003f3e:	e012      	b.n	8003f66 <UART_SetConfig+0x1ae>
 8003f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f44:	d00c      	beq.n	8003f60 <UART_SetConfig+0x1a8>
 8003f46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4a:	d003      	beq.n	8003f54 <UART_SetConfig+0x19c>
 8003f4c:	e00b      	b.n	8003f66 <UART_SetConfig+0x1ae>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e037      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e034      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e031      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f60:	2308      	movs	r3, #8
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e02e      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f66:	2310      	movs	r3, #16
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	bf00      	nop
 8003f6c:	e02a      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <UART_SetConfig+0x2ec>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d123      	bne.n	8003fc0 <UART_SetConfig+0x208>
 8003f78:	4b46      	ldr	r3, [pc, #280]	; (8004094 <UART_SetConfig+0x2dc>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f84:	d012      	beq.n	8003fac <UART_SetConfig+0x1f4>
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8a:	d802      	bhi.n	8003f92 <UART_SetConfig+0x1da>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <UART_SetConfig+0x1e8>
 8003f90:	e012      	b.n	8003fb8 <UART_SetConfig+0x200>
 8003f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f96:	d00c      	beq.n	8003fb2 <UART_SetConfig+0x1fa>
 8003f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f9c:	d003      	beq.n	8003fa6 <UART_SetConfig+0x1ee>
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x200>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e00e      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e00b      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003fac:	2304      	movs	r3, #4
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e008      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e005      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	bf00      	nop
 8003fbe:	e001      	b.n	8003fc4 <UART_SetConfig+0x20c>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	d16e      	bne.n	80040ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003fce:	7ffb      	ldrb	r3, [r7, #31]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d828      	bhi.n	8004026 <UART_SetConfig+0x26e>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0x224>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	08004027 	.word	0x08004027
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	08004027 	.word	0x08004027
 8003ff4:	08004027 	.word	0x08004027
 8003ff8:	08004027 	.word	0x08004027
 8003ffc:	0800401f 	.word	0x0800401f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe fc1a 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004004:	61b8      	str	r0, [r7, #24]
        break;
 8004006:	e013      	b.n	8004030 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7fe fc38 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 800400c:	61b8      	str	r0, [r7, #24]
        break;
 800400e:	e00f      	b.n	8004030 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <UART_SetConfig+0x2f0>)
 8004012:	61bb      	str	r3, [r7, #24]
        break;
 8004014:	e00c      	b.n	8004030 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004016:	f7fe fb99 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800401a:	61b8      	str	r0, [r7, #24]
        break;
 800401c:	e008      	b.n	8004030 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	61bb      	str	r3, [r7, #24]
        break;
 8004024:	e004      	b.n	8004030 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	77bb      	strb	r3, [r7, #30]
        break;
 800402e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8086 	beq.w	8004144 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	005a      	lsls	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d916      	bls.n	8004084 <UART_SetConfig+0x2cc>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d212      	bcs.n	8004084 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f023 030f 	bic.w	r3, r3, #15
 8004066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b29a      	uxth	r2, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	4313      	orrs	r3, r2
 8004078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	89fa      	ldrh	r2, [r7, #14]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e05f      	b.n	8004144 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	77bb      	strb	r3, [r7, #30]
 8004088:	e05c      	b.n	8004144 <UART_SetConfig+0x38c>
 800408a:	bf00      	nop
 800408c:	efff69f3 	.word	0xefff69f3
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d827      	bhi.n	8004102 <UART_SetConfig+0x34a>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x300>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	08004103 	.word	0x08004103
 80040d0:	08004103 	.word	0x08004103
 80040d4:	08004103 	.word	0x08004103
 80040d8:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7fe fbac 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e013      	b.n	800410c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7fe fbca 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e00f      	b.n	800410c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <UART_SetConfig+0x3a4>)
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e00c      	b.n	800410c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fe fb2b 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80040f6:	61b8      	str	r0, [r7, #24]
        break;
 80040f8:	e008      	b.n	800410c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	77bb      	strb	r3, [r7, #30]
        break;
 800410a:	bf00      	nop
    }

    if (pclk != 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	085a      	lsrs	r2, r3, #1
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	441a      	add	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	b29b      	uxth	r3, r3
 8004126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	d908      	bls.n	8004140 <UART_SetConfig+0x388>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d204      	bcs.n	8004140 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e001      	b.n	8004144 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004150:	7fbb      	ldrb	r3, [r7, #30]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	007a1200 	.word	0x007a1200

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425e:	d10a      	bne.n	8004276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b4:	f7fc fe94 	bl	8000fe0 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10e      	bne.n	80042e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f82d 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e023      	b.n	800432e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d10e      	bne.n	8004312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f817 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e00d      	b.n	800432e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004346:	e05e      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d05a      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fc fe46 	bl	8000fe0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <UART_WaitOnFlagUntilTimeout+0x30>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11b      	bne.n	800439e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e043      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02c      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	d124      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e00f      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d091      	beq.n	8004348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000000c 	.word	0x2000000c

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0d      	ldr	r6, [pc, #52]	; (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004442:	1ba4      	subs	r4, r4, r6
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2500      	movs	r5, #0
 8004448:	42a5      	cmp	r5, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4e0b      	ldr	r6, [pc, #44]	; (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	; (8004480 <__libc_init_array+0x44>)
 8004450:	f000 fc26 	bl	8004ca0 <_init>
 8004454:	1ba4      	subs	r4, r4, r6
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2500      	movs	r5, #0
 800445a:	42a5      	cmp	r5, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004464:	4798      	blx	r3
 8004466:	3501      	adds	r5, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446e:	4798      	blx	r3
 8004470:	3501      	adds	r5, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	08004f20 	.word	0x08004f20
 8004478:	08004f20 	.word	0x08004f20
 800447c:	08004f20 	.word	0x08004f20
 8004480:	08004f24 	.word	0x08004f24

08004484 <memset>:
 8004484:	4402      	add	r2, r0
 8004486:	4603      	mov	r3, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <siprintf>:
 8004494:	b40e      	push	{r1, r2, r3}
 8004496:	b500      	push	{lr}
 8004498:	b09c      	sub	sp, #112	; 0x70
 800449a:	ab1d      	add	r3, sp, #116	; 0x74
 800449c:	9002      	str	r0, [sp, #8]
 800449e:	9006      	str	r0, [sp, #24]
 80044a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044a4:	4809      	ldr	r0, [pc, #36]	; (80044cc <siprintf+0x38>)
 80044a6:	9107      	str	r1, [sp, #28]
 80044a8:	9104      	str	r1, [sp, #16]
 80044aa:	4909      	ldr	r1, [pc, #36]	; (80044d0 <siprintf+0x3c>)
 80044ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b0:	9105      	str	r1, [sp, #20]
 80044b2:	6800      	ldr	r0, [r0, #0]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	a902      	add	r1, sp, #8
 80044b8:	f000 f866 	bl	8004588 <_svfiprintf_r>
 80044bc:	9b02      	ldr	r3, [sp, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	b01c      	add	sp, #112	; 0x70
 80044c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c8:	b003      	add	sp, #12
 80044ca:	4770      	bx	lr
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	ffff0208 	.word	0xffff0208

080044d4 <__ssputs_r>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	688e      	ldr	r6, [r1, #8]
 80044da:	429e      	cmp	r6, r3
 80044dc:	4682      	mov	sl, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	4690      	mov	r8, r2
 80044e2:	4699      	mov	r9, r3
 80044e4:	d837      	bhi.n	8004556 <__ssputs_r+0x82>
 80044e6:	898a      	ldrh	r2, [r1, #12]
 80044e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ec:	d031      	beq.n	8004552 <__ssputs_r+0x7e>
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	6909      	ldr	r1, [r1, #16]
 80044f2:	1a6f      	subs	r7, r5, r1
 80044f4:	6965      	ldr	r5, [r4, #20]
 80044f6:	2302      	movs	r3, #2
 80044f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004500:	f109 0301 	add.w	r3, r9, #1
 8004504:	443b      	add	r3, r7
 8004506:	429d      	cmp	r5, r3
 8004508:	bf38      	it	cc
 800450a:	461d      	movcc	r5, r3
 800450c:	0553      	lsls	r3, r2, #21
 800450e:	d530      	bpl.n	8004572 <__ssputs_r+0x9e>
 8004510:	4629      	mov	r1, r5
 8004512:	f000 fb2b 	bl	8004b6c <_malloc_r>
 8004516:	4606      	mov	r6, r0
 8004518:	b950      	cbnz	r0, 8004530 <__ssputs_r+0x5c>
 800451a:	230c      	movs	r3, #12
 800451c:	f8ca 3000 	str.w	r3, [sl]
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	463a      	mov	r2, r7
 8004532:	6921      	ldr	r1, [r4, #16]
 8004534:	f000 faa8 	bl	8004a88 <memcpy>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	6126      	str	r6, [r4, #16]
 8004546:	6165      	str	r5, [r4, #20]
 8004548:	443e      	add	r6, r7
 800454a:	1bed      	subs	r5, r5, r7
 800454c:	6026      	str	r6, [r4, #0]
 800454e:	60a5      	str	r5, [r4, #8]
 8004550:	464e      	mov	r6, r9
 8004552:	454e      	cmp	r6, r9
 8004554:	d900      	bls.n	8004558 <__ssputs_r+0x84>
 8004556:	464e      	mov	r6, r9
 8004558:	4632      	mov	r2, r6
 800455a:	4641      	mov	r1, r8
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	f000 fa9e 	bl	8004a9e <memmove>
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	1b9b      	subs	r3, r3, r6
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	441e      	add	r6, r3
 800456c:	6026      	str	r6, [r4, #0]
 800456e:	2000      	movs	r0, #0
 8004570:	e7dc      	b.n	800452c <__ssputs_r+0x58>
 8004572:	462a      	mov	r2, r5
 8004574:	f000 fb54 	bl	8004c20 <_realloc_r>
 8004578:	4606      	mov	r6, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d1e2      	bne.n	8004544 <__ssputs_r+0x70>
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	4650      	mov	r0, sl
 8004582:	f000 faa5 	bl	8004ad0 <_free_r>
 8004586:	e7c8      	b.n	800451a <__ssputs_r+0x46>

08004588 <_svfiprintf_r>:
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	461d      	mov	r5, r3
 800458e:	898b      	ldrh	r3, [r1, #12]
 8004590:	061f      	lsls	r7, r3, #24
 8004592:	b09d      	sub	sp, #116	; 0x74
 8004594:	4680      	mov	r8, r0
 8004596:	460c      	mov	r4, r1
 8004598:	4616      	mov	r6, r2
 800459a:	d50f      	bpl.n	80045bc <_svfiprintf_r+0x34>
 800459c:	690b      	ldr	r3, [r1, #16]
 800459e:	b96b      	cbnz	r3, 80045bc <_svfiprintf_r+0x34>
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	f000 fae3 	bl	8004b6c <_malloc_r>
 80045a6:	6020      	str	r0, [r4, #0]
 80045a8:	6120      	str	r0, [r4, #16]
 80045aa:	b928      	cbnz	r0, 80045b8 <_svfiprintf_r+0x30>
 80045ac:	230c      	movs	r3, #12
 80045ae:	f8c8 3000 	str.w	r3, [r8]
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
 80045b6:	e0c8      	b.n	800474a <_svfiprintf_r+0x1c2>
 80045b8:	2340      	movs	r3, #64	; 0x40
 80045ba:	6163      	str	r3, [r4, #20]
 80045bc:	2300      	movs	r3, #0
 80045be:	9309      	str	r3, [sp, #36]	; 0x24
 80045c0:	2320      	movs	r3, #32
 80045c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045c6:	2330      	movs	r3, #48	; 0x30
 80045c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045cc:	9503      	str	r5, [sp, #12]
 80045ce:	f04f 0b01 	mov.w	fp, #1
 80045d2:	4637      	mov	r7, r6
 80045d4:	463d      	mov	r5, r7
 80045d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045da:	b10b      	cbz	r3, 80045e0 <_svfiprintf_r+0x58>
 80045dc:	2b25      	cmp	r3, #37	; 0x25
 80045de:	d13e      	bne.n	800465e <_svfiprintf_r+0xd6>
 80045e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80045e4:	d00b      	beq.n	80045fe <_svfiprintf_r+0x76>
 80045e6:	4653      	mov	r3, sl
 80045e8:	4632      	mov	r2, r6
 80045ea:	4621      	mov	r1, r4
 80045ec:	4640      	mov	r0, r8
 80045ee:	f7ff ff71 	bl	80044d4 <__ssputs_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	f000 80a4 	beq.w	8004740 <_svfiprintf_r+0x1b8>
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	4453      	add	r3, sl
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	783b      	ldrb	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 809d 	beq.w	8004740 <_svfiprintf_r+0x1b8>
 8004606:	2300      	movs	r3, #0
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	9307      	str	r3, [sp, #28]
 8004614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004618:	931a      	str	r3, [sp, #104]	; 0x68
 800461a:	462f      	mov	r7, r5
 800461c:	2205      	movs	r2, #5
 800461e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004622:	4850      	ldr	r0, [pc, #320]	; (8004764 <_svfiprintf_r+0x1dc>)
 8004624:	f7fb fde4 	bl	80001f0 <memchr>
 8004628:	9b04      	ldr	r3, [sp, #16]
 800462a:	b9d0      	cbnz	r0, 8004662 <_svfiprintf_r+0xda>
 800462c:	06d9      	lsls	r1, r3, #27
 800462e:	bf44      	itt	mi
 8004630:	2220      	movmi	r2, #32
 8004632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004636:	071a      	lsls	r2, r3, #28
 8004638:	bf44      	itt	mi
 800463a:	222b      	movmi	r2, #43	; 0x2b
 800463c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004640:	782a      	ldrb	r2, [r5, #0]
 8004642:	2a2a      	cmp	r2, #42	; 0x2a
 8004644:	d015      	beq.n	8004672 <_svfiprintf_r+0xea>
 8004646:	9a07      	ldr	r2, [sp, #28]
 8004648:	462f      	mov	r7, r5
 800464a:	2000      	movs	r0, #0
 800464c:	250a      	movs	r5, #10
 800464e:	4639      	mov	r1, r7
 8004650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004654:	3b30      	subs	r3, #48	; 0x30
 8004656:	2b09      	cmp	r3, #9
 8004658:	d94d      	bls.n	80046f6 <_svfiprintf_r+0x16e>
 800465a:	b1b8      	cbz	r0, 800468c <_svfiprintf_r+0x104>
 800465c:	e00f      	b.n	800467e <_svfiprintf_r+0xf6>
 800465e:	462f      	mov	r7, r5
 8004660:	e7b8      	b.n	80045d4 <_svfiprintf_r+0x4c>
 8004662:	4a40      	ldr	r2, [pc, #256]	; (8004764 <_svfiprintf_r+0x1dc>)
 8004664:	1a80      	subs	r0, r0, r2
 8004666:	fa0b f000 	lsl.w	r0, fp, r0
 800466a:	4318      	orrs	r0, r3
 800466c:	9004      	str	r0, [sp, #16]
 800466e:	463d      	mov	r5, r7
 8004670:	e7d3      	b.n	800461a <_svfiprintf_r+0x92>
 8004672:	9a03      	ldr	r2, [sp, #12]
 8004674:	1d11      	adds	r1, r2, #4
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	9103      	str	r1, [sp, #12]
 800467a:	2a00      	cmp	r2, #0
 800467c:	db01      	blt.n	8004682 <_svfiprintf_r+0xfa>
 800467e:	9207      	str	r2, [sp, #28]
 8004680:	e004      	b.n	800468c <_svfiprintf_r+0x104>
 8004682:	4252      	negs	r2, r2
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	9207      	str	r2, [sp, #28]
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	783b      	ldrb	r3, [r7, #0]
 800468e:	2b2e      	cmp	r3, #46	; 0x2e
 8004690:	d10c      	bne.n	80046ac <_svfiprintf_r+0x124>
 8004692:	787b      	ldrb	r3, [r7, #1]
 8004694:	2b2a      	cmp	r3, #42	; 0x2a
 8004696:	d133      	bne.n	8004700 <_svfiprintf_r+0x178>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bfb8      	it	lt
 80046a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80046a8:	3702      	adds	r7, #2
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	4d2e      	ldr	r5, [pc, #184]	; (8004768 <_svfiprintf_r+0x1e0>)
 80046ae:	7839      	ldrb	r1, [r7, #0]
 80046b0:	2203      	movs	r2, #3
 80046b2:	4628      	mov	r0, r5
 80046b4:	f7fb fd9c 	bl	80001f0 <memchr>
 80046b8:	b138      	cbz	r0, 80046ca <_svfiprintf_r+0x142>
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	1b40      	subs	r0, r0, r5
 80046be:	fa03 f000 	lsl.w	r0, r3, r0
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	4303      	orrs	r3, r0
 80046c6:	3701      	adds	r7, #1
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	7839      	ldrb	r1, [r7, #0]
 80046cc:	4827      	ldr	r0, [pc, #156]	; (800476c <_svfiprintf_r+0x1e4>)
 80046ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046d2:	2206      	movs	r2, #6
 80046d4:	1c7e      	adds	r6, r7, #1
 80046d6:	f7fb fd8b 	bl	80001f0 <memchr>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d038      	beq.n	8004750 <_svfiprintf_r+0x1c8>
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <_svfiprintf_r+0x1e8>)
 80046e0:	bb13      	cbnz	r3, 8004728 <_svfiprintf_r+0x1a0>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	3307      	adds	r3, #7
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	3308      	adds	r3, #8
 80046ec:	9303      	str	r3, [sp, #12]
 80046ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f0:	444b      	add	r3, r9
 80046f2:	9309      	str	r3, [sp, #36]	; 0x24
 80046f4:	e76d      	b.n	80045d2 <_svfiprintf_r+0x4a>
 80046f6:	fb05 3202 	mla	r2, r5, r2, r3
 80046fa:	2001      	movs	r0, #1
 80046fc:	460f      	mov	r7, r1
 80046fe:	e7a6      	b.n	800464e <_svfiprintf_r+0xc6>
 8004700:	2300      	movs	r3, #0
 8004702:	3701      	adds	r7, #1
 8004704:	9305      	str	r3, [sp, #20]
 8004706:	4619      	mov	r1, r3
 8004708:	250a      	movs	r5, #10
 800470a:	4638      	mov	r0, r7
 800470c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004710:	3a30      	subs	r2, #48	; 0x30
 8004712:	2a09      	cmp	r2, #9
 8004714:	d903      	bls.n	800471e <_svfiprintf_r+0x196>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0c8      	beq.n	80046ac <_svfiprintf_r+0x124>
 800471a:	9105      	str	r1, [sp, #20]
 800471c:	e7c6      	b.n	80046ac <_svfiprintf_r+0x124>
 800471e:	fb05 2101 	mla	r1, r5, r1, r2
 8004722:	2301      	movs	r3, #1
 8004724:	4607      	mov	r7, r0
 8004726:	e7f0      	b.n	800470a <_svfiprintf_r+0x182>
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	4622      	mov	r2, r4
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <_svfiprintf_r+0x1ec>)
 8004730:	a904      	add	r1, sp, #16
 8004732:	4640      	mov	r0, r8
 8004734:	f3af 8000 	nop.w
 8004738:	f1b0 3fff 	cmp.w	r0, #4294967295
 800473c:	4681      	mov	r9, r0
 800473e:	d1d6      	bne.n	80046ee <_svfiprintf_r+0x166>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	065b      	lsls	r3, r3, #25
 8004744:	f53f af35 	bmi.w	80045b2 <_svfiprintf_r+0x2a>
 8004748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800474a:	b01d      	add	sp, #116	; 0x74
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	ab03      	add	r3, sp, #12
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4622      	mov	r2, r4
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <_svfiprintf_r+0x1ec>)
 8004758:	a904      	add	r1, sp, #16
 800475a:	4640      	mov	r0, r8
 800475c:	f000 f882 	bl	8004864 <_printf_i>
 8004760:	e7ea      	b.n	8004738 <_svfiprintf_r+0x1b0>
 8004762:	bf00      	nop
 8004764:	08004eec 	.word	0x08004eec
 8004768:	08004ef2 	.word	0x08004ef2
 800476c:	08004ef6 	.word	0x08004ef6
 8004770:	00000000 	.word	0x00000000
 8004774:	080044d5 	.word	0x080044d5

08004778 <_printf_common>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	4691      	mov	r9, r2
 800477e:	461f      	mov	r7, r3
 8004780:	688a      	ldr	r2, [r1, #8]
 8004782:	690b      	ldr	r3, [r1, #16]
 8004784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004788:	4293      	cmp	r3, r2
 800478a:	bfb8      	it	lt
 800478c:	4613      	movlt	r3, r2
 800478e:	f8c9 3000 	str.w	r3, [r9]
 8004792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	b112      	cbz	r2, 80047a2 <_printf_common+0x2a>
 800479c:	3301      	adds	r3, #1
 800479e:	f8c9 3000 	str.w	r3, [r9]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	0699      	lsls	r1, r3, #26
 80047a6:	bf42      	ittt	mi
 80047a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047ac:	3302      	addmi	r3, #2
 80047ae:	f8c9 3000 	strmi.w	r3, [r9]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d107      	bne.n	80047ca <_printf_common+0x52>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	f8d9 2000 	ldr.w	r2, [r9]
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	42ab      	cmp	r3, r5
 80047c8:	dc28      	bgt.n	800481c <_printf_common+0xa4>
 80047ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	3300      	adds	r3, #0
 80047d2:	bf18      	it	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	0692      	lsls	r2, r2, #26
 80047d8:	d42d      	bmi.n	8004836 <_printf_common+0xbe>
 80047da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047de:	4639      	mov	r1, r7
 80047e0:	4630      	mov	r0, r6
 80047e2:	47c0      	blx	r8
 80047e4:	3001      	adds	r0, #1
 80047e6:	d020      	beq.n	800482a <_printf_common+0xb2>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	68e5      	ldr	r5, [r4, #12]
 80047ec:	f8d9 2000 	ldr.w	r2, [r9]
 80047f0:	f003 0306 	and.w	r3, r3, #6
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	bf08      	it	eq
 80047f8:	1aad      	subeq	r5, r5, r2
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	bf0c      	ite	eq
 8004800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004804:	2500      	movne	r5, #0
 8004806:	4293      	cmp	r3, r2
 8004808:	bfc4      	itt	gt
 800480a:	1a9b      	subgt	r3, r3, r2
 800480c:	18ed      	addgt	r5, r5, r3
 800480e:	f04f 0900 	mov.w	r9, #0
 8004812:	341a      	adds	r4, #26
 8004814:	454d      	cmp	r5, r9
 8004816:	d11a      	bne.n	800484e <_printf_common+0xd6>
 8004818:	2000      	movs	r0, #0
 800481a:	e008      	b.n	800482e <_printf_common+0xb6>
 800481c:	2301      	movs	r3, #1
 800481e:	4652      	mov	r2, sl
 8004820:	4639      	mov	r1, r7
 8004822:	4630      	mov	r0, r6
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d103      	bne.n	8004832 <_printf_common+0xba>
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004832:	3501      	adds	r5, #1
 8004834:	e7c3      	b.n	80047be <_printf_common+0x46>
 8004836:	18e1      	adds	r1, r4, r3
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	2030      	movs	r0, #48	; 0x30
 800483c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004840:	4422      	add	r2, r4
 8004842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800484a:	3302      	adds	r3, #2
 800484c:	e7c5      	b.n	80047da <_printf_common+0x62>
 800484e:	2301      	movs	r3, #1
 8004850:	4622      	mov	r2, r4
 8004852:	4639      	mov	r1, r7
 8004854:	4630      	mov	r0, r6
 8004856:	47c0      	blx	r8
 8004858:	3001      	adds	r0, #1
 800485a:	d0e6      	beq.n	800482a <_printf_common+0xb2>
 800485c:	f109 0901 	add.w	r9, r9, #1
 8004860:	e7d8      	b.n	8004814 <_printf_common+0x9c>
	...

08004864 <_printf_i>:
 8004864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800486c:	460c      	mov	r4, r1
 800486e:	7e09      	ldrb	r1, [r1, #24]
 8004870:	b085      	sub	sp, #20
 8004872:	296e      	cmp	r1, #110	; 0x6e
 8004874:	4617      	mov	r7, r2
 8004876:	4606      	mov	r6, r0
 8004878:	4698      	mov	r8, r3
 800487a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800487c:	f000 80b3 	beq.w	80049e6 <_printf_i+0x182>
 8004880:	d822      	bhi.n	80048c8 <_printf_i+0x64>
 8004882:	2963      	cmp	r1, #99	; 0x63
 8004884:	d036      	beq.n	80048f4 <_printf_i+0x90>
 8004886:	d80a      	bhi.n	800489e <_printf_i+0x3a>
 8004888:	2900      	cmp	r1, #0
 800488a:	f000 80b9 	beq.w	8004a00 <_printf_i+0x19c>
 800488e:	2958      	cmp	r1, #88	; 0x58
 8004890:	f000 8083 	beq.w	800499a <_printf_i+0x136>
 8004894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800489c:	e032      	b.n	8004904 <_printf_i+0xa0>
 800489e:	2964      	cmp	r1, #100	; 0x64
 80048a0:	d001      	beq.n	80048a6 <_printf_i+0x42>
 80048a2:	2969      	cmp	r1, #105	; 0x69
 80048a4:	d1f6      	bne.n	8004894 <_printf_i+0x30>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	0605      	lsls	r5, r0, #24
 80048ac:	f103 0104 	add.w	r1, r3, #4
 80048b0:	d52a      	bpl.n	8004908 <_printf_i+0xa4>
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da03      	bge.n	80048c2 <_printf_i+0x5e>
 80048ba:	222d      	movs	r2, #45	; 0x2d
 80048bc:	425b      	negs	r3, r3
 80048be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048c2:	486f      	ldr	r0, [pc, #444]	; (8004a80 <_printf_i+0x21c>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	e039      	b.n	800493c <_printf_i+0xd8>
 80048c8:	2973      	cmp	r1, #115	; 0x73
 80048ca:	f000 809d 	beq.w	8004a08 <_printf_i+0x1a4>
 80048ce:	d808      	bhi.n	80048e2 <_printf_i+0x7e>
 80048d0:	296f      	cmp	r1, #111	; 0x6f
 80048d2:	d020      	beq.n	8004916 <_printf_i+0xb2>
 80048d4:	2970      	cmp	r1, #112	; 0x70
 80048d6:	d1dd      	bne.n	8004894 <_printf_i+0x30>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f043 0320 	orr.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	e003      	b.n	80048ea <_printf_i+0x86>
 80048e2:	2975      	cmp	r1, #117	; 0x75
 80048e4:	d017      	beq.n	8004916 <_printf_i+0xb2>
 80048e6:	2978      	cmp	r1, #120	; 0x78
 80048e8:	d1d4      	bne.n	8004894 <_printf_i+0x30>
 80048ea:	2378      	movs	r3, #120	; 0x78
 80048ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f0:	4864      	ldr	r0, [pc, #400]	; (8004a84 <_printf_i+0x220>)
 80048f2:	e055      	b.n	80049a0 <_printf_i+0x13c>
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	1d19      	adds	r1, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6011      	str	r1, [r2, #0]
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e08c      	b.n	8004a22 <_printf_i+0x1be>
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004910:	bf18      	it	ne
 8004912:	b21b      	sxthne	r3, r3
 8004914:	e7cf      	b.n	80048b6 <_printf_i+0x52>
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	6825      	ldr	r5, [r4, #0]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6010      	str	r0, [r2, #0]
 800491e:	0628      	lsls	r0, r5, #24
 8004920:	d501      	bpl.n	8004926 <_printf_i+0xc2>
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	e002      	b.n	800492c <_printf_i+0xc8>
 8004926:	0668      	lsls	r0, r5, #25
 8004928:	d5fb      	bpl.n	8004922 <_printf_i+0xbe>
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	4854      	ldr	r0, [pc, #336]	; (8004a80 <_printf_i+0x21c>)
 800492e:	296f      	cmp	r1, #111	; 0x6f
 8004930:	bf14      	ite	ne
 8004932:	220a      	movne	r2, #10
 8004934:	2208      	moveq	r2, #8
 8004936:	2100      	movs	r1, #0
 8004938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493c:	6865      	ldr	r5, [r4, #4]
 800493e:	60a5      	str	r5, [r4, #8]
 8004940:	2d00      	cmp	r5, #0
 8004942:	f2c0 8095 	blt.w	8004a70 <_printf_i+0x20c>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	f021 0104 	bic.w	r1, r1, #4
 800494c:	6021      	str	r1, [r4, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d13d      	bne.n	80049ce <_printf_i+0x16a>
 8004952:	2d00      	cmp	r5, #0
 8004954:	f040 808e 	bne.w	8004a74 <_printf_i+0x210>
 8004958:	4665      	mov	r5, ip
 800495a:	2a08      	cmp	r2, #8
 800495c:	d10b      	bne.n	8004976 <_printf_i+0x112>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07db      	lsls	r3, r3, #31
 8004962:	d508      	bpl.n	8004976 <_printf_i+0x112>
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	6862      	ldr	r2, [r4, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	bfde      	ittt	le
 800496c:	2330      	movle	r3, #48	; 0x30
 800496e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004976:	ebac 0305 	sub.w	r3, ip, r5
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	f8cd 8000 	str.w	r8, [sp]
 8004980:	463b      	mov	r3, r7
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff fef6 	bl	8004778 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14d      	bne.n	8004a2c <_printf_i+0x1c8>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b005      	add	sp, #20
 8004996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800499a:	4839      	ldr	r0, [pc, #228]	; (8004a80 <_printf_i+0x21c>)
 800499c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	6821      	ldr	r1, [r4, #0]
 80049a4:	1d1d      	adds	r5, r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6015      	str	r5, [r2, #0]
 80049aa:	060a      	lsls	r2, r1, #24
 80049ac:	d50b      	bpl.n	80049c6 <_printf_i+0x162>
 80049ae:	07ca      	lsls	r2, r1, #31
 80049b0:	bf44      	itt	mi
 80049b2:	f041 0120 	orrmi.w	r1, r1, #32
 80049b6:	6021      	strmi	r1, [r4, #0]
 80049b8:	b91b      	cbnz	r3, 80049c2 <_printf_i+0x15e>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	f022 0220 	bic.w	r2, r2, #32
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	e7b7      	b.n	8004936 <_printf_i+0xd2>
 80049c6:	064d      	lsls	r5, r1, #25
 80049c8:	bf48      	it	mi
 80049ca:	b29b      	uxthmi	r3, r3
 80049cc:	e7ef      	b.n	80049ae <_printf_i+0x14a>
 80049ce:	4665      	mov	r5, ip
 80049d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80049d4:	fb02 3311 	mls	r3, r2, r1, r3
 80049d8:	5cc3      	ldrb	r3, [r0, r3]
 80049da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049de:	460b      	mov	r3, r1
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d1f5      	bne.n	80049d0 <_printf_i+0x16c>
 80049e4:	e7b9      	b.n	800495a <_printf_i+0xf6>
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	6825      	ldr	r5, [r4, #0]
 80049ea:	6961      	ldr	r1, [r4, #20]
 80049ec:	1d18      	adds	r0, r3, #4
 80049ee:	6010      	str	r0, [r2, #0]
 80049f0:	0628      	lsls	r0, r5, #24
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	d501      	bpl.n	80049fa <_printf_i+0x196>
 80049f6:	6019      	str	r1, [r3, #0]
 80049f8:	e002      	b.n	8004a00 <_printf_i+0x19c>
 80049fa:	066a      	lsls	r2, r5, #25
 80049fc:	d5fb      	bpl.n	80049f6 <_printf_i+0x192>
 80049fe:	8019      	strh	r1, [r3, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	4665      	mov	r5, ip
 8004a06:	e7b9      	b.n	800497c <_printf_i+0x118>
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	1d19      	adds	r1, r3, #4
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	681d      	ldr	r5, [r3, #0]
 8004a10:	6862      	ldr	r2, [r4, #4]
 8004a12:	2100      	movs	r1, #0
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7fb fbeb 	bl	80001f0 <memchr>
 8004a1a:	b108      	cbz	r0, 8004a20 <_printf_i+0x1bc>
 8004a1c:	1b40      	subs	r0, r0, r5
 8004a1e:	6060      	str	r0, [r4, #4]
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	2300      	movs	r3, #0
 8004a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2a:	e7a7      	b.n	800497c <_printf_i+0x118>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4639      	mov	r1, r7
 8004a32:	4630      	mov	r0, r6
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0aa      	beq.n	8004990 <_printf_i+0x12c>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	079b      	lsls	r3, r3, #30
 8004a3e:	d413      	bmi.n	8004a68 <_printf_i+0x204>
 8004a40:	68e0      	ldr	r0, [r4, #12]
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	4298      	cmp	r0, r3
 8004a46:	bfb8      	it	lt
 8004a48:	4618      	movlt	r0, r3
 8004a4a:	e7a3      	b.n	8004994 <_printf_i+0x130>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	464a      	mov	r2, r9
 8004a50:	4639      	mov	r1, r7
 8004a52:	4630      	mov	r0, r6
 8004a54:	47c0      	blx	r8
 8004a56:	3001      	adds	r0, #1
 8004a58:	d09a      	beq.n	8004990 <_printf_i+0x12c>
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	68e3      	ldr	r3, [r4, #12]
 8004a5e:	9a03      	ldr	r2, [sp, #12]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	42ab      	cmp	r3, r5
 8004a64:	dcf2      	bgt.n	8004a4c <_printf_i+0x1e8>
 8004a66:	e7eb      	b.n	8004a40 <_printf_i+0x1dc>
 8004a68:	2500      	movs	r5, #0
 8004a6a:	f104 0919 	add.w	r9, r4, #25
 8004a6e:	e7f5      	b.n	8004a5c <_printf_i+0x1f8>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ac      	bne.n	80049ce <_printf_i+0x16a>
 8004a74:	7803      	ldrb	r3, [r0, #0]
 8004a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7e:	e76c      	b.n	800495a <_printf_i+0xf6>
 8004a80:	08004efd 	.word	0x08004efd
 8004a84:	08004f0e 	.word	0x08004f0e

08004a88 <memcpy>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	1e43      	subs	r3, r0, #1
 8004a8c:	440a      	add	r2, r1
 8004a8e:	4291      	cmp	r1, r2
 8004a90:	d100      	bne.n	8004a94 <memcpy+0xc>
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a9c:	e7f7      	b.n	8004a8e <memcpy+0x6>

08004a9e <memmove>:
 8004a9e:	4288      	cmp	r0, r1
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	eb01 0302 	add.w	r3, r1, r2
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x1a>
 8004aa8:	1e42      	subs	r2, r0, #1
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	d00a      	beq.n	8004ac4 <memmove+0x26>
 8004aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0xc>
 8004ab8:	4283      	cmp	r3, r0
 8004aba:	d9f5      	bls.n	8004aa8 <memmove+0xa>
 8004abc:	1881      	adds	r1, r0, r2
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	42d3      	cmn	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x28>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x22>

08004ad0 <_free_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d045      	beq.n	8004b64 <_free_r+0x94>
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f0c      	subs	r4, r1, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	18e4      	addlt	r4, r4, r3
 8004ae4:	f000 f8d2 	bl	8004c8c <__malloc_lock>
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <_free_r+0x98>)
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	4610      	mov	r0, r2
 8004aee:	b933      	cbnz	r3, 8004afe <_free_r+0x2e>
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	6014      	str	r4, [r2, #0]
 8004af4:	4628      	mov	r0, r5
 8004af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004afa:	f000 b8c8 	b.w	8004c8e <__malloc_unlock>
 8004afe:	42a3      	cmp	r3, r4
 8004b00:	d90c      	bls.n	8004b1c <_free_r+0x4c>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	1862      	adds	r2, r4, r1
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bf04      	itt	eq
 8004b0a:	681a      	ldreq	r2, [r3, #0]
 8004b0c:	685b      	ldreq	r3, [r3, #4]
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	bf04      	itt	eq
 8004b12:	1852      	addeq	r2, r2, r1
 8004b14:	6022      	streq	r2, [r4, #0]
 8004b16:	6004      	str	r4, [r0, #0]
 8004b18:	e7ec      	b.n	8004af4 <_free_r+0x24>
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	b10a      	cbz	r2, 8004b24 <_free_r+0x54>
 8004b20:	42a2      	cmp	r2, r4
 8004b22:	d9fa      	bls.n	8004b1a <_free_r+0x4a>
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	1858      	adds	r0, r3, r1
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d10b      	bne.n	8004b44 <_free_r+0x74>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	4401      	add	r1, r0
 8004b30:	1858      	adds	r0, r3, r1
 8004b32:	4282      	cmp	r2, r0
 8004b34:	6019      	str	r1, [r3, #0]
 8004b36:	d1dd      	bne.n	8004af4 <_free_r+0x24>
 8004b38:	6810      	ldr	r0, [r2, #0]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	4401      	add	r1, r0
 8004b40:	6019      	str	r1, [r3, #0]
 8004b42:	e7d7      	b.n	8004af4 <_free_r+0x24>
 8004b44:	d902      	bls.n	8004b4c <_free_r+0x7c>
 8004b46:	230c      	movs	r3, #12
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	e7d3      	b.n	8004af4 <_free_r+0x24>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	1821      	adds	r1, r4, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	bf04      	itt	eq
 8004b54:	6811      	ldreq	r1, [r2, #0]
 8004b56:	6852      	ldreq	r2, [r2, #4]
 8004b58:	6062      	str	r2, [r4, #4]
 8004b5a:	bf04      	itt	eq
 8004b5c:	1809      	addeq	r1, r1, r0
 8004b5e:	6021      	streq	r1, [r4, #0]
 8004b60:	605c      	str	r4, [r3, #4]
 8004b62:	e7c7      	b.n	8004af4 <_free_r+0x24>
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
 8004b66:	bf00      	nop
 8004b68:	20000094 	.word	0x20000094

08004b6c <_malloc_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	1ccd      	adds	r5, r1, #3
 8004b70:	f025 0503 	bic.w	r5, r5, #3
 8004b74:	3508      	adds	r5, #8
 8004b76:	2d0c      	cmp	r5, #12
 8004b78:	bf38      	it	cc
 8004b7a:	250c      	movcc	r5, #12
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	4606      	mov	r6, r0
 8004b80:	db01      	blt.n	8004b86 <_malloc_r+0x1a>
 8004b82:	42a9      	cmp	r1, r5
 8004b84:	d903      	bls.n	8004b8e <_malloc_r+0x22>
 8004b86:	230c      	movs	r3, #12
 8004b88:	6033      	str	r3, [r6, #0]
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	f000 f87d 	bl	8004c8c <__malloc_lock>
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <_malloc_r+0xac>)
 8004b94:	6814      	ldr	r4, [r2, #0]
 8004b96:	4621      	mov	r1, r4
 8004b98:	b991      	cbnz	r1, 8004bc0 <_malloc_r+0x54>
 8004b9a:	4c20      	ldr	r4, [pc, #128]	; (8004c1c <_malloc_r+0xb0>)
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	b91b      	cbnz	r3, 8004ba8 <_malloc_r+0x3c>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f863 	bl	8004c6c <_sbrk_r>
 8004ba6:	6020      	str	r0, [r4, #0]
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f85e 	bl	8004c6c <_sbrk_r>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d124      	bne.n	8004bfe <_malloc_r+0x92>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f868 	bl	8004c8e <__malloc_unlock>
 8004bbe:	e7e4      	b.n	8004b8a <_malloc_r+0x1e>
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	1b5b      	subs	r3, r3, r5
 8004bc4:	d418      	bmi.n	8004bf8 <_malloc_r+0x8c>
 8004bc6:	2b0b      	cmp	r3, #11
 8004bc8:	d90f      	bls.n	8004bea <_malloc_r+0x7e>
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	50cd      	str	r5, [r1, r3]
 8004bce:	18cc      	adds	r4, r1, r3
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f85c 	bl	8004c8e <__malloc_unlock>
 8004bd6:	f104 000b 	add.w	r0, r4, #11
 8004bda:	1d23      	adds	r3, r4, #4
 8004bdc:	f020 0007 	bic.w	r0, r0, #7
 8004be0:	1ac3      	subs	r3, r0, r3
 8004be2:	d0d3      	beq.n	8004b8c <_malloc_r+0x20>
 8004be4:	425a      	negs	r2, r3
 8004be6:	50e2      	str	r2, [r4, r3]
 8004be8:	e7d0      	b.n	8004b8c <_malloc_r+0x20>
 8004bea:	428c      	cmp	r4, r1
 8004bec:	684b      	ldr	r3, [r1, #4]
 8004bee:	bf16      	itet	ne
 8004bf0:	6063      	strne	r3, [r4, #4]
 8004bf2:	6013      	streq	r3, [r2, #0]
 8004bf4:	460c      	movne	r4, r1
 8004bf6:	e7eb      	b.n	8004bd0 <_malloc_r+0x64>
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	6849      	ldr	r1, [r1, #4]
 8004bfc:	e7cc      	b.n	8004b98 <_malloc_r+0x2c>
 8004bfe:	1cc4      	adds	r4, r0, #3
 8004c00:	f024 0403 	bic.w	r4, r4, #3
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d005      	beq.n	8004c14 <_malloc_r+0xa8>
 8004c08:	1a21      	subs	r1, r4, r0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f82e 	bl	8004c6c <_sbrk_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d0cf      	beq.n	8004bb4 <_malloc_r+0x48>
 8004c14:	6025      	str	r5, [r4, #0]
 8004c16:	e7db      	b.n	8004bd0 <_malloc_r+0x64>
 8004c18:	20000094 	.word	0x20000094
 8004c1c:	20000098 	.word	0x20000098

08004c20 <_realloc_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4607      	mov	r7, r0
 8004c24:	4614      	mov	r4, r2
 8004c26:	460e      	mov	r6, r1
 8004c28:	b921      	cbnz	r1, 8004c34 <_realloc_r+0x14>
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c30:	f7ff bf9c 	b.w	8004b6c <_malloc_r>
 8004c34:	b922      	cbnz	r2, 8004c40 <_realloc_r+0x20>
 8004c36:	f7ff ff4b 	bl	8004ad0 <_free_r>
 8004c3a:	4625      	mov	r5, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c40:	f000 f826 	bl	8004c90 <_malloc_usable_size_r>
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d20f      	bcs.n	8004c68 <_realloc_r+0x48>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff ff8e 	bl	8004b6c <_malloc_r>
 8004c50:	4605      	mov	r5, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d0f2      	beq.n	8004c3c <_realloc_r+0x1c>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4622      	mov	r2, r4
 8004c5a:	f7ff ff15 	bl	8004a88 <memcpy>
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff ff35 	bl	8004ad0 <_free_r>
 8004c66:	e7e9      	b.n	8004c3c <_realloc_r+0x1c>
 8004c68:	4635      	mov	r5, r6
 8004c6a:	e7e7      	b.n	8004c3c <_realloc_r+0x1c>

08004c6c <_sbrk_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4c06      	ldr	r4, [pc, #24]	; (8004c88 <_sbrk_r+0x1c>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4605      	mov	r5, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	f7fc f8e6 	bl	8000e48 <_sbrk>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_sbrk_r+0x1a>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_sbrk_r+0x1a>
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	2000025c 	.word	0x2000025c

08004c8c <__malloc_lock>:
 8004c8c:	4770      	bx	lr

08004c8e <__malloc_unlock>:
 8004c8e:	4770      	bx	lr

08004c90 <_malloc_usable_size_r>:
 8004c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c94:	1f18      	subs	r0, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfbc      	itt	lt
 8004c9a:	580b      	ldrlt	r3, [r1, r0]
 8004c9c:	18c0      	addlt	r0, r0, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
