
f303_rtc_wakesleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec4  08004ec4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec4  08004ec4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08004f3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004f3c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f576  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0002f616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000315e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218ee  00000000  00000000  00033028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef6  00000000  00000000  00054916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d005e  00000000  00000000  0006480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013486a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  001348c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c44 	.word	0x08004c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004c44 	.word	0x08004c44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fdef 	bl	8000e78 <HAL_Init>

//  HAL_PWR_DisableSleepOnExit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f933 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 fa2d 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a2:	f000 f9fb 	bl	800069c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80002a6:	f000 f995 	bl	80005d4 <MX_RTC_Init>
  MX_TIM16_Init();
 80002aa:	f000 f9cf 	bl	800064c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 80002ae:	4885      	ldr	r0, [pc, #532]	; (80004c4 <main+0x234>)
 80002b0:	f003 f9d4 	bl	800365c <HAL_TIM_Base_Start_IT>
	// reset LED
	HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2104      	movs	r1, #4
 80002b8:	4883      	ldr	r0, [pc, #524]	; (80004c8 <main+0x238>)
 80002ba:	f001 f913 	bl	80014e4 <HAL_GPIO_WritePin>

	// check if system woke from standby mode, if so, clear flags
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80002be:	4b83      	ldr	r3, [pc, #524]	; (80004cc <main+0x23c>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d11e      	bne.n	8000308 <main+0x78>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80002ca:	4b80      	ldr	r3, [pc, #512]	; (80004cc <main+0x23c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a7f      	ldr	r2, [pc, #508]	; (80004cc <main+0x23c>)
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80002d6:	4b7d      	ldr	r3, [pc, #500]	; (80004cc <main+0x23c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a7c      	ldr	r2, [pc, #496]	; (80004cc <main+0x23c>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]

		// if we woke from standby, then alarm B triggered the wakeup so run the callback
		HAL_RTCEx_AlarmBEventCallback(&hrtc);
 80002e2:	487b      	ldr	r0, [pc, #492]	; (80004d0 <main+0x240>)
 80002e4:	f000 fb16 	bl	8000914 <HAL_RTCEx_AlarmBEventCallback>
		sprintf((char *) msg, "inside flag clearing about beginning of main\n");
 80002e8:	497a      	ldr	r1, [pc, #488]	; (80004d4 <main+0x244>)
 80002ea:	487b      	ldr	r0, [pc, #492]	; (80004d8 <main+0x248>)
 80002ec:	f004 f87c 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 80002f0:	4879      	ldr	r0, [pc, #484]	; (80004d8 <main+0x248>)
 80002f2:	f7ff ff75 	bl	80001e0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fe:	4976      	ldr	r1, [pc, #472]	; (80004d8 <main+0x248>)
 8000300:	4876      	ldr	r0, [pc, #472]	; (80004dc <main+0x24c>)
 8000302:	f003 fc6d 	bl	8003be0 <HAL_UART_Transmit>
 8000306:	e0bc      	b.n	8000482 <main+0x1f2>
	} else {


		sprintf((char*) msg, "Setting RTC time and date\r\n");
 8000308:	4975      	ldr	r1, [pc, #468]	; (80004e0 <main+0x250>)
 800030a:	4873      	ldr	r0, [pc, #460]	; (80004d8 <main+0x248>)
 800030c:	f004 f86c 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000310:	4871      	ldr	r0, [pc, #452]	; (80004d8 <main+0x248>)
 8000312:	f7ff ff65 	bl	80001e0 <strlen>
 8000316:	4603      	mov	r3, r0
 8000318:	b29a      	uxth	r2, r3
 800031a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800031e:	496e      	ldr	r1, [pc, #440]	; (80004d8 <main+0x248>)
 8000320:	486e      	ldr	r0, [pc, #440]	; (80004dc <main+0x24c>)
 8000322:	f003 fc5d 	bl	8003be0 <HAL_UART_Transmit>

		HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000326:	2200      	movs	r2, #0
 8000328:	496e      	ldr	r1, [pc, #440]	; (80004e4 <main+0x254>)
 800032a:	4869      	ldr	r0, [pc, #420]	; (80004d0 <main+0x240>)
 800032c:	f002 fddc 	bl	8002ee8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000330:	2200      	movs	r2, #0
 8000332:	496d      	ldr	r1, [pc, #436]	; (80004e8 <main+0x258>)
 8000334:	4866      	ldr	r0, [pc, #408]	; (80004d0 <main+0x240>)
 8000336:	f002 fedc 	bl	80030f2 <HAL_RTC_GetDate>
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
				stimestructureget.Hours, stimestructureget.Minutes,
 800033a:	4b6a      	ldr	r3, [pc, #424]	; (80004e4 <main+0x254>)
 800033c:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 800033e:	461a      	mov	r2, r3
				stimestructureget.Hours, stimestructureget.Minutes,
 8000340:	4b68      	ldr	r3, [pc, #416]	; (80004e4 <main+0x254>)
 8000342:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000344:	4619      	mov	r1, r3
				stimestructureget.Seconds);
 8000346:	4b67      	ldr	r3, [pc, #412]	; (80004e4 <main+0x254>)
 8000348:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg, "time is now: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	460b      	mov	r3, r1
 800034e:	4967      	ldr	r1, [pc, #412]	; (80004ec <main+0x25c>)
 8000350:	4861      	ldr	r0, [pc, #388]	; (80004d8 <main+0x248>)
 8000352:	f004 f849 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000356:	4860      	ldr	r0, [pc, #384]	; (80004d8 <main+0x248>)
 8000358:	f7ff ff42 	bl	80001e0 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000364:	495c      	ldr	r1, [pc, #368]	; (80004d8 <main+0x248>)
 8000366:	485d      	ldr	r0, [pc, #372]	; (80004dc <main+0x24c>)
 8000368:	f003 fc3a 	bl	8003be0 <HAL_UART_Transmit>

		stimestructureget.Hours = 0x11;
 800036c:	4b5d      	ldr	r3, [pc, #372]	; (80004e4 <main+0x254>)
 800036e:	2211      	movs	r2, #17
 8000370:	701a      	strb	r2, [r3, #0]
		stimestructureget.Minutes = 0x11;
 8000372:	4b5c      	ldr	r3, [pc, #368]	; (80004e4 <main+0x254>)
 8000374:	2211      	movs	r2, #17
 8000376:	705a      	strb	r2, [r3, #1]
		stimestructureget.Seconds = 0x00;
 8000378:	4b5a      	ldr	r3, [pc, #360]	; (80004e4 <main+0x254>)
 800037a:	2200      	movs	r2, #0
 800037c:	709a      	strb	r2, [r3, #2]
		stimestructureget.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800037e:	4b59      	ldr	r3, [pc, #356]	; (80004e4 <main+0x254>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
		stimestructureget.StoreOperation = RTC_STOREOPERATION_RESET;
 8000384:	4b57      	ldr	r3, [pc, #348]	; (80004e4 <main+0x254>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BCD)
 800038a:	2201      	movs	r2, #1
 800038c:	4955      	ldr	r1, [pc, #340]	; (80004e4 <main+0x254>)
 800038e:	4850      	ldr	r0, [pc, #320]	; (80004d0 <main+0x240>)
 8000390:	f002 fced 	bl	8002d6e <HAL_RTC_SetTime>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <main+0x10e>
				!= HAL_OK) {
			Error_Handler();
 800039a:	f000 fbef 	bl	8000b7c <Error_Handler>
		}
		sdatestructureget.WeekDay = RTC_WEEKDAY_MONDAY;
 800039e:	4b52      	ldr	r3, [pc, #328]	; (80004e8 <main+0x258>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
		sdatestructureget.Month = RTC_MONTH_APRIL;
 80003a4:	4b50      	ldr	r3, [pc, #320]	; (80004e8 <main+0x258>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	705a      	strb	r2, [r3, #1]
		sdatestructureget.Date = 0x12;
 80003aa:	4b4f      	ldr	r3, [pc, #316]	; (80004e8 <main+0x258>)
 80003ac:	2212      	movs	r2, #18
 80003ae:	709a      	strb	r2, [r3, #2]
		sdatestructureget.Year = 0x21;
 80003b0:	4b4d      	ldr	r3, [pc, #308]	; (80004e8 <main+0x258>)
 80003b2:	2221      	movs	r2, #33	; 0x21
 80003b4:	70da      	strb	r2, [r3, #3]

		if (HAL_RTC_SetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BCD)
 80003b6:	2201      	movs	r2, #1
 80003b8:	494b      	ldr	r1, [pc, #300]	; (80004e8 <main+0x258>)
 80003ba:	4845      	ldr	r0, [pc, #276]	; (80004d0 <main+0x240>)
 80003bc:	f002 fdf2 	bl	8002fa4 <HAL_RTC_SetDate>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <main+0x13a>
				!= HAL_OK) {
			Error_Handler();
 80003c6:	f000 fbd9 	bl	8000b7c <Error_Handler>
		}

		/** Enable the Alarm A */
		sAlarmA.AlarmTime.Hours = 0x11;
 80003ca:	4b49      	ldr	r3, [pc, #292]	; (80004f0 <main+0x260>)
 80003cc:	2211      	movs	r2, #17
 80003ce:	701a      	strb	r2, [r3, #0]
		sAlarmA.AlarmTime.Minutes = 0x55;
 80003d0:	4b47      	ldr	r3, [pc, #284]	; (80004f0 <main+0x260>)
 80003d2:	2255      	movs	r2, #85	; 0x55
 80003d4:	705a      	strb	r2, [r3, #1]
		sAlarmA.AlarmTime.Seconds = 0x03;
 80003d6:	4b46      	ldr	r3, [pc, #280]	; (80004f0 <main+0x260>)
 80003d8:	2203      	movs	r2, #3
 80003da:	709a      	strb	r2, [r3, #2]
		sAlarmA.AlarmTime.SubSeconds = 0x0;
 80003dc:	4b44      	ldr	r3, [pc, #272]	; (80004f0 <main+0x260>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
		sAlarmA.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003e2:	4b43      	ldr	r3, [pc, #268]	; (80004f0 <main+0x260>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
		sAlarmA.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003e8:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <main+0x260>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
		sAlarmA.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES; // triggers alarm every minute at the specified second
 80003ee:	4b40      	ldr	r3, [pc, #256]	; (80004f0 <main+0x260>)
 80003f0:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <main+0x264>)
 80003f2:	615a      	str	r2, [r3, #20]
//		sAlarmA.AlarmMask = RTC_ALARMMASK_ALL; // triggers alarm every second
		sAlarmA.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80003f4:	4b3e      	ldr	r3, [pc, #248]	; (80004f0 <main+0x260>)
 80003f6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80003fa:	619a      	str	r2, [r3, #24]
		sAlarmA.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80003fc:	4b3c      	ldr	r3, [pc, #240]	; (80004f0 <main+0x260>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
		sAlarmA.AlarmDateWeekDay = 0x1;
 8000402:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <main+0x260>)
 8000404:	2201      	movs	r2, #1
 8000406:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarmA.Alarm = RTC_ALARM_A;
 800040a:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <main+0x260>)
 800040c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmA, RTC_FORMAT_BCD) != HAL_OK) {
 8000412:	2201      	movs	r2, #1
 8000414:	4936      	ldr	r1, [pc, #216]	; (80004f0 <main+0x260>)
 8000416:	482e      	ldr	r0, [pc, #184]	; (80004d0 <main+0x240>)
 8000418:	f002 feba 	bl	8003190 <HAL_RTC_SetAlarm_IT>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <main+0x196>
			Error_Handler();
 8000422:	f000 fbab 	bl	8000b7c <Error_Handler>
		}
		/** Enable the Alarm B */
		sAlarmB.AlarmTime.Hours = 0x11;
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <main+0x268>)
 8000428:	2211      	movs	r2, #17
 800042a:	701a      	strb	r2, [r3, #0]
		sAlarmB.AlarmTime.Minutes = 0x42;
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <main+0x268>)
 800042e:	2242      	movs	r2, #66	; 0x42
 8000430:	705a      	strb	r2, [r3, #1]
		sAlarmB.AlarmTime.Seconds = 0x12;
 8000432:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <main+0x268>)
 8000434:	2212      	movs	r2, #18
 8000436:	709a      	strb	r2, [r3, #2]
		sAlarmB.AlarmTime.SubSeconds = 0x0;
 8000438:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <main+0x268>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
		sAlarmB.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043e:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <main+0x268>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
		sAlarmB.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000444:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <main+0x268>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
		sAlarmB.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES; // triggers alarm every minute at the specified second
 800044a:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <main+0x268>)
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <main+0x264>)
 800044e:	615a      	str	r2, [r3, #20]
//		sAlarmB.AlarmMask = RTC_ALARMMASK_ALL; // triggers alarm every second
		sAlarmB.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000450:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <main+0x268>)
 8000452:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000456:	619a      	str	r2, [r3, #24]
		sAlarmB.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <main+0x268>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
		sAlarmB.AlarmDateWeekDay = 0x1;
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <main+0x268>)
 8000460:	2201      	movs	r2, #1
 8000462:	f883 2020 	strb.w	r2, [r3, #32]
		sAlarmB.Alarm = RTC_ALARM_B;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <main+0x268>)
 8000468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmB, RTC_FORMAT_BCD) != HAL_OK) {
 800046e:	2201      	movs	r2, #1
 8000470:	4921      	ldr	r1, [pc, #132]	; (80004f8 <main+0x268>)
 8000472:	4817      	ldr	r0, [pc, #92]	; (80004d0 <main+0x240>)
 8000474:	f002 fe8c 	bl	8003190 <HAL_RTC_SetAlarm_IT>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <main+0x1f2>
			Error_Handler();
 800047e:	f000 fb7d 	bl	8000b7c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pollAlarmInterruptFlag();
 8000482:	f000 fb61 	bl	8000b48 <pollAlarmInterruptFlag>

	  // alarmAOccurred is a flag indicating time to sleep
	  if (alarmAOccurred) {
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <main+0x26c>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f8      	beq.n	8000482 <main+0x1f2>
		  sprintf((char *)msg, "entered alarmAOccurred in while loop, going to sleep\r\n");
 8000490:	491b      	ldr	r1, [pc, #108]	; (8000500 <main+0x270>)
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <main+0x248>)
 8000494:	f003 ffa8 	bl	80043e8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <main+0x248>)
 800049a:	f7ff fea1 	bl	80001e0 <strlen>
 800049e:	4603      	mov	r3, r0
 80004a0:	b29a      	uxth	r2, r3
 80004a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a6:	490c      	ldr	r1, [pc, #48]	; (80004d8 <main+0x248>)
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <main+0x24c>)
 80004aa:	f003 fb99 	bl	8003be0 <HAL_UART_Transmit>

		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <main+0x23c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <main+0x23c>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	6013      	str	r3, [r2, #0]
		  HAL_SuspendTick(); // systick generates interrupts which may wake the processor
 80004ba:	f000 fd67 	bl	8000f8c <HAL_SuspendTick>
		  HAL_PWR_EnterSTANDBYMode();
 80004be:	f001 f843 	bl	8001548 <HAL_PWR_EnterSTANDBYMode>
	  pollAlarmInterruptFlag();
 80004c2:	e7de      	b.n	8000482 <main+0x1f2>
 80004c4:	2000020c 	.word	0x2000020c
 80004c8:	48000800 	.word	0x48000800
 80004cc:	40007000 	.word	0x40007000
 80004d0:	20000154 	.word	0x20000154
 80004d4:	08004c5c 	.word	0x08004c5c
 80004d8:	200000c4 	.word	0x200000c4
 80004dc:	20000188 	.word	0x20000188
 80004e0:	08004c8c 	.word	0x08004c8c
 80004e4:	20000174 	.word	0x20000174
 80004e8:	20000128 	.word	0x20000128
 80004ec:	08004ca8 	.word	0x08004ca8
 80004f0:	2000012c 	.word	0x2000012c
 80004f4:	80808000 	.word	0x80808000
 80004f8:	2000009c 	.word	0x2000009c
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	08004cd4 	.word	0x08004cd4

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0a6      	sub	sp, #152	; 0x98
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 ff60 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2258      	movs	r2, #88	; 0x58
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 ff52 	bl	80043d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000534:	230a      	movs	r3, #10
 8000536:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000556:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000568:	4618      	mov	r0, r3
 800056a:	f001 f805 	bl	8001578 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000574:	f000 fb02 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000592:	2102      	movs	r1, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f001 ff05 	bl	80023a4 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005a0:	f000 faec 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <SystemClock_Config+0xcc>)
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f929 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c4:	f000 fada 	bl	8000b7c <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3798      	adds	r7, #152	; 0x98
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	00810002 	.word	0x00810002

080005d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b090      	sub	sp, #64	; 0x40
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005ea:	2300      	movs	r3, #0
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2228      	movs	r2, #40	; 0x28
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 feef 	bl	80043d8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_RTC_Init+0x70>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_RTC_Init+0x74>)
 80005fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_RTC_Init+0x70>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_RTC_Init+0x70>)
 8000608:	227f      	movs	r2, #127	; 0x7f
 800060a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_RTC_Init+0x70>)
 800060e:	22ff      	movs	r2, #255	; 0xff
 8000610:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_RTC_Init+0x70>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_RTC_Init+0x70>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_RTC_Init+0x70>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <MX_RTC_Init+0x70>)
 8000626:	f002 fb11 	bl	8002c4c <HAL_RTC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000630:	f000 faa4 	bl	8000b7c <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTC_MspInit(&hrtc);
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <MX_RTC_Init+0x70>)
 8000636:	f000 fadb 	bl	8000bf0 <HAL_RTC_MspInit>
  /* USER CODE END RTC_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3740      	adds	r7, #64	; 0x40
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000154 	.word	0x20000154
 8000648:	40002800 	.word	0x40002800

0800064c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_TIM16_Init+0x48>)
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <MX_TIM16_Init+0x4c>)
 8000654:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200 - 1;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_TIM16_Init+0x48>)
 8000658:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800065c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_TIM16_Init+0x48>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_TIM16_Init+0x48>)
 8000666:	f242 720f 	movw	r2, #9999	; 0x270f
 800066a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_TIM16_Init+0x48>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_TIM16_Init+0x48>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_TIM16_Init+0x48>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_TIM16_Init+0x48>)
 8000680:	f002 ff94 	bl	80035ac <HAL_TIM_Base_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800068a:	f000 fa77 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000020c 	.word	0x2000020c
 8000698:	40014400 	.word	0x40014400

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	f003 fa30 	bl	8003b44 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 fa47 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000188 	.word	0x20000188
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a33      	ldr	r2, [pc, #204]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_GPIO_Init+0xe8>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a2d      	ldr	r2, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xe8>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xe8>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000778:	f000 feb4 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f000 feae 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xec>)
 800079e:	f000 fd17 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 80007a2:	2304      	movs	r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xec>)
 80007ba:	f000 fd09 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007be:	2320      	movs	r3, #32
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fcfa 	bl	80011d0 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800
 80007ec:	10210000 	.word	0x10210000

080007f0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Callbacks
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	sprintf((char*) msg, "Alarm A callback entered\r\n");
 80007f8:	493f      	ldr	r1, [pc, #252]	; (80008f8 <HAL_RTC_AlarmAEventCallback+0x108>)
 80007fa:	4840      	ldr	r0, [pc, #256]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 80007fc:	f003 fdf4 	bl	80043e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char const*) msg), 1000);
 8000800:	483e      	ldr	r0, [pc, #248]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000802:	f7ff fced 	bl	80001e0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	493b      	ldr	r1, [pc, #236]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000810:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x110>)
 8000812:	f003 f9e5 	bl	8003be0 <HAL_UART_Transmit>
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	f403 7380 	and.w	r3, r3, #256	; 0x100
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	f403 7300 	and.w	r3, r3, #512	; 0x200
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4930      	ldr	r1, [pc, #192]	; (8000904 <HAL_RTC_AlarmAEventCallback+0x114>)
 8000842:	482e      	ldr	r0, [pc, #184]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000844:	f003 fdd0 	bl	80043e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000848:	482c      	ldr	r0, [pc, #176]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 800084a:	f7ff fcc9 	bl	80001e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	4929      	ldr	r1, [pc, #164]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000858:	4829      	ldr	r0, [pc, #164]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x110>)
 800085a:	f003 f9c1 	bl	8003be0 <HAL_UART_Transmit>
	// clear the alarm flag
		__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	22ca      	movs	r2, #202	; 0xca
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2253      	movs	r2, #83	; 0x53
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800086e:	e008      	b.n	8000882 <HAL_RTC_AlarmAEventCallback+0x92>
			__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8000880:	60da      	str	r2, [r3, #12]
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1ef      	bne.n	8000870 <HAL_RTC_AlarmAEventCallback+0x80>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_RTC_AlarmAEventCallback+0x118>)
 800089a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800089e:	615a      	str	r2, [r3, #20]

		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4910      	ldr	r1, [pc, #64]	; (800090c <HAL_RTC_AlarmAEventCallback+0x11c>)
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 80008ce:	f003 fd8b 	bl	80043e8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 80008d2:	480a      	ldr	r0, [pc, #40]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 80008d4:	f7ff fc84 	bl	80001e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <HAL_RTC_AlarmAEventCallback+0x10c>)
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x110>)
 80008e4:	f003 f97c 	bl	8003be0 <HAL_UART_Transmit>
	alarmAOccurred = 1;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_RTC_AlarmAEventCallback+0x120>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08004d0c 	.word	0x08004d0c
 80008fc:	200000c4 	.word	0x200000c4
 8000900:	20000188 	.word	0x20000188
 8000904:	08004d28 	.word	0x08004d28
 8000908:	40010400 	.word	0x40010400
 800090c:	08004d4c 	.word	0x08004d4c
 8000910:	2000008c 	.word	0x2000008c

08000914 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

	sprintf((char *)msg, "Alarm B callback entered\r\n");
 800091c:	4946      	ldr	r1, [pc, #280]	; (8000a38 <HAL_RTCEx_AlarmBEventCallback+0x124>)
 800091e:	4847      	ldr	r0, [pc, #284]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000920:	f003 fd62 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 8000924:	4845      	ldr	r0, [pc, #276]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000926:	f7ff fc5b 	bl	80001e0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	4942      	ldr	r1, [pc, #264]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000934:	4842      	ldr	r0, [pc, #264]	; (8000a40 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 8000936:	f003 f953 	bl	8003be0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 800093a:	4840      	ldr	r0, [pc, #256]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800093c:	f7ff fc50 	bl	80001e0 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	493c      	ldr	r1, [pc, #240]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800094a:	483d      	ldr	r0, [pc, #244]	; (8000a40 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 800094c:	f003 f948 	bl	8003be0 <HAL_UART_Transmit>
		sprintf((char*) msg, "before clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4932      	ldr	r1, [pc, #200]	; (8000a44 <HAL_RTCEx_AlarmBEventCallback+0x130>)
 800097c:	482f      	ldr	r0, [pc, #188]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800097e:	f003 fd33 	bl	80043e8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000982:	482e      	ldr	r0, [pc, #184]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000984:	f7ff fc2c 	bl	80001e0 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	492a      	ldr	r1, [pc, #168]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000992:	482b      	ldr	r0, [pc, #172]	; (8000a40 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 8000994:	f003 f924 	bl	8003be0 <HAL_UART_Transmit>

	// clear the alarm flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	22ca      	movs	r2, #202	; 0xca
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2253      	movs	r2, #83	; 0x53
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80009a8:	e008      	b.n	80009bc <HAL_RTCEx_AlarmBEventCallback+0xa8>
		__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80009ba:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1ef      	bne.n	80009aa <HAL_RTCEx_AlarmBEventCallback+0x96>
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <HAL_RTCEx_AlarmBEventCallback+0x134>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	615a      	str	r2, [r3, #20]
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_RTCEx_AlarmBEventCallback+0x134>)
 80009dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009e0:	615a      	str	r2, [r3, #20]

	sprintf((char*) msg, "after clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf14      	ite	ne
 8000a06:	2301      	movne	r3, #1
 8000a08:	2300      	moveq	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	490f      	ldr	r1, [pc, #60]	; (8000a4c <HAL_RTCEx_AlarmBEventCallback+0x138>)
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000a10:	f003 fcea 	bl	80043e8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000a16:	f7ff fbe3 	bl	80001e0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	4906      	ldr	r1, [pc, #24]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 8000a26:	f003 f8db 	bl	8003be0 <HAL_UART_Transmit>
	alarmAOccurred = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_RTCEx_AlarmBEventCallback+0x13c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	08004d7c 	.word	0x08004d7c
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	20000188 	.word	0x20000188
 8000a44:	08004d98 	.word	0x08004d98
 8000a48:	40010400 	.word	0x40010400
 8000a4c:	08004dd4 	.word	0x08004dd4
 8000a50:	2000008c 	.word	0x2000008c

08000a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a30      	ldr	r2, [pc, #192]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d159      	bne.n	8000b18 <HAL_TIM_PeriodElapsedCallback+0xc4>
		sprintf((char*) msg, "TIM16 callback entered\r\n");
 8000a64:	492f      	ldr	r1, [pc, #188]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000a66:	4830      	ldr	r0, [pc, #192]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a68:	f003 fcbe 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char const*) msg),
 8000a6c:	482e      	ldr	r0, [pc, #184]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a6e:	f7ff fbb7 	bl	80001e0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	492b      	ldr	r1, [pc, #172]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000a7c:	482b      	ldr	r0, [pc, #172]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000a7e:	f003 f8af 	bl	8003be0 <HAL_UART_Transmit>
				1000);

		HAL_GPIO_TogglePin(LED_Output_GPIO_Port, LED_Output_Pin);
 8000a82:	2104      	movs	r1, #4
 8000a84:	482a      	ldr	r0, [pc, #168]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a86:	f000 fd45 	bl	8001514 <HAL_GPIO_TogglePin>

		// print current RTC time for debugging
		HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4929      	ldr	r1, [pc, #164]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a8e:	482a      	ldr	r0, [pc, #168]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a90:	f002 fa2a 	bl	8002ee8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000a94:	2200      	movs	r2, #0
 8000a96:	4929      	ldr	r1, [pc, #164]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a98:	4827      	ldr	r0, [pc, #156]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a9a:	f002 fb2a 	bl	80030f2 <HAL_RTC_GetDate>
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
				stimestructureget.Hours, stimestructureget.Minutes,
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000aa2:	461a      	mov	r2, r3
				stimestructureget.Hours, stimestructureget.Minutes,
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aa6:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000aa8:	4619      	mov	r1, r3
				stimestructureget.Seconds);
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aac:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg, "main, current: GetTime/Date: %.2d:%.2d:%.2d\r\n",
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4923      	ldr	r1, [pc, #140]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ab4:	481c      	ldr	r0, [pc, #112]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ab6:	f003 fc97 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000abc:	f7ff fb90 	bl	80001e0 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	4917      	ldr	r1, [pc, #92]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000acc:	f003 f888 	bl	8003be0 <HAL_UART_Transmit>

//		// print status of alarm flags for debugging
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
				__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF),
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
				__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF));
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
		sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4912      	ldr	r1, [pc, #72]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000afe:	f003 fc73 	bl	80043e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b04:	f7ff fb6c 	bl	80001e0 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b10:	4905      	ldr	r1, [pc, #20]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b14:	f003 f864 	bl	8003be0 <HAL_UART_Transmit>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000020c 	.word	0x2000020c
 8000b24:	08004e0c 	.word	0x08004e0c
 8000b28:	200000c4 	.word	0x200000c4
 8000b2c:	20000188 	.word	0x20000188
 8000b30:	48000800 	.word	0x48000800
 8000b34:	20000174 	.word	0x20000174
 8000b38:	20000154 	.word	0x20000154
 8000b3c:	20000128 	.word	0x20000128
 8000b40:	08004e28 	.word	0x08004e28
 8000b44:	08004d28 	.word	0x08004d28

08000b48 <pollAlarmInterruptFlag>:

/*
 * polls the alarm interrupt flags and calls the appropriate callback functions.
 */
void pollAlarmInterruptFlag(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET)
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <pollAlarmInterruptFlag+0x30>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <pollAlarmInterruptFlag+0x18>
		HAL_RTC_AlarmAEventCallback(&hrtc);
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <pollAlarmInterruptFlag+0x30>)
 8000b5c:	f7ff fe48 	bl	80007f0 <HAL_RTC_AlarmAEventCallback>
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET)
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <pollAlarmInterruptFlag+0x30>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <pollAlarmInterruptFlag+0x2c>
		HAL_RTCEx_AlarmBEventCallback(&hrtc);
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <pollAlarmInterruptFlag+0x30>)
 8000b70:	f7ff fed0 	bl	8000914 <HAL_RTCEx_AlarmBEventCallback>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000154 	.word	0x20000154

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2104      	movs	r1, #4
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <Error_Handler+0x28>)
 8000b86:	f000 fcad 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000b8a:	20fa      	movs	r0, #250	; 0xfa
 8000b8c:	f000 f9da 	bl	8000f44 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2104      	movs	r1, #4
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <Error_Handler+0x28>)
 8000b96:	f000 fca5 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f000 f9d1 	bl	8000f44 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 8000ba2:	e7ed      	b.n	8000b80 <Error_Handler+0x4>
 8000ba4:	48000800 	.word	0x48000800

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fab4 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_RTC_MspInit+0x50>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d119      	bne.n	8000c36 <HAL_RTC_MspInit+0x46>
 8000c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c06:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c10:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c12:	fab3 f383 	clz	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_RTC_MspInit+0x54>)
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	461a      	mov	r2, r3
 8000c22:	2301      	movs	r3, #1
 8000c24:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2029      	movs	r0, #41	; 0x29
 8000c2c:	f000 fa99 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c30:	2029      	movs	r0, #41	; 0x29
 8000c32:	f000 fab2 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40002800 	.word	0x40002800
 8000c44:	10908100 	.word	0x10908100

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2019      	movs	r0, #25
 8000c78:	f000 fa73 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c7c:	2019      	movs	r0, #25
 8000c7e:	f000 fa8c 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40014400 	.word	0x40014400
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0x7c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d128      	bne.n	8000d08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_UART_MspInit+0x80>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f000 fa64 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8ce 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d72:	f002 fce3 	bl	800373c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000020c 	.word	0x2000020c

08000d80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <RTC_Alarm_IRQHandler+0x10>)
 8000d86:	f002 fb3b 	bl	8003400 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000154 	.word	0x20000154

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f003 fade 	bl	8004384 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20010000 	.word	0x20010000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000090 	.word	0x20000090
 8000dfc:	20000270 	.word	0x20000270

08000e00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f003 fa9d 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fa1b 	bl	8000290 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e68:	08004ecc 	.word	0x08004ecc
  ldr r2, =_sbss
 8000e6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e70:	2000026c 	.word	0x2000026c

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x28>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f95f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe88 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f977 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f93f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000258 	.word	0x20000258

08000f2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000258 	.word	0x20000258

08000f44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_SuspendTick+0x1c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_SuspendTick+0x1c>)
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	6013      	str	r3, [r2, #0]
                                                   
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e160      	b.n	80014a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8152 	beq.w	800149c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00b      	beq.n	8001218 <HAL_GPIO_Init+0x48>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120c:	2b11      	cmp	r3, #17
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b12      	cmp	r3, #18
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 0201 	and.w	r2, r3, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0xea>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80ac 	beq.w	800149c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a5d      	ldr	r2, [pc, #372]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <HAL_GPIO_Init+0x2f0>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a59      	ldr	r2, [pc, #356]	; (80014c4 <HAL_GPIO_Init+0x2f4>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001386:	d025      	beq.n	80013d4 <HAL_GPIO_Init+0x204>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x2f8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d01f      	beq.n	80013d0 <HAL_GPIO_Init+0x200>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x2fc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d019      	beq.n	80013cc <HAL_GPIO_Init+0x1fc>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x300>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d013      	beq.n	80013c8 <HAL_GPIO_Init+0x1f8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x304>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00d      	beq.n	80013c4 <HAL_GPIO_Init+0x1f4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x308>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_GPIO_Init+0x1f0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x30c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_GPIO_Init+0x1ec>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e00c      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013bc:	2307      	movs	r3, #7
 80013be:	e00a      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013c0:	2305      	movs	r3, #5
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x206>
 80013d4:	2300      	movs	r3, #0
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e6:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_GPIO_Init+0x2f4>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_GPIO_Init+0x310>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001418:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001442:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f ae97 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48001000 	.word	0x48001000
 80014d8:	48001400 	.word	0x48001400
 80014dc:	48001800 	.word	0x48001800
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e002      	b.n	8001508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43d9      	mvns	r1, r3
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	400b      	ands	r3, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001564:	bf30      	wfi
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40007000 	.word	0x40007000
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800157e:	af00      	add	r7, sp, #0
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	f000 bf01 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8160 	beq.w	8001862 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015a2:	4bae      	ldr	r3, [pc, #696]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ae:	4bab      	ldr	r3, [pc, #684]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d159      	bne.n	800166e <HAL_RCC_OscConfig+0xf6>
 80015ba:	4ba8      	ldr	r3, [pc, #672]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d152      	bne.n	800166e <HAL_RCC_OscConfig+0xf6>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80015dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <HAL_RCC_OscConfig+0x82>
 80015f4:	4b99      	ldr	r3, [pc, #612]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0xae>
 80015fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001616:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800162a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800162e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001632:	fa92 f2a2 	rbit	r2, r2
 8001636:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800163a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f042 0220 	orr.w	r2, r2, #32
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8102 	beq.w	8001860 <HAL_RCC_OscConfig+0x2e8>
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80fc 	bne.w	8001860 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f000 be93 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x110>
 800167a:	4b78      	ldr	r3, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a77      	ldr	r2, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e030      	b.n	80016ea <HAL_RCC_OscConfig+0x172>
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x134>
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a71      	ldr	r2, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01e      	b.n	80016ea <HAL_RCC_OscConfig+0x172>
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x15a>
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a67      	ldr	r2, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a64      	ldr	r2, [pc, #400]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e00b      	b.n	80016ea <HAL_RCC_OscConfig+0x172>
 80016d2:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a61      	ldr	r2, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80016e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d059      	beq.n	80017a8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc1a 	bl	8000f2c <HAL_GetTick>
 80016f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fe:	f7ff fc15 	bl	8000f2c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d902      	bls.n	8001714 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	f000 be40 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001718:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001728:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x1ce>
 8001740:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1fa>
 8001746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800175a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001762:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001776:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800177a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800177e:	fa92 f2a2 	rbit	r2, r2
 8001782:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001786:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800178a:	fab2 f282 	clz	r2, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f002 021f 	and.w	r2, r2, #31
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ab      	beq.n	80016fe <HAL_RCC_OscConfig+0x186>
 80017a6:	e05c      	b.n	8001862 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbc0 	bl	8000f2c <HAL_GetTick>
 80017ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b2:	f7ff fbbb 	bl	8000f2c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d902      	bls.n	80017c8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f000 bde6 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
 80017c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80017dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x282>
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x2ae>
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001816:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_RCC_OscConfig+0x2e4>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800182a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800182e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001832:	fa92 f2a2 	rbit	r2, r2
 8001836:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800183a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ab      	bne.n	80017b2 <HAL_RCC_OscConfig+0x23a>
 800185a:	e002      	b.n	8001862 <HAL_RCC_OscConfig+0x2ea>
 800185c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8170 	beq.w	8001b52 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001872:	4bd0      	ldr	r3, [pc, #832]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800187e:	4bcd      	ldr	r3, [pc, #820]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d16d      	bne.n	8001966 <HAL_RCC_OscConfig+0x3ee>
 800188a:	4bca      	ldr	r3, [pc, #808]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001896:	d166      	bne.n	8001966 <HAL_RCC_OscConfig+0x3ee>
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80018aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0x350>
 80018c2:	4bbc      	ldr	r3, [pc, #752]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0x378>
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018ec:	4bb1      	ldr	r3, [pc, #708]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	2202      	movs	r2, #2
 80018f2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80018f6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018fa:	fa92 f2a2 	rbit	r2, r2
 80018fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001902:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0220 	orr.w	r2, r2, #32
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_RCC_OscConfig+0x3ba>
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d002      	beq.n	8001932 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f000 bd31 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4ba0      	ldr	r3, [pc, #640]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	21f8      	movs	r1, #248	; 0xf8
 8001942:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800194a:	fa91 f1a1 	rbit	r1, r1
 800194e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001952:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001956:	fab1 f181 	clz	r1, r1
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	408b      	lsls	r3, r1
 800195e:	4995      	ldr	r1, [pc, #596]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001964:	e0f5      	b.n	8001b52 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8085 	beq.w	8001a7c <HAL_RCC_OscConfig+0x504>
 8001972:	2301      	movs	r3, #1
 8001974:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001984:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	461a      	mov	r2, r3
 800199a:	2301      	movs	r3, #1
 800199c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fac5 	bl	8000f2c <HAL_GetTick>
 80019a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff fac0 	bl	8000f2c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d902      	bls.n	80019be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	f000 bceb 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80019d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0x476>
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e013      	b.n	8001a16 <HAL_RCC_OscConfig+0x49e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a12:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2202      	movs	r2, #2
 8001a18:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a20:	fa92 f2a2 	rbit	r2, r2
 8001a24:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a28:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a2c:	fab2 f282 	clz	r2, r2
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f042 0220 	orr.w	r2, r2, #32
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f002 021f 	and.w	r2, r2, #31
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0af      	beq.n	80019a8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	21f8      	movs	r1, #248	; 0xf8
 8001a58:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a60:	fa91 f1a1 	rbit	r1, r1
 8001a64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a6c:	fab1 f181 	clz	r1, r1
 8001a70:	b2c9      	uxtb	r1, r1
 8001a72:	408b      	lsls	r3, r1
 8001a74:	494f      	ldr	r1, [pc, #316]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
 8001a7a:	e06a      	b.n	8001b52 <HAL_RCC_OscConfig+0x5da>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa40 	bl	8000f2c <HAL_GetTick>
 8001aac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fa3b 	bl	8000f2c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d902      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f000 bc66 	b.w	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_OscConfig+0x580>
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e013      	b.n	8001b20 <HAL_RCC_OscConfig+0x5a8>
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x63c>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2202      	movs	r2, #2
 8001b22:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b26:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b2a:	fa92 f2a2 	rbit	r2, r2
 8001b2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1af      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80da 	beq.w	8001d16 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d069      	beq.n	8001c40 <HAL_RCC_OscConfig+0x6c8>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x640>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	461a      	mov	r2, r3
 8001b92:	2301      	movs	r3, #1
 8001b94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f9c9 	bl	8000f2c <HAL_GetTick>
 8001b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e00d      	b.n	8001bbc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f9c4 	bl	8000f2c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d905      	bls.n	8001bbc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e3ef      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	10908120 	.word	0x10908120
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bec:	2202      	movs	r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bfe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c00:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c08:	2102      	movs	r1, #2
 8001c0a:	6019      	str	r1, [r3, #0]
 8001c0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f1a3 	rbit	r1, r3
 8001c16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c1a:	6019      	str	r1, [r3, #0]
  return result;
 8001c1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0b0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x628>
 8001c3e:	e06a      	b.n	8001d16 <HAL_RCC_OscConfig+0x79e>
 8001c40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c56:	601a      	str	r2, [r3, #0]
  return result;
 8001c58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x920>)
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f95b 	bl	8000f2c <HAL_GetTick>
 8001c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f956 	bl	8000f2c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e381      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001c90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c94:	2202      	movs	r2, #2
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	6019      	str	r1, [r3, #0]
 8001ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f1a3 	rbit	r1, r3
 8001cee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cf2:	6019      	str	r1, [r3, #0]
  return result;
 8001cf4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1b2      	bne.n	8001c7c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8157 	beq.w	8001fd4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d112      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4a55      	ldr	r2, [pc, #340]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <HAL_RCC_OscConfig+0x924>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x924>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_RCC_OscConfig+0x924>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f8d9 	bl	8000f2c <HAL_GetTick>
 8001d7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	e009      	b.n	8001d94 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7ff f8d4 	bl	8000f2c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e2ff      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_OscConfig+0x924>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ef      	beq.n	8001d80 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x840>
 8001daa:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a39      	ldr	r2, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	e02f      	b.n	8001e18 <HAL_RCC_OscConfig+0x8a0>
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x864>
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0x8a0>
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x888>
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x8a0>
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001e12:	f023 0304 	bic.w	r3, r3, #4
 8001e16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7ff f883 	bl	8000f2c <HAL_GetTick>
 8001e26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f87e 	bl	8000f2c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e2a7      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001e44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e72:	601a      	str	r2, [r3, #0]
  return result;
 8001e74:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d108      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x928>
 8001e8e:	4b01      	ldr	r3, [pc, #4]	; (8001e94 <HAL_RCC_OscConfig+0x91c>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	e013      	b.n	8001ebc <HAL_RCC_OscConfig+0x944>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	10908120 	.word	0x10908120
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4bc0      	ldr	r3, [pc, #768]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	6011      	str	r1, [r2, #0]
 8001ec4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	fa92 f1a2 	rbit	r1, r2
 8001ece:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ed2:	6011      	str	r1, [r2, #0]
  return result;
 8001ed4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f002 021f 	and.w	r2, r2, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d09a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x8b4>
 8001ef6:	e063      	b.n	8001fc0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f818 	bl	8000f2c <HAL_GetTick>
 8001efc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00b      	b.n	8001f1a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff f813 	bl	8000f2c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e23c      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 8001f1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1e:	2202      	movs	r2, #2
 8001f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f48:	601a      	str	r2, [r3, #0]
  return result;
 8001f4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0x9f2>
 8001f64:	4b95      	ldr	r3, [pc, #596]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	e00d      	b.n	8001f86 <HAL_RCC_OscConfig+0xa0e>
 8001f6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f6e:	2202      	movs	r2, #2
 8001f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fa92 f1a2 	rbit	r1, r2
 8001f98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f9c:	6011      	str	r1, [r2, #0]
  return result;
 8001f9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1a0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 81d9 	beq.w	8002392 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe0:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f000 81a6 	beq.w	800233a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	f040 811e 	bne.w	8002236 <HAL_RCC_OscConfig+0xcbe>
 8001ffa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002012:	601a      	str	r2, [r3, #0]
  return result;
 8002014:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002018:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe ff7c 	bl	8000f2c <HAL_GetTick>
 8002034:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe ff77 	bl	8000f2c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1a2      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 800204e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002066:	601a      	str	r2, [r3, #0]
  return result;
 8002068:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800206c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0xb10>
 8002082:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb48>
 8002088:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800208c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020c8:	6011      	str	r1, [r2, #0]
 80020ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fa92 f1a2 	rbit	r1, r2
 80020d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020d8:	6011      	str	r1, [r2, #0]
  return result;
 80020da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f002 021f 	and.w	r2, r2, #31
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d19e      	bne.n	800203a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f023 020f 	bic.w	r2, r3, #15
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	492c      	ldr	r1, [pc, #176]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 800210c:	4313      	orrs	r3, r2
 800210e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a19      	ldr	r1, [r3, #32]
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	430b      	orrs	r3, r1
 8002126:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
 800212c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002144:	601a      	str	r2, [r3, #0]
  return result;
 8002146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800214a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002156:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	461a      	mov	r2, r3
 800215e:	2301      	movs	r3, #1
 8002160:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fee3 	bl	8000f2c <HAL_GetTick>
 8002166:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216a:	e009      	b.n	8002180 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fede 	bl	8000f2c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e109      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 8002180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fa93 f2a3 	rbit	r2, r3
 8002194:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002198:	601a      	str	r2, [r3, #0]
  return result;
 800219a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800219e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0xc48>
 80021b4:	4b01      	ldr	r3, [pc, #4]	; (80021bc <HAL_RCC_OscConfig+0xc44>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	e01e      	b.n	80021f8 <HAL_RCC_OscConfig+0xc80>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0xe28>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80021fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002200:	6011      	str	r1, [r2, #0]
 8002202:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fa92 f1a2 	rbit	r1, r2
 800220c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002210:	6011      	str	r1, [r2, #0]
  return result;
 8002212:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f042 0220 	orr.w	r2, r2, #32
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f002 021f 	and.w	r2, r2, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d09b      	beq.n	800216c <HAL_RCC_OscConfig+0xbf4>
 8002234:	e0ad      	b.n	8002392 <HAL_RCC_OscConfig+0xe1a>
 8002236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800223a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002254:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	461a      	mov	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fe5e 	bl	8000f2c <HAL_GetTick>
 8002270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	e009      	b.n	800228a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fe59 	bl	8000f2c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e084      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a2:	601a      	str	r2, [r3, #0]
  return result;
 80022a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_OscConfig+0xd4c>
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_RCC_OscConfig+0xe28>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e01b      	b.n	80022fc <HAL_RCC_OscConfig+0xd84>
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_OscConfig+0xe28>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f107 0214 	add.w	r2, r7, #20
 8002300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	f107 0214 	add.w	r2, r7, #20
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fa92 f1a2 	rbit	r1, r2
 8002310:	f107 0210 	add.w	r2, r7, #16
 8002314:	6011      	str	r1, [r2, #0]
  return result;
 8002316:	f107 0210 	add.w	r2, r7, #16
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f002 021f 	and.w	r2, r2, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d19e      	bne.n	8002276 <HAL_RCC_OscConfig+0xcfe>
 8002338:	e02b      	b.n	8002392 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e025      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCC_OscConfig+0xe28>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0xe28>)
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800235c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	429a      	cmp	r2, r3
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800236a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800236e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002378:	429a      	cmp	r2, r3
 800237a:	d108      	bne.n	800238e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800237c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002380:	f003 020f 	and.w	r2, r3, #15
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b09e      	sub	sp, #120	; 0x78
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e162      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b90      	ldr	r3, [pc, #576]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b8d      	ldr	r3, [pc, #564]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	498b      	ldr	r1, [pc, #556]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e14a      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	497f      	ldr	r1, [pc, #508]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80dc 	beq.w	80025d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d13c      	bne.n	800249a <HAL_RCC_ClockConfig+0xf6>
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_RCC_ClockConfig+0xa6>
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	e00f      	b.n	800246a <HAL_RCC_ClockConfig+0xc6>
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	667b      	str	r3, [r7, #100]	; 0x64
 8002458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245c:	663b      	str	r3, [r7, #96]	; 0x60
 800245e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d17b      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0f3      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d13c      	bne.n	800251c <HAL_RCC_ClockConfig+0x178>
 80024a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_ClockConfig+0x128>
 80024c6:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_ClockConfig+0x148>
 80024cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f4:	fa92 f2a2 	rbit	r2, r2
 80024f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fc:	fab2 f282 	clz	r2, r2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f002 021f 	and.w	r2, r2, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d13a      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b2      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
 800251c:	2302      	movs	r3, #2
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1a0>
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e00d      	b.n	8002560 <HAL_RCC_ClockConfig+0x1bc>
 8002544:	2302      	movs	r3, #2
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	2202      	movs	r2, #2
 8002562:	61ba      	str	r2, [r7, #24]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	fa92 f2a2 	rbit	r2, r2
 800256a:	617a      	str	r2, [r7, #20]
  return result;
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e079      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	491a      	ldr	r1, [pc, #104]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fcc4 	bl	8000f2c <HAL_GetTick>
 80025a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fcc0 	bl	8000f2c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e061      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d214      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4906      	ldr	r1, [pc, #24]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e040      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	491a      	ldr	r1, [pc, #104]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4912      	ldr	r1, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002646:	f000 f829 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800264a:	4601      	mov	r1, r0
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	22f0      	movs	r2, #240	; 0xf0
 8002656:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	60fa      	str	r2, [r7, #12]
  return result;
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	40d3      	lsrs	r3, r2
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x2ec>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	fa21 f303 	lsr.w	r3, r1, r3
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCC_ClockConfig+0x2f0>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_ClockConfig+0x2f4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fc12 	bl	8000ea4 <HAL_InitTick>
  
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3778      	adds	r7, #120	; 0x78
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08004e58 	.word	0x08004e58
 8002694:	20000000 	.word	0x20000000
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x30>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ca:	e03f      	b.n	800274c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ce:	623b      	str	r3, [r7, #32]
      break;
 80026d0:	e03f      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	607a      	str	r2, [r7, #4]
  return result;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	40d3      	lsrs	r3, r2
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	220f      	movs	r2, #15
 8002700:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	60fa      	str	r2, [r7, #12]
  return result;
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	40d3      	lsrs	r3, r2
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f2f3 	udiv	r2, r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e007      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fbb2 f2f3 	udiv	r2, r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	623b      	str	r3, [r7, #32]
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetSysClockFreq+0xc8>)
 800274e:	623b      	str	r3, [r7, #32]
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	6a3b      	ldr	r3, [r7, #32]
}
 8002754:	4618      	mov	r0, r3
 8002756:	372c      	adds	r7, #44	; 0x2c
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200
 8002768:	08004e70 	.word	0x08004e70
 800276c:	08004e80 	.word	0x08004e80

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800278e:	f7ff ffef 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002792:	4601      	mov	r1, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800279c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	603a      	str	r2, [r7, #0]
  return result;
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	40d3      	lsrs	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08004e68 	.word	0x08004e68

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027d2:	f7ff ffcd 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	603a      	str	r2, [r7, #0]
  return result;
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	40d3      	lsrs	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x40>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08004e68 	.word	0x08004e68

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b092      	sub	sp, #72	; 0x48
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80d4 	beq.w	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002834:	4b4e      	ldr	r3, [pc, #312]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10e      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b42      	ldr	r3, [pc, #264]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a41      	ldr	r2, [pc, #260]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fb59 	bl	8000f2c <HAL_GetTick>
 800287a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fb55 	bl	8000f2c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1d6      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8084 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d07c      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	461a      	mov	r2, r3
 80028e6:	2301      	movs	r3, #1
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	2300      	movs	r3, #0
 800290c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002912:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04b      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fb05 	bl	8000f2c <HAL_GetTick>
 8002922:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fb01 	bl	8000f2c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e180      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	61fb      	str	r3, [r7, #28]
  return result;
 8002954:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d108      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800296a:	4b01      	ldr	r3, [pc, #4]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	e00d      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	10908100 	.word	0x10908100
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	4ba0      	ldr	r3, [pc, #640]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2202      	movs	r2, #2
 800298e:	613a      	str	r2, [r7, #16]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	60fa      	str	r2, [r7, #12]
  return result;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0b7      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029b6:	4b95      	ldr	r3, [pc, #596]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4992      	ldr	r1, [pc, #584]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b8e      	ldr	r3, [pc, #568]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4a8d      	ldr	r2, [pc, #564]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e8:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f023 0203 	bic.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4985      	ldr	r1, [pc, #532]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a06:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	497e      	ldr	r1, [pc, #504]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a24:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	4976      	ldr	r1, [pc, #472]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a42:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f023 0210 	bic.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	496f      	ldr	r1, [pc, #444]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	4967      	ldr	r1, [pc, #412]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f023 0220 	bic.w	r2, r3, #32
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4960      	ldr	r1, [pc, #384]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a9c:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	4958      	ldr	r1, [pc, #352]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4951      	ldr	r1, [pc, #324]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4949      	ldr	r1, [pc, #292]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4942      	ldr	r1, [pc, #264]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	493a      	ldr	r1, [pc, #232]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	4933      	ldr	r1, [pc, #204]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	492b      	ldr	r1, [pc, #172]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4924      	ldr	r1, [pc, #144]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	491c      	ldr	r1, [pc, #112]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	4915      	ldr	r1, [pc, #84]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	490d      	ldr	r1, [pc, #52]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	4906      	ldr	r1, [pc, #24]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	e002      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	490b      	ldr	r1, [pc, #44]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3748      	adds	r7, #72	; 0x48
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e083      	b.n	8002d66 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7f5b      	ldrb	r3, [r3, #29]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd ffbe 	bl	8000bf0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	22ca      	movs	r2, #202	; 0xca
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2253      	movs	r2, #83	; 0x53
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fc26 	bl	80034dc <RTC_EnterInitMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e05e      	b.n	8002d66 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	041a      	lsls	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fbb8 	bl	800348c <HAL_RTC_WaitForSynchro>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e018      	b.n	8002d66 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d6e:	b590      	push	{r4, r7, lr}
 8002d70:	b087      	sub	sp, #28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_RTC_SetTime+0x1c>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0aa      	b.n	8002ee0 <HAL_RTC_SetTime+0x172>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2202      	movs	r2, #2
 8002d94:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d126      	bne.n	8002dea <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fbbd 	bl	8003534 <RTC_ByteToBcd2>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fbb6 	bl	8003534 <RTC_ByteToBcd2>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dcc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fbae 	bl	8003534 <RTC_ByteToBcd2>
 8002dd8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dda:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e018      	b.n	8002e1c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	785b      	ldrb	r3, [r3, #1]
 8002e08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e0a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e10:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	22ca      	movs	r2, #202	; 0xca
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2253      	movs	r2, #83	; 0x53
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb55 	bl	80034dc <RTC_EnterInitMode>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2204      	movs	r2, #4
 8002e44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e047      	b.n	8002ee0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e5e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e96:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d111      	bne.n	8002eca <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 faf0 	bl	800348c <HAL_RTC_WaitForSynchro>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	22ff      	movs	r2, #255	; 0xff
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002ede:	2300      	movs	r3, #0
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11a      	bne.n	8002f9a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb01 	bl	8003570 <RTC_Bcd2ToByte>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 faf8 	bl	8003570 <RTC_Bcd2ToByte>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	789b      	ldrb	r3, [r3, #2]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 faef 	bl	8003570 <RTC_Bcd2ToByte>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	7f1b      	ldrb	r3, [r3, #28]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_RTC_SetDate+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e094      	b.n	80030ea <HAL_RTC_SetDate+0x146>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_RTC_SetDate+0x4c>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	f023 0310 	bic.w	r3, r3, #16
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	330a      	adds	r3, #10
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11c      	bne.n	8003030 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fa9a 	bl	8003534 <RTC_ByteToBcd2>
 8003000:	4603      	mov	r3, r0
 8003002:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa93 	bl	8003534 <RTC_ByteToBcd2>
 800300e:	4603      	mov	r3, r0
 8003010:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003012:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	789b      	ldrb	r3, [r3, #2]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa8b 	bl	8003534 <RTC_ByteToBcd2>
 800301e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003020:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e00e      	b.n	800304e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	78db      	ldrb	r3, [r3, #3]
 8003034:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800303c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003042:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	22ca      	movs	r2, #202	; 0xca
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2253      	movs	r2, #83	; 0x53
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fa3c 	bl	80034dc <RTC_EnterInitMode>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2204      	movs	r2, #4
 8003076:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e033      	b.n	80030ea <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800308c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003090:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9eb 	bl	800348c <HAL_RTC_WaitForSynchro>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	22ff      	movs	r2, #255	; 0xff
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2204      	movs	r2, #4
 80030c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e00a      	b.n	80030ea <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800310c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003110:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	0b5b      	lsrs	r3, r3, #13
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11a      	bne.n	8003186 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	78db      	ldrb	r3, [r3, #3]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa0b 	bl	8003570 <RTC_Bcd2ToByte>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa02 	bl	8003570 <RTC_Bcd2ToByte>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	789b      	ldrb	r3, [r3, #2]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f9f9 	bl	8003570 <RTC_Bcd2ToByte>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	7f1b      	ldrb	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_RTC_SetAlarm_IT+0x24>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e11f      	b.n	80033f4 <HAL_RTC_SetAlarm_IT+0x264>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d137      	bne.n	8003236 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9a8 	bl	8003534 <RTC_ByteToBcd2>
 80031e4:	4603      	mov	r3, r0
 80031e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f9a1 	bl	8003534 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
 80031f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	789b      	ldrb	r3, [r3, #2]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f999 	bl	8003534 <RTC_ByteToBcd2>
 8003202:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003204:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800320e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f98b 	bl	8003534 <RTC_ByteToBcd2>
 800321e:	4603      	mov	r3, r0
 8003220:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003222:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800322a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003230:	4313      	orrs	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e023      	b.n	800327e <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003256:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800325c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003264:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800326e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003274:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800327a:	4313      	orrs	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	22ca      	movs	r2, #202	; 0xca
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2253      	movs	r2, #83	; 0x53
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a2:	d148      	bne.n	8003336 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032c6:	f7fd fe31 	bl	8000f2c <HAL_GetTick>
 80032ca:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80032cc:	e013      	b.n	80032f6 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ce:	f7fd fe2d 	bl	8000f2c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032dc:	d90b      	bls.n	80032f6 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2203      	movs	r2, #3
 80032ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e07e      	b.n	80033f4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0e4      	beq.n	80032ce <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e047      	b.n	80033c6 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003344:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003356:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003358:	f7fd fde8 	bl	8000f2c <HAL_GetTick>
 800335c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800335e:	e013      	b.n	8003388 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003360:	f7fd fde4 	bl	8000f2c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336e:	d90b      	bls.n	8003388 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2203      	movs	r2, #3
 800337c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e035      	b.n	80033f4 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0e4      	beq.n	8003360 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RTC_SetAlarm_IT+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_RTC_SetAlarm_IT+0x26c>)
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RTC_SetAlarm_IT+0x26c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RTC_SetAlarm_IT+0x26c>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3724      	adds	r7, #36	; 0x24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd f9e3 	bl	80007f0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800343a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd fa5b 	bl	8000914 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800346e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003476:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	775a      	strb	r2, [r3, #29]
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40010400 	.word	0x40010400

0800348c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80034a8:	f7fd fd40 	bl	8000f2c <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034ae:	e009      	b.n	80034c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034b0:	f7fd fd3c 	bl	8000f2c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034be:	d901      	bls.n	80034c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e007      	b.n	80034d4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d119      	bne.n	800352a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295
 80034fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003500:	f7fd fd14 	bl	8000f2c <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003506:	e009      	b.n	800351c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003508:	f7fd fd10 	bl	8000f2c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003516:	d901      	bls.n	800351c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e007      	b.n	800352c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003542:	e005      	b.n	8003550 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	3b0a      	subs	r3, #10
 800354e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b09      	cmp	r3, #9
 8003554:	d8f6      	bhi.n	8003544 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	b2da      	uxtb	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4313      	orrs	r3, r2
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4413      	add	r3, r2
 800359e:	b2db      	uxtb	r3, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e049      	b.n	8003652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd fb38 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 f9ee 	bl	80039cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e04f      	b.n	8003714 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a23      	ldr	r2, [pc, #140]	; (8003720 <HAL_TIM_Base_Start_IT+0xc4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369e:	d018      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <HAL_TIM_Base_Start_IT+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_TIM_Base_Start_IT+0xcc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_TIM_Base_Start_IT+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <HAL_TIM_Base_Start_IT+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x76>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a19      	ldr	r2, [pc, #100]	; (8003734 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d115      	bne.n	80036fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_TIM_Base_Start_IT+0xdc>)
 80036da:	4013      	ands	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d015      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0xb4>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ea:	d011      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	e008      	b.n	8003710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e000      	b.n	8003712 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40013400 	.word	0x40013400
 8003730:	40014000 	.word	0x40014000
 8003734:	40015000 	.word	0x40015000
 8003738:	00010007 	.word	0x00010007

0800373c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f905 	bl	800398e <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8f7 	bl	800397a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f908 	bl	80039a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0204 	mvn.w	r2, #4
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8db 	bl	800398e <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8cd 	bl	800397a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8de 	bl	80039a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0208 	mvn.w	r2, #8
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8b1 	bl	800398e <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8a3 	bl	800397a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8b4 	bl	80039a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b10      	cmp	r3, #16
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f887 	bl	800398e <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f879 	bl	800397a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f88a 	bl	80039a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0201 	mvn.w	r2, #1
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd f8ca 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f918 	bl	8003b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d10e      	bne.n	800391a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d107      	bne.n	800391a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f90b 	bl	8003b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b40      	cmp	r3, #64	; 0x40
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f838 	bl	80039b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b20      	cmp	r3, #32
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b20      	cmp	r3, #32
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0220 	mvn.w	r2, #32
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f8cb 	bl	8003b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <TIM_Base_SetConfig+0x11c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d00f      	beq.n	8003a0c <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <TIM_Base_SetConfig+0x120>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00b      	beq.n	8003a0c <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <TIM_Base_SetConfig+0x124>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <TIM_Base_SetConfig+0x128>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <TIM_Base_SetConfig+0x12c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <TIM_Base_SetConfig+0x11c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d01b      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <TIM_Base_SetConfig+0x120>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d017      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2d      	ldr	r2, [pc, #180]	; (8003af0 <TIM_Base_SetConfig+0x124>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <TIM_Base_SetConfig+0x128>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <TIM_Base_SetConfig+0x130>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <TIM_Base_SetConfig+0x134>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <TIM_Base_SetConfig+0x138>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x9a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <TIM_Base_SetConfig+0x12c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <TIM_Base_SetConfig+0x11c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x100>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <TIM_Base_SetConfig+0x128>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x100>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <TIM_Base_SetConfig+0x130>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x100>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <TIM_Base_SetConfig+0x134>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x100>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <TIM_Base_SetConfig+0x138>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x100>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <TIM_Base_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d103      	bne.n	8003ad4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	615a      	str	r2, [r3, #20]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40015000 	.word	0x40015000
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800

08003b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e040      	b.n	8003bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd f894 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8c0 	bl	8003d08 <UART_SetConfig>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e022      	b.n	8003bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa8a 	bl	80040b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb11 	bl	80041f8 <UART_CheckIdleState>
 8003bd6:	4603      	mov	r3, r0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	f040 8082 	bne.w	8003cfe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_UART_Transmit+0x26>
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07a      	b.n	8003d00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x38>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e073      	b.n	8003d00 <HAL_UART_Transmit+0x120>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2221      	movs	r2, #33	; 0x21
 8003c2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2e:	f7fd f97d 	bl	8000f2c <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d108      	bne.n	8003c60 <HAL_UART_Transmit+0x80>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e003      	b.n	8003c68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c70:	e02d      	b.n	8003cce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fb04 	bl	800428a <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e039      	b.n	8003d00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	e008      	b.n	8003cbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cb      	bne.n	8003c72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fad0 	bl	800428a <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e005      	b.n	8003d00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4bab      	ldr	r3, [pc, #684]	; (8003fe0 <UART_SetConfig+0x2d8>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a99      	ldr	r2, [pc, #612]	; (8003fe4 <UART_SetConfig+0x2dc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d120      	bne.n	8003dc6 <UART_SetConfig+0xbe>
 8003d84:	4b98      	ldr	r3, [pc, #608]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d817      	bhi.n	8003dc0 <UART_SetConfig+0xb8>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x90>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dbb 	.word	0x08003dbb
 8003da4:	08003daf 	.word	0x08003daf
 8003da8:	2301      	movs	r3, #1
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e0b5      	b.n	8003f1a <UART_SetConfig+0x212>
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e0b2      	b.n	8003f1a <UART_SetConfig+0x212>
 8003db4:	2304      	movs	r3, #4
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e0af      	b.n	8003f1a <UART_SetConfig+0x212>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e0ac      	b.n	8003f1a <UART_SetConfig+0x212>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e0a9      	b.n	8003f1a <UART_SetConfig+0x212>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a88      	ldr	r2, [pc, #544]	; (8003fec <UART_SetConfig+0x2e4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d124      	bne.n	8003e1a <UART_SetConfig+0x112>
 8003dd0:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ddc:	d011      	beq.n	8003e02 <UART_SetConfig+0xfa>
 8003dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003de2:	d817      	bhi.n	8003e14 <UART_SetConfig+0x10c>
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de8:	d011      	beq.n	8003e0e <UART_SetConfig+0x106>
 8003dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dee:	d811      	bhi.n	8003e14 <UART_SetConfig+0x10c>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <UART_SetConfig+0xf4>
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d006      	beq.n	8003e08 <UART_SetConfig+0x100>
 8003dfa:	e00b      	b.n	8003e14 <UART_SetConfig+0x10c>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e08b      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e088      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e085      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e082      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e07f      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d124      	bne.n	8003e6e <UART_SetConfig+0x166>
 8003e24:	4b70      	ldr	r3, [pc, #448]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e30:	d011      	beq.n	8003e56 <UART_SetConfig+0x14e>
 8003e32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e36:	d817      	bhi.n	8003e68 <UART_SetConfig+0x160>
 8003e38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e3c:	d011      	beq.n	8003e62 <UART_SetConfig+0x15a>
 8003e3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e42:	d811      	bhi.n	8003e68 <UART_SetConfig+0x160>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <UART_SetConfig+0x148>
 8003e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e4c:	d006      	beq.n	8003e5c <UART_SetConfig+0x154>
 8003e4e:	e00b      	b.n	8003e68 <UART_SetConfig+0x160>
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e061      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e56:	2302      	movs	r3, #2
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e05e      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e05b      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e62:	2308      	movs	r3, #8
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e058      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e055      	b.n	8003f1a <UART_SetConfig+0x212>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a60      	ldr	r2, [pc, #384]	; (8003ff4 <UART_SetConfig+0x2ec>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d124      	bne.n	8003ec2 <UART_SetConfig+0x1ba>
 8003e78:	4b5b      	ldr	r3, [pc, #364]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e84:	d011      	beq.n	8003eaa <UART_SetConfig+0x1a2>
 8003e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e8a:	d817      	bhi.n	8003ebc <UART_SetConfig+0x1b4>
 8003e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e90:	d011      	beq.n	8003eb6 <UART_SetConfig+0x1ae>
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e96:	d811      	bhi.n	8003ebc <UART_SetConfig+0x1b4>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <UART_SetConfig+0x19c>
 8003e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea0:	d006      	beq.n	8003eb0 <UART_SetConfig+0x1a8>
 8003ea2:	e00b      	b.n	8003ebc <UART_SetConfig+0x1b4>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e037      	b.n	8003f1a <UART_SetConfig+0x212>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e034      	b.n	8003f1a <UART_SetConfig+0x212>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e031      	b.n	8003f1a <UART_SetConfig+0x212>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e02e      	b.n	8003f1a <UART_SetConfig+0x212>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e02b      	b.n	8003f1a <UART_SetConfig+0x212>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <UART_SetConfig+0x2f0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d124      	bne.n	8003f16 <UART_SetConfig+0x20e>
 8003ecc:	4b46      	ldr	r3, [pc, #280]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed8:	d011      	beq.n	8003efe <UART_SetConfig+0x1f6>
 8003eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ede:	d817      	bhi.n	8003f10 <UART_SetConfig+0x208>
 8003ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ee4:	d011      	beq.n	8003f0a <UART_SetConfig+0x202>
 8003ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eea:	d811      	bhi.n	8003f10 <UART_SetConfig+0x208>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <UART_SetConfig+0x1f0>
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d006      	beq.n	8003f04 <UART_SetConfig+0x1fc>
 8003ef6:	e00b      	b.n	8003f10 <UART_SetConfig+0x208>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x212>
 8003efe:	2302      	movs	r3, #2
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e00a      	b.n	8003f1a <UART_SetConfig+0x212>
 8003f04:	2304      	movs	r3, #4
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e007      	b.n	8003f1a <UART_SetConfig+0x212>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e004      	b.n	8003f1a <UART_SetConfig+0x212>
 8003f10:	2310      	movs	r3, #16
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e001      	b.n	8003f1a <UART_SetConfig+0x212>
 8003f16:	2310      	movs	r3, #16
 8003f18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f22:	d16d      	bne.n	8004000 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d827      	bhi.n	8003f7a <UART_SetConfig+0x272>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x228>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe fc18 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8003f58:	61b8      	str	r0, [r7, #24]
        break;
 8003f5a:	e013      	b.n	8003f84 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe fc36 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <UART_SetConfig+0x2f4>)
 8003f66:	61bb      	str	r3, [r7, #24]
        break;
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fb97 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8003f6e:	61b8      	str	r0, [r7, #24]
        break;
 8003f70:	e008      	b.n	8003f84 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	61bb      	str	r3, [r7, #24]
        break;
 8003f78:	e004      	b.n	8003f84 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77bb      	strb	r3, [r7, #30]
        break;
 8003f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8086 	beq.w	8004098 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	005a      	lsls	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	441a      	add	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d916      	bls.n	8003fd8 <UART_SetConfig+0x2d0>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d212      	bcs.n	8003fd8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	89fa      	ldrh	r2, [r7, #14]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	e05f      	b.n	8004098 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77bb      	strb	r3, [r7, #30]
 8003fdc:	e05c      	b.n	8004098 <UART_SetConfig+0x390>
 8003fde:	bf00      	nop
 8003fe0:	efff69f3 	.word	0xefff69f3
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40004400 	.word	0x40004400
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	40004c00 	.word	0x40004c00
 8003ff8:	40005000 	.word	0x40005000
 8003ffc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004000:	7ffb      	ldrb	r3, [r7, #31]
 8004002:	2b08      	cmp	r3, #8
 8004004:	d827      	bhi.n	8004056 <UART_SetConfig+0x34e>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <UART_SetConfig+0x304>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004031 	.word	0x08004031
 8004010:	08004039 	.word	0x08004039
 8004014:	08004041 	.word	0x08004041
 8004018:	08004057 	.word	0x08004057
 800401c:	08004047 	.word	0x08004047
 8004020:	08004057 	.word	0x08004057
 8004024:	08004057 	.word	0x08004057
 8004028:	08004057 	.word	0x08004057
 800402c:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7fe fbaa 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004034:	61b8      	str	r0, [r7, #24]
        break;
 8004036:	e013      	b.n	8004060 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7fe fbc8 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 800403c:	61b8      	str	r0, [r7, #24]
        break;
 800403e:	e00f      	b.n	8004060 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <UART_SetConfig+0x3a8>)
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e00c      	b.n	8004060 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe fb29 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800404a:	61b8      	str	r0, [r7, #24]
        break;
 800404c:	e008      	b.n	8004060 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	61bb      	str	r3, [r7, #24]
        break;
 8004054:	e004      	b.n	8004060 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	77bb      	strb	r3, [r7, #30]
        break;
 800405e:	bf00      	nop
    }

    if (pclk != 0U)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	085a      	lsrs	r2, r3, #1
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	b29b      	uxth	r3, r3
 800407a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	d908      	bls.n	8004094 <UART_SetConfig+0x38c>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d204      	bcs.n	8004094 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e001      	b.n	8004098 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d10a      	bne.n	80041ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004208:	f7fc fe90 	bl	8000f2c <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10e      	bne.n	800423a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f82d 	bl	800428a <UART_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e023      	b.n	8004282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d10e      	bne.n	8004266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f817 	bl	800428a <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00d      	b.n	8004282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	e05e      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d05a      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fc fe42 	bl	8000f2c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <UART_WaitOnFlagUntilTimeout+0x30>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11b      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e043      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02c      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430e:	d124      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004318:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004328:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d091      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000000c 	.word	0x2000000c

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4d0d      	ldr	r5, [pc, #52]	; (80043c8 <__libc_init_array+0x38>)
 8004394:	4c0d      	ldr	r4, [pc, #52]	; (80043cc <__libc_init_array+0x3c>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	2600      	movs	r6, #0
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	4d0b      	ldr	r5, [pc, #44]	; (80043d0 <__libc_init_array+0x40>)
 80043a2:	4c0c      	ldr	r4, [pc, #48]	; (80043d4 <__libc_init_array+0x44>)
 80043a4:	f000 fc4e 	bl	8004c44 <_init>
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	2600      	movs	r6, #0
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08004ec4 	.word	0x08004ec4
 80043cc:	08004ec4 	.word	0x08004ec4
 80043d0:	08004ec4 	.word	0x08004ec4
 80043d4:	08004ec8 	.word	0x08004ec8

080043d8 <memset>:
 80043d8:	4402      	add	r2, r0
 80043da:	4603      	mov	r3, r0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	f803 1b01 	strb.w	r1, [r3], #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <siprintf>:
 80043e8:	b40e      	push	{r1, r2, r3}
 80043ea:	b500      	push	{lr}
 80043ec:	b09c      	sub	sp, #112	; 0x70
 80043ee:	ab1d      	add	r3, sp, #116	; 0x74
 80043f0:	9002      	str	r0, [sp, #8]
 80043f2:	9006      	str	r0, [sp, #24]
 80043f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043f8:	4809      	ldr	r0, [pc, #36]	; (8004420 <siprintf+0x38>)
 80043fa:	9107      	str	r1, [sp, #28]
 80043fc:	9104      	str	r1, [sp, #16]
 80043fe:	4909      	ldr	r1, [pc, #36]	; (8004424 <siprintf+0x3c>)
 8004400:	f853 2b04 	ldr.w	r2, [r3], #4
 8004404:	9105      	str	r1, [sp, #20]
 8004406:	6800      	ldr	r0, [r0, #0]
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	a902      	add	r1, sp, #8
 800440c:	f000 f868 	bl	80044e0 <_svfiprintf_r>
 8004410:	9b02      	ldr	r3, [sp, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	b01c      	add	sp, #112	; 0x70
 8004418:	f85d eb04 	ldr.w	lr, [sp], #4
 800441c:	b003      	add	sp, #12
 800441e:	4770      	bx	lr
 8004420:	2000000c 	.word	0x2000000c
 8004424:	ffff0208 	.word	0xffff0208

08004428 <__ssputs_r>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	688e      	ldr	r6, [r1, #8]
 800442e:	429e      	cmp	r6, r3
 8004430:	4682      	mov	sl, r0
 8004432:	460c      	mov	r4, r1
 8004434:	4690      	mov	r8, r2
 8004436:	461f      	mov	r7, r3
 8004438:	d838      	bhi.n	80044ac <__ssputs_r+0x84>
 800443a:	898a      	ldrh	r2, [r1, #12]
 800443c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004440:	d032      	beq.n	80044a8 <__ssputs_r+0x80>
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	6909      	ldr	r1, [r1, #16]
 8004446:	eba5 0901 	sub.w	r9, r5, r1
 800444a:	6965      	ldr	r5, [r4, #20]
 800444c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004454:	3301      	adds	r3, #1
 8004456:	444b      	add	r3, r9
 8004458:	106d      	asrs	r5, r5, #1
 800445a:	429d      	cmp	r5, r3
 800445c:	bf38      	it	cc
 800445e:	461d      	movcc	r5, r3
 8004460:	0553      	lsls	r3, r2, #21
 8004462:	d531      	bpl.n	80044c8 <__ssputs_r+0xa0>
 8004464:	4629      	mov	r1, r5
 8004466:	f000 fb47 	bl	8004af8 <_malloc_r>
 800446a:	4606      	mov	r6, r0
 800446c:	b950      	cbnz	r0, 8004484 <__ssputs_r+0x5c>
 800446e:	230c      	movs	r3, #12
 8004470:	f8ca 3000 	str.w	r3, [sl]
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	6921      	ldr	r1, [r4, #16]
 8004486:	464a      	mov	r2, r9
 8004488:	f000 fabe 	bl	8004a08 <memcpy>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	6126      	str	r6, [r4, #16]
 800449a:	6165      	str	r5, [r4, #20]
 800449c:	444e      	add	r6, r9
 800449e:	eba5 0509 	sub.w	r5, r5, r9
 80044a2:	6026      	str	r6, [r4, #0]
 80044a4:	60a5      	str	r5, [r4, #8]
 80044a6:	463e      	mov	r6, r7
 80044a8:	42be      	cmp	r6, r7
 80044aa:	d900      	bls.n	80044ae <__ssputs_r+0x86>
 80044ac:	463e      	mov	r6, r7
 80044ae:	4632      	mov	r2, r6
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	4641      	mov	r1, r8
 80044b4:	f000 fab6 	bl	8004a24 <memmove>
 80044b8:	68a3      	ldr	r3, [r4, #8]
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	1b9b      	subs	r3, r3, r6
 80044be:	4432      	add	r2, r6
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	6022      	str	r2, [r4, #0]
 80044c4:	2000      	movs	r0, #0
 80044c6:	e7db      	b.n	8004480 <__ssputs_r+0x58>
 80044c8:	462a      	mov	r2, r5
 80044ca:	f000 fb6f 	bl	8004bac <_realloc_r>
 80044ce:	4606      	mov	r6, r0
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1e1      	bne.n	8004498 <__ssputs_r+0x70>
 80044d4:	6921      	ldr	r1, [r4, #16]
 80044d6:	4650      	mov	r0, sl
 80044d8:	f000 fabe 	bl	8004a58 <_free_r>
 80044dc:	e7c7      	b.n	800446e <__ssputs_r+0x46>
	...

080044e0 <_svfiprintf_r>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	4698      	mov	r8, r3
 80044e6:	898b      	ldrh	r3, [r1, #12]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	b09d      	sub	sp, #116	; 0x74
 80044ec:	4607      	mov	r7, r0
 80044ee:	460d      	mov	r5, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	d50e      	bpl.n	8004512 <_svfiprintf_r+0x32>
 80044f4:	690b      	ldr	r3, [r1, #16]
 80044f6:	b963      	cbnz	r3, 8004512 <_svfiprintf_r+0x32>
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	f000 fafd 	bl	8004af8 <_malloc_r>
 80044fe:	6028      	str	r0, [r5, #0]
 8004500:	6128      	str	r0, [r5, #16]
 8004502:	b920      	cbnz	r0, 800450e <_svfiprintf_r+0x2e>
 8004504:	230c      	movs	r3, #12
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e0d1      	b.n	80046b2 <_svfiprintf_r+0x1d2>
 800450e:	2340      	movs	r3, #64	; 0x40
 8004510:	616b      	str	r3, [r5, #20]
 8004512:	2300      	movs	r3, #0
 8004514:	9309      	str	r3, [sp, #36]	; 0x24
 8004516:	2320      	movs	r3, #32
 8004518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800451c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004520:	2330      	movs	r3, #48	; 0x30
 8004522:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046cc <_svfiprintf_r+0x1ec>
 8004526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800452a:	f04f 0901 	mov.w	r9, #1
 800452e:	4623      	mov	r3, r4
 8004530:	469a      	mov	sl, r3
 8004532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004536:	b10a      	cbz	r2, 800453c <_svfiprintf_r+0x5c>
 8004538:	2a25      	cmp	r2, #37	; 0x25
 800453a:	d1f9      	bne.n	8004530 <_svfiprintf_r+0x50>
 800453c:	ebba 0b04 	subs.w	fp, sl, r4
 8004540:	d00b      	beq.n	800455a <_svfiprintf_r+0x7a>
 8004542:	465b      	mov	r3, fp
 8004544:	4622      	mov	r2, r4
 8004546:	4629      	mov	r1, r5
 8004548:	4638      	mov	r0, r7
 800454a:	f7ff ff6d 	bl	8004428 <__ssputs_r>
 800454e:	3001      	adds	r0, #1
 8004550:	f000 80aa 	beq.w	80046a8 <_svfiprintf_r+0x1c8>
 8004554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004556:	445a      	add	r2, fp
 8004558:	9209      	str	r2, [sp, #36]	; 0x24
 800455a:	f89a 3000 	ldrb.w	r3, [sl]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80a2 	beq.w	80046a8 <_svfiprintf_r+0x1c8>
 8004564:	2300      	movs	r3, #0
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800456e:	f10a 0a01 	add.w	sl, sl, #1
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	9307      	str	r3, [sp, #28]
 8004576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800457a:	931a      	str	r3, [sp, #104]	; 0x68
 800457c:	4654      	mov	r4, sl
 800457e:	2205      	movs	r2, #5
 8004580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004584:	4851      	ldr	r0, [pc, #324]	; (80046cc <_svfiprintf_r+0x1ec>)
 8004586:	f7fb fe33 	bl	80001f0 <memchr>
 800458a:	9a04      	ldr	r2, [sp, #16]
 800458c:	b9d8      	cbnz	r0, 80045c6 <_svfiprintf_r+0xe6>
 800458e:	06d0      	lsls	r0, r2, #27
 8004590:	bf44      	itt	mi
 8004592:	2320      	movmi	r3, #32
 8004594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004598:	0711      	lsls	r1, r2, #28
 800459a:	bf44      	itt	mi
 800459c:	232b      	movmi	r3, #43	; 0x2b
 800459e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a2:	f89a 3000 	ldrb.w	r3, [sl]
 80045a6:	2b2a      	cmp	r3, #42	; 0x2a
 80045a8:	d015      	beq.n	80045d6 <_svfiprintf_r+0xf6>
 80045aa:	9a07      	ldr	r2, [sp, #28]
 80045ac:	4654      	mov	r4, sl
 80045ae:	2000      	movs	r0, #0
 80045b0:	f04f 0c0a 	mov.w	ip, #10
 80045b4:	4621      	mov	r1, r4
 80045b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ba:	3b30      	subs	r3, #48	; 0x30
 80045bc:	2b09      	cmp	r3, #9
 80045be:	d94e      	bls.n	800465e <_svfiprintf_r+0x17e>
 80045c0:	b1b0      	cbz	r0, 80045f0 <_svfiprintf_r+0x110>
 80045c2:	9207      	str	r2, [sp, #28]
 80045c4:	e014      	b.n	80045f0 <_svfiprintf_r+0x110>
 80045c6:	eba0 0308 	sub.w	r3, r0, r8
 80045ca:	fa09 f303 	lsl.w	r3, r9, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	46a2      	mov	sl, r4
 80045d4:	e7d2      	b.n	800457c <_svfiprintf_r+0x9c>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	1d19      	adds	r1, r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	9103      	str	r1, [sp, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfbb      	ittet	lt
 80045e2:	425b      	neglt	r3, r3
 80045e4:	f042 0202 	orrlt.w	r2, r2, #2
 80045e8:	9307      	strge	r3, [sp, #28]
 80045ea:	9307      	strlt	r3, [sp, #28]
 80045ec:	bfb8      	it	lt
 80045ee:	9204      	strlt	r2, [sp, #16]
 80045f0:	7823      	ldrb	r3, [r4, #0]
 80045f2:	2b2e      	cmp	r3, #46	; 0x2e
 80045f4:	d10c      	bne.n	8004610 <_svfiprintf_r+0x130>
 80045f6:	7863      	ldrb	r3, [r4, #1]
 80045f8:	2b2a      	cmp	r3, #42	; 0x2a
 80045fa:	d135      	bne.n	8004668 <_svfiprintf_r+0x188>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	9203      	str	r2, [sp, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	bfb8      	it	lt
 8004608:	f04f 33ff 	movlt.w	r3, #4294967295
 800460c:	3402      	adds	r4, #2
 800460e:	9305      	str	r3, [sp, #20]
 8004610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046dc <_svfiprintf_r+0x1fc>
 8004614:	7821      	ldrb	r1, [r4, #0]
 8004616:	2203      	movs	r2, #3
 8004618:	4650      	mov	r0, sl
 800461a:	f7fb fde9 	bl	80001f0 <memchr>
 800461e:	b140      	cbz	r0, 8004632 <_svfiprintf_r+0x152>
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	eba0 000a 	sub.w	r0, r0, sl
 8004626:	fa03 f000 	lsl.w	r0, r3, r0
 800462a:	9b04      	ldr	r3, [sp, #16]
 800462c:	4303      	orrs	r3, r0
 800462e:	3401      	adds	r4, #1
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004636:	4826      	ldr	r0, [pc, #152]	; (80046d0 <_svfiprintf_r+0x1f0>)
 8004638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800463c:	2206      	movs	r2, #6
 800463e:	f7fb fdd7 	bl	80001f0 <memchr>
 8004642:	2800      	cmp	r0, #0
 8004644:	d038      	beq.n	80046b8 <_svfiprintf_r+0x1d8>
 8004646:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <_svfiprintf_r+0x1f4>)
 8004648:	bb1b      	cbnz	r3, 8004692 <_svfiprintf_r+0x1b2>
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	3307      	adds	r3, #7
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	3308      	adds	r3, #8
 8004654:	9303      	str	r3, [sp, #12]
 8004656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004658:	4433      	add	r3, r6
 800465a:	9309      	str	r3, [sp, #36]	; 0x24
 800465c:	e767      	b.n	800452e <_svfiprintf_r+0x4e>
 800465e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004662:	460c      	mov	r4, r1
 8004664:	2001      	movs	r0, #1
 8004666:	e7a5      	b.n	80045b4 <_svfiprintf_r+0xd4>
 8004668:	2300      	movs	r3, #0
 800466a:	3401      	adds	r4, #1
 800466c:	9305      	str	r3, [sp, #20]
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 0c0a 	mov.w	ip, #10
 8004674:	4620      	mov	r0, r4
 8004676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467a:	3a30      	subs	r2, #48	; 0x30
 800467c:	2a09      	cmp	r2, #9
 800467e:	d903      	bls.n	8004688 <_svfiprintf_r+0x1a8>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0c5      	beq.n	8004610 <_svfiprintf_r+0x130>
 8004684:	9105      	str	r1, [sp, #20]
 8004686:	e7c3      	b.n	8004610 <_svfiprintf_r+0x130>
 8004688:	fb0c 2101 	mla	r1, ip, r1, r2
 800468c:	4604      	mov	r4, r0
 800468e:	2301      	movs	r3, #1
 8004690:	e7f0      	b.n	8004674 <_svfiprintf_r+0x194>
 8004692:	ab03      	add	r3, sp, #12
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	462a      	mov	r2, r5
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <_svfiprintf_r+0x1f8>)
 800469a:	a904      	add	r1, sp, #16
 800469c:	4638      	mov	r0, r7
 800469e:	f3af 8000 	nop.w
 80046a2:	1c42      	adds	r2, r0, #1
 80046a4:	4606      	mov	r6, r0
 80046a6:	d1d6      	bne.n	8004656 <_svfiprintf_r+0x176>
 80046a8:	89ab      	ldrh	r3, [r5, #12]
 80046aa:	065b      	lsls	r3, r3, #25
 80046ac:	f53f af2c 	bmi.w	8004508 <_svfiprintf_r+0x28>
 80046b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046b2:	b01d      	add	sp, #116	; 0x74
 80046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b8:	ab03      	add	r3, sp, #12
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	462a      	mov	r2, r5
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <_svfiprintf_r+0x1f8>)
 80046c0:	a904      	add	r1, sp, #16
 80046c2:	4638      	mov	r0, r7
 80046c4:	f000 f87a 	bl	80047bc <_printf_i>
 80046c8:	e7eb      	b.n	80046a2 <_svfiprintf_r+0x1c2>
 80046ca:	bf00      	nop
 80046cc:	08004e90 	.word	0x08004e90
 80046d0:	08004e9a 	.word	0x08004e9a
 80046d4:	00000000 	.word	0x00000000
 80046d8:	08004429 	.word	0x08004429
 80046dc:	08004e96 	.word	0x08004e96

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4616      	mov	r6, r2
 80046e6:	4699      	mov	r9, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bfb8      	it	lt
 80046f4:	4613      	movlt	r3, r2
 80046f6:	6033      	str	r3, [r6, #0]
 80046f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046fc:	4607      	mov	r7, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b10a      	cbz	r2, 8004706 <_printf_common+0x26>
 8004702:	3301      	adds	r3, #1
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	6833      	ldrmi	r3, [r6, #0]
 800470e:	3302      	addmi	r3, #2
 8004710:	6033      	strmi	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f015 0506 	ands.w	r5, r5, #6
 8004718:	d106      	bne.n	8004728 <_printf_common+0x48>
 800471a:	f104 0a19 	add.w	sl, r4, #25
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	42ab      	cmp	r3, r5
 8004726:	dc26      	bgt.n	8004776 <_printf_common+0x96>
 8004728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800472c:	1e13      	subs	r3, r2, #0
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	bf18      	it	ne
 8004732:	2301      	movne	r3, #1
 8004734:	0692      	lsls	r2, r2, #26
 8004736:	d42b      	bmi.n	8004790 <_printf_common+0xb0>
 8004738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800473c:	4649      	mov	r1, r9
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d01e      	beq.n	8004784 <_printf_common+0xa4>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	68e5      	ldr	r5, [r4, #12]
 800474a:	6832      	ldr	r2, [r6, #0]
 800474c:	f003 0306 	and.w	r3, r3, #6
 8004750:	2b04      	cmp	r3, #4
 8004752:	bf08      	it	eq
 8004754:	1aad      	subeq	r5, r5, r2
 8004756:	68a3      	ldr	r3, [r4, #8]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	bf0c      	ite	eq
 800475c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004760:	2500      	movne	r5, #0
 8004762:	4293      	cmp	r3, r2
 8004764:	bfc4      	itt	gt
 8004766:	1a9b      	subgt	r3, r3, r2
 8004768:	18ed      	addgt	r5, r5, r3
 800476a:	2600      	movs	r6, #0
 800476c:	341a      	adds	r4, #26
 800476e:	42b5      	cmp	r5, r6
 8004770:	d11a      	bne.n	80047a8 <_printf_common+0xc8>
 8004772:	2000      	movs	r0, #0
 8004774:	e008      	b.n	8004788 <_printf_common+0xa8>
 8004776:	2301      	movs	r3, #1
 8004778:	4652      	mov	r2, sl
 800477a:	4649      	mov	r1, r9
 800477c:	4638      	mov	r0, r7
 800477e:	47c0      	blx	r8
 8004780:	3001      	adds	r0, #1
 8004782:	d103      	bne.n	800478c <_printf_common+0xac>
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	3501      	adds	r5, #1
 800478e:	e7c6      	b.n	800471e <_printf_common+0x3e>
 8004790:	18e1      	adds	r1, r4, r3
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	2030      	movs	r0, #48	; 0x30
 8004796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800479a:	4422      	add	r2, r4
 800479c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a4:	3302      	adds	r3, #2
 80047a6:	e7c7      	b.n	8004738 <_printf_common+0x58>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4622      	mov	r2, r4
 80047ac:	4649      	mov	r1, r9
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0e6      	beq.n	8004784 <_printf_common+0xa4>
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7d9      	b.n	800476e <_printf_common+0x8e>
	...

080047bc <_printf_i>:
 80047bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	460c      	mov	r4, r1
 80047c2:	4691      	mov	r9, r2
 80047c4:	7e27      	ldrb	r7, [r4, #24]
 80047c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047c8:	2f78      	cmp	r7, #120	; 0x78
 80047ca:	4680      	mov	r8, r0
 80047cc:	469a      	mov	sl, r3
 80047ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d2:	d807      	bhi.n	80047e4 <_printf_i+0x28>
 80047d4:	2f62      	cmp	r7, #98	; 0x62
 80047d6:	d80a      	bhi.n	80047ee <_printf_i+0x32>
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f000 80d8 	beq.w	800498e <_printf_i+0x1d2>
 80047de:	2f58      	cmp	r7, #88	; 0x58
 80047e0:	f000 80a3 	beq.w	800492a <_printf_i+0x16e>
 80047e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047ec:	e03a      	b.n	8004864 <_printf_i+0xa8>
 80047ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047f2:	2b15      	cmp	r3, #21
 80047f4:	d8f6      	bhi.n	80047e4 <_printf_i+0x28>
 80047f6:	a001      	add	r0, pc, #4	; (adr r0, 80047fc <_printf_i+0x40>)
 80047f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004869 	.word	0x08004869
 8004804:	080047e5 	.word	0x080047e5
 8004808:	080047e5 	.word	0x080047e5
 800480c:	080047e5 	.word	0x080047e5
 8004810:	080047e5 	.word	0x080047e5
 8004814:	08004869 	.word	0x08004869
 8004818:	080047e5 	.word	0x080047e5
 800481c:	080047e5 	.word	0x080047e5
 8004820:	080047e5 	.word	0x080047e5
 8004824:	080047e5 	.word	0x080047e5
 8004828:	08004975 	.word	0x08004975
 800482c:	08004899 	.word	0x08004899
 8004830:	08004957 	.word	0x08004957
 8004834:	080047e5 	.word	0x080047e5
 8004838:	080047e5 	.word	0x080047e5
 800483c:	08004997 	.word	0x08004997
 8004840:	080047e5 	.word	0x080047e5
 8004844:	08004899 	.word	0x08004899
 8004848:	080047e5 	.word	0x080047e5
 800484c:	080047e5 	.word	0x080047e5
 8004850:	0800495f 	.word	0x0800495f
 8004854:	680b      	ldr	r3, [r1, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	600a      	str	r2, [r1, #0]
 800485c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004864:	2301      	movs	r3, #1
 8004866:	e0a3      	b.n	80049b0 <_printf_i+0x1f4>
 8004868:	6825      	ldr	r5, [r4, #0]
 800486a:	6808      	ldr	r0, [r1, #0]
 800486c:	062e      	lsls	r6, r5, #24
 800486e:	f100 0304 	add.w	r3, r0, #4
 8004872:	d50a      	bpl.n	800488a <_printf_i+0xce>
 8004874:	6805      	ldr	r5, [r0, #0]
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	2d00      	cmp	r5, #0
 800487a:	da03      	bge.n	8004884 <_printf_i+0xc8>
 800487c:	232d      	movs	r3, #45	; 0x2d
 800487e:	426d      	negs	r5, r5
 8004880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004884:	485e      	ldr	r0, [pc, #376]	; (8004a00 <_printf_i+0x244>)
 8004886:	230a      	movs	r3, #10
 8004888:	e019      	b.n	80048be <_printf_i+0x102>
 800488a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800488e:	6805      	ldr	r5, [r0, #0]
 8004890:	600b      	str	r3, [r1, #0]
 8004892:	bf18      	it	ne
 8004894:	b22d      	sxthne	r5, r5
 8004896:	e7ef      	b.n	8004878 <_printf_i+0xbc>
 8004898:	680b      	ldr	r3, [r1, #0]
 800489a:	6825      	ldr	r5, [r4, #0]
 800489c:	1d18      	adds	r0, r3, #4
 800489e:	6008      	str	r0, [r1, #0]
 80048a0:	0628      	lsls	r0, r5, #24
 80048a2:	d501      	bpl.n	80048a8 <_printf_i+0xec>
 80048a4:	681d      	ldr	r5, [r3, #0]
 80048a6:	e002      	b.n	80048ae <_printf_i+0xf2>
 80048a8:	0669      	lsls	r1, r5, #25
 80048aa:	d5fb      	bpl.n	80048a4 <_printf_i+0xe8>
 80048ac:	881d      	ldrh	r5, [r3, #0]
 80048ae:	4854      	ldr	r0, [pc, #336]	; (8004a00 <_printf_i+0x244>)
 80048b0:	2f6f      	cmp	r7, #111	; 0x6f
 80048b2:	bf0c      	ite	eq
 80048b4:	2308      	moveq	r3, #8
 80048b6:	230a      	movne	r3, #10
 80048b8:	2100      	movs	r1, #0
 80048ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048be:	6866      	ldr	r6, [r4, #4]
 80048c0:	60a6      	str	r6, [r4, #8]
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	bfa2      	ittt	ge
 80048c6:	6821      	ldrge	r1, [r4, #0]
 80048c8:	f021 0104 	bicge.w	r1, r1, #4
 80048cc:	6021      	strge	r1, [r4, #0]
 80048ce:	b90d      	cbnz	r5, 80048d4 <_printf_i+0x118>
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	d04d      	beq.n	8004970 <_printf_i+0x1b4>
 80048d4:	4616      	mov	r6, r2
 80048d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80048da:	fb03 5711 	mls	r7, r3, r1, r5
 80048de:	5dc7      	ldrb	r7, [r0, r7]
 80048e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048e4:	462f      	mov	r7, r5
 80048e6:	42bb      	cmp	r3, r7
 80048e8:	460d      	mov	r5, r1
 80048ea:	d9f4      	bls.n	80048d6 <_printf_i+0x11a>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d10b      	bne.n	8004908 <_printf_i+0x14c>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07df      	lsls	r7, r3, #31
 80048f4:	d508      	bpl.n	8004908 <_printf_i+0x14c>
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	6861      	ldr	r1, [r4, #4]
 80048fa:	4299      	cmp	r1, r3
 80048fc:	bfde      	ittt	le
 80048fe:	2330      	movle	r3, #48	; 0x30
 8004900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004908:	1b92      	subs	r2, r2, r6
 800490a:	6122      	str	r2, [r4, #16]
 800490c:	f8cd a000 	str.w	sl, [sp]
 8004910:	464b      	mov	r3, r9
 8004912:	aa03      	add	r2, sp, #12
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fee2 	bl	80046e0 <_printf_common>
 800491c:	3001      	adds	r0, #1
 800491e:	d14c      	bne.n	80049ba <_printf_i+0x1fe>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b004      	add	sp, #16
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	4835      	ldr	r0, [pc, #212]	; (8004a00 <_printf_i+0x244>)
 800492c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	680e      	ldr	r6, [r1, #0]
 8004934:	061f      	lsls	r7, r3, #24
 8004936:	f856 5b04 	ldr.w	r5, [r6], #4
 800493a:	600e      	str	r6, [r1, #0]
 800493c:	d514      	bpl.n	8004968 <_printf_i+0x1ac>
 800493e:	07d9      	lsls	r1, r3, #31
 8004940:	bf44      	itt	mi
 8004942:	f043 0320 	orrmi.w	r3, r3, #32
 8004946:	6023      	strmi	r3, [r4, #0]
 8004948:	b91d      	cbnz	r5, 8004952 <_printf_i+0x196>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	f023 0320 	bic.w	r3, r3, #32
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	2310      	movs	r3, #16
 8004954:	e7b0      	b.n	80048b8 <_printf_i+0xfc>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f043 0320 	orr.w	r3, r3, #32
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	2378      	movs	r3, #120	; 0x78
 8004960:	4828      	ldr	r0, [pc, #160]	; (8004a04 <_printf_i+0x248>)
 8004962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004966:	e7e3      	b.n	8004930 <_printf_i+0x174>
 8004968:	065e      	lsls	r6, r3, #25
 800496a:	bf48      	it	mi
 800496c:	b2ad      	uxthmi	r5, r5
 800496e:	e7e6      	b.n	800493e <_printf_i+0x182>
 8004970:	4616      	mov	r6, r2
 8004972:	e7bb      	b.n	80048ec <_printf_i+0x130>
 8004974:	680b      	ldr	r3, [r1, #0]
 8004976:	6826      	ldr	r6, [r4, #0]
 8004978:	6960      	ldr	r0, [r4, #20]
 800497a:	1d1d      	adds	r5, r3, #4
 800497c:	600d      	str	r5, [r1, #0]
 800497e:	0635      	lsls	r5, r6, #24
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	d501      	bpl.n	8004988 <_printf_i+0x1cc>
 8004984:	6018      	str	r0, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0x1d2>
 8004988:	0671      	lsls	r1, r6, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0x1c8>
 800498c:	8018      	strh	r0, [r3, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	4616      	mov	r6, r2
 8004994:	e7ba      	b.n	800490c <_printf_i+0x150>
 8004996:	680b      	ldr	r3, [r1, #0]
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	600a      	str	r2, [r1, #0]
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	2100      	movs	r1, #0
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7fb fc24 	bl	80001f0 <memchr>
 80049a8:	b108      	cbz	r0, 80049ae <_printf_i+0x1f2>
 80049aa:	1b80      	subs	r0, r0, r6
 80049ac:	6060      	str	r0, [r4, #4]
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	2300      	movs	r3, #0
 80049b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b8:	e7a8      	b.n	800490c <_printf_i+0x150>
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	4632      	mov	r2, r6
 80049be:	4649      	mov	r1, r9
 80049c0:	4640      	mov	r0, r8
 80049c2:	47d0      	blx	sl
 80049c4:	3001      	adds	r0, #1
 80049c6:	d0ab      	beq.n	8004920 <_printf_i+0x164>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	079b      	lsls	r3, r3, #30
 80049cc:	d413      	bmi.n	80049f6 <_printf_i+0x23a>
 80049ce:	68e0      	ldr	r0, [r4, #12]
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	4298      	cmp	r0, r3
 80049d4:	bfb8      	it	lt
 80049d6:	4618      	movlt	r0, r3
 80049d8:	e7a4      	b.n	8004924 <_printf_i+0x168>
 80049da:	2301      	movs	r3, #1
 80049dc:	4632      	mov	r2, r6
 80049de:	4649      	mov	r1, r9
 80049e0:	4640      	mov	r0, r8
 80049e2:	47d0      	blx	sl
 80049e4:	3001      	adds	r0, #1
 80049e6:	d09b      	beq.n	8004920 <_printf_i+0x164>
 80049e8:	3501      	adds	r5, #1
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	9903      	ldr	r1, [sp, #12]
 80049ee:	1a5b      	subs	r3, r3, r1
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dcf2      	bgt.n	80049da <_printf_i+0x21e>
 80049f4:	e7eb      	b.n	80049ce <_printf_i+0x212>
 80049f6:	2500      	movs	r5, #0
 80049f8:	f104 0619 	add.w	r6, r4, #25
 80049fc:	e7f5      	b.n	80049ea <_printf_i+0x22e>
 80049fe:	bf00      	nop
 8004a00:	08004ea1 	.word	0x08004ea1
 8004a04:	08004eb2 	.word	0x08004eb2

08004a08 <memcpy>:
 8004a08:	440a      	add	r2, r1
 8004a0a:	4291      	cmp	r1, r2
 8004a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a10:	d100      	bne.n	8004a14 <memcpy+0xc>
 8004a12:	4770      	bx	lr
 8004a14:	b510      	push	{r4, lr}
 8004a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1e:	4291      	cmp	r1, r2
 8004a20:	d1f9      	bne.n	8004a16 <memcpy+0xe>
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <memmove>:
 8004a24:	4288      	cmp	r0, r1
 8004a26:	b510      	push	{r4, lr}
 8004a28:	eb01 0402 	add.w	r4, r1, r2
 8004a2c:	d902      	bls.n	8004a34 <memmove+0x10>
 8004a2e:	4284      	cmp	r4, r0
 8004a30:	4623      	mov	r3, r4
 8004a32:	d807      	bhi.n	8004a44 <memmove+0x20>
 8004a34:	1e43      	subs	r3, r0, #1
 8004a36:	42a1      	cmp	r1, r4
 8004a38:	d008      	beq.n	8004a4c <memmove+0x28>
 8004a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a42:	e7f8      	b.n	8004a36 <memmove+0x12>
 8004a44:	4402      	add	r2, r0
 8004a46:	4601      	mov	r1, r0
 8004a48:	428a      	cmp	r2, r1
 8004a4a:	d100      	bne.n	8004a4e <memmove+0x2a>
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a56:	e7f7      	b.n	8004a48 <memmove+0x24>

08004a58 <_free_r>:
 8004a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d048      	beq.n	8004af0 <_free_r+0x98>
 8004a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a62:	9001      	str	r0, [sp, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f1a1 0404 	sub.w	r4, r1, #4
 8004a6a:	bfb8      	it	lt
 8004a6c:	18e4      	addlt	r4, r4, r3
 8004a6e:	f000 f8d3 	bl	8004c18 <__malloc_lock>
 8004a72:	4a20      	ldr	r2, [pc, #128]	; (8004af4 <_free_r+0x9c>)
 8004a74:	9801      	ldr	r0, [sp, #4]
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	4615      	mov	r5, r2
 8004a7a:	b933      	cbnz	r3, 8004a8a <_free_r+0x32>
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	6014      	str	r4, [r2, #0]
 8004a80:	b003      	add	sp, #12
 8004a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a86:	f000 b8cd 	b.w	8004c24 <__malloc_unlock>
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	d90b      	bls.n	8004aa6 <_free_r+0x4e>
 8004a8e:	6821      	ldr	r1, [r4, #0]
 8004a90:	1862      	adds	r2, r4, r1
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bf04      	itt	eq
 8004a96:	681a      	ldreq	r2, [r3, #0]
 8004a98:	685b      	ldreq	r3, [r3, #4]
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	bf04      	itt	eq
 8004a9e:	1852      	addeq	r2, r2, r1
 8004aa0:	6022      	streq	r2, [r4, #0]
 8004aa2:	602c      	str	r4, [r5, #0]
 8004aa4:	e7ec      	b.n	8004a80 <_free_r+0x28>
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b10b      	cbz	r3, 8004ab0 <_free_r+0x58>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d9fa      	bls.n	8004aa6 <_free_r+0x4e>
 8004ab0:	6811      	ldr	r1, [r2, #0]
 8004ab2:	1855      	adds	r5, r2, r1
 8004ab4:	42a5      	cmp	r5, r4
 8004ab6:	d10b      	bne.n	8004ad0 <_free_r+0x78>
 8004ab8:	6824      	ldr	r4, [r4, #0]
 8004aba:	4421      	add	r1, r4
 8004abc:	1854      	adds	r4, r2, r1
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	6011      	str	r1, [r2, #0]
 8004ac2:	d1dd      	bne.n	8004a80 <_free_r+0x28>
 8004ac4:	681c      	ldr	r4, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	6053      	str	r3, [r2, #4]
 8004aca:	4421      	add	r1, r4
 8004acc:	6011      	str	r1, [r2, #0]
 8004ace:	e7d7      	b.n	8004a80 <_free_r+0x28>
 8004ad0:	d902      	bls.n	8004ad8 <_free_r+0x80>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	6003      	str	r3, [r0, #0]
 8004ad6:	e7d3      	b.n	8004a80 <_free_r+0x28>
 8004ad8:	6825      	ldr	r5, [r4, #0]
 8004ada:	1961      	adds	r1, r4, r5
 8004adc:	428b      	cmp	r3, r1
 8004ade:	bf04      	itt	eq
 8004ae0:	6819      	ldreq	r1, [r3, #0]
 8004ae2:	685b      	ldreq	r3, [r3, #4]
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	bf04      	itt	eq
 8004ae8:	1949      	addeq	r1, r1, r5
 8004aea:	6021      	streq	r1, [r4, #0]
 8004aec:	6054      	str	r4, [r2, #4]
 8004aee:	e7c7      	b.n	8004a80 <_free_r+0x28>
 8004af0:	b003      	add	sp, #12
 8004af2:	bd30      	pop	{r4, r5, pc}
 8004af4:	20000094 	.word	0x20000094

08004af8 <_malloc_r>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	1ccd      	adds	r5, r1, #3
 8004afc:	f025 0503 	bic.w	r5, r5, #3
 8004b00:	3508      	adds	r5, #8
 8004b02:	2d0c      	cmp	r5, #12
 8004b04:	bf38      	it	cc
 8004b06:	250c      	movcc	r5, #12
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	db01      	blt.n	8004b12 <_malloc_r+0x1a>
 8004b0e:	42a9      	cmp	r1, r5
 8004b10:	d903      	bls.n	8004b1a <_malloc_r+0x22>
 8004b12:	230c      	movs	r3, #12
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	2000      	movs	r0, #0
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1a:	f000 f87d 	bl	8004c18 <__malloc_lock>
 8004b1e:	4921      	ldr	r1, [pc, #132]	; (8004ba4 <_malloc_r+0xac>)
 8004b20:	680a      	ldr	r2, [r1, #0]
 8004b22:	4614      	mov	r4, r2
 8004b24:	b99c      	cbnz	r4, 8004b4e <_malloc_r+0x56>
 8004b26:	4f20      	ldr	r7, [pc, #128]	; (8004ba8 <_malloc_r+0xb0>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b923      	cbnz	r3, 8004b36 <_malloc_r+0x3e>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 f862 	bl	8004bf8 <_sbrk_r>
 8004b34:	6038      	str	r0, [r7, #0]
 8004b36:	4629      	mov	r1, r5
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f000 f85d 	bl	8004bf8 <_sbrk_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d123      	bne.n	8004b8a <_malloc_r+0x92>
 8004b42:	230c      	movs	r3, #12
 8004b44:	6033      	str	r3, [r6, #0]
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 f86c 	bl	8004c24 <__malloc_unlock>
 8004b4c:	e7e3      	b.n	8004b16 <_malloc_r+0x1e>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	1b5b      	subs	r3, r3, r5
 8004b52:	d417      	bmi.n	8004b84 <_malloc_r+0x8c>
 8004b54:	2b0b      	cmp	r3, #11
 8004b56:	d903      	bls.n	8004b60 <_malloc_r+0x68>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	441c      	add	r4, r3
 8004b5c:	6025      	str	r5, [r4, #0]
 8004b5e:	e004      	b.n	8004b6a <_malloc_r+0x72>
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	42a2      	cmp	r2, r4
 8004b64:	bf0c      	ite	eq
 8004b66:	600b      	streq	r3, [r1, #0]
 8004b68:	6053      	strne	r3, [r2, #4]
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f000 f85a 	bl	8004c24 <__malloc_unlock>
 8004b70:	f104 000b 	add.w	r0, r4, #11
 8004b74:	1d23      	adds	r3, r4, #4
 8004b76:	f020 0007 	bic.w	r0, r0, #7
 8004b7a:	1ac2      	subs	r2, r0, r3
 8004b7c:	d0cc      	beq.n	8004b18 <_malloc_r+0x20>
 8004b7e:	1a1b      	subs	r3, r3, r0
 8004b80:	50a3      	str	r3, [r4, r2]
 8004b82:	e7c9      	b.n	8004b18 <_malloc_r+0x20>
 8004b84:	4622      	mov	r2, r4
 8004b86:	6864      	ldr	r4, [r4, #4]
 8004b88:	e7cc      	b.n	8004b24 <_malloc_r+0x2c>
 8004b8a:	1cc4      	adds	r4, r0, #3
 8004b8c:	f024 0403 	bic.w	r4, r4, #3
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d0e3      	beq.n	8004b5c <_malloc_r+0x64>
 8004b94:	1a21      	subs	r1, r4, r0
 8004b96:	4630      	mov	r0, r6
 8004b98:	f000 f82e 	bl	8004bf8 <_sbrk_r>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d1dd      	bne.n	8004b5c <_malloc_r+0x64>
 8004ba0:	e7cf      	b.n	8004b42 <_malloc_r+0x4a>
 8004ba2:	bf00      	nop
 8004ba4:	20000094 	.word	0x20000094
 8004ba8:	20000098 	.word	0x20000098

08004bac <_realloc_r>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	4607      	mov	r7, r0
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	b921      	cbnz	r1, 8004bc0 <_realloc_r+0x14>
 8004bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bba:	4611      	mov	r1, r2
 8004bbc:	f7ff bf9c 	b.w	8004af8 <_malloc_r>
 8004bc0:	b922      	cbnz	r2, 8004bcc <_realloc_r+0x20>
 8004bc2:	f7ff ff49 	bl	8004a58 <_free_r>
 8004bc6:	4625      	mov	r5, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	f000 f830 	bl	8004c30 <_malloc_usable_size_r>
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	d20f      	bcs.n	8004bf4 <_realloc_r+0x48>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7ff ff8e 	bl	8004af8 <_malloc_r>
 8004bdc:	4605      	mov	r5, r0
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d0f2      	beq.n	8004bc8 <_realloc_r+0x1c>
 8004be2:	4631      	mov	r1, r6
 8004be4:	4622      	mov	r2, r4
 8004be6:	f7ff ff0f 	bl	8004a08 <memcpy>
 8004bea:	4631      	mov	r1, r6
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff ff33 	bl	8004a58 <_free_r>
 8004bf2:	e7e9      	b.n	8004bc8 <_realloc_r+0x1c>
 8004bf4:	4635      	mov	r5, r6
 8004bf6:	e7e7      	b.n	8004bc8 <_realloc_r+0x1c>

08004bf8 <_sbrk_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d06      	ldr	r5, [pc, #24]	; (8004c14 <_sbrk_r+0x1c>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fc f8c6 	bl	8000d94 <_sbrk>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_sbrk_r+0x1a>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_sbrk_r+0x1a>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	2000025c 	.word	0x2000025c

08004c18 <__malloc_lock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__malloc_lock+0x8>)
 8004c1a:	f000 b811 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20000264 	.word	0x20000264

08004c24 <__malloc_unlock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__malloc_unlock+0x8>)
 8004c26:	f000 b80c 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20000264 	.word	0x20000264

08004c30 <_malloc_usable_size_r>:
 8004c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c34:	1f18      	subs	r0, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfbc      	itt	lt
 8004c3a:	580b      	ldrlt	r3, [r1, r0]
 8004c3c:	18c0      	addlt	r0, r0, r3
 8004c3e:	4770      	bx	lr

08004c40 <__retarget_lock_acquire_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__retarget_lock_release_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <_init>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr

08004c50 <_fini>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr
