
SharedQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b90  08006b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b90  08006b90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b90  08006b90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000074  08006c0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08006c0c  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b48  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f82  00000000  00000000  00039bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003cb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003dee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b34  00000000  00000000  0003f128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001132a  00000000  00000000  00042c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4170  00000000  00000000  00053f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001280f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  00128174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a40 	.word	0x08006a40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006a40 	.word	0x08006a40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fb24 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f832 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f8be 	bl	800041c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f88c 	bl	80003bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a4:	f003 f866 	bl	8003374 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <main+0x50>)
 80002aa:	2102      	movs	r1, #2
 80002ac:	2010      	movs	r0, #16
 80002ae:	f003 f9a1 	bl	80035f4 <osMessageQueueNew>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0x54>)
 80002b6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of queue01 */
  queue01Handle = osThreadNew(ManageQueue01, NULL, &queue01_attributes);
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <main+0x58>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <main+0x5c>)
 80002be:	f003 f8c1 	bl	8003444 <osThreadNew>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <main+0x60>)
 80002c6:	601a      	str	r2, [r3, #0]

  /* creation of queue02 */
  queue02Handle = osThreadNew(ManageQueue02, NULL, &queue02_attributes);
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <main+0x64>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x68>)
 80002ce:	f003 f8b9 	bl	8003444 <osThreadNew>
 80002d2:	4602      	mov	r2, r0
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x6c>)
 80002d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d8:	f003 f880 	bl	80033dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80002dc:	e7fe      	b.n	80002dc <main+0x4c>
 80002de:	bf00      	nop
 80002e0:	08006b0c 	.word	0x08006b0c
 80002e4:	200019c8 	.word	0x200019c8
 80002e8:	08006ac4 	.word	0x08006ac4
 80002ec:	080004ed 	.word	0x080004ed
 80002f0:	200019c4 	.word	0x200019c4
 80002f4:	08006ae8 	.word	0x08006ae8
 80002f8:	08000575 	.word	0x08000575
 80002fc:	20001a50 	.word	0x20001a50

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0a6      	sub	sp, #152	; 0x98
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f005 ff91 	bl	8006236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2258      	movs	r2, #88	; 0x58
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f005 ff83 	bl	8006236 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000330:	2302      	movs	r3, #2
 8000332:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2310      	movs	r3, #16
 800033a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fd78 	bl	8000e54 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036a:	f000 f961 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fc78 	bl	8001c80 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000396:	f000 f94b 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800039a:	2302      	movs	r3, #2
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fed3 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b0:	f000 f93e 	bl	8000630 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3798      	adds	r7, #152	; 0x98
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART2_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x58>)
 8000400:	f002 fb9a 	bl	8002b38 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040a:	f000 f911 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200019cc 	.word	0x200019cc
 8000418:	40004400 	.word	0x40004400

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a2a      	ldr	r2, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_GPIO_Init+0xc4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2120      	movs	r1, #32
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f000 fcc3 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_GPIO_Init+0xc8>)
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_GPIO_Init+0xcc>)
 80004b4:	f000 fb2c 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b8:	2320      	movs	r3, #32
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f000 fb1d 	bl	8000b10 <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	10210000 	.word	0x10210000
 80004e8:	48000800 	.word	0x48000800

080004ec <ManageQueue01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue01 */
void ManageQueue01(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char msg[1000];
	uint16_t number = 0;
 80004f8:	f107 030e 	add.w	r3, r7, #14
 80004fc:	2200      	movs	r2, #0
 80004fe:	801a      	strh	r2, [r3, #0]

	//sprintf(msg, "Start put\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe6b 	bl	80001e0 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	f107 0110 	add.w	r1, r7, #16
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	4814      	ldr	r0, [pc, #80]	; (8000568 <ManageQueue01+0x7c>)
 8000518:	f002 fb5c 	bl	8002bd4 <HAL_UART_Transmit>
	for (;;) {

		osMessageQueueGet(myQueue01Handle, &number, NULL, 0);
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <ManageQueue01+0x80>)
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	f107 010e 	add.w	r1, r7, #14
 8000524:	2300      	movs	r3, #0
 8000526:	2200      	movs	r2, #0
 8000528:	f003 f95e 	bl	80037e8 <osMessageQueueGet>
		sprintf(msg, "Get value: number =  %hu\n", number);
 800052c:	f107 030e 	add.w	r3, r7, #14
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	490d      	ldr	r1, [pc, #52]	; (8000570 <ManageQueue01+0x84>)
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fe84 	bl	8006248 <siprintf>


		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe4b 	bl	80001e0 <strlen>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	f107 0110 	add.w	r1, r7, #16
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <ManageQueue01+0x7c>)
 8000558:	f002 fb3c 	bl	8002bd4 <HAL_UART_Transmit>

		osDelay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f003 f81a 	bl	8003598 <osDelay>
		osMessageQueueGet(myQueue01Handle, &number, NULL, 0);
 8000564:	e7da      	b.n	800051c <ManageQueue01+0x30>
 8000566:	bf00      	nop
 8000568:	200019cc 	.word	0x200019cc
 800056c:	200019c8 	.word	0x200019c8
 8000570:	08006a74 	.word	0x08006a74

08000574 <ManageQueue02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue02 */
void ManageQueue02(void *argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800057a:	af00      	add	r7, sp, #0
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN ManageQueue02 */
	/* Infinite loop */
	char msg[1000];
	uint16_t number = 310;
 8000580:	f107 030e 	add.w	r3, r7, #14
 8000584:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000588:	801a      	strh	r2, [r3, #0]

	//sprintf(msg, "Start put\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe26 	bl	80001e0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f107 0110 	add.w	r1, r7, #16
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <ManageQueue02+0x8c>)
 80005a2:	f002 fb17 	bl	8002bd4 <HAL_UART_Transmit>
	for (;;) {

		number++;
 80005a6:	f107 030e 	add.w	r3, r7, #14
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f107 030e 	add.w	r3, r7, #14
 80005b4:	801a      	strh	r2, [r3, #0]
		sprintf(msg, "Put value: number =  %hu\n", number);
 80005b6:	f107 030e 	add.w	r3, r7, #14
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <ManageQueue02+0x90>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fe3f 	bl	8006248 <siprintf>

		osMessageQueuePut(myQueue01Handle, &number, 0, 100);
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <ManageQueue02+0x94>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f107 010e 	add.w	r1, r7, #14
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2200      	movs	r2, #0
 80005d6:	f003 f893 	bl	8003700 <osMessageQueuePut>


		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdfe 	bl	80001e0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f107 0110 	add.w	r1, r7, #16
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ManageQueue02+0x8c>)
 80005f2:	f002 faef 	bl	8002bd4 <HAL_UART_Transmit>

		osDelay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f002 ffcd 	bl	8003598 <osDelay>
		number++;
 80005fe:	e7d2      	b.n	80005a6 <ManageQueue02+0x32>
 8000600:	200019cc 	.word	0x200019cc
 8000604:	08006a90 	.word	0x08006a90
 8000608:	200019c8 	.word	0x200019c8

0800060c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d101      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061e:	f000 f975 	bl	800090c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40001000 	.word	0x40001000

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000636:	e7fe      	b.n	8000636 <Error_Handler+0x6>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_MspInit+0x4c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <HAL_MspInit+0x4c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x4c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_MspInit+0x4c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <HAL_MspInit+0x4c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_MspInit+0x4c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	210f      	movs	r1, #15
 8000672:	f06f 0001 	mvn.w	r0, #1
 8000676:	f000 fa21 	bl	8000abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_UART_MspInit+0x7c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d128      	bne.n	80006fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_UART_MspInit+0x80>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006da:	230c      	movs	r3, #12
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ea:	2307      	movs	r3, #7
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fa0a 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40004400 	.word	0x40004400
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2036      	movs	r0, #54	; 0x36
 8000722:	f000 f9cb 	bl	8000abc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000726:	2036      	movs	r0, #54	; 0x36
 8000728:	f000 f9e4 	bl	8000af4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <HAL_InitTick+0xa0>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <HAL_InitTick+0xa0>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_InitTick+0xa0>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000744:	f107 0210 	add.w	r2, r7, #16
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fccc 	bl	80020ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000754:	f001 fc86 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8000758:	4603      	mov	r3, r0
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <HAL_InitTick+0xa4>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	0c9b      	lsrs	r3, r3, #18
 8000768:	3b01      	subs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_InitTick+0xa8>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <HAL_InitTick+0xac>)
 8000770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_InitTick+0xa8>)
 8000774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000778:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_InitTick+0xa8>)
 800077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_InitTick+0xa8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_InitTick+0xa8>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_InitTick+0xa8>)
 800078e:	f001 fefd 	bl	800258c <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <HAL_InitTick+0xa8>)
 800079a:	f001 ff59 	bl	8002650 <HAL_TIM_Base_Start_IT>
 800079e:	4603      	mov	r3, r0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3730      	adds	r7, #48	; 0x30
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	431bde83 	.word	0x431bde83
 80007b4:	20001aa4 	.word	0x20001aa4
 80007b8:	40001000 	.word	0x40001000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TIM6_DAC_IRQHandler+0x10>)
 80007ee:	f001 ff9f 	bl	8002730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20001aa4 	.word	0x20001aa4

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f005 fcce 	bl	80061cc <__errno>
 8000830:	4602      	mov	r2, r0
 8000832:	230c      	movs	r3, #12
 8000834:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20010000 	.word	0x20010000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000090 	.word	0x20000090
 8000864:	20001b38 	.word	0x20001b38

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f005 fc8d 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fce7 	bl	8000290 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d0:	08006b98 	.word	0x08006b98
  ldr r2, =_sbss
 80008d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008d8:	20001b38 	.word	0x20001b38

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f8d8 	bl	8000aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff08 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fe9c 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20001af0 	.word	0x20001af0

08000934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;  
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20001af0 	.word	0x20001af0

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4907      	ldr	r1, [pc, #28]	; (80009e8 <__NVIC_EnableIRQ+0x38>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ff4c 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ace:	f7ff ff61 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	6978      	ldr	r0, [r7, #20]
 8000ada:	f7ff ffb1 	bl	8000a40 <NVIC_EncodePriority>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff80 	bl	80009ec <__NVIC_SetPriority>
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff54 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e160      	b.n	8000de2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 8152 	beq.w	8000ddc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d00b      	beq.n	8000b58 <HAL_GPIO_Init+0x48>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4c:	2b11      	cmp	r3, #17
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b12      	cmp	r3, #18
 8000b56:	d130      	bne.n	8000bba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	091b      	lsrs	r3, r3, #4
 8000ba4:	f003 0201 	and.w	r2, r3, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0xea>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d123      	bne.n	8000c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3208      	adds	r2, #8
 8000c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	220f      	movs	r2, #15
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	08da      	lsrs	r2, r3, #3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	6939      	ldr	r1, [r7, #16]
 8000c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0203 	and.w	r2, r3, #3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80ac 	beq.w	8000ddc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <HAL_GPIO_Init+0x2f0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a5d      	ldr	r2, [pc, #372]	; (8000e00 <HAL_GPIO_Init+0x2f0>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <HAL_GPIO_Init+0x2f0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c9c:	4a59      	ldr	r2, [pc, #356]	; (8000e04 <HAL_GPIO_Init+0x2f4>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cc6:	d025      	beq.n	8000d14 <HAL_GPIO_Init+0x204>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4f      	ldr	r2, [pc, #316]	; (8000e08 <HAL_GPIO_Init+0x2f8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d01f      	beq.n	8000d10 <HAL_GPIO_Init+0x200>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4e      	ldr	r2, [pc, #312]	; (8000e0c <HAL_GPIO_Init+0x2fc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d019      	beq.n	8000d0c <HAL_GPIO_Init+0x1fc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <HAL_GPIO_Init+0x300>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1f8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1f4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_GPIO_Init+0x308>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1f0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1ec>
 8000cf8:	2306      	movs	r3, #6
 8000cfa:	e00c      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e00a      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d00:	2305      	movs	r3, #5
 8000d02:	e008      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d04:	2304      	movs	r3, #4
 8000d06:	e006      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e004      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e002      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <HAL_GPIO_Init+0x206>
 8000d14:	2300      	movs	r3, #0
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	f002 0203 	and.w	r2, r2, #3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d26:	4937      	ldr	r1, [pc, #220]	; (8000e04 <HAL_GPIO_Init+0x2f4>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d58:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f47f ae97 	bne.w	8000b20 <HAL_GPIO_Init+0x10>
  }
}
 8000df2:	bf00      	nop
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	48001000 	.word	0x48001000
 8000e18:	48001400 	.word	0x48001400
 8000e1c:	48001800 	.word	0x48001800
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
 8000e30:	4613      	mov	r3, r2
 8000e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e34:	787b      	ldrb	r3, [r7, #1]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f000 bf01 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 8160 	beq.w	800113e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e7e:	4bae      	ldr	r3, [pc, #696]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d00c      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8a:	4bab      	ldr	r3, [pc, #684]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d159      	bne.n	8000f4a <HAL_RCC_OscConfig+0xf6>
 8000e96:	4ba8      	ldr	r3, [pc, #672]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d152      	bne.n	8000f4a <HAL_RCC_OscConfig+0xf6>
 8000ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x82>
 8000ed0:	4b99      	ldr	r3, [pc, #612]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	e015      	b.n	8000f02 <HAL_RCC_OscConfig+0xae>
 8000ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ef2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000efe:	4b8e      	ldr	r3, [pc, #568]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f06:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f0a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f0e:	fa92 f2a2 	rbit	r2, r2
 8000f12:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f1a:	fab2 f282 	clz	r2, r2
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	f042 0220 	orr.w	r2, r2, #32
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	f002 021f 	and.w	r2, r2, #31
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8102 	beq.w	800113c <HAL_RCC_OscConfig+0x2e8>
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 80fc 	bne.w	800113c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f000 be93 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x110>
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a77      	ldr	r2, [pc, #476]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e030      	b.n	8000fc6 <HAL_RCC_OscConfig+0x172>
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x134>
 8000f6e:	4b72      	ldr	r3, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a71      	ldr	r2, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a6e      	ldr	r2, [pc, #440]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e01e      	b.n	8000fc6 <HAL_RCC_OscConfig+0x172>
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f92:	d10c      	bne.n	8000fae <HAL_RCC_OscConfig+0x15a>
 8000f94:	4b68      	ldr	r3, [pc, #416]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a67      	ldr	r2, [pc, #412]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b65      	ldr	r3, [pc, #404]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a64      	ldr	r2, [pc, #400]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e00b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x172>
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a61      	ldr	r2, [pc, #388]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d059      	beq.n	8001084 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcb0 	bl	8000934 <HAL_GetTick>
 8000fd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	e00a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fda:	f7ff fcab 	bl	8000934 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d902      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f000 be40 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001004:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <HAL_RCC_OscConfig+0x1ce>
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	e015      	b.n	800104e <HAL_RCC_OscConfig+0x1fa>
 8001022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001026:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800103e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001052:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001056:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800105a:	fa92 f2a2 	rbit	r2, r2
 800105e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001062:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001066:	fab2 f282 	clz	r2, r2
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	f042 0220 	orr.w	r2, r2, #32
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f002 021f 	and.w	r2, r2, #31
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0ab      	beq.n	8000fda <HAL_RCC_OscConfig+0x186>
 8001082:	e05c      	b.n	800113e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fc56 	bl	8000934 <HAL_GetTick>
 8001088:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108e:	f7ff fc51 	bl	8000934 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d902      	bls.n	80010a4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	f000 bde6 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80010b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0x282>
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x2ae>
 80010d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_RCC_OscConfig+0x2e4>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001106:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800110a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800110e:	fa92 f2a2 	rbit	r2, r2
 8001112:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001116:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800111a:	fab2 f282 	clz	r2, r2
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	f042 0220 	orr.w	r2, r2, #32
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	f002 021f 	and.w	r2, r2, #31
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1ab      	bne.n	800108e <HAL_RCC_OscConfig+0x23a>
 8001136:	e002      	b.n	800113e <HAL_RCC_OscConfig+0x2ea>
 8001138:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8170 	beq.w	800142e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800114e:	4bd0      	ldr	r3, [pc, #832]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800115a:	4bcd      	ldr	r3, [pc, #820]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d16d      	bne.n	8001242 <HAL_RCC_OscConfig+0x3ee>
 8001166:	4bca      	ldr	r3, [pc, #808]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800116e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001172:	d166      	bne.n	8001242 <HAL_RCC_OscConfig+0x3ee>
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001186:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d102      	bne.n	80011a4 <HAL_RCC_OscConfig+0x350>
 800119e:	4bbc      	ldr	r3, [pc, #752]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	e013      	b.n	80011cc <HAL_RCC_OscConfig+0x378>
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011c8:	4bb1      	ldr	r3, [pc, #708]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	2202      	movs	r2, #2
 80011ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011d6:	fa92 f2a2 	rbit	r2, r2
 80011da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011e2:	fab2 f282 	clz	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f042 0220 	orr.w	r2, r2, #32
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f002 021f 	and.w	r2, r2, #31
 80011f2:	2101      	movs	r1, #1
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_RCC_OscConfig+0x3ba>
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d002      	beq.n	800120e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	f000 bd31 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	21f8      	movs	r1, #248	; 0xf8
 800121e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001226:	fa91 f1a1 	rbit	r1, r1
 800122a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800122e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001232:	fab1 f181 	clz	r1, r1
 8001236:	b2c9      	uxtb	r1, r1
 8001238:	408b      	lsls	r3, r1
 800123a:	4995      	ldr	r1, [pc, #596]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001240:	e0f5      	b.n	800142e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8085 	beq.w	8001358 <HAL_RCC_OscConfig+0x504>
 800124e:	2301      	movs	r3, #1
 8001250:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001260:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800126e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	461a      	mov	r2, r3
 8001276:	2301      	movs	r3, #1
 8001278:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb5b 	bl	8000934 <HAL_GetTick>
 800127e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fb56 	bl	8000934 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d902      	bls.n	800129a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	f000 bceb 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80012ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	fab3 f383 	clz	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_OscConfig+0x476>
 80012c4:	4b72      	ldr	r3, [pc, #456]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	e013      	b.n	80012f2 <HAL_RCC_OscConfig+0x49e>
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012ee:	4b68      	ldr	r3, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	2202      	movs	r2, #2
 80012f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012fc:	fa92 f2a2 	rbit	r2, r2
 8001300:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001304:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001308:	fab2 f282 	clz	r2, r2
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	f002 021f 	and.w	r2, r2, #31
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0af      	beq.n	8001284 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	21f8      	movs	r1, #248	; 0xf8
 8001334:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800133c:	fa91 f1a1 	rbit	r1, r1
 8001340:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001344:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001348:	fab1 f181 	clz	r1, r1
 800134c:	b2c9      	uxtb	r1, r1
 800134e:	408b      	lsls	r3, r1
 8001350:	494f      	ldr	r1, [pc, #316]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e06a      	b.n	800142e <HAL_RCC_OscConfig+0x5da>
 8001358:	2301      	movs	r3, #1
 800135a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800136a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	2300      	movs	r3, #0
 8001382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fad6 	bl	8000934 <HAL_GetTick>
 8001388:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fad1 	bl	8000934 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d902      	bls.n	80013a4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	f000 bc66 	b.w	8001c70 <HAL_RCC_OscConfig+0xe1c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80013b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x580>
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e013      	b.n	80013fc <HAL_RCC_OscConfig+0x5a8>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_RCC_OscConfig+0x63c>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001402:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001406:	fa92 f2a2 	rbit	r2, r2
 800140a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800140e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001412:	fab2 f282 	clz	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f042 0220 	orr.w	r2, r2, #32
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f002 021f 	and.w	r2, r2, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1af      	bne.n	800138e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80da 	beq.w	80015f2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d069      	beq.n	800151c <HAL_RCC_OscConfig+0x6c8>
 8001448:	2301      	movs	r3, #1
 800144a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800145a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x640>)
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	461a      	mov	r2, r3
 800146e:	2301      	movs	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fa5f 	bl	8000934 <HAL_GetTick>
 8001476:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e00d      	b.n	8001498 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fa5a 	bl	8000934 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d905      	bls.n	8001498 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e3ef      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 8001490:	40021000 	.word	0x40021000
 8001494:	10908120 	.word	0x10908120
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014a2:	fa93 f2a3 	rbit	r2, r3
 80014a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80014de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e4:	2102      	movs	r1, #2
 80014e6:	6019      	str	r1, [r3, #0]
 80014e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f1a3 	rbit	r1, r3
 80014f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014f6:	6019      	str	r1, [r3, #0]
  return result;
 80014f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0b0      	beq.n	800147c <HAL_RCC_OscConfig+0x628>
 800151a:	e06a      	b.n	80015f2 <HAL_RCC_OscConfig+0x79e>
 800151c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001532:	601a      	str	r2, [r3, #0]
  return result;
 8001534:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001538:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x920>)
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff f9f1 	bl	8000934 <HAL_GetTick>
 8001552:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	e009      	b.n	800156c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff f9ec 	bl	8000934 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e381      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 800156c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a0:	2202      	movs	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015bc:	2102      	movs	r1, #2
 80015be:	6019      	str	r1, [r3, #0]
 80015c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f1a3 	rbit	r1, r3
 80015ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ce:	6019      	str	r1, [r3, #0]
  return result;
 80015d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1b2      	bne.n	8001558 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8157 	beq.w	80018b0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d112      	bne.n	800163a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <HAL_RCC_OscConfig+0x924>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x924>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_RCC_OscConfig+0x924>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff f96f 	bl	8000934 <HAL_GetTick>
 8001656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff f96a 	bl	8000934 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e2ff      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x924>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ef      	beq.n	800165c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x840>
 8001686:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a39      	ldr	r2, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e02f      	b.n	80016f4 <HAL_RCC_OscConfig+0x8a0>
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x864>
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a33      	ldr	r2, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a30      	ldr	r2, [pc, #192]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0x8a0>
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x888>
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a2a      	ldr	r2, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x8a0>
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f919 	bl	8000934 <HAL_GetTick>
 8001702:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff f914 	bl	8000934 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e2a7      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 8001720:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800173c:	2202      	movs	r2, #2
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800174e:	601a      	str	r2, [r3, #0]
  return result;
 8001750:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001754:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x928>
 800176a:	4b01      	ldr	r3, [pc, #4]	; (8001770 <HAL_RCC_OscConfig+0x91c>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	e013      	b.n	8001798 <HAL_RCC_OscConfig+0x944>
 8001770:	40021000 	.word	0x40021000
 8001774:	10908120 	.word	0x10908120
 8001778:	40007000 	.word	0x40007000
 800177c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	4bc0      	ldr	r3, [pc, #768]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800179c:	2102      	movs	r1, #2
 800179e:	6011      	str	r1, [r2, #0]
 80017a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	fa92 f1a2 	rbit	r1, r2
 80017aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017ae:	6011      	str	r1, [r2, #0]
  return result;
 80017b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	fab2 f282 	clz	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f002 021f 	and.w	r2, r2, #31
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d09a      	beq.n	8001708 <HAL_RCC_OscConfig+0x8b4>
 80017d2:	e063      	b.n	800189c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f8ae 	bl	8000934 <HAL_GetTick>
 80017d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff f8a9 	bl	8000934 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e23c      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 80017f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017fa:	2202      	movs	r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f2a3 	rbit	r2, r3
 8001820:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001824:	601a      	str	r2, [r3, #0]
  return result;
 8001826:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800182a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d102      	bne.n	8001846 <HAL_RCC_OscConfig+0x9f2>
 8001840:	4b95      	ldr	r3, [pc, #596]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	e00d      	b.n	8001862 <HAL_RCC_OscConfig+0xa0e>
 8001846:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001866:	2102      	movs	r1, #2
 8001868:	6011      	str	r1, [r2, #0]
 800186a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fa92 f1a2 	rbit	r1, r2
 8001874:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001878:	6011      	str	r1, [r2, #0]
  return result;
 800187a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1a0      	bne.n	80017de <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800189c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 81d9 	beq.w	8001c6e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f000 81a6 	beq.w	8001c16 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 811e 	bne.w	8001b12 <HAL_RCC_OscConfig+0xcbe>
 80018d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ee:	601a      	str	r2, [r3, #0]
  return result;
 80018f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	461a      	mov	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff f812 	bl	8000934 <HAL_GetTick>
 8001910:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f80d 	bl	8000934 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1a2      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 800192a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800192e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001942:	601a      	str	r2, [r3, #0]
  return result;
 8001944:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0xb10>
 800195e:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0xb48>
 8001964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fa92 f1a2 	rbit	r1, r2
 80019b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b4:	6011      	str	r1, [r2, #0]
  return result;
 80019b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d19e      	bne.n	8001916 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f023 020f 	bic.w	r2, r3, #15
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	492c      	ldr	r1, [pc, #176]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a19      	ldr	r1, [r3, #32]
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a20:	601a      	str	r2, [r3, #0]
  return result;
 8001a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7fe ff79 	bl	8000934 <HAL_GetTick>
 8001a42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a46:	e009      	b.n	8001a5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7fe ff74 	bl	8000934 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e109      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 8001a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a74:	601a      	str	r2, [r3, #0]
  return result;
 8001a76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0xc48>
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <HAL_RCC_OscConfig+0xc44>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e01e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xc80>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0xe28>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	fa92 f1a2 	rbit	r1, r2
 8001ae8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d09b      	beq.n	8001a48 <HAL_RCC_OscConfig+0xbf4>
 8001b10:	e0ad      	b.n	8001c6e <HAL_RCC_OscConfig+0xe1a>
 8001b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe fef4 	bl	8000934 <HAL_GetTick>
 8001b4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7fe feef 	bl	8000934 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e084      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xd4c>
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_RCC_OscConfig+0xe28>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd84>
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f107 0318 	add.w	r3, r7, #24
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_OscConfig+0xe28>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f107 0214 	add.w	r2, r7, #20
 8001bdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be0:	6011      	str	r1, [r2, #0]
 8001be2:	f107 0214 	add.w	r2, r7, #20
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	fa92 f1a2 	rbit	r1, r2
 8001bec:	f107 0210 	add.w	r2, r7, #16
 8001bf0:	6011      	str	r1, [r2, #0]
  return result;
 8001bf2:	f107 0210 	add.w	r2, r7, #16
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d19e      	bne.n	8001b52 <HAL_RCC_OscConfig+0xcfe>
 8001c14:	e02b      	b.n	8001c6e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e025      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCC_OscConfig+0xe28>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_OscConfig+0xe28>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c38:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d111      	bne.n	8001c6a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d108      	bne.n	8001c6a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09e      	sub	sp, #120	; 0x78
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e162      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b90      	ldr	r3, [pc, #576]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d910      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b8d      	ldr	r3, [pc, #564]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	498b      	ldr	r1, [pc, #556]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e14a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	497f      	ldr	r1, [pc, #508]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80dc 	beq.w	8001eac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d13c      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xf6>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xa6>
 8001d20:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e00f      	b.n	8001d46 <HAL_RCC_ClockConfig+0xc6>
 8001d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	667b      	str	r3, [r7, #100]	; 0x64
 8001d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
 8001d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f042 0220 	orr.w	r2, r2, #32
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f002 021f 	and.w	r2, r2, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d17b      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0f3      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d13c      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x178>
 8001d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x128>
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
 8001da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
 8001db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
 8001dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dd0:	fa92 f2a2 	rbit	r2, r2
 8001dd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d13a      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b2      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x1a0>
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e00d      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1bc>
 8001e20:	2302      	movs	r3, #2
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	61ba      	str	r2, [r7, #24]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	617a      	str	r2, [r7, #20]
  return result;
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f002 021f 	and.w	r2, r2, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e079      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	491a      	ldr	r1, [pc, #104]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fd5a 	bl	8000934 <HAL_GetTick>
 8001e80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7fe fd56 	bl	8000934 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e061      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d214      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4906      	ldr	r1, [pc, #24]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_RCC_ClockConfig+0x25c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e040      	b.n	8001f5e <HAL_RCC_ClockConfig+0x2de>
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_ClockConfig+0x2e8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	491a      	ldr	r1, [pc, #104]	; (8001f68 <HAL_RCC_ClockConfig+0x2e8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x2e8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f22:	f000 f829 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_RCC_ClockConfig+0x2e8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	22f0      	movs	r2, #240	; 0xf0
 8001f32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	fa92 f2a2 	rbit	r2, r2
 8001f3a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	40d3      	lsrs	r3, r2
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x2ec>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_RCC_ClockConfig+0x2f0>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCC_ClockConfig+0x2f4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fbd8 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3778      	adds	r7, #120	; 0x78
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08006b24 	.word	0x08006b24
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	; 0x2c
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x36>
 8001fa6:	e03f      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001faa:	623b      	str	r3, [r7, #32]
      break;
 8001fac:	e03f      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fb8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	607a      	str	r2, [r7, #4]
  return result;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	220f      	movs	r2, #15
 8001fdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	fa92 f2a2 	rbit	r2, r2
 8001fe4:	60fa      	str	r2, [r7, #12]
  return result;
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	40d3      	lsrs	r3, r2
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002000:	4a0f      	ldr	r2, [pc, #60]	; (8002040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	fbb2 f2f3 	udiv	r2, r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	e007      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fbb2 f2f3 	udiv	r2, r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	623b      	str	r3, [r7, #32]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetSysClockFreq+0xc8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	6a3b      	ldr	r3, [r7, #32]
}
 8002030:	4618      	mov	r0, r3
 8002032:	372c      	adds	r7, #44	; 0x2c
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	08006b3c 	.word	0x08006b3c
 8002048:	08006b4c 	.word	0x08006b4c

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCC_GetHCLKFreq+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800206a:	f7ff ffef 	bl	800204c <HAL_RCC_GetHCLKFreq>
 800206e:	4601      	mov	r1, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002078:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800207c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	603a      	str	r2, [r7, #0]
  return result;
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	40d3      	lsrs	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08006b34 	.word	0x08006b34

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020ae:	f7ff ffcd 	bl	800204c <HAL_RCC_GetHCLKFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	603a      	str	r2, [r7, #0]
  return result;
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	40d3      	lsrs	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08006b34 	.word	0x08006b34

080020ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	220f      	movs	r2, #15
 80020fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCC_GetClockConfig+0x60>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b092      	sub	sp, #72	; 0x48
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80d4 	beq.w	800231c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002174:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10e      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	61d3      	str	r3, [r2, #28]
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fbbd 	bl	8000934 <HAL_GetTick>
 80021ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fbb9 	bl	8000934 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1d6      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8084 	beq.w	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d07c      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021fc:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	461a      	mov	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	2300      	movs	r3, #0
 800224c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d04b      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fb69 	bl	8000934 <HAL_GetTick>
 8002262:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fb65 	bl	8000934 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e180      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800227c:	2302      	movs	r3, #2
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	61fb      	str	r3, [r7, #28]
  return result;
 8002294:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d108      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022aa:	4b01      	ldr	r3, [pc, #4]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	e00d      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	10908100 	.word	0x10908100
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	4ba0      	ldr	r3, [pc, #640]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	613a      	str	r2, [r7, #16]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	60fa      	str	r2, [r7, #12]
  return result;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0b7      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f6:	4b95      	ldr	r3, [pc, #596]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4992      	ldr	r1, [pc, #584]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002308:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b8e      	ldr	r3, [pc, #568]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a8d      	ldr	r2, [pc, #564]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f023 0203 	bic.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4985      	ldr	r1, [pc, #532]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002346:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	497e      	ldr	r1, [pc, #504]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002364:	4b79      	ldr	r3, [pc, #484]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4976      	ldr	r1, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f023 0210 	bic.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	496f      	ldr	r1, [pc, #444]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	4967      	ldr	r1, [pc, #412]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f023 0220 	bic.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4960      	ldr	r1, [pc, #384]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023dc:	4b5b      	ldr	r3, [pc, #364]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	4958      	ldr	r1, [pc, #352]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4951      	ldr	r1, [pc, #324]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4949      	ldr	r1, [pc, #292]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4942      	ldr	r1, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	493a      	ldr	r1, [pc, #232]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	4933      	ldr	r1, [pc, #204]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	492b      	ldr	r1, [pc, #172]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4924      	ldr	r1, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	491c      	ldr	r1, [pc, #112]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	4915      	ldr	r1, [pc, #84]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	490d      	ldr	r1, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	4906      	ldr	r1, [pc, #24]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002544:	4b01      	ldr	r3, [pc, #4]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	e002      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	490b      	ldr	r1, [pc, #44]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	4904      	ldr	r1, [pc, #16]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3748      	adds	r7, #72	; 0x48
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e049      	b.n	8002632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f841 	bl	800263a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 f9f8 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d001      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e04f      	b.n	8002708 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_TIM_Base_Start_IT+0xc4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d018      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_TIM_Base_Start_IT+0xc8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_TIM_Base_Start_IT+0xcc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_TIM_Base_Start_IT+0xd0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_TIM_Base_Start_IT+0xd4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x76>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_TIM_Base_Start_IT+0xd8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d115      	bne.n	80026f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_TIM_Base_Start_IT+0xdc>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d015      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0xb4>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d011      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f0:	e008      	b.n	8002704 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e000      	b.n	8002706 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	40015000 	.word	0x40015000
 800272c:	00010007 	.word	0x00010007

08002730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0202 	mvn.w	r2, #2
 800275c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f905 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8f7 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f908 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0204 	mvn.w	r2, #4
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8db 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8cd 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8de 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0208 	mvn.w	r2, #8
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8b1 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8a3 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8b4 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b10      	cmp	r3, #16
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0210 	mvn.w	r2, #16
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2208      	movs	r2, #8
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f887 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f879 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f88a 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0201 	mvn.w	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fd feac 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	2b80      	cmp	r3, #128	; 0x80
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f918 	bl	8002b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ee:	d10e      	bne.n	800290e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d107      	bne.n	800290e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f90b 	bl	8002b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d10e      	bne.n	800293a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d107      	bne.n	800293a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f838 	bl	80029aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b20      	cmp	r3, #32
 8002946:	d10e      	bne.n	8002966 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d107      	bne.n	8002966 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0220 	mvn.w	r2, #32
 800295e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8cb 	bl	8002afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a42      	ldr	r2, [pc, #264]	; (8002adc <TIM_Base_SetConfig+0x11c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d00f      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <TIM_Base_SetConfig+0x120>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <TIM_Base_SetConfig+0x124>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <TIM_Base_SetConfig+0x128>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <TIM_Base_SetConfig+0x12c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d108      	bne.n	8002a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a31      	ldr	r2, [pc, #196]	; (8002adc <TIM_Base_SetConfig+0x11c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d01b      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2e      	ldr	r2, [pc, #184]	; (8002ae0 <TIM_Base_SetConfig+0x120>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d017      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <TIM_Base_SetConfig+0x124>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a2c      	ldr	r2, [pc, #176]	; (8002ae8 <TIM_Base_SetConfig+0x128>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00f      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <TIM_Base_SetConfig+0x130>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <TIM_Base_SetConfig+0x134>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <TIM_Base_SetConfig+0x138>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x9a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <TIM_Base_SetConfig+0x12c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a12      	ldr	r2, [pc, #72]	; (8002adc <TIM_Base_SetConfig+0x11c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <TIM_Base_SetConfig+0x100>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <TIM_Base_SetConfig+0x128>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x100>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <TIM_Base_SetConfig+0x130>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x100>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <TIM_Base_SetConfig+0x134>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x100>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <TIM_Base_SetConfig+0x138>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x100>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <TIM_Base_SetConfig+0x12c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40013400 	.word	0x40013400
 8002aec:	40015000 	.word	0x40015000
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800

08002afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e040      	b.n	8002bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd fd94 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8c0 	bl	8002cfc <UART_SetConfig>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e022      	b.n	8002bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa88 	bl	80030a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fb0f 	bl	80031e8 <UART_CheckIdleState>
 8002bca:	4603      	mov	r3, r0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 8082 	bne.w	8002cf2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_UART_Transmit+0x26>
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07a      	b.n	8002cf4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Transmit+0x38>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e073      	b.n	8002cf4 <HAL_UART_Transmit+0x120>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c22:	f7fd fe87 	bl	8000934 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x80>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c64:	e02d      	b.n	8002cc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fb02 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e039      	b.n	8002cf4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c92:	b292      	uxth	r2, r2
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e008      	b.n	8002cb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1cb      	bne.n	8002c66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 face 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e005      	b.n	8002cf4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4baa      	ldr	r3, [pc, #680]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a98      	ldr	r2, [pc, #608]	; (8002fd4 <UART_SetConfig+0x2d8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d121      	bne.n	8002dbc <UART_SetConfig+0xc0>
 8002d78:	4b97      	ldr	r3, [pc, #604]	; (8002fd8 <UART_SetConfig+0x2dc>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d817      	bhi.n	8002db4 <UART_SetConfig+0xb8>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <UART_SetConfig+0x90>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002d9d 	.word	0x08002d9d
 8002d90:	08002da9 	.word	0x08002da9
 8002d94:	08002daf 	.word	0x08002daf
 8002d98:	08002da3 	.word	0x08002da3
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e0b2      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002da2:	2302      	movs	r3, #2
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e0af      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002da8:	2304      	movs	r3, #4
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e0ac      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002dae:	2308      	movs	r3, #8
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e0a9      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002db4:	2310      	movs	r3, #16
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	bf00      	nop
 8002dba:	e0a5      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a86      	ldr	r2, [pc, #536]	; (8002fdc <UART_SetConfig+0x2e0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d123      	bne.n	8002e0e <UART_SetConfig+0x112>
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <UART_SetConfig+0x2dc>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd2:	d012      	beq.n	8002dfa <UART_SetConfig+0xfe>
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d802      	bhi.n	8002de0 <UART_SetConfig+0xe4>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <UART_SetConfig+0xf2>
 8002dde:	e012      	b.n	8002e06 <UART_SetConfig+0x10a>
 8002de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de4:	d00c      	beq.n	8002e00 <UART_SetConfig+0x104>
 8002de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dea:	d003      	beq.n	8002df4 <UART_SetConfig+0xf8>
 8002dec:	e00b      	b.n	8002e06 <UART_SetConfig+0x10a>
 8002dee:	2300      	movs	r3, #0
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e089      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002df4:	2302      	movs	r3, #2
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e086      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e083      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e00:	2308      	movs	r3, #8
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e080      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e06:	2310      	movs	r3, #16
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	bf00      	nop
 8002e0c:	e07c      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	; (8002fe0 <UART_SetConfig+0x2e4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d123      	bne.n	8002e60 <UART_SetConfig+0x164>
 8002e18:	4b6f      	ldr	r3, [pc, #444]	; (8002fd8 <UART_SetConfig+0x2dc>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e24:	d012      	beq.n	8002e4c <UART_SetConfig+0x150>
 8002e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e2a:	d802      	bhi.n	8002e32 <UART_SetConfig+0x136>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <UART_SetConfig+0x144>
 8002e30:	e012      	b.n	8002e58 <UART_SetConfig+0x15c>
 8002e32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e36:	d00c      	beq.n	8002e52 <UART_SetConfig+0x156>
 8002e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e3c:	d003      	beq.n	8002e46 <UART_SetConfig+0x14a>
 8002e3e:	e00b      	b.n	8002e58 <UART_SetConfig+0x15c>
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e060      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e46:	2302      	movs	r3, #2
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e05d      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e05a      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e52:	2308      	movs	r3, #8
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e057      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	bf00      	nop
 8002e5e:	e053      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <UART_SetConfig+0x2e8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d123      	bne.n	8002eb2 <UART_SetConfig+0x1b6>
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <UART_SetConfig+0x2dc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d012      	beq.n	8002e9e <UART_SetConfig+0x1a2>
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d802      	bhi.n	8002e84 <UART_SetConfig+0x188>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <UART_SetConfig+0x196>
 8002e82:	e012      	b.n	8002eaa <UART_SetConfig+0x1ae>
 8002e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e88:	d00c      	beq.n	8002ea4 <UART_SetConfig+0x1a8>
 8002e8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e8e:	d003      	beq.n	8002e98 <UART_SetConfig+0x19c>
 8002e90:	e00b      	b.n	8002eaa <UART_SetConfig+0x1ae>
 8002e92:	2300      	movs	r3, #0
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e037      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e034      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e031      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e02e      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002eaa:	2310      	movs	r3, #16
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	bf00      	nop
 8002eb0:	e02a      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4c      	ldr	r2, [pc, #304]	; (8002fe8 <UART_SetConfig+0x2ec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d123      	bne.n	8002f04 <UART_SetConfig+0x208>
 8002ebc:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <UART_SetConfig+0x2dc>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec8:	d012      	beq.n	8002ef0 <UART_SetConfig+0x1f4>
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ece:	d802      	bhi.n	8002ed6 <UART_SetConfig+0x1da>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <UART_SetConfig+0x1e8>
 8002ed4:	e012      	b.n	8002efc <UART_SetConfig+0x200>
 8002ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eda:	d00c      	beq.n	8002ef6 <UART_SetConfig+0x1fa>
 8002edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee0:	d003      	beq.n	8002eea <UART_SetConfig+0x1ee>
 8002ee2:	e00b      	b.n	8002efc <UART_SetConfig+0x200>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e00e      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e00b      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e008      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e005      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	bf00      	nop
 8002f02:	e001      	b.n	8002f08 <UART_SetConfig+0x20c>
 8002f04:	2310      	movs	r3, #16
 8002f06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f10:	d16e      	bne.n	8002ff0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d828      	bhi.n	8002f6a <UART_SetConfig+0x26e>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x224>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f5b 	.word	0x08002f5b
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff f88e 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e013      	b.n	8002f74 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f8ac 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8002f50:	61b8      	str	r0, [r7, #24]
        break;
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <UART_SetConfig+0x2f0>)
 8002f56:	61bb      	str	r3, [r7, #24]
        break;
 8002f58:	e00c      	b.n	8002f74 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7ff f80d 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61b8      	str	r0, [r7, #24]
        break;
 8002f60:	e008      	b.n	8002f74 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e004      	b.n	8002f74 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77bb      	strb	r3, [r7, #30]
        break;
 8002f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8086 	beq.w	8003088 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	005a      	lsls	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	d916      	bls.n	8002fc8 <UART_SetConfig+0x2cc>
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d212      	bcs.n	8002fc8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	89fa      	ldrh	r2, [r7, #14]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	e05f      	b.n	8003088 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77bb      	strb	r3, [r7, #30]
 8002fcc:	e05c      	b.n	8003088 <UART_SetConfig+0x38c>
 8002fce:	bf00      	nop
 8002fd0:	efff69f3 	.word	0xefff69f3
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40005000 	.word	0x40005000
 8002fec:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d827      	bhi.n	8003046 <UART_SetConfig+0x34a>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x300>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003029 	.word	0x08003029
 8003004:	08003031 	.word	0x08003031
 8003008:	08003047 	.word	0x08003047
 800300c:	08003037 	.word	0x08003037
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	0800303f 	.word	0x0800303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7ff f820 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8003024:	61b8      	str	r0, [r7, #24]
        break;
 8003026:	e013      	b.n	8003050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7ff f83e 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 800302c:	61b8      	str	r0, [r7, #24]
        break;
 800302e:	e00f      	b.n	8003050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <UART_SetConfig+0x3a4>)
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003036:	f7fe ff9f 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 800303a:	61b8      	str	r0, [r7, #24]
        break;
 800303c:	e008      	b.n	8003050 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e004      	b.n	8003050 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	77bb      	strb	r3, [r7, #30]
        break;
 800304e:	bf00      	nop
    }

    if (pclk != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085a      	lsrs	r2, r3, #1
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	441a      	add	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d908      	bls.n	8003084 <UART_SetConfig+0x388>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d204      	bcs.n	8003084 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e001      	b.n	8003088 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003094:	7fbb      	ldrb	r3, [r7, #30]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01a      	beq.n	80031ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a2:	d10a      	bne.n	80031ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031f8:	f7fd fb9c 	bl	8000934 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d10e      	bne.n	800322a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f82d 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e023      	b.n	8003272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d10e      	bne.n	8003256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f817 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e00d      	b.n	8003272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	e05e      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d05a      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fd fb4e 	bl	8000934 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11b      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e043      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02c      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fe:	d124      	bne.n	800334a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003318:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	429a      	cmp	r2, r3
 8003366:	d091      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800337a:	f3ef 8305 	mrs	r3, IPSR
 800337e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003380:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	607b      	str	r3, [r7, #4]
  return(result);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <osKernelInitialize+0x32>
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <osKernelInitialize+0x64>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d109      	bne.n	80033ae <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800339a:	f3ef 8311 	mrs	r3, BASEPRI
 800339e:	603b      	str	r3, [r7, #0]
  return(result);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033a6:	f06f 0305 	mvn.w	r3, #5
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e00c      	b.n	80033c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <osKernelInitialize+0x64>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <osKernelInitialize+0x64>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e002      	b.n	80033c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000094 	.word	0x20000094

080033dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033e2:	f3ef 8305 	mrs	r3, IPSR
 80033e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	607b      	str	r3, [r7, #4]
  return(result);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <osKernelStart+0x32>
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <osKernelStart+0x64>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d109      	bne.n	8003416 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003402:	f3ef 8311 	mrs	r3, BASEPRI
 8003406:	603b      	str	r3, [r7, #0]
  return(result);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <osKernelStart+0x3a>
    stat = osErrorISR;
 800340e:	f06f 0305 	mvn.w	r3, #5
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e00e      	b.n	8003434 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <osKernelStart+0x64>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <osKernelStart+0x64>)
 8003420:	2202      	movs	r2, #2
 8003422:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003424:	f001 fa90 	bl	8004948 <vTaskStartScheduler>
      stat = osOK;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e002      	b.n	8003434 <osKernelStart+0x58>
    } else {
      stat = osError;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000094 	.word	0x20000094

08003444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b092      	sub	sp, #72	; 0x48
 8003448:	af04      	add	r7, sp, #16
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003454:	f3ef 8305 	mrs	r3, IPSR
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800345c:	2b00      	cmp	r3, #0
 800345e:	f040 8094 	bne.w	800358a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	623b      	str	r3, [r7, #32]
  return(result);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 808d 	bne.w	800358a <osThreadNew+0x146>
 8003470:	4b48      	ldr	r3, [pc, #288]	; (8003594 <osThreadNew+0x150>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d106      	bne.n	8003486 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003478:	f3ef 8311 	mrs	r3, BASEPRI
 800347c:	61fb      	str	r3, [r7, #28]
  return(result);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 8082 	bne.w	800358a <osThreadNew+0x146>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d07e      	beq.n	800358a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003490:	2318      	movs	r3, #24
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003494:	2300      	movs	r3, #0
 8003496:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003498:	f107 031b 	add.w	r3, r7, #27
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d045      	beq.n	8003536 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <osThreadNew+0x74>
        name = attr->name;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <osThreadNew+0x9a>
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2b38      	cmp	r3, #56	; 0x38
 80034d0:	d805      	bhi.n	80034de <osThreadNew+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <osThreadNew+0x9e>
        return (NULL);
 80034de:	2300      	movs	r3, #0
 80034e0:	e054      	b.n	800358c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <osThreadNew+0xd4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b5b      	cmp	r3, #91	; 0x5b
 8003500:	d90a      	bls.n	8003518 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <osThreadNew+0xd4>
        mem = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
 8003516:	e010      	b.n	800353a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <osThreadNew+0xf6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <osThreadNew+0xf6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <osThreadNew+0xf6>
          mem = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
 8003534:	e001      	b.n	800353a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	2b01      	cmp	r3, #1
 800353e:	d110      	bne.n	8003562 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003548:	9202      	str	r2, [sp, #8]
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003554:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f001 f82e 	bl	80045b8 <xTaskCreateStatic>
 800355c:	4603      	mov	r3, r0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e013      	b.n	800358a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d110      	bne.n	800358a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	b29a      	uxth	r2, r3
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f001 f875 	bl	800466a <xTaskCreate>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <osThreadNew+0x146>
          hTask = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800358a:	697b      	ldr	r3, [r7, #20]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3738      	adds	r7, #56	; 0x38
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000094 	.word	0x20000094

08003598 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a0:	f3ef 8305 	mrs	r3, IPSR
 80035a4:	613b      	str	r3, [r7, #16]
  return(result);
 80035a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10f      	bne.n	80035cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <osDelay+0x34>
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <osDelay+0x58>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d109      	bne.n	80035d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035c0:	f3ef 8311 	mrs	r3, BASEPRI
 80035c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <osDelay+0x3c>
    stat = osErrorISR;
 80035cc:	f06f 0305 	mvn.w	r3, #5
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e007      	b.n	80035e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f97e 	bl	80048e0 <vTaskDelay>
    }
  }

  return (stat);
 80035e4:	697b      	ldr	r3, [r7, #20]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000094 	.word	0x20000094

080035f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003604:	f3ef 8305 	mrs	r3, IPSR
 8003608:	61bb      	str	r3, [r7, #24]
  return(result);
 800360a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d170      	bne.n	80036f2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	617b      	str	r3, [r7, #20]
  return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d16a      	bne.n	80036f2 <osMessageQueueNew+0xfe>
 800361c:	4b37      	ldr	r3, [pc, #220]	; (80036fc <osMessageQueueNew+0x108>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d105      	bne.n	8003630 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003624:	f3ef 8311 	mrs	r3, BASEPRI
 8003628:	613b      	str	r3, [r7, #16]
  return(result);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d160      	bne.n	80036f2 <osMessageQueueNew+0xfe>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d05d      	beq.n	80036f2 <osMessageQueueNew+0xfe>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05a      	beq.n	80036f2 <osMessageQueueNew+0xfe>
    mem = -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d029      	beq.n	800369c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <osMessageQueueNew+0x82>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b4f      	cmp	r3, #79	; 0x4f
 8003656:	d90e      	bls.n	8003676 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <osMessageQueueNew+0x82>
        mem = 1;
 8003670:	2301      	movs	r3, #1
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	e014      	b.n	80036a0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d110      	bne.n	80036a0 <osMessageQueueNew+0xac>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <osMessageQueueNew+0xac>
          mem = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
 800369a:	e001      	b.n	80036a0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10c      	bne.n	80036c0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	460b      	mov	r3, r1
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa58 	bl	8003b6c <xQueueGenericCreateStatic>
 80036bc:	6278      	str	r0, [r7, #36]	; 0x24
 80036be:	e008      	b.n	80036d2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80036c6:	2200      	movs	r2, #0
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fac0 	bl	8003c50 <xQueueGenericCreate>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	e001      	b.n	80036ea <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80036ea:	69f9      	ldr	r1, [r7, #28]
 80036ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ee:	f000 ff07 	bl	8004500 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000094 	.word	0x20000094

08003700 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003718:	f3ef 8305 	mrs	r3, IPSR
 800371c:	61fb      	str	r3, [r7, #28]
  return(result);
 800371e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	61bb      	str	r3, [r7, #24]
  return(result);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <osMessageQueuePut+0x44>
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <osMessageQueuePut+0xe0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d12e      	bne.n	8003796 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003738:	f3ef 8311 	mrs	r3, BASEPRI
 800373c:	617b      	str	r3, [r7, #20]
  return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d028      	beq.n	8003796 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <osMessageQueuePut+0x56>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <osMessageQueuePut+0x56>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003756:	f06f 0303 	mvn.w	r3, #3
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800375c:	e039      	b.n	80037d2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003762:	f107 0210 	add.w	r2, r7, #16
 8003766:	2300      	movs	r3, #0
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	6a38      	ldr	r0, [r7, #32]
 800376c:	f000 fbca 	bl	8003f04 <xQueueGenericSendFromISR>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d003      	beq.n	800377e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003776:	f06f 0302 	mvn.w	r3, #2
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800377c:	e029      	b.n	80037d2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d026      	beq.n	80037d2 <osMessageQueuePut+0xd2>
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <osMessageQueuePut+0xe4>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003794:	e01d      	b.n	80037d2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <osMessageQueuePut+0xa2>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80037a2:	f06f 0303 	mvn.w	r3, #3
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e014      	b.n	80037d4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	6a38      	ldr	r0, [r7, #32]
 80037b2:	f000 faad 	bl	8003d10 <xQueueGenericSend>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d00b      	beq.n	80037d4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80037c2:	f06f 0301 	mvn.w	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
 80037c8:	e004      	b.n	80037d4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80037ca:	f06f 0302 	mvn.w	r3, #2
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e000      	b.n	80037d4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000094 	.word	0x20000094
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fe:	f3ef 8305 	mrs	r3, IPSR
 8003802:	61fb      	str	r3, [r7, #28]
  return(result);
 8003804:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380a:	f3ef 8310 	mrs	r3, PRIMASK
 800380e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <osMessageQueueGet+0x42>
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <osMessageQueueGet+0xdc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d12e      	bne.n	800387c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800381e:	f3ef 8311 	mrs	r3, BASEPRI
 8003822:	617b      	str	r3, [r7, #20]
  return(result);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <osMessageQueueGet+0x54>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <osMessageQueueGet+0x54>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800383c:	f06f 0303 	mvn.w	r3, #3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003842:	e038      	b.n	80038b6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	461a      	mov	r2, r3
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	6a38      	ldr	r0, [r7, #32]
 8003852:	f000 fcc7 	bl	80041e4 <xQueueReceiveFromISR>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d003      	beq.n	8003864 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800385c:	f06f 0302 	mvn.w	r3, #2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003862:	e028      	b.n	80038b6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d025      	beq.n	80038b6 <osMessageQueueGet+0xce>
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <osMessageQueueGet+0xe0>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800387a:	e01c      	b.n	80038b6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <osMessageQueueGet+0xa0>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003888:	f06f 0303 	mvn.w	r3, #3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e013      	b.n	80038b8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	6a38      	ldr	r0, [r7, #32]
 8003896:	f000 fbc9 	bl	800402c <xQueueReceive>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d00b      	beq.n	80038b8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80038a6:	f06f 0301 	mvn.w	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e004      	b.n	80038b8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80038ae:	f06f 0302 	mvn.w	r3, #2
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e000      	b.n	80038b8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000094 	.word	0x20000094
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80038dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <vApplicationGetIdleTaskMemory+0x30>)
 80038e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000098 	.word	0x20000098
 80038fc:	200000f4 	.word	0x200000f4

08003900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <vApplicationGetTimerTaskMemory+0x2c>)
 8003910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <vApplicationGetTimerTaskMemory+0x30>)
 8003916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	200002f4 	.word	0x200002f4
 8003930:	20000350 	.word	0x20000350

08003934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f103 0208 	add.w	r2, r3, #8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f103 0208 	add.w	r2, r3, #8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0208 	add.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d103      	bne.n	80039f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e00c      	b.n	8003a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3308      	adds	r3, #8
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e002      	b.n	8003a04 <vListInsert+0x2e>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d2f6      	bcs.n	80039fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6852      	ldr	r2, [r2, #4]
 8003a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d103      	bne.n	8003a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003ac4:	f002 f892 	bl	8005bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	3b01      	subs	r3, #1
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	441a      	add	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	22ff      	movs	r2, #255	; 0xff
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d114      	bne.n	8003b44 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01a      	beq.n	8003b58 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3310      	adds	r3, #16
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f994 	bl	8004e54 <xTaskRemoveFromEventList>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <xQueueGenericReset+0xcc>)
 8003b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	e009      	b.n	8003b58 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3310      	adds	r3, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fef3 	bl	8003934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3324      	adds	r3, #36	; 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff feee 	bl	8003934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b58:	f002 f876 	bl	8005c48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	; 0x38
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <xQueueGenericCreateStatic+0x28>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	e7fe      	b.n	8003b92 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <xQueueGenericCreateStatic+0x42>
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <xQueueGenericCreateStatic+0x4e>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <xQueueGenericCreateStatic+0x52>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericCreateStatic+0x54>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <xQueueGenericCreateStatic+0x6c>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	e7fe      	b.n	8003bd6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <xQueueGenericCreateStatic+0x78>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <xQueueGenericCreateStatic+0x7c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <xQueueGenericCreateStatic+0x7e>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <xQueueGenericCreateStatic+0x96>
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	e7fe      	b.n	8003c00 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c02:	2350      	movs	r3, #80	; 0x50
 8003c04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b50      	cmp	r3, #80	; 0x50
 8003c0a:	d009      	beq.n	8003c20 <xQueueGenericCreateStatic+0xb4>
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f842 	bl	8003cca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	; 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <xQueueGenericCreate+0x28>
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e7fe      	b.n	8003c76 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e004      	b.n	8003c8e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3350      	adds	r3, #80	; 0x50
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 f8c4 	bl	8005e20 <pvPortMalloc>
 8003c98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3350      	adds	r3, #80	; 0x50
 8003ca4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f805 	bl	8003cca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
	}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e002      	b.n	8003cec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	69b8      	ldr	r0, [r7, #24]
 8003cfc:	f7ff fece 	bl	8003a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08e      	sub	sp, #56	; 0x38
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <xQueueGenericSend+0x30>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3e:	e7fe      	b.n	8003d3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <xQueueGenericSend+0x3e>
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <xQueueGenericSend+0x42>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueGenericSend+0x44>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <xQueueGenericSend+0x5c>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSend+0x6a>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSend+0x6e>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSend+0x70>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <xQueueGenericSend+0x88>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	e7fe      	b.n	8003d96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d98:	f001 fa18 	bl	80051cc <xTaskGetSchedulerState>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xQueueGenericSend+0x98>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueGenericSend+0x9c>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueGenericSend+0x9e>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xQueueGenericSend+0xb6>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dc6:	f001 ff11 	bl	8005bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <xQueueGenericSend+0xcc>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d129      	bne.n	8003e30 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de2:	f000 fa7c 	bl	80042de <prvCopyDataToQueue>
 8003de6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 f82d 	bl	8004e54 <xTaskRemoveFromEventList>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <xQueueGenericSend+0x1f0>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	e00a      	b.n	8003e28 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <xQueueGenericSend+0x1f0>)
 8003e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e28:	f001 ff0e 	bl	8005c48 <vPortExitCritical>
				return pdPASS;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e063      	b.n	8003ef8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e36:	f001 ff07 	bl	8005c48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e05c      	b.n	8003ef8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f865 	bl	8004f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e52:	f001 fef9 	bl	8005c48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e56:	f000 fddb 	bl	8004a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5a:	f001 fec7 	bl	8005bec <vPortEnterCritical>
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d103      	bne.n	8003e74 <xQueueGenericSend+0x164>
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7a:	b25b      	sxtb	r3, r3
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d103      	bne.n	8003e8a <xQueueGenericSend+0x17a>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8a:	f001 fedd 	bl	8005c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e8e:	1d3a      	adds	r2, r7, #4
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f854 	bl	8004f44 <xTaskCheckForTimeOut>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d124      	bne.n	8003eec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea4:	f000 fb13 	bl	80044ce <prvIsQueueFull>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ff7e 	bl	8004db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ebe:	f000 fa9e 	bl	80043fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ec2:	f000 fdb3 	bl	8004a2c <xTaskResumeAll>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f af7c 	bne.w	8003dc6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <xQueueGenericSend+0x1f0>)
 8003ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	e772      	b.n	8003dc6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee2:	f000 fa8c 	bl	80043fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee6:	f000 fda1 	bl	8004a2c <xTaskResumeAll>
 8003eea:	e76c      	b.n	8003dc6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eee:	f000 fa86 	bl	80043fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef2:	f000 fd9b 	bl	8004a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ef6:	2300      	movs	r3, #0
		}
	}
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3738      	adds	r7, #56	; 0x38
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <xQueueGenericSendFromISR+0x2c>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	e7fe      	b.n	8003f2e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSendFromISR+0x3a>
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <xQueueGenericSendFromISR+0x3e>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericSendFromISR+0x40>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <xQueueGenericSendFromISR+0x58>
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d103      	bne.n	8003f6a <xQueueGenericSendFromISR+0x66>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <xQueueGenericSendFromISR+0x6a>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueGenericSendFromISR+0x6c>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <xQueueGenericSendFromISR+0x84>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e7fe      	b.n	8003f86 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f88:	f001 ff0c 	bl	8005da4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f8c:	f3ef 8211 	mrs	r2, BASEPRI
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	61ba      	str	r2, [r7, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d302      	bcc.n	8003fba <xQueueGenericSendFromISR+0xb6>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d12c      	bne.n	8004014 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fca:	f000 f988 	bl	80042de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d112      	bne.n	8003ffe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 ff35 	bl	8004e54 <xTaskRemoveFromEventList>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e007      	b.n	800400e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004002:	3301      	adds	r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	b25a      	sxtb	r2, r3
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800400e:	2301      	movs	r3, #1
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004012:	e001      	b.n	8004018 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004014:	2300      	movs	r3, #0
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <xQueueReceive+0x2e>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	e7fe      	b.n	8004058 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueReceive+0x3c>
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueReceive+0x40>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueReceive+0x42>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <xQueueReceive+0x5a>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e7fe      	b.n	8004084 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004086:	f001 f8a1 	bl	80051cc <xTaskGetSchedulerState>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <xQueueReceive+0x6a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueReceive+0x6e>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueReceive+0x70>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueReceive+0x88>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e7fe      	b.n	80040b2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040b4:	f001 fd9a 	bl	8005bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01f      	beq.n	8004104 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c8:	f000 f973 	bl	80043b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1e5a      	subs	r2, r3, #1
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	3310      	adds	r3, #16
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 feb7 	bl	8004e54 <xTaskRemoveFromEventList>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040ec:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <xQueueReceive+0x1b4>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040fc:	f001 fda4 	bl	8005c48 <vPortExitCritical>
				return pdPASS;
 8004100:	2301      	movs	r3, #1
 8004102:	e069      	b.n	80041d8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800410a:	f001 fd9d 	bl	8005c48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800410e:	2300      	movs	r3, #0
 8004110:	e062      	b.n	80041d8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004118:	f107 0310 	add.w	r3, r7, #16
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fefb 	bl	8004f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004126:	f001 fd8f 	bl	8005c48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800412a:	f000 fc71 	bl	8004a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800412e:	f001 fd5d 	bl	8005bec <vPortEnterCritical>
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004138:	b25b      	sxtb	r3, r3
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d103      	bne.n	8004148 <xQueueReceive+0x11c>
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414e:	b25b      	sxtb	r3, r3
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d103      	bne.n	800415e <xQueueReceive+0x132>
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415e:	f001 fd73 	bl	8005c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004162:	1d3a      	adds	r2, r7, #4
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 feea 	bl	8004f44 <xTaskCheckForTimeOut>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d123      	bne.n	80041be <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004178:	f000 f993 	bl	80044a2 <prvIsQueueEmpty>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d017      	beq.n	80041b2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fe14 	bl	8004db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004192:	f000 f934 	bl	80043fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004196:	f000 fc49 	bl	8004a2c <xTaskResumeAll>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d189      	bne.n	80040b4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <xQueueReceive+0x1b4>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	e780      	b.n	80040b4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b4:	f000 f923 	bl	80043fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b8:	f000 fc38 	bl	8004a2c <xTaskResumeAll>
 80041bc:	e77a      	b.n	80040b4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c0:	f000 f91d 	bl	80043fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041c4:	f000 fc32 	bl	8004a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ca:	f000 f96a 	bl	80044a2 <prvIsQueueEmpty>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f43f af6f 	beq.w	80040b4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3730      	adds	r7, #48	; 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <xQueueReceiveFromISR+0x2a>
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	623b      	str	r3, [r7, #32]
 800420c:	e7fe      	b.n	800420c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <xQueueReceiveFromISR+0x38>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueReceiveFromISR+0x3c>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueReceiveFromISR+0x3e>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <xQueueReceiveFromISR+0x56>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e7fe      	b.n	8004238 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800423a:	f001 fdb3 	bl	8005da4 <vPortValidateInterruptPriority>
	__asm volatile
 800423e:	f3ef 8211 	mrs	r2, BASEPRI
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	61ba      	str	r2, [r7, #24]
 8004254:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004256:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02f      	beq.n	80042c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800426c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004274:	f000 f89d 	bl	80043b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	1e5a      	subs	r2, r3, #1
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d112      	bne.n	80042b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	3310      	adds	r3, #16
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fddc 	bl	8004e54 <xTaskRemoveFromEventList>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e007      	b.n	80042c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80042b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	b25a      	sxtb	r2, r3
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80042c0:	2301      	movs	r3, #1
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
 80042c4:	e001      	b.n	80042ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3738      	adds	r7, #56	; 0x38
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d14d      	bne.n	80043a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff7d 	bl	8005208 <xTaskPriorityDisinherit>
 800430e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	e043      	b.n	80043a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d119      	bne.n	8004352 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6898      	ldr	r0, [r3, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	461a      	mov	r2, r3
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	f001 ff79 	bl	8006220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	441a      	add	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d32b      	bcc.n	80043a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	e026      	b.n	80043a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68d8      	ldr	r0, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	461a      	mov	r2, r3
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	f001 ff5f 	bl	8006220 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	425b      	negs	r3, r3
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d207      	bcs.n	800438e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	425b      	negs	r3, r3
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d105      	bne.n	80043a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3b01      	subs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d018      	beq.n	80043f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d303      	bcc.n	80043e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	461a      	mov	r2, r3
 80043f0:	6838      	ldr	r0, [r7, #0]
 80043f2:	f001 ff15 	bl	8006220 <memcpy>
	}
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004406:	f001 fbf1 	bl	8005bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004410:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004412:	e011      	b.n	8004438 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3324      	adds	r3, #36	; 0x24
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd17 	bl	8004e54 <xTaskRemoveFromEventList>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800442c:	f000 fdea 	bl	8005004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	3b01      	subs	r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	dce9      	bgt.n	8004414 <prvUnlockQueue+0x16>
 8004440:	e000      	b.n	8004444 <prvUnlockQueue+0x46>
					break;
 8004442:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800444c:	f001 fbfc 	bl	8005c48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004450:	f001 fbcc 	bl	8005bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800445c:	e011      	b.n	8004482 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3310      	adds	r3, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fcf2 	bl	8004e54 <xTaskRemoveFromEventList>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004476:	f000 fdc5 	bl	8005004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800447a:	7bbb      	ldrb	r3, [r7, #14]
 800447c:	3b01      	subs	r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004486:	2b00      	cmp	r3, #0
 8004488:	dce9      	bgt.n	800445e <prvUnlockQueue+0x60>
 800448a:	e000      	b.n	800448e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800448c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	22ff      	movs	r2, #255	; 0xff
 8004492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004496:	f001 fbd7 	bl	8005c48 <vPortExitCritical>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044aa:	f001 fb9f 	bl	8005bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044b6:	2301      	movs	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e001      	b.n	80044c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044c0:	f001 fbc2 	bl	8005c48 <vPortExitCritical>

	return xReturn;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d6:	f001 fb89 	bl	8005bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d102      	bne.n	80044ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044e6:	2301      	movs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e001      	b.n	80044f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044f0:	f001 fbaa 	bl	8005c48 <vPortExitCritical>

	return xReturn;
 80044f4:	68fb      	ldr	r3, [r7, #12]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e014      	b.n	800453a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004510:	4a0e      	ldr	r2, [pc, #56]	; (800454c <vQueueAddToRegistry+0x4c>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800451c:	490b      	ldr	r1, [pc, #44]	; (800454c <vQueueAddToRegistry+0x4c>)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <vQueueAddToRegistry+0x4c>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004532:	e005      	b.n	8004540 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b07      	cmp	r3, #7
 800453e:	d9e7      	bls.n	8004510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	20001af4 	.word	0x20001af4

08004550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004560:	f001 fb44 	bl	8005bec <vPortEnterCritical>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456a:	b25b      	sxtb	r3, r3
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d103      	bne.n	800457a <vQueueWaitForMessageRestricted+0x2a>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d103      	bne.n	8004590 <vQueueWaitForMessageRestricted+0x40>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004590:	f001 fb5a 	bl	8005c48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fc2b 	bl	8004e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff27 	bl	80043fe <prvUnlockQueue>
	}
 80045b0:	bf00      	nop
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af04      	add	r7, sp, #16
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <xTaskCreateStatic+0x28>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	e7fe      	b.n	80045de <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <xTaskCreateStatic+0x42>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e7fe      	b.n	80045f8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045fa:	235c      	movs	r3, #92	; 0x5c
 80045fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b5c      	cmp	r3, #92	; 0x5c
 8004602:	d009      	beq.n	8004618 <xTaskCreateStatic+0x60>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e7fe      	b.n	8004616 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01e      	beq.n	800465c <xTaskCreateStatic+0xa4>
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800462c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004636:	2300      	movs	r3, #0
 8004638:	9303      	str	r3, [sp, #12]
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	9302      	str	r3, [sp, #8]
 800463e:	f107 0314 	add.w	r3, r7, #20
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f850 	bl	80046f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004656:	f000 f8d3 	bl	8004800 <prvAddNewTaskToReadyList>
 800465a:	e001      	b.n	8004660 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004660:	697b      	ldr	r3, [r7, #20]
	}
 8004662:	4618      	mov	r0, r3
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08c      	sub	sp, #48	; 0x30
 800466e:	af04      	add	r7, sp, #16
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fbce 	bl	8005e20 <pvPortMalloc>
 8004684:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800468c:	205c      	movs	r0, #92	; 0x5c
 800468e:	f001 fbc7 	bl	8005e20 <pvPortMalloc>
 8004692:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
 80046a0:	e005      	b.n	80046ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f001 fc7e 	bl	8005fa4 <vPortFree>
 80046a8:	e001      	b.n	80046ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d017      	beq.n	80046e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	2300      	movs	r3, #0
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	9302      	str	r3, [sp, #8]
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f80e 	bl	80046f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046d8:	69f8      	ldr	r0, [r7, #28]
 80046da:	f000 f891 	bl	8004800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e002      	b.n	80046ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046ea:	69bb      	ldr	r3, [r7, #24]
	}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	461a      	mov	r2, r3
 800470c:	21a5      	movs	r1, #165	; 0xa5
 800470e:	f001 fd92 	bl	8006236 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800471c:	3b01      	subs	r3, #1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <prvInitialiseNewTask+0x56>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e7fe      	b.n	8004748 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e012      	b.n	8004776 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	3334      	adds	r3, #52	; 0x34
 8004760:	460a      	mov	r2, r1
 8004762:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b0f      	cmp	r3, #15
 800477a:	d9e9      	bls.n	8004750 <prvInitialiseNewTask+0x5c>
 800477c:	e000      	b.n	8004780 <prvInitialiseNewTask+0x8c>
		{
			break;
 800477e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	2b37      	cmp	r3, #55	; 0x37
 800478c:	d901      	bls.n	8004792 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800478e:	2337      	movs	r3, #55	; 0x37
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff f8e3 	bl	8003974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	3318      	adds	r3, #24
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f8de 	bl	8003974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2200      	movs	r2, #0
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	69b8      	ldr	r0, [r7, #24]
 80047e2:	f001 f8db 	bl	800599c <pxPortInitialiseStack>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f8:	bf00      	nop
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004808:	f001 f9f0 	bl	8005bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a2c      	ldr	r2, [pc, #176]	; (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 8004814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800481e:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d110      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800482c:	f000 fc0e 	bl	800504c <prvInitialiseTaskLists>
 8004830:	e00d      	b.n	800484e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <prvAddNewTaskToReadyList+0xcc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d802      	bhi.n	800484e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800484e:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 8004856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <prvAddNewTaskToReadyList+0xd4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d903      	bls.n	8004874 <prvAddNewTaskToReadyList+0x74>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <prvAddNewTaskToReadyList+0xd4>)
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <prvAddNewTaskToReadyList+0xd8>)
 8004882:	441a      	add	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7ff f87f 	bl	800398e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004890:	f001 f9da 	bl	8005c48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <prvAddNewTaskToReadyList+0xcc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d207      	bcs.n	80048ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <prvAddNewTaskToReadyList+0xdc>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000c24 	.word	0x20000c24
 80048c8:	20000750 	.word	0x20000750
 80048cc:	20000c30 	.word	0x20000c30
 80048d0:	20000c40 	.word	0x20000c40
 80048d4:	20000c2c 	.word	0x20000c2c
 80048d8:	20000754 	.word	0x20000754
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <vTaskDelay+0x60>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <vTaskDelay+0x2e>
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	e7fe      	b.n	800490c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800490e:	f000 f87f 	bl	8004a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fce3 	bl	80052e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800491a:	f000 f887 	bl	8004a2c <xTaskResumeAll>
 800491e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <vTaskDelay+0x64>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000c4c 	.word	0x20000c4c
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004956:	463a      	mov	r2, r7
 8004958:	1d39      	adds	r1, r7, #4
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe ffb4 	bl	80038cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	9202      	str	r2, [sp, #8]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	2300      	movs	r3, #0
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	460a      	mov	r2, r1
 8004976:	4920      	ldr	r1, [pc, #128]	; (80049f8 <vTaskStartScheduler+0xb0>)
 8004978:	4820      	ldr	r0, [pc, #128]	; (80049fc <vTaskStartScheduler+0xb4>)
 800497a:	f7ff fe1d 	bl	80045b8 <xTaskCreateStatic>
 800497e:	4602      	mov	r2, r0
 8004980:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <vTaskStartScheduler+0xb8>)
 8004982:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004984:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <vTaskStartScheduler+0xb8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e001      	b.n	8004996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d102      	bne.n	80049a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800499c:	f000 fcf4 	bl	8005388 <xTimerCreateTimerTask>
 80049a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d115      	bne.n	80049d4 <vTaskStartScheduler+0x8c>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <vTaskStartScheduler+0xbc>)
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <vTaskStartScheduler+0xc0>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <vTaskStartScheduler+0xc4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ce:	f001 f86f 	bl	8005ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049d2:	e00d      	b.n	80049f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d109      	bne.n	80049f0 <vTaskStartScheduler+0xa8>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e7fe      	b.n	80049ee <vTaskStartScheduler+0xa6>
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08006aac 	.word	0x08006aac
 80049fc:	0800501d 	.word	0x0800501d
 8004a00:	20000c48 	.word	0x20000c48
 8004a04:	20000c44 	.word	0x20000c44
 8004a08:	20000c30 	.word	0x20000c30
 8004a0c:	20000c28 	.word	0x20000c28

08004a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <vTaskSuspendAll+0x18>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <vTaskSuspendAll+0x18>)
 8004a1c:	6013      	str	r3, [r2, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000c4c 	.word	0x20000c4c

08004a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a3a:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <xTaskResumeAll+0x114>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <xTaskResumeAll+0x2a>
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	e7fe      	b.n	8004a54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a56:	f001 f8c9 	bl	8005bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <xTaskResumeAll+0x114>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a37      	ldr	r2, [pc, #220]	; (8004b40 <xTaskResumeAll+0x114>)
 8004a62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <xTaskResumeAll+0x114>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d162      	bne.n	8004b32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <xTaskResumeAll+0x118>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05e      	beq.n	8004b32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a74:	e02f      	b.n	8004ad6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a76:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <xTaskResumeAll+0x11c>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3318      	adds	r3, #24
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe ffe0 	bl	8003a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe ffdb 	bl	8003a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <xTaskResumeAll+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d903      	bls.n	8004aa6 <xTaskResumeAll+0x7a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <xTaskResumeAll+0x120>)
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <xTaskResumeAll+0x124>)
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7fe ff66 	bl	800398e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <xTaskResumeAll+0x128>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <xTaskResumeAll+0x12c>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <xTaskResumeAll+0x11c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1cb      	bne.n	8004a76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ae4:	f000 fb4c 	bl	8005180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <xTaskResumeAll+0x130>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004af4:	f000 f846 	bl	8004b84 <xTaskIncrementTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <xTaskResumeAll+0x12c>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <xTaskResumeAll+0x130>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <xTaskResumeAll+0x12c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <xTaskResumeAll+0x134>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b32:	f001 f889 	bl	8005c48 <vPortExitCritical>

	return xAlreadyYielded;
 8004b36:	68bb      	ldr	r3, [r7, #8]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000c4c 	.word	0x20000c4c
 8004b44:	20000c24 	.word	0x20000c24
 8004b48:	20000be4 	.word	0x20000be4
 8004b4c:	20000c2c 	.word	0x20000c2c
 8004b50:	20000754 	.word	0x20000754
 8004b54:	20000750 	.word	0x20000750
 8004b58:	20000c38 	.word	0x20000c38
 8004b5c:	20000c34 	.word	0x20000c34
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <xTaskGetTickCount+0x1c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b70:	687b      	ldr	r3, [r7, #4]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000c28 	.word	0x20000c28

08004b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8e:	4b51      	ldr	r3, [pc, #324]	; (8004cd4 <xTaskIncrementTick+0x150>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 808d 	bne.w	8004cb2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b98:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <xTaskIncrementTick+0x154>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba0:	4a4d      	ldr	r2, [pc, #308]	; (8004cd8 <xTaskIncrementTick+0x154>)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11f      	bne.n	8004bec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bac:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <xTaskIncrementTick+0x158>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <xTaskIncrementTick+0x46>
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	e7fe      	b.n	8004bc8 <xTaskIncrementTick+0x44>
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <xTaskIncrementTick+0x158>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <xTaskIncrementTick+0x15c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <xTaskIncrementTick+0x158>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4a41      	ldr	r2, [pc, #260]	; (8004ce0 <xTaskIncrementTick+0x15c>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <xTaskIncrementTick+0x160>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a3f      	ldr	r2, [pc, #252]	; (8004ce4 <xTaskIncrementTick+0x160>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	f000 faca 	bl	8005180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bec:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <xTaskIncrementTick+0x164>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d34e      	bcc.n	8004c94 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <xTaskIncrementTick+0x158>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <xTaskIncrementTick+0x80>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <xTaskIncrementTick+0x82>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0a:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <xTaskIncrementTick+0x164>)
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	601a      	str	r2, [r3, #0]
					break;
 8004c12:	e03f      	b.n	8004c94 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <xTaskIncrementTick+0x158>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d203      	bcs.n	8004c34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ce8 <xTaskIncrementTick+0x164>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6013      	str	r3, [r2, #0]
						break;
 8004c32:	e02f      	b.n	8004c94 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe ff05 	bl	8003a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3318      	adds	r3, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fefc 	bl	8003a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <xTaskIncrementTick+0x168>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d903      	bls.n	8004c64 <xTaskIncrementTick+0xe0>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <xTaskIncrementTick+0x168>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <xTaskIncrementTick+0x16c>)
 8004c72:	441a      	add	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fe87 	bl	800398e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <xTaskIncrementTick+0x170>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3b3      	bcc.n	8004bf6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c92:	e7b0      	b.n	8004bf6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <xTaskIncrementTick+0x170>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4915      	ldr	r1, [pc, #84]	; (8004cf0 <xTaskIncrementTick+0x16c>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d907      	bls.n	8004cbc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e004      	b.n	8004cbc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <xTaskIncrementTick+0x174>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <xTaskIncrementTick+0x174>)
 8004cba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <xTaskIncrementTick+0x178>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cc8:	697b      	ldr	r3, [r7, #20]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000c4c 	.word	0x20000c4c
 8004cd8:	20000c28 	.word	0x20000c28
 8004cdc:	20000bdc 	.word	0x20000bdc
 8004ce0:	20000be0 	.word	0x20000be0
 8004ce4:	20000c3c 	.word	0x20000c3c
 8004ce8:	20000c44 	.word	0x20000c44
 8004cec:	20000c2c 	.word	0x20000c2c
 8004cf0:	20000754 	.word	0x20000754
 8004cf4:	20000750 	.word	0x20000750
 8004cf8:	20000c34 	.word	0x20000c34
 8004cfc:	20000c38 	.word	0x20000c38

08004d00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <vTaskSwitchContext+0xa4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d0e:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <vTaskSwitchContext+0xa8>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d14:	e040      	b.n	8004d98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <vTaskSwitchContext+0xa8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <vTaskSwitchContext+0xac>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e00f      	b.n	8004d44 <vTaskSwitchContext+0x44>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <vTaskSwitchContext+0x3e>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e7fe      	b.n	8004d3c <vTaskSwitchContext+0x3c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	491a      	ldr	r1, [pc, #104]	; (8004db0 <vTaskSwitchContext+0xb0>)
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e5      	beq.n	8004d24 <vTaskSwitchContext+0x24>
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <vTaskSwitchContext+0xb0>)
 8004d64:	4413      	add	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d104      	bne.n	8004d88 <vTaskSwitchContext+0x88>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <vTaskSwitchContext+0xb4>)
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4a06      	ldr	r2, [pc, #24]	; (8004dac <vTaskSwitchContext+0xac>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000c4c 	.word	0x20000c4c
 8004da8:	20000c38 	.word	0x20000c38
 8004dac:	20000c2c 	.word	0x20000c2c
 8004db0:	20000754 	.word	0x20000754
 8004db4:	20000750 	.word	0x20000750

08004db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <vTaskPlaceOnEventList+0x24>
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e7fe      	b.n	8004dda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <vTaskPlaceOnEventList+0x44>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3318      	adds	r3, #24
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fe fdf6 	bl	80039d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dea:	2101      	movs	r1, #1
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f000 fa77 	bl	80052e0 <prvAddCurrentTaskToDelayedList>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000750 	.word	0x20000750

08004e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <vTaskPlaceOnEventListRestricted+0x26>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e7fe      	b.n	8004e24 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3318      	adds	r3, #24
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7fe fdad 	bl	800398e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f000 fa4c 	bl	80052e0 <prvAddCurrentTaskToDelayedList>
	}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000750 	.word	0x20000750

08004e54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <xTaskRemoveFromEventList+0x2a>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e7fe      	b.n	8004e7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3318      	adds	r3, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fde0 	bl	8003a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <xTaskRemoveFromEventList+0xac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11d      	bne.n	8004ecc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fdd7 	bl	8003a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <xTaskRemoveFromEventList+0xb0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d903      	bls.n	8004eae <xTaskRemoveFromEventList+0x5a>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <xTaskRemoveFromEventList+0xb0>)
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <xTaskRemoveFromEventList+0xb4>)
 8004ebc:	441a      	add	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fe fd62 	bl	800398e <vListInsertEnd>
 8004eca:	e005      	b.n	8004ed8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3318      	adds	r3, #24
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480e      	ldr	r0, [pc, #56]	; (8004f0c <xTaskRemoveFromEventList+0xb8>)
 8004ed4:	f7fe fd5b 	bl	800398e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <xTaskRemoveFromEventList+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d905      	bls.n	8004ef2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <xTaskRemoveFromEventList+0xc0>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e001      	b.n	8004ef6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ef6:	697b      	ldr	r3, [r7, #20]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000c4c 	.word	0x20000c4c
 8004f04:	20000c2c 	.word	0x20000c2c
 8004f08:	20000754 	.word	0x20000754
 8004f0c:	20000be4 	.word	0x20000be4
 8004f10:	20000750 	.word	0x20000750
 8004f14:	20000c38 	.word	0x20000c38

08004f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <vTaskInternalSetTimeOutState+0x24>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <vTaskInternalSetTimeOutState+0x28>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000c3c 	.word	0x20000c3c
 8004f40:	20000c28 	.word	0x20000c28

08004f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <xTaskCheckForTimeOut+0x24>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e7fe      	b.n	8004f66 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <xTaskCheckForTimeOut+0x3e>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e7fe      	b.n	8004f80 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f82:	f000 fe33 	bl	8005bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <xTaskCheckForTimeOut+0xb8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d102      	bne.n	8004fa6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e023      	b.n	8004fee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <xTaskCheckForTimeOut+0xbc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d007      	beq.n	8004fc2 <xTaskCheckForTimeOut+0x7e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e015      	b.n	8004fee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d20b      	bcs.n	8004fe4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff9d 	bl	8004f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e004      	b.n	8004fee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f000 fe2b 	bl	8005c48 <vPortExitCritical>

	return xReturn;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000c28 	.word	0x20000c28
 8005000:	20000c3c 	.word	0x20000c3c

08005004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <vTaskMissedYield+0x14>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20000c38 	.word	0x20000c38

0800501c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005024:	f000 f852 	bl	80050cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <prvIdleTask+0x28>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d9f9      	bls.n	8005024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <prvIdleTask+0x2c>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005040:	e7f0      	b.n	8005024 <prvIdleTask+0x8>
 8005042:	bf00      	nop
 8005044:	20000754 	.word	0x20000754
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	e00c      	b.n	8005072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <prvInitialiseTaskLists+0x60>)
 8005064:	4413      	add	r3, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fc64 	bl	8003934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3301      	adds	r3, #1
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b37      	cmp	r3, #55	; 0x37
 8005076:	d9ef      	bls.n	8005058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <prvInitialiseTaskLists+0x64>)
 800507a:	f7fe fc5b 	bl	8003934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800507e:	480d      	ldr	r0, [pc, #52]	; (80050b4 <prvInitialiseTaskLists+0x68>)
 8005080:	f7fe fc58 	bl	8003934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005084:	480c      	ldr	r0, [pc, #48]	; (80050b8 <prvInitialiseTaskLists+0x6c>)
 8005086:	f7fe fc55 	bl	8003934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800508a:	480c      	ldr	r0, [pc, #48]	; (80050bc <prvInitialiseTaskLists+0x70>)
 800508c:	f7fe fc52 	bl	8003934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005090:	480b      	ldr	r0, [pc, #44]	; (80050c0 <prvInitialiseTaskLists+0x74>)
 8005092:	f7fe fc4f 	bl	8003934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <prvInitialiseTaskLists+0x78>)
 8005098:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <prvInitialiseTaskLists+0x64>)
 800509a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvInitialiseTaskLists+0x7c>)
 800509e:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <prvInitialiseTaskLists+0x68>)
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000754 	.word	0x20000754
 80050b0:	20000bb4 	.word	0x20000bb4
 80050b4:	20000bc8 	.word	0x20000bc8
 80050b8:	20000be4 	.word	0x20000be4
 80050bc:	20000bf8 	.word	0x20000bf8
 80050c0:	20000c10 	.word	0x20000c10
 80050c4:	20000bdc 	.word	0x20000bdc
 80050c8:	20000be0 	.word	0x20000be0

080050cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050d2:	e019      	b.n	8005108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050d4:	f000 fd8a 	bl	8005bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <prvCheckTasksWaitingTermination+0x4c>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe fcaf 	bl	8003a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <prvCheckTasksWaitingTermination+0x50>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a0a      	ldr	r2, [pc, #40]	; (800511c <prvCheckTasksWaitingTermination+0x50>)
 80050f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <prvCheckTasksWaitingTermination+0x54>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <prvCheckTasksWaitingTermination+0x54>)
 80050fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050fe:	f000 fda3 	bl	8005c48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f80e 	bl	8005124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <prvCheckTasksWaitingTermination+0x54>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e1      	bne.n	80050d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000bf8 	.word	0x20000bf8
 800511c:	20000c24 	.word	0x20000c24
 8005120:	20000c0c 	.word	0x20000c0c

08005124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005132:	2b00      	cmp	r3, #0
 8005134:	d108      	bne.n	8005148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	4618      	mov	r0, r3
 800513c:	f000 ff32 	bl	8005fa4 <vPortFree>
				vPortFree( pxTCB );
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 ff2f 	bl	8005fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005146:	e017      	b.n	8005178 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800514e:	2b01      	cmp	r3, #1
 8005150:	d103      	bne.n	800515a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 ff26 	bl	8005fa4 <vPortFree>
	}
 8005158:	e00e      	b.n	8005178 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005160:	2b02      	cmp	r3, #2
 8005162:	d009      	beq.n	8005178 <prvDeleteTCB+0x54>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e7fe      	b.n	8005176 <prvDeleteTCB+0x52>
	}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <prvResetNextTaskUnblockTime+0x44>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <prvResetNextTaskUnblockTime+0x14>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <prvResetNextTaskUnblockTime+0x16>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <prvResetNextTaskUnblockTime+0x48>)
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051a2:	e008      	b.n	80051b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <prvResetNextTaskUnblockTime+0x44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <prvResetNextTaskUnblockTime+0x48>)
 80051b4:	6013      	str	r3, [r2, #0]
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000bdc 	.word	0x20000bdc
 80051c8:	20000c44 	.word	0x20000c44

080051cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <xTaskGetSchedulerState+0x34>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051da:	2301      	movs	r3, #1
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e008      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <xTaskGetSchedulerState+0x38>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e8:	2302      	movs	r3, #2
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e001      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051f2:	687b      	ldr	r3, [r7, #4]
	}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000c30 	.word	0x20000c30
 8005204:	20000c4c 	.word	0x20000c4c

08005208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d054      	beq.n	80052c8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800521e:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <xTaskPriorityDisinherit+0xcc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d009      	beq.n	800523c <xTaskPriorityDisinherit+0x34>
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e7fe      	b.n	800523a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <xTaskPriorityDisinherit+0x50>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	e7fe      	b.n	8005256 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	1e5a      	subs	r2, r3, #1
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	429a      	cmp	r2, r3
 800526c:	d02c      	beq.n	80052c8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	2b00      	cmp	r3, #0
 8005274:	d128      	bne.n	80052c8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3304      	adds	r3, #4
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fbe4 	bl	8003a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <xTaskPriorityDisinherit+0xd0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d903      	bls.n	80052a8 <xTaskPriorityDisinherit+0xa0>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <xTaskPriorityDisinherit+0xd0>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <xTaskPriorityDisinherit+0xd4>)
 80052b6:	441a      	add	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7fe fb65 	bl	800398e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
	}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000750 	.word	0x20000750
 80052d8:	20000c2c 	.word	0x20000c2c
 80052dc:	20000754 	.word	0x20000754

080052e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ea:	4b21      	ldr	r3, [pc, #132]	; (8005370 <prvAddCurrentTaskToDelayedList+0x90>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f0:	4b20      	ldr	r3, [pc, #128]	; (8005374 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fba6 	bl	8003a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d10a      	bne.n	800531a <prvAddCurrentTaskToDelayedList+0x3a>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <prvAddCurrentTaskToDelayedList+0x94>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4819      	ldr	r0, [pc, #100]	; (8005378 <prvAddCurrentTaskToDelayedList+0x98>)
 8005314:	f7fe fb3b 	bl	800398e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005318:	e026      	b.n	8005368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <prvAddCurrentTaskToDelayedList+0x94>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d209      	bcs.n	8005346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <prvAddCurrentTaskToDelayedList+0x94>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f7fe fb49 	bl	80039d6 <vListInsert>
}
 8005344:	e010      	b.n	8005368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005346:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <prvAddCurrentTaskToDelayedList+0x94>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7fe fb3f 	bl	80039d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <prvAddCurrentTaskToDelayedList+0xa4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d202      	bcs.n	8005368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000c28 	.word	0x20000c28
 8005374:	20000750 	.word	0x20000750
 8005378:	20000c10 	.word	0x20000c10
 800537c:	20000be0 	.word	0x20000be0
 8005380:	20000bdc 	.word	0x20000bdc
 8005384:	20000c44 	.word	0x20000c44

08005388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005392:	f000 fac3 	bl	800591c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <xTimerCreateTimerTask+0x80>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d021      	beq.n	80053e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053a6:	1d3a      	adds	r2, r7, #4
 80053a8:	f107 0108 	add.w	r1, r7, #8
 80053ac:	f107 030c 	add.w	r3, r7, #12
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe faa5 	bl	8003900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	9202      	str	r2, [sp, #8]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	2302      	movs	r3, #2
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	460a      	mov	r2, r1
 80053c8:	4910      	ldr	r1, [pc, #64]	; (800540c <xTimerCreateTimerTask+0x84>)
 80053ca:	4811      	ldr	r0, [pc, #68]	; (8005410 <xTimerCreateTimerTask+0x88>)
 80053cc:	f7ff f8f4 	bl	80045b8 <xTaskCreateStatic>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <xTimerCreateTimerTask+0x8c>)
 80053d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <xTimerCreateTimerTask+0x8c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <xTimerCreateTimerTask+0x74>
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e7fe      	b.n	80053fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80053fc:	697b      	ldr	r3, [r7, #20]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000c80 	.word	0x20000c80
 800540c:	08006ab4 	.word	0x08006ab4
 8005410:	08005531 	.word	0x08005531
 8005414:	20000c84 	.word	0x20000c84

08005418 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <xTimerGenericCommand+0x2c>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	e7fe      	b.n	8005442 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <xTimerGenericCommand+0x94>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02a      	beq.n	80054a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b05      	cmp	r3, #5
 800545c:	dc18      	bgt.n	8005490 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800545e:	f7ff feb5 	bl	80051cc <xTaskGetSchedulerState>
 8005462:	4603      	mov	r3, r0
 8005464:	2b02      	cmp	r3, #2
 8005466:	d109      	bne.n	800547c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005468:	4b10      	ldr	r3, [pc, #64]	; (80054ac <xTimerGenericCommand+0x94>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	f107 0110 	add.w	r1, r7, #16
 8005470:	2300      	movs	r3, #0
 8005472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005474:	f7fe fc4c 	bl	8003d10 <xQueueGenericSend>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24
 800547a:	e012      	b.n	80054a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <xTimerGenericCommand+0x94>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	f107 0110 	add.w	r1, r7, #16
 8005484:	2300      	movs	r3, #0
 8005486:	2200      	movs	r2, #0
 8005488:	f7fe fc42 	bl	8003d10 <xQueueGenericSend>
 800548c:	6278      	str	r0, [r7, #36]	; 0x24
 800548e:	e008      	b.n	80054a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <xTimerGenericCommand+0x94>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	f107 0110 	add.w	r1, r7, #16
 8005498:	2300      	movs	r3, #0
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	f7fe fd32 	bl	8003f04 <xQueueGenericSendFromISR>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3728      	adds	r7, #40	; 0x28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000c80 	.word	0x20000c80

080054b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <prvProcessExpiredTimer+0x7c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fe fabd 	bl	8003a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d121      	bne.n	800551a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	18d1      	adds	r1, r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f000 f8c8 	bl	8005678 <prvInsertTimerInActiveList>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	2100      	movs	r1, #0
 80054f8:	6978      	ldr	r0, [r7, #20]
 80054fa:	f7ff ff8d 	bl	8005418 <xTimerGenericCommand>
 80054fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <prvProcessExpiredTimer+0x6a>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e7fe      	b.n	8005518 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	4798      	blx	r3
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000c78 	.word	0x20000c78

08005530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f857 	bl	80055f0 <prvGetNextExpireTime>
 8005542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f803 	bl	8005554 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800554e:	f000 f8d5 	bl	80056fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005552:	e7f1      	b.n	8005538 <prvTimerTask+0x8>

08005554 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800555e:	f7ff fa57 	bl	8004a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f866 	bl	8005638 <prvSampleTimeNow>
 800556c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d130      	bne.n	80055d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <prvProcessTimerOrBlockTask+0x3c>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	429a      	cmp	r2, r3
 8005580:	d806      	bhi.n	8005590 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005582:	f7ff fa53 	bl	8004a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff91 	bl	80054b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800558e:	e024      	b.n	80055da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <prvProcessTimerOrBlockTask+0x90>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <prvProcessTimerOrBlockTask+0x94>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7fe ffcb 	bl	8004550 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055ba:	f7ff fa37 	bl	8004a2c <xTaskResumeAll>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <prvProcessTimerOrBlockTask+0x98>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
}
 80055d4:	e001      	b.n	80055da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055d6:	f7ff fa29 	bl	8004a2c <xTaskResumeAll>
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000c7c 	.word	0x20000c7c
 80055e8:	20000c80 	.word	0x20000c80
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <prvGetNextExpireTime+0x44>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <prvGetNextExpireTime+0x44>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e001      	b.n	8005626 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000c78 	.word	0x20000c78

08005638 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005640:	f7ff fa90 	bl	8004b64 <xTaskGetTickCount>
 8005644:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <prvSampleTimeNow+0x3c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d205      	bcs.n	800565c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005650:	f000 f904 	bl	800585c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e002      	b.n	8005662 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <prvSampleTimeNow+0x3c>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000c88 	.word	0x20000c88

08005678 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d812      	bhi.n	80056c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e01b      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056b2:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <prvInsertTimerInActiveList+0x7c>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7fe f98a 	bl	80039d6 <vListInsert>
 80056c2:	e012      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d206      	bcs.n	80056da <prvInsertTimerInActiveList+0x62>
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e007      	b.n	80056ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <prvInsertTimerInActiveList+0x80>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe f976 	bl	80039d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000c7c 	.word	0x20000c7c
 80056f8:	20000c78 	.word	0x20000c78

080056fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005702:	e099      	b.n	8005838 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	da17      	bge.n	800573a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	3304      	adds	r3, #4
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <prvProcessReceivedCommands+0x2e>
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e7fe      	b.n	8005728 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005730:	6850      	ldr	r0, [r2, #4]
 8005732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005734:	6892      	ldr	r2, [r2, #8]
 8005736:	4611      	mov	r1, r2
 8005738:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	db7a      	blt.n	8005836 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe f979 	bl	8003a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005756:	463b      	mov	r3, r7
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff6d 	bl	8005638 <prvSampleTimeNow>
 800575e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b09      	cmp	r3, #9
 8005764:	d868      	bhi.n	8005838 <prvProcessReceivedCommands+0x13c>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <prvProcessReceivedCommands+0x70>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005795 	.word	0x08005795
 8005770:	08005795 	.word	0x08005795
 8005774:	08005795 	.word	0x08005795
 8005778:	08005839 	.word	0x08005839
 800577c:	080057ef 	.word	0x080057ef
 8005780:	08005825 	.word	0x08005825
 8005784:	08005795 	.word	0x08005795
 8005788:	08005795 	.word	0x08005795
 800578c:	08005839 	.word	0x08005839
 8005790:	080057ef 	.word	0x080057ef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	18d1      	adds	r1, r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a2:	f7ff ff69 	bl	8005678 <prvInsertTimerInActiveList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d045      	beq.n	8005838 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d13d      	bne.n	8005838 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	441a      	add	r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2300      	movs	r3, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ce:	f7ff fe23 	bl	8005418 <xTimerGenericCommand>
 80057d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d12e      	bne.n	8005838 <prvProcessReceivedCommands+0x13c>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e7fe      	b.n	80057ec <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <prvProcessReceivedCommands+0x114>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e7fe      	b.n	800580e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	18d1      	adds	r1, r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581e:	f7ff ff2b 	bl	8005678 <prvInsertTimerInActiveList>
					break;
 8005822:	e009      	b.n	8005838 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800582e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005830:	f000 fbb8 	bl	8005fa4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005834:	e000      	b.n	8005838 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005836:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005838:	4b07      	ldr	r3, [pc, #28]	; (8005858 <prvProcessReceivedCommands+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1d39      	adds	r1, r7, #4
 800583e:	2200      	movs	r2, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fbf3 	bl	800402c <xQueueReceive>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af5b 	bne.w	8005704 <prvProcessReceivedCommands+0x8>
	}
}
 800584e:	bf00      	nop
 8005850:	3730      	adds	r7, #48	; 0x30
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000c80 	.word	0x20000c80

0800585c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005862:	e044      	b.n	80058ee <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005864:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <prvSwitchTimerLists+0xb8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800586e:	4b29      	ldr	r3, [pc, #164]	; (8005914 <prvSwitchTimerLists+0xb8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3304      	adds	r3, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe f8e3 	bl	8003a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d12d      	bne.n	80058ee <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d90e      	bls.n	80058c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <prvSwitchTimerLists+0xb8>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7fe f88b 	bl	80039d6 <vListInsert>
 80058c0:	e015      	b.n	80058ee <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058c2:	2300      	movs	r3, #0
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	2100      	movs	r1, #0
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fda3 	bl	8005418 <xTimerGenericCommand>
 80058d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <prvSwitchTimerLists+0x92>
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	e7fe      	b.n	80058ec <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <prvSwitchTimerLists+0xb8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1b5      	bne.n	8005864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <prvSwitchTimerLists+0xb8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvSwitchTimerLists+0xbc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <prvSwitchTimerLists+0xb8>)
 8005904:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005906:	4a04      	ldr	r2, [pc, #16]	; (8005918 <prvSwitchTimerLists+0xbc>)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	6013      	str	r3, [r2, #0]
}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000c78 	.word	0x20000c78
 8005918:	20000c7c 	.word	0x20000c7c

0800591c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005922:	f000 f963 	bl	8005bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <prvCheckForValidListAndQueue+0x60>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d120      	bne.n	8005970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800592e:	4814      	ldr	r0, [pc, #80]	; (8005980 <prvCheckForValidListAndQueue+0x64>)
 8005930:	f7fe f800 	bl	8003934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005934:	4813      	ldr	r0, [pc, #76]	; (8005984 <prvCheckForValidListAndQueue+0x68>)
 8005936:	f7fd fffd 	bl	8003934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <prvCheckForValidListAndQueue+0x6c>)
 800593c:	4a10      	ldr	r2, [pc, #64]	; (8005980 <prvCheckForValidListAndQueue+0x64>)
 800593e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <prvCheckForValidListAndQueue+0x70>)
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <prvCheckForValidListAndQueue+0x68>)
 8005944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005946:	2300      	movs	r3, #0
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <prvCheckForValidListAndQueue+0x74>)
 800594c:	4a11      	ldr	r2, [pc, #68]	; (8005994 <prvCheckForValidListAndQueue+0x78>)
 800594e:	2110      	movs	r1, #16
 8005950:	200a      	movs	r0, #10
 8005952:	f7fe f90b 	bl	8003b6c <xQueueGenericCreateStatic>
 8005956:	4602      	mov	r2, r0
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <prvCheckForValidListAndQueue+0x60>)
 800595a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <prvCheckForValidListAndQueue+0x60>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <prvCheckForValidListAndQueue+0x60>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	490b      	ldr	r1, [pc, #44]	; (8005998 <prvCheckForValidListAndQueue+0x7c>)
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fdc8 	bl	8004500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005970:	f000 f96a 	bl	8005c48 <vPortExitCritical>
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000c80 	.word	0x20000c80
 8005980:	20000c50 	.word	0x20000c50
 8005984:	20000c64 	.word	0x20000c64
 8005988:	20000c78 	.word	0x20000c78
 800598c:	20000c7c 	.word	0x20000c7c
 8005990:	20000d2c 	.word	0x20000d2c
 8005994:	20000c8c 	.word	0x20000c8c
 8005998:	08006abc 	.word	0x08006abc

0800599c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3b04      	subs	r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <pxPortInitialiseStack+0x64>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3b14      	subs	r3, #20
 80059d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3b04      	subs	r3, #4
 80059e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f06f 0202 	mvn.w	r2, #2
 80059ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3b20      	subs	r3, #32
 80059f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	08005a05 	.word	0x08005a05

08005a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <prvTaskExitError+0x50>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d009      	beq.n	8005a2c <prvTaskExitError+0x28>
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e7fe      	b.n	8005a2a <prvTaskExitError+0x26>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a3e:	bf00      	nop
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0fc      	beq.n	8005a40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c
	...

08005a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <pxCurrentTCBConst2>)
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	6808      	ldr	r0, [r1, #0]
 8005a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6a:	f380 8809 	msr	PSP, r0
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f04f 0000 	mov.w	r0, #0
 8005a76:	f380 8811 	msr	BASEPRI, r0
 8005a7a:	4770      	bx	lr
 8005a7c:	f3af 8000 	nop.w

08005a80 <pxCurrentTCBConst2>:
 8005a80:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop

08005a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a88:	4808      	ldr	r0, [pc, #32]	; (8005aac <prvPortStartFirstTask+0x24>)
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	6800      	ldr	r0, [r0, #0]
 8005a8e:	f380 8808 	msr	MSP, r0
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f380 8814 	msr	CONTROL, r0
 8005a9a:	b662      	cpsie	i
 8005a9c:	b661      	cpsie	f
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	df00      	svc	0
 8005aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aaa:	bf00      	nop
 8005aac:	e000ed08 	.word	0xe000ed08

08005ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ab6:	4b44      	ldr	r3, [pc, #272]	; (8005bc8 <xPortStartScheduler+0x118>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a44      	ldr	r2, [pc, #272]	; (8005bcc <xPortStartScheduler+0x11c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d109      	bne.n	8005ad4 <xPortStartScheduler+0x24>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e7fe      	b.n	8005ad2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <xPortStartScheduler+0x118>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <xPortStartScheduler+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d109      	bne.n	8005af2 <xPortStartScheduler+0x42>
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e7fe      	b.n	8005af0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005af2:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <xPortStartScheduler+0x124>)
 8005af4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <xPortStartScheduler+0x128>)
 8005b18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b20:	e009      	b.n	8005b36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a2c      	ldr	r2, [pc, #176]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d0ef      	beq.n	8005b22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1c3 0307 	rsb	r3, r3, #7
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d009      	beq.n	8005b62 <xPortStartScheduler+0xb2>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	e7fe      	b.n	8005b60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <xPortStartScheduler+0x12c>)
 8005b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b80:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <xPortStartScheduler+0x130>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <xPortStartScheduler+0x130>)
 8005b86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b8c:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <xPortStartScheduler+0x130>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <xPortStartScheduler+0x130>)
 8005b92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b98:	f000 f8d6 	bl	8005d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <xPortStartScheduler+0x134>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ba2:	f000 f8f5 	bl	8005d90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <xPortStartScheduler+0x138>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <xPortStartScheduler+0x138>)
 8005bac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bb2:	f7ff ff69 	bl	8005a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bb6:	f7ff f8a3 	bl	8004d00 <vTaskSwitchContext>
	prvTaskExitError();
 8005bba:	f7ff ff23 	bl	8005a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed00 	.word	0xe000ed00
 8005bcc:	410fc271 	.word	0x410fc271
 8005bd0:	410fc270 	.word	0x410fc270
 8005bd4:	e000e400 	.word	0xe000e400
 8005bd8:	20000d7c 	.word	0x20000d7c
 8005bdc:	20000d80 	.word	0x20000d80
 8005be0:	e000ed20 	.word	0xe000ed20
 8005be4:	2000000c 	.word	0x2000000c
 8005be8:	e000ef34 	.word	0xe000ef34

08005bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <vPortEnterCritical+0x54>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <vPortEnterCritical+0x54>)
 8005c0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <vPortEnterCritical+0x54>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10e      	bne.n	8005c34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortEnterCritical+0x58>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <vPortEnterCritical+0x48>
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	e7fe      	b.n	8005c32 <vPortEnterCritical+0x46>
	}
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	2000000c 	.word	0x2000000c
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <vPortExitCritical+0x4c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <vPortExitCritical+0x22>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	e7fe      	b.n	8005c68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <vPortExitCritical+0x4c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <vPortExitCritical+0x4c>)
 8005c72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c74:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <vPortExitCritical+0x4c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <vPortExitCritical+0x3e>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	2000000c 	.word	0x2000000c
	...

08005ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <pxCurrentTCBConst>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f01e 0f10 	tst.w	lr, #16
 8005cb0:	bf08      	it	eq
 8005cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cc4:	f380 8811 	msr	BASEPRI, r0
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f7ff f816 	bl	8004d00 <vTaskSwitchContext>
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f380 8811 	msr	BASEPRI, r0
 8005cdc:	bc09      	pop	{r0, r3}
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f01e 0f10 	tst.w	lr, #16
 8005cea:	bf08      	it	eq
 8005cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cf0:	f380 8809 	msr	PSP, r0
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst>:
 8005d00:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d20:	f7fe ff30 	bl	8004b84 <xTaskIncrementTick>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <SysTick_Handler+0x3c>)
 8005d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <vPortSetupTimerInterrupt+0x34>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortSetupTimerInterrupt+0x38>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <vPortSetupTimerInterrupt+0x3c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <vPortSetupTimerInterrupt+0x40>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	099b      	lsrs	r3, r3, #6
 8005d64:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <vPortSetupTimerInterrupt+0x44>)
 8005d66:	3b01      	subs	r3, #1
 8005d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d6a:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <vPortSetupTimerInterrupt+0x34>)
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	601a      	str	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000e010 	.word	0xe000e010
 8005d80:	e000e018 	.word	0xe000e018
 8005d84:	20000000 	.word	0x20000000
 8005d88:	10624dd3 	.word	0x10624dd3
 8005d8c:	e000e014 	.word	0xe000e014

08005d90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005da0 <vPortEnableVFP+0x10>
 8005d94:	6801      	ldr	r1, [r0, #0]
 8005d96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d9a:	6001      	str	r1, [r0, #0]
 8005d9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d9e:	bf00      	nop
 8005da0:	e000ed88 	.word	0xe000ed88

08005da4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005daa:	f3ef 8305 	mrs	r3, IPSR
 8005dae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d913      	bls.n	8005dde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <vPortValidateInterruptPriority+0x6c>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dc0:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <vPortValidateInterruptPriority+0x70>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	7afa      	ldrb	r2, [r7, #11]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d209      	bcs.n	8005dde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e7fe      	b.n	8005ddc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <vPortValidateInterruptPriority+0x74>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <vPortValidateInterruptPriority+0x78>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d909      	bls.n	8005e02 <vPortValidateInterruptPriority+0x5e>
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	e7fe      	b.n	8005e00 <vPortValidateInterruptPriority+0x5c>
	}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	e000e3f0 	.word	0xe000e3f0
 8005e14:	20000d7c 	.word	0x20000d7c
 8005e18:	e000ed0c 	.word	0xe000ed0c
 8005e1c:	20000d80 	.word	0x20000d80

08005e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e2c:	f7fe fdf0 	bl	8004a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e30:	4b57      	ldr	r3, [pc, #348]	; (8005f90 <pvPortMalloc+0x170>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e38:	f000 f90c 	bl	8006054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e3c:	4b55      	ldr	r3, [pc, #340]	; (8005f94 <pvPortMalloc+0x174>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 808c 	bne.w	8005f62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01c      	beq.n	8005e8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e50:	2208      	movs	r2, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4413      	add	r3, r2
 8005e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	3308      	adds	r3, #8
 8005e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <pvPortMalloc+0x6a>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e7fe      	b.n	8005e88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d068      	beq.n	8005f62 <pvPortMalloc+0x142>
 8005e90:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <pvPortMalloc+0x178>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d863      	bhi.n	8005f62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e9a:	4b40      	ldr	r3, [pc, #256]	; (8005f9c <pvPortMalloc+0x17c>)
 8005e9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e9e:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <pvPortMalloc+0x17c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ea4:	e004      	b.n	8005eb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d903      	bls.n	8005ec2 <pvPortMalloc+0xa2>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f1      	bne.n	8005ea6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ec2:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <pvPortMalloc+0x170>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d04a      	beq.n	8005f62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	4413      	add	r3, r2
 8005ed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d91e      	bls.n	8005f2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d009      	beq.n	8005f14 <pvPortMalloc+0xf4>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e7fe      	b.n	8005f12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f26:	69b8      	ldr	r0, [r7, #24]
 8005f28:	f000 f8f6 	bl	8006118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <pvPortMalloc+0x178>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <pvPortMalloc+0x178>)
 8005f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <pvPortMalloc+0x178>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <pvPortMalloc+0x180>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d203      	bcs.n	8005f4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <pvPortMalloc+0x178>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <pvPortMalloc+0x180>)
 8005f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <pvPortMalloc+0x174>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f62:	f7fe fd63 	bl	8004a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <pvPortMalloc+0x164>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e7fe      	b.n	8005f82 <pvPortMalloc+0x162>
	return pvReturn;
 8005f84:	69fb      	ldr	r3, [r7, #28]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000198c 	.word	0x2000198c
 8005f94:	20001998 	.word	0x20001998
 8005f98:	20001990 	.word	0x20001990
 8005f9c:	20001984 	.word	0x20001984
 8005fa0:	20001994 	.word	0x20001994

08005fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d046      	beq.n	8006044 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	425b      	negs	r3, r3
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <vPortFree+0xa8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <vPortFree+0x42>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e7fe      	b.n	8005fe4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <vPortFree+0x5e>
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	e7fe      	b.n	8006000 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <vPortFree+0xa8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d019      	beq.n	8006044 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d115      	bne.n	8006044 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <vPortFree+0xa8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006028:	f7fe fcf2 	bl	8004a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <vPortFree+0xac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4413      	add	r3, r2
 8006036:	4a06      	ldr	r2, [pc, #24]	; (8006050 <vPortFree+0xac>)
 8006038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800603a:	6938      	ldr	r0, [r7, #16]
 800603c:	f000 f86c 	bl	8006118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006040:	f7fe fcf4 	bl	8004a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006044:	bf00      	nop
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20001998 	.word	0x20001998
 8006050:	20001990 	.word	0x20001990

08006054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800605a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800605e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <prvHeapInit+0xac>)
 8006062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3307      	adds	r3, #7
 8006072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <prvHeapInit+0xac>)
 8006084:	4413      	add	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <prvHeapInit+0xb0>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <prvHeapInit+0xb0>)
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060a0:	2208      	movs	r2, #8
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <prvHeapInit+0xb4>)
 80060b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <prvHeapInit+0xb4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <prvHeapInit+0xb4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvHeapInit+0xb4>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a0a      	ldr	r2, [pc, #40]	; (800610c <prvHeapInit+0xb8>)
 80060e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <prvHeapInit+0xbc>)
 80060ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060ec:	4b09      	ldr	r3, [pc, #36]	; (8006114 <prvHeapInit+0xc0>)
 80060ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000d84 	.word	0x20000d84
 8006104:	20001984 	.word	0x20001984
 8006108:	2000198c 	.word	0x2000198c
 800610c:	20001994 	.word	0x20001994
 8006110:	20001990 	.word	0x20001990
 8006114:	20001998 	.word	0x20001998

08006118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006120:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <prvInsertBlockIntoFreeList+0xac>)
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <prvInsertBlockIntoFreeList+0x14>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d8f7      	bhi.n	8006126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d108      	bne.n	800615a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	441a      	add	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d118      	bne.n	80061a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d00d      	beq.n	8006196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e008      	b.n	80061a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e003      	b.n	80061a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d002      	beq.n	80061b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20001984 	.word	0x20001984
 80061c8:	2000198c 	.word	0x2000198c

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	; (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000010 	.word	0x20000010

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4e0d      	ldr	r6, [pc, #52]	; (8006210 <__libc_init_array+0x38>)
 80061dc:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061de:	1ba4      	subs	r4, r4, r6
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	2500      	movs	r5, #0
 80061e4:	42a5      	cmp	r5, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	4e0b      	ldr	r6, [pc, #44]	; (8006218 <__libc_init_array+0x40>)
 80061ea:	4c0c      	ldr	r4, [pc, #48]	; (800621c <__libc_init_array+0x44>)
 80061ec:	f000 fc28 	bl	8006a40 <_init>
 80061f0:	1ba4      	subs	r4, r4, r6
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	2500      	movs	r5, #0
 80061f6:	42a5      	cmp	r5, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006200:	4798      	blx	r3
 8006202:	3501      	adds	r5, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800620a:	4798      	blx	r3
 800620c:	3501      	adds	r5, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006b90 	.word	0x08006b90
 8006214:	08006b90 	.word	0x08006b90
 8006218:	08006b90 	.word	0x08006b90
 800621c:	08006b94 	.word	0x08006b94

08006220 <memcpy>:
 8006220:	b510      	push	{r4, lr}
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	440a      	add	r2, r1
 8006226:	4291      	cmp	r1, r2
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006234:	e7f7      	b.n	8006226 <memcpy+0x6>

08006236 <memset>:
 8006236:	4402      	add	r2, r0
 8006238:	4603      	mov	r3, r0
 800623a:	4293      	cmp	r3, r2
 800623c:	d100      	bne.n	8006240 <memset+0xa>
 800623e:	4770      	bx	lr
 8006240:	f803 1b01 	strb.w	r1, [r3], #1
 8006244:	e7f9      	b.n	800623a <memset+0x4>
	...

08006248 <siprintf>:
 8006248:	b40e      	push	{r1, r2, r3}
 800624a:	b500      	push	{lr}
 800624c:	b09c      	sub	sp, #112	; 0x70
 800624e:	ab1d      	add	r3, sp, #116	; 0x74
 8006250:	9002      	str	r0, [sp, #8]
 8006252:	9006      	str	r0, [sp, #24]
 8006254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006258:	4809      	ldr	r0, [pc, #36]	; (8006280 <siprintf+0x38>)
 800625a:	9107      	str	r1, [sp, #28]
 800625c:	9104      	str	r1, [sp, #16]
 800625e:	4909      	ldr	r1, [pc, #36]	; (8006284 <siprintf+0x3c>)
 8006260:	f853 2b04 	ldr.w	r2, [r3], #4
 8006264:	9105      	str	r1, [sp, #20]
 8006266:	6800      	ldr	r0, [r0, #0]
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	a902      	add	r1, sp, #8
 800626c:	f000 f866 	bl	800633c <_svfiprintf_r>
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	b01c      	add	sp, #112	; 0x70
 8006278:	f85d eb04 	ldr.w	lr, [sp], #4
 800627c:	b003      	add	sp, #12
 800627e:	4770      	bx	lr
 8006280:	20000010 	.word	0x20000010
 8006284:	ffff0208 	.word	0xffff0208

08006288 <__ssputs_r>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	688e      	ldr	r6, [r1, #8]
 800628e:	429e      	cmp	r6, r3
 8006290:	4682      	mov	sl, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4690      	mov	r8, r2
 8006296:	4699      	mov	r9, r3
 8006298:	d837      	bhi.n	800630a <__ssputs_r+0x82>
 800629a:	898a      	ldrh	r2, [r1, #12]
 800629c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062a0:	d031      	beq.n	8006306 <__ssputs_r+0x7e>
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	6909      	ldr	r1, [r1, #16]
 80062a6:	1a6f      	subs	r7, r5, r1
 80062a8:	6965      	ldr	r5, [r4, #20]
 80062aa:	2302      	movs	r3, #2
 80062ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80062b4:	f109 0301 	add.w	r3, r9, #1
 80062b8:	443b      	add	r3, r7
 80062ba:	429d      	cmp	r5, r3
 80062bc:	bf38      	it	cc
 80062be:	461d      	movcc	r5, r3
 80062c0:	0553      	lsls	r3, r2, #21
 80062c2:	d530      	bpl.n	8006326 <__ssputs_r+0x9e>
 80062c4:	4629      	mov	r1, r5
 80062c6:	f000 fb21 	bl	800690c <_malloc_r>
 80062ca:	4606      	mov	r6, r0
 80062cc:	b950      	cbnz	r0, 80062e4 <__ssputs_r+0x5c>
 80062ce:	230c      	movs	r3, #12
 80062d0:	f8ca 3000 	str.w	r3, [sl]
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	463a      	mov	r2, r7
 80062e6:	6921      	ldr	r1, [r4, #16]
 80062e8:	f7ff ff9a 	bl	8006220 <memcpy>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	81a3      	strh	r3, [r4, #12]
 80062f8:	6126      	str	r6, [r4, #16]
 80062fa:	6165      	str	r5, [r4, #20]
 80062fc:	443e      	add	r6, r7
 80062fe:	1bed      	subs	r5, r5, r7
 8006300:	6026      	str	r6, [r4, #0]
 8006302:	60a5      	str	r5, [r4, #8]
 8006304:	464e      	mov	r6, r9
 8006306:	454e      	cmp	r6, r9
 8006308:	d900      	bls.n	800630c <__ssputs_r+0x84>
 800630a:	464e      	mov	r6, r9
 800630c:	4632      	mov	r2, r6
 800630e:	4641      	mov	r1, r8
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	f000 fa93 	bl	800683c <memmove>
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	441e      	add	r6, r3
 8006320:	6026      	str	r6, [r4, #0]
 8006322:	2000      	movs	r0, #0
 8006324:	e7dc      	b.n	80062e0 <__ssputs_r+0x58>
 8006326:	462a      	mov	r2, r5
 8006328:	f000 fb4a 	bl	80069c0 <_realloc_r>
 800632c:	4606      	mov	r6, r0
 800632e:	2800      	cmp	r0, #0
 8006330:	d1e2      	bne.n	80062f8 <__ssputs_r+0x70>
 8006332:	6921      	ldr	r1, [r4, #16]
 8006334:	4650      	mov	r0, sl
 8006336:	f000 fa9b 	bl	8006870 <_free_r>
 800633a:	e7c8      	b.n	80062ce <__ssputs_r+0x46>

0800633c <_svfiprintf_r>:
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	461d      	mov	r5, r3
 8006342:	898b      	ldrh	r3, [r1, #12]
 8006344:	061f      	lsls	r7, r3, #24
 8006346:	b09d      	sub	sp, #116	; 0x74
 8006348:	4680      	mov	r8, r0
 800634a:	460c      	mov	r4, r1
 800634c:	4616      	mov	r6, r2
 800634e:	d50f      	bpl.n	8006370 <_svfiprintf_r+0x34>
 8006350:	690b      	ldr	r3, [r1, #16]
 8006352:	b96b      	cbnz	r3, 8006370 <_svfiprintf_r+0x34>
 8006354:	2140      	movs	r1, #64	; 0x40
 8006356:	f000 fad9 	bl	800690c <_malloc_r>
 800635a:	6020      	str	r0, [r4, #0]
 800635c:	6120      	str	r0, [r4, #16]
 800635e:	b928      	cbnz	r0, 800636c <_svfiprintf_r+0x30>
 8006360:	230c      	movs	r3, #12
 8006362:	f8c8 3000 	str.w	r3, [r8]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	e0c8      	b.n	80064fe <_svfiprintf_r+0x1c2>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	6163      	str	r3, [r4, #20]
 8006370:	2300      	movs	r3, #0
 8006372:	9309      	str	r3, [sp, #36]	; 0x24
 8006374:	2320      	movs	r3, #32
 8006376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800637a:	2330      	movs	r3, #48	; 0x30
 800637c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006380:	9503      	str	r5, [sp, #12]
 8006382:	f04f 0b01 	mov.w	fp, #1
 8006386:	4637      	mov	r7, r6
 8006388:	463d      	mov	r5, r7
 800638a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800638e:	b10b      	cbz	r3, 8006394 <_svfiprintf_r+0x58>
 8006390:	2b25      	cmp	r3, #37	; 0x25
 8006392:	d13e      	bne.n	8006412 <_svfiprintf_r+0xd6>
 8006394:	ebb7 0a06 	subs.w	sl, r7, r6
 8006398:	d00b      	beq.n	80063b2 <_svfiprintf_r+0x76>
 800639a:	4653      	mov	r3, sl
 800639c:	4632      	mov	r2, r6
 800639e:	4621      	mov	r1, r4
 80063a0:	4640      	mov	r0, r8
 80063a2:	f7ff ff71 	bl	8006288 <__ssputs_r>
 80063a6:	3001      	adds	r0, #1
 80063a8:	f000 80a4 	beq.w	80064f4 <_svfiprintf_r+0x1b8>
 80063ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ae:	4453      	add	r3, sl
 80063b0:	9309      	str	r3, [sp, #36]	; 0x24
 80063b2:	783b      	ldrb	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 809d 	beq.w	80064f4 <_svfiprintf_r+0x1b8>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063cc:	931a      	str	r3, [sp, #104]	; 0x68
 80063ce:	462f      	mov	r7, r5
 80063d0:	2205      	movs	r2, #5
 80063d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80063d6:	4850      	ldr	r0, [pc, #320]	; (8006518 <_svfiprintf_r+0x1dc>)
 80063d8:	f7f9 ff0a 	bl	80001f0 <memchr>
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	b9d0      	cbnz	r0, 8006416 <_svfiprintf_r+0xda>
 80063e0:	06d9      	lsls	r1, r3, #27
 80063e2:	bf44      	itt	mi
 80063e4:	2220      	movmi	r2, #32
 80063e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063ea:	071a      	lsls	r2, r3, #28
 80063ec:	bf44      	itt	mi
 80063ee:	222b      	movmi	r2, #43	; 0x2b
 80063f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063f4:	782a      	ldrb	r2, [r5, #0]
 80063f6:	2a2a      	cmp	r2, #42	; 0x2a
 80063f8:	d015      	beq.n	8006426 <_svfiprintf_r+0xea>
 80063fa:	9a07      	ldr	r2, [sp, #28]
 80063fc:	462f      	mov	r7, r5
 80063fe:	2000      	movs	r0, #0
 8006400:	250a      	movs	r5, #10
 8006402:	4639      	mov	r1, r7
 8006404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006408:	3b30      	subs	r3, #48	; 0x30
 800640a:	2b09      	cmp	r3, #9
 800640c:	d94d      	bls.n	80064aa <_svfiprintf_r+0x16e>
 800640e:	b1b8      	cbz	r0, 8006440 <_svfiprintf_r+0x104>
 8006410:	e00f      	b.n	8006432 <_svfiprintf_r+0xf6>
 8006412:	462f      	mov	r7, r5
 8006414:	e7b8      	b.n	8006388 <_svfiprintf_r+0x4c>
 8006416:	4a40      	ldr	r2, [pc, #256]	; (8006518 <_svfiprintf_r+0x1dc>)
 8006418:	1a80      	subs	r0, r0, r2
 800641a:	fa0b f000 	lsl.w	r0, fp, r0
 800641e:	4318      	orrs	r0, r3
 8006420:	9004      	str	r0, [sp, #16]
 8006422:	463d      	mov	r5, r7
 8006424:	e7d3      	b.n	80063ce <_svfiprintf_r+0x92>
 8006426:	9a03      	ldr	r2, [sp, #12]
 8006428:	1d11      	adds	r1, r2, #4
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	9103      	str	r1, [sp, #12]
 800642e:	2a00      	cmp	r2, #0
 8006430:	db01      	blt.n	8006436 <_svfiprintf_r+0xfa>
 8006432:	9207      	str	r2, [sp, #28]
 8006434:	e004      	b.n	8006440 <_svfiprintf_r+0x104>
 8006436:	4252      	negs	r2, r2
 8006438:	f043 0302 	orr.w	r3, r3, #2
 800643c:	9207      	str	r2, [sp, #28]
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	783b      	ldrb	r3, [r7, #0]
 8006442:	2b2e      	cmp	r3, #46	; 0x2e
 8006444:	d10c      	bne.n	8006460 <_svfiprintf_r+0x124>
 8006446:	787b      	ldrb	r3, [r7, #1]
 8006448:	2b2a      	cmp	r3, #42	; 0x2a
 800644a:	d133      	bne.n	80064b4 <_svfiprintf_r+0x178>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	9203      	str	r2, [sp, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfb8      	it	lt
 8006458:	f04f 33ff 	movlt.w	r3, #4294967295
 800645c:	3702      	adds	r7, #2
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	4d2e      	ldr	r5, [pc, #184]	; (800651c <_svfiprintf_r+0x1e0>)
 8006462:	7839      	ldrb	r1, [r7, #0]
 8006464:	2203      	movs	r2, #3
 8006466:	4628      	mov	r0, r5
 8006468:	f7f9 fec2 	bl	80001f0 <memchr>
 800646c:	b138      	cbz	r0, 800647e <_svfiprintf_r+0x142>
 800646e:	2340      	movs	r3, #64	; 0x40
 8006470:	1b40      	subs	r0, r0, r5
 8006472:	fa03 f000 	lsl.w	r0, r3, r0
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	4303      	orrs	r3, r0
 800647a:	3701      	adds	r7, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	7839      	ldrb	r1, [r7, #0]
 8006480:	4827      	ldr	r0, [pc, #156]	; (8006520 <_svfiprintf_r+0x1e4>)
 8006482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006486:	2206      	movs	r2, #6
 8006488:	1c7e      	adds	r6, r7, #1
 800648a:	f7f9 feb1 	bl	80001f0 <memchr>
 800648e:	2800      	cmp	r0, #0
 8006490:	d038      	beq.n	8006504 <_svfiprintf_r+0x1c8>
 8006492:	4b24      	ldr	r3, [pc, #144]	; (8006524 <_svfiprintf_r+0x1e8>)
 8006494:	bb13      	cbnz	r3, 80064dc <_svfiprintf_r+0x1a0>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	3307      	adds	r3, #7
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	3308      	adds	r3, #8
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a4:	444b      	add	r3, r9
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	e76d      	b.n	8006386 <_svfiprintf_r+0x4a>
 80064aa:	fb05 3202 	mla	r2, r5, r2, r3
 80064ae:	2001      	movs	r0, #1
 80064b0:	460f      	mov	r7, r1
 80064b2:	e7a6      	b.n	8006402 <_svfiprintf_r+0xc6>
 80064b4:	2300      	movs	r3, #0
 80064b6:	3701      	adds	r7, #1
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	4619      	mov	r1, r3
 80064bc:	250a      	movs	r5, #10
 80064be:	4638      	mov	r0, r7
 80064c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c4:	3a30      	subs	r2, #48	; 0x30
 80064c6:	2a09      	cmp	r2, #9
 80064c8:	d903      	bls.n	80064d2 <_svfiprintf_r+0x196>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0c8      	beq.n	8006460 <_svfiprintf_r+0x124>
 80064ce:	9105      	str	r1, [sp, #20]
 80064d0:	e7c6      	b.n	8006460 <_svfiprintf_r+0x124>
 80064d2:	fb05 2101 	mla	r1, r5, r1, r2
 80064d6:	2301      	movs	r3, #1
 80064d8:	4607      	mov	r7, r0
 80064da:	e7f0      	b.n	80064be <_svfiprintf_r+0x182>
 80064dc:	ab03      	add	r3, sp, #12
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4622      	mov	r2, r4
 80064e2:	4b11      	ldr	r3, [pc, #68]	; (8006528 <_svfiprintf_r+0x1ec>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	4640      	mov	r0, r8
 80064e8:	f3af 8000 	nop.w
 80064ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064f0:	4681      	mov	r9, r0
 80064f2:	d1d6      	bne.n	80064a2 <_svfiprintf_r+0x166>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af35 	bmi.w	8006366 <_svfiprintf_r+0x2a>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	b01d      	add	sp, #116	; 0x74
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4622      	mov	r2, r4
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <_svfiprintf_r+0x1ec>)
 800650c:	a904      	add	r1, sp, #16
 800650e:	4640      	mov	r0, r8
 8006510:	f000 f882 	bl	8006618 <_printf_i>
 8006514:	e7ea      	b.n	80064ec <_svfiprintf_r+0x1b0>
 8006516:	bf00      	nop
 8006518:	08006b5c 	.word	0x08006b5c
 800651c:	08006b62 	.word	0x08006b62
 8006520:	08006b66 	.word	0x08006b66
 8006524:	00000000 	.word	0x00000000
 8006528:	08006289 	.word	0x08006289

0800652c <_printf_common>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	4691      	mov	r9, r2
 8006532:	461f      	mov	r7, r3
 8006534:	688a      	ldr	r2, [r1, #8]
 8006536:	690b      	ldr	r3, [r1, #16]
 8006538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800653c:	4293      	cmp	r3, r2
 800653e:	bfb8      	it	lt
 8006540:	4613      	movlt	r3, r2
 8006542:	f8c9 3000 	str.w	r3, [r9]
 8006546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800654a:	4606      	mov	r6, r0
 800654c:	460c      	mov	r4, r1
 800654e:	b112      	cbz	r2, 8006556 <_printf_common+0x2a>
 8006550:	3301      	adds	r3, #1
 8006552:	f8c9 3000 	str.w	r3, [r9]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006560:	3302      	addmi	r3, #2
 8006562:	f8c9 3000 	strmi.w	r3, [r9]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d107      	bne.n	800657e <_printf_common+0x52>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	f8d9 2000 	ldr.w	r2, [r9]
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	42ab      	cmp	r3, r5
 800657c:	dc28      	bgt.n	80065d0 <_printf_common+0xa4>
 800657e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	3300      	adds	r3, #0
 8006586:	bf18      	it	ne
 8006588:	2301      	movne	r3, #1
 800658a:	0692      	lsls	r2, r2, #26
 800658c:	d42d      	bmi.n	80065ea <_printf_common+0xbe>
 800658e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006592:	4639      	mov	r1, r7
 8006594:	4630      	mov	r0, r6
 8006596:	47c0      	blx	r8
 8006598:	3001      	adds	r0, #1
 800659a:	d020      	beq.n	80065de <_printf_common+0xb2>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	68e5      	ldr	r5, [r4, #12]
 80065a0:	f8d9 2000 	ldr.w	r2, [r9]
 80065a4:	f003 0306 	and.w	r3, r3, #6
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	bf08      	it	eq
 80065ac:	1aad      	subeq	r5, r5, r2
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	6922      	ldr	r2, [r4, #16]
 80065b2:	bf0c      	ite	eq
 80065b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b8:	2500      	movne	r5, #0
 80065ba:	4293      	cmp	r3, r2
 80065bc:	bfc4      	itt	gt
 80065be:	1a9b      	subgt	r3, r3, r2
 80065c0:	18ed      	addgt	r5, r5, r3
 80065c2:	f04f 0900 	mov.w	r9, #0
 80065c6:	341a      	adds	r4, #26
 80065c8:	454d      	cmp	r5, r9
 80065ca:	d11a      	bne.n	8006602 <_printf_common+0xd6>
 80065cc:	2000      	movs	r0, #0
 80065ce:	e008      	b.n	80065e2 <_printf_common+0xb6>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4652      	mov	r2, sl
 80065d4:	4639      	mov	r1, r7
 80065d6:	4630      	mov	r0, r6
 80065d8:	47c0      	blx	r8
 80065da:	3001      	adds	r0, #1
 80065dc:	d103      	bne.n	80065e6 <_printf_common+0xba>
 80065de:	f04f 30ff 	mov.w	r0, #4294967295
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	3501      	adds	r5, #1
 80065e8:	e7c3      	b.n	8006572 <_printf_common+0x46>
 80065ea:	18e1      	adds	r1, r4, r3
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	2030      	movs	r0, #48	; 0x30
 80065f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065f4:	4422      	add	r2, r4
 80065f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065fe:	3302      	adds	r3, #2
 8006600:	e7c5      	b.n	800658e <_printf_common+0x62>
 8006602:	2301      	movs	r3, #1
 8006604:	4622      	mov	r2, r4
 8006606:	4639      	mov	r1, r7
 8006608:	4630      	mov	r0, r6
 800660a:	47c0      	blx	r8
 800660c:	3001      	adds	r0, #1
 800660e:	d0e6      	beq.n	80065de <_printf_common+0xb2>
 8006610:	f109 0901 	add.w	r9, r9, #1
 8006614:	e7d8      	b.n	80065c8 <_printf_common+0x9c>
	...

08006618 <_printf_i>:
 8006618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800661c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006620:	460c      	mov	r4, r1
 8006622:	7e09      	ldrb	r1, [r1, #24]
 8006624:	b085      	sub	sp, #20
 8006626:	296e      	cmp	r1, #110	; 0x6e
 8006628:	4617      	mov	r7, r2
 800662a:	4606      	mov	r6, r0
 800662c:	4698      	mov	r8, r3
 800662e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006630:	f000 80b3 	beq.w	800679a <_printf_i+0x182>
 8006634:	d822      	bhi.n	800667c <_printf_i+0x64>
 8006636:	2963      	cmp	r1, #99	; 0x63
 8006638:	d036      	beq.n	80066a8 <_printf_i+0x90>
 800663a:	d80a      	bhi.n	8006652 <_printf_i+0x3a>
 800663c:	2900      	cmp	r1, #0
 800663e:	f000 80b9 	beq.w	80067b4 <_printf_i+0x19c>
 8006642:	2958      	cmp	r1, #88	; 0x58
 8006644:	f000 8083 	beq.w	800674e <_printf_i+0x136>
 8006648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006650:	e032      	b.n	80066b8 <_printf_i+0xa0>
 8006652:	2964      	cmp	r1, #100	; 0x64
 8006654:	d001      	beq.n	800665a <_printf_i+0x42>
 8006656:	2969      	cmp	r1, #105	; 0x69
 8006658:	d1f6      	bne.n	8006648 <_printf_i+0x30>
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	6813      	ldr	r3, [r2, #0]
 800665e:	0605      	lsls	r5, r0, #24
 8006660:	f103 0104 	add.w	r1, r3, #4
 8006664:	d52a      	bpl.n	80066bc <_printf_i+0xa4>
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da03      	bge.n	8006676 <_printf_i+0x5e>
 800666e:	222d      	movs	r2, #45	; 0x2d
 8006670:	425b      	negs	r3, r3
 8006672:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006676:	486f      	ldr	r0, [pc, #444]	; (8006834 <_printf_i+0x21c>)
 8006678:	220a      	movs	r2, #10
 800667a:	e039      	b.n	80066f0 <_printf_i+0xd8>
 800667c:	2973      	cmp	r1, #115	; 0x73
 800667e:	f000 809d 	beq.w	80067bc <_printf_i+0x1a4>
 8006682:	d808      	bhi.n	8006696 <_printf_i+0x7e>
 8006684:	296f      	cmp	r1, #111	; 0x6f
 8006686:	d020      	beq.n	80066ca <_printf_i+0xb2>
 8006688:	2970      	cmp	r1, #112	; 0x70
 800668a:	d1dd      	bne.n	8006648 <_printf_i+0x30>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	f043 0320 	orr.w	r3, r3, #32
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	e003      	b.n	800669e <_printf_i+0x86>
 8006696:	2975      	cmp	r1, #117	; 0x75
 8006698:	d017      	beq.n	80066ca <_printf_i+0xb2>
 800669a:	2978      	cmp	r1, #120	; 0x78
 800669c:	d1d4      	bne.n	8006648 <_printf_i+0x30>
 800669e:	2378      	movs	r3, #120	; 0x78
 80066a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066a4:	4864      	ldr	r0, [pc, #400]	; (8006838 <_printf_i+0x220>)
 80066a6:	e055      	b.n	8006754 <_printf_i+0x13c>
 80066a8:	6813      	ldr	r3, [r2, #0]
 80066aa:	1d19      	adds	r1, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6011      	str	r1, [r2, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e08c      	b.n	80067d6 <_printf_i+0x1be>
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6011      	str	r1, [r2, #0]
 80066c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066c4:	bf18      	it	ne
 80066c6:	b21b      	sxthne	r3, r3
 80066c8:	e7cf      	b.n	800666a <_printf_i+0x52>
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	6825      	ldr	r5, [r4, #0]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6010      	str	r0, [r2, #0]
 80066d2:	0628      	lsls	r0, r5, #24
 80066d4:	d501      	bpl.n	80066da <_printf_i+0xc2>
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	e002      	b.n	80066e0 <_printf_i+0xc8>
 80066da:	0668      	lsls	r0, r5, #25
 80066dc:	d5fb      	bpl.n	80066d6 <_printf_i+0xbe>
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	4854      	ldr	r0, [pc, #336]	; (8006834 <_printf_i+0x21c>)
 80066e2:	296f      	cmp	r1, #111	; 0x6f
 80066e4:	bf14      	ite	ne
 80066e6:	220a      	movne	r2, #10
 80066e8:	2208      	moveq	r2, #8
 80066ea:	2100      	movs	r1, #0
 80066ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066f0:	6865      	ldr	r5, [r4, #4]
 80066f2:	60a5      	str	r5, [r4, #8]
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	f2c0 8095 	blt.w	8006824 <_printf_i+0x20c>
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	f021 0104 	bic.w	r1, r1, #4
 8006700:	6021      	str	r1, [r4, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d13d      	bne.n	8006782 <_printf_i+0x16a>
 8006706:	2d00      	cmp	r5, #0
 8006708:	f040 808e 	bne.w	8006828 <_printf_i+0x210>
 800670c:	4665      	mov	r5, ip
 800670e:	2a08      	cmp	r2, #8
 8006710:	d10b      	bne.n	800672a <_printf_i+0x112>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	07db      	lsls	r3, r3, #31
 8006716:	d508      	bpl.n	800672a <_printf_i+0x112>
 8006718:	6923      	ldr	r3, [r4, #16]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	bfde      	ittt	le
 8006720:	2330      	movle	r3, #48	; 0x30
 8006722:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006726:	f105 35ff 	addle.w	r5, r5, #4294967295
 800672a:	ebac 0305 	sub.w	r3, ip, r5
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	f8cd 8000 	str.w	r8, [sp]
 8006734:	463b      	mov	r3, r7
 8006736:	aa03      	add	r2, sp, #12
 8006738:	4621      	mov	r1, r4
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff fef6 	bl	800652c <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	d14d      	bne.n	80067e0 <_printf_i+0x1c8>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	b005      	add	sp, #20
 800674a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800674e:	4839      	ldr	r0, [pc, #228]	; (8006834 <_printf_i+0x21c>)
 8006750:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006754:	6813      	ldr	r3, [r2, #0]
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	1d1d      	adds	r5, r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6015      	str	r5, [r2, #0]
 800675e:	060a      	lsls	r2, r1, #24
 8006760:	d50b      	bpl.n	800677a <_printf_i+0x162>
 8006762:	07ca      	lsls	r2, r1, #31
 8006764:	bf44      	itt	mi
 8006766:	f041 0120 	orrmi.w	r1, r1, #32
 800676a:	6021      	strmi	r1, [r4, #0]
 800676c:	b91b      	cbnz	r3, 8006776 <_printf_i+0x15e>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	f022 0220 	bic.w	r2, r2, #32
 8006774:	6022      	str	r2, [r4, #0]
 8006776:	2210      	movs	r2, #16
 8006778:	e7b7      	b.n	80066ea <_printf_i+0xd2>
 800677a:	064d      	lsls	r5, r1, #25
 800677c:	bf48      	it	mi
 800677e:	b29b      	uxthmi	r3, r3
 8006780:	e7ef      	b.n	8006762 <_printf_i+0x14a>
 8006782:	4665      	mov	r5, ip
 8006784:	fbb3 f1f2 	udiv	r1, r3, r2
 8006788:	fb02 3311 	mls	r3, r2, r1, r3
 800678c:	5cc3      	ldrb	r3, [r0, r3]
 800678e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006792:	460b      	mov	r3, r1
 8006794:	2900      	cmp	r1, #0
 8006796:	d1f5      	bne.n	8006784 <_printf_i+0x16c>
 8006798:	e7b9      	b.n	800670e <_printf_i+0xf6>
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	6825      	ldr	r5, [r4, #0]
 800679e:	6961      	ldr	r1, [r4, #20]
 80067a0:	1d18      	adds	r0, r3, #4
 80067a2:	6010      	str	r0, [r2, #0]
 80067a4:	0628      	lsls	r0, r5, #24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	d501      	bpl.n	80067ae <_printf_i+0x196>
 80067aa:	6019      	str	r1, [r3, #0]
 80067ac:	e002      	b.n	80067b4 <_printf_i+0x19c>
 80067ae:	066a      	lsls	r2, r5, #25
 80067b0:	d5fb      	bpl.n	80067aa <_printf_i+0x192>
 80067b2:	8019      	strh	r1, [r3, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	4665      	mov	r5, ip
 80067ba:	e7b9      	b.n	8006730 <_printf_i+0x118>
 80067bc:	6813      	ldr	r3, [r2, #0]
 80067be:	1d19      	adds	r1, r3, #4
 80067c0:	6011      	str	r1, [r2, #0]
 80067c2:	681d      	ldr	r5, [r3, #0]
 80067c4:	6862      	ldr	r2, [r4, #4]
 80067c6:	2100      	movs	r1, #0
 80067c8:	4628      	mov	r0, r5
 80067ca:	f7f9 fd11 	bl	80001f0 <memchr>
 80067ce:	b108      	cbz	r0, 80067d4 <_printf_i+0x1bc>
 80067d0:	1b40      	subs	r0, r0, r5
 80067d2:	6060      	str	r0, [r4, #4]
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	2300      	movs	r3, #0
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067de:	e7a7      	b.n	8006730 <_printf_i+0x118>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	462a      	mov	r2, r5
 80067e4:	4639      	mov	r1, r7
 80067e6:	4630      	mov	r0, r6
 80067e8:	47c0      	blx	r8
 80067ea:	3001      	adds	r0, #1
 80067ec:	d0aa      	beq.n	8006744 <_printf_i+0x12c>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	079b      	lsls	r3, r3, #30
 80067f2:	d413      	bmi.n	800681c <_printf_i+0x204>
 80067f4:	68e0      	ldr	r0, [r4, #12]
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	4298      	cmp	r0, r3
 80067fa:	bfb8      	it	lt
 80067fc:	4618      	movlt	r0, r3
 80067fe:	e7a3      	b.n	8006748 <_printf_i+0x130>
 8006800:	2301      	movs	r3, #1
 8006802:	464a      	mov	r2, r9
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d09a      	beq.n	8006744 <_printf_i+0x12c>
 800680e:	3501      	adds	r5, #1
 8006810:	68e3      	ldr	r3, [r4, #12]
 8006812:	9a03      	ldr	r2, [sp, #12]
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	42ab      	cmp	r3, r5
 8006818:	dcf2      	bgt.n	8006800 <_printf_i+0x1e8>
 800681a:	e7eb      	b.n	80067f4 <_printf_i+0x1dc>
 800681c:	2500      	movs	r5, #0
 800681e:	f104 0919 	add.w	r9, r4, #25
 8006822:	e7f5      	b.n	8006810 <_printf_i+0x1f8>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ac      	bne.n	8006782 <_printf_i+0x16a>
 8006828:	7803      	ldrb	r3, [r0, #0]
 800682a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800682e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006832:	e76c      	b.n	800670e <_printf_i+0xf6>
 8006834:	08006b6d 	.word	0x08006b6d
 8006838:	08006b7e 	.word	0x08006b7e

0800683c <memmove>:
 800683c:	4288      	cmp	r0, r1
 800683e:	b510      	push	{r4, lr}
 8006840:	eb01 0302 	add.w	r3, r1, r2
 8006844:	d807      	bhi.n	8006856 <memmove+0x1a>
 8006846:	1e42      	subs	r2, r0, #1
 8006848:	4299      	cmp	r1, r3
 800684a:	d00a      	beq.n	8006862 <memmove+0x26>
 800684c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006850:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006854:	e7f8      	b.n	8006848 <memmove+0xc>
 8006856:	4283      	cmp	r3, r0
 8006858:	d9f5      	bls.n	8006846 <memmove+0xa>
 800685a:	1881      	adds	r1, r0, r2
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	42d3      	cmn	r3, r2
 8006860:	d100      	bne.n	8006864 <memmove+0x28>
 8006862:	bd10      	pop	{r4, pc}
 8006864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006868:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800686c:	e7f7      	b.n	800685e <memmove+0x22>
	...

08006870 <_free_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4605      	mov	r5, r0
 8006874:	2900      	cmp	r1, #0
 8006876:	d045      	beq.n	8006904 <_free_r+0x94>
 8006878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687c:	1f0c      	subs	r4, r1, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	bfb8      	it	lt
 8006882:	18e4      	addlt	r4, r4, r3
 8006884:	f000 f8d2 	bl	8006a2c <__malloc_lock>
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <_free_r+0x98>)
 800688a:	6813      	ldr	r3, [r2, #0]
 800688c:	4610      	mov	r0, r2
 800688e:	b933      	cbnz	r3, 800689e <_free_r+0x2e>
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	6014      	str	r4, [r2, #0]
 8006894:	4628      	mov	r0, r5
 8006896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689a:	f000 b8c8 	b.w	8006a2e <__malloc_unlock>
 800689e:	42a3      	cmp	r3, r4
 80068a0:	d90c      	bls.n	80068bc <_free_r+0x4c>
 80068a2:	6821      	ldr	r1, [r4, #0]
 80068a4:	1862      	adds	r2, r4, r1
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bf04      	itt	eq
 80068aa:	681a      	ldreq	r2, [r3, #0]
 80068ac:	685b      	ldreq	r3, [r3, #4]
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	bf04      	itt	eq
 80068b2:	1852      	addeq	r2, r2, r1
 80068b4:	6022      	streq	r2, [r4, #0]
 80068b6:	6004      	str	r4, [r0, #0]
 80068b8:	e7ec      	b.n	8006894 <_free_r+0x24>
 80068ba:	4613      	mov	r3, r2
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	b10a      	cbz	r2, 80068c4 <_free_r+0x54>
 80068c0:	42a2      	cmp	r2, r4
 80068c2:	d9fa      	bls.n	80068ba <_free_r+0x4a>
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	1858      	adds	r0, r3, r1
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d10b      	bne.n	80068e4 <_free_r+0x74>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	4401      	add	r1, r0
 80068d0:	1858      	adds	r0, r3, r1
 80068d2:	4282      	cmp	r2, r0
 80068d4:	6019      	str	r1, [r3, #0]
 80068d6:	d1dd      	bne.n	8006894 <_free_r+0x24>
 80068d8:	6810      	ldr	r0, [r2, #0]
 80068da:	6852      	ldr	r2, [r2, #4]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	4401      	add	r1, r0
 80068e0:	6019      	str	r1, [r3, #0]
 80068e2:	e7d7      	b.n	8006894 <_free_r+0x24>
 80068e4:	d902      	bls.n	80068ec <_free_r+0x7c>
 80068e6:	230c      	movs	r3, #12
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	e7d3      	b.n	8006894 <_free_r+0x24>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	1821      	adds	r1, r4, r0
 80068f0:	428a      	cmp	r2, r1
 80068f2:	bf04      	itt	eq
 80068f4:	6811      	ldreq	r1, [r2, #0]
 80068f6:	6852      	ldreq	r2, [r2, #4]
 80068f8:	6062      	str	r2, [r4, #4]
 80068fa:	bf04      	itt	eq
 80068fc:	1809      	addeq	r1, r1, r0
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	605c      	str	r4, [r3, #4]
 8006902:	e7c7      	b.n	8006894 <_free_r+0x24>
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	bf00      	nop
 8006908:	2000199c 	.word	0x2000199c

0800690c <_malloc_r>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	1ccd      	adds	r5, r1, #3
 8006910:	f025 0503 	bic.w	r5, r5, #3
 8006914:	3508      	adds	r5, #8
 8006916:	2d0c      	cmp	r5, #12
 8006918:	bf38      	it	cc
 800691a:	250c      	movcc	r5, #12
 800691c:	2d00      	cmp	r5, #0
 800691e:	4606      	mov	r6, r0
 8006920:	db01      	blt.n	8006926 <_malloc_r+0x1a>
 8006922:	42a9      	cmp	r1, r5
 8006924:	d903      	bls.n	800692e <_malloc_r+0x22>
 8006926:	230c      	movs	r3, #12
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	2000      	movs	r0, #0
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	f000 f87d 	bl	8006a2c <__malloc_lock>
 8006932:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <_malloc_r+0xac>)
 8006934:	6814      	ldr	r4, [r2, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	b991      	cbnz	r1, 8006960 <_malloc_r+0x54>
 800693a:	4c20      	ldr	r4, [pc, #128]	; (80069bc <_malloc_r+0xb0>)
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	b91b      	cbnz	r3, 8006948 <_malloc_r+0x3c>
 8006940:	4630      	mov	r0, r6
 8006942:	f000 f863 	bl	8006a0c <_sbrk_r>
 8006946:	6020      	str	r0, [r4, #0]
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f85e 	bl	8006a0c <_sbrk_r>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d124      	bne.n	800699e <_malloc_r+0x92>
 8006954:	230c      	movs	r3, #12
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	4630      	mov	r0, r6
 800695a:	f000 f868 	bl	8006a2e <__malloc_unlock>
 800695e:	e7e4      	b.n	800692a <_malloc_r+0x1e>
 8006960:	680b      	ldr	r3, [r1, #0]
 8006962:	1b5b      	subs	r3, r3, r5
 8006964:	d418      	bmi.n	8006998 <_malloc_r+0x8c>
 8006966:	2b0b      	cmp	r3, #11
 8006968:	d90f      	bls.n	800698a <_malloc_r+0x7e>
 800696a:	600b      	str	r3, [r1, #0]
 800696c:	50cd      	str	r5, [r1, r3]
 800696e:	18cc      	adds	r4, r1, r3
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f85c 	bl	8006a2e <__malloc_unlock>
 8006976:	f104 000b 	add.w	r0, r4, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1ac3      	subs	r3, r0, r3
 8006982:	d0d3      	beq.n	800692c <_malloc_r+0x20>
 8006984:	425a      	negs	r2, r3
 8006986:	50e2      	str	r2, [r4, r3]
 8006988:	e7d0      	b.n	800692c <_malloc_r+0x20>
 800698a:	428c      	cmp	r4, r1
 800698c:	684b      	ldr	r3, [r1, #4]
 800698e:	bf16      	itet	ne
 8006990:	6063      	strne	r3, [r4, #4]
 8006992:	6013      	streq	r3, [r2, #0]
 8006994:	460c      	movne	r4, r1
 8006996:	e7eb      	b.n	8006970 <_malloc_r+0x64>
 8006998:	460c      	mov	r4, r1
 800699a:	6849      	ldr	r1, [r1, #4]
 800699c:	e7cc      	b.n	8006938 <_malloc_r+0x2c>
 800699e:	1cc4      	adds	r4, r0, #3
 80069a0:	f024 0403 	bic.w	r4, r4, #3
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d005      	beq.n	80069b4 <_malloc_r+0xa8>
 80069a8:	1a21      	subs	r1, r4, r0
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 f82e 	bl	8006a0c <_sbrk_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d0cf      	beq.n	8006954 <_malloc_r+0x48>
 80069b4:	6025      	str	r5, [r4, #0]
 80069b6:	e7db      	b.n	8006970 <_malloc_r+0x64>
 80069b8:	2000199c 	.word	0x2000199c
 80069bc:	200019a0 	.word	0x200019a0

080069c0 <_realloc_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	4607      	mov	r7, r0
 80069c4:	4614      	mov	r4, r2
 80069c6:	460e      	mov	r6, r1
 80069c8:	b921      	cbnz	r1, 80069d4 <_realloc_r+0x14>
 80069ca:	4611      	mov	r1, r2
 80069cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069d0:	f7ff bf9c 	b.w	800690c <_malloc_r>
 80069d4:	b922      	cbnz	r2, 80069e0 <_realloc_r+0x20>
 80069d6:	f7ff ff4b 	bl	8006870 <_free_r>
 80069da:	4625      	mov	r5, r4
 80069dc:	4628      	mov	r0, r5
 80069de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e0:	f000 f826 	bl	8006a30 <_malloc_usable_size_r>
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d20f      	bcs.n	8006a08 <_realloc_r+0x48>
 80069e8:	4621      	mov	r1, r4
 80069ea:	4638      	mov	r0, r7
 80069ec:	f7ff ff8e 	bl	800690c <_malloc_r>
 80069f0:	4605      	mov	r5, r0
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0f2      	beq.n	80069dc <_realloc_r+0x1c>
 80069f6:	4631      	mov	r1, r6
 80069f8:	4622      	mov	r2, r4
 80069fa:	f7ff fc11 	bl	8006220 <memcpy>
 80069fe:	4631      	mov	r1, r6
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff ff35 	bl	8006870 <_free_r>
 8006a06:	e7e9      	b.n	80069dc <_realloc_r+0x1c>
 8006a08:	4635      	mov	r5, r6
 8006a0a:	e7e7      	b.n	80069dc <_realloc_r+0x1c>

08006a0c <_sbrk_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4c06      	ldr	r4, [pc, #24]	; (8006a28 <_sbrk_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4605      	mov	r5, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	f7f9 fef0 	bl	80007fc <_sbrk>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_sbrk_r+0x1a>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_sbrk_r+0x1a>
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20001b34 	.word	0x20001b34

08006a2c <__malloc_lock>:
 8006a2c:	4770      	bx	lr

08006a2e <__malloc_unlock>:
 8006a2e:	4770      	bx	lr

08006a30 <_malloc_usable_size_r>:
 8006a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a34:	1f18      	subs	r0, r3, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bfbc      	itt	lt
 8006a3a:	580b      	ldrlt	r3, [r1, r0]
 8006a3c:	18c0      	addlt	r0, r0, r3
 8006a3e:	4770      	bx	lr

08006a40 <_init>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr

08006a4c <_fini>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr
