
f303_lsm9ds1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004e84  08004e84  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e84  08004e84  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000080  08004f0c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08004f0c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001223c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e4b  00000000  00000000  000322ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  00034138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00034fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d414  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a36c  00000000  00000000  00053124  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab89a  00000000  00000000  0005d490  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00108da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004db8 	.word	0x08004db8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004db8 	.word	0x08004db8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <lsm9ds1_read_data_polling>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm9ds1_read_data_polling(void)
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af04      	add	r7, sp, #16
  stmdev_ctx_t dev_ctx_imu;
  stmdev_ctx_t dev_ctx_mag;

  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 8000296:	4bc8      	ldr	r3, [pc, #800]	; (80005b8 <lsm9ds1_read_data_polling+0x328>)
 8000298:	60fb      	str	r3, [r7, #12]
  dev_ctx_imu.read_reg = platform_read_imu;
 800029a:	4bc8      	ldr	r3, [pc, #800]	; (80005bc <lsm9ds1_read_data_polling+0x32c>)
 800029c:	613b      	str	r3, [r7, #16]
  dev_ctx_imu.handle = (void*)&imu_bus;
 800029e:	4bc8      	ldr	r3, [pc, #800]	; (80005c0 <lsm9ds1_read_data_polling+0x330>)
 80002a0:	617b      	str	r3, [r7, #20]

  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80002a2:	4bc8      	ldr	r3, [pc, #800]	; (80005c4 <lsm9ds1_read_data_polling+0x334>)
 80002a4:	603b      	str	r3, [r7, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80002a6:	4bc8      	ldr	r3, [pc, #800]	; (80005c8 <lsm9ds1_read_data_polling+0x338>)
 80002a8:	607b      	str	r3, [r7, #4]
  dev_ctx_mag.handle = (void*)&mag_bus;
 80002aa:	4bc8      	ldr	r3, [pc, #800]	; (80005cc <lsm9ds1_read_data_polling+0x33c>)
 80002ac:	60bb      	str	r3, [r7, #8]

  /* Initialize platform specific hardware */
  platform_init();
 80002ae:	f000 fa52 	bl	8000756 <platform_init>

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 80002b2:	2014      	movs	r0, #20
 80002b4:	f000 fa44 	bl	8000740 <platform_delay>

  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80002b8:	f107 010c 	add.w	r1, r7, #12
 80002bc:	463b      	mov	r3, r7
 80002be:	4ac4      	ldr	r2, [pc, #784]	; (80005d0 <lsm9ds1_read_data_polling+0x340>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fc9b 	bl	8000bfc <lsm9ds1_dev_id_get>
  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID){
 80002c6:	4bc2      	ldr	r3, [pc, #776]	; (80005d0 <lsm9ds1_read_data_polling+0x340>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b68      	cmp	r3, #104	; 0x68
 80002cc:	d103      	bne.n	80002d6 <lsm9ds1_read_data_polling+0x46>
 80002ce:	4bc0      	ldr	r3, [pc, #768]	; (80005d0 <lsm9ds1_read_data_polling+0x340>)
 80002d0:	785b      	ldrb	r3, [r3, #1]
 80002d2:	2b3d      	cmp	r3, #61	; 0x3d
 80002d4:	d000      	beq.n	80002d8 <lsm9ds1_read_data_polling+0x48>
    while(1){
 80002d6:	e7fe      	b.n	80002d6 <lsm9ds1_read_data_polling+0x46>
      /* manage here device not found */
    }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80002d8:	f107 010c 	add.w	r1, r7, #12
 80002dc:	463b      	mov	r3, r7
 80002de:	2201      	movs	r2, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fcc5 	bl	8000c70 <lsm9ds1_dev_reset_set>
  do {
    lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 80002e6:	f107 010c 	add.w	r1, r7, #12
 80002ea:	463b      	mov	r3, r7
 80002ec:	4ab9      	ldr	r2, [pc, #740]	; (80005d4 <lsm9ds1_read_data_polling+0x344>)
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd03 	bl	8000cfa <lsm9ds1_dev_reset_get>
  } while (rst);
 80002f4:	4bb7      	ldr	r3, [pc, #732]	; (80005d4 <lsm9ds1_read_data_polling+0x344>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f4      	bne.n	80002e6 <lsm9ds1_read_data_polling+0x56>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80002fc:	f107 010c 	add.w	r1, r7, #12
 8000300:	463b      	mov	r3, r7
 8000302:	2201      	movs	r2, #1
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fb56 	bl	80009b6 <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2102      	movs	r1, #2
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fb2a 	bl	800096a <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2103      	movs	r1, #3
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fa99 	bl	8000854 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 8000322:	463b      	mov	r3, r7
 8000324:	2103      	movs	r1, #3
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fc0f 	bl	8000b4a <lsm9ds1_mag_full_scale_set>

  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fd9d 	bl	8000e72 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 8000338:	f107 030c 	add.w	r3, r7, #12
 800033c:	2110      	movs	r1, #16
 800033e:	4618      	mov	r0, r3
 8000340:	f000 fdec 	bl	8000f1c <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fdc0 	bl	8000ed0 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	2103      	movs	r1, #3
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fcfa 	bl	8000d50 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	2105      	movs	r1, #5
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fd5f 	bl	8000e26 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 8000368:	f107 030c 	add.w	r3, r7, #12
 800036c:	2112      	movs	r1, #18
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd14 	bl	8000d9c <lsm9ds1_gy_filter_out_path_set>

  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8000374:	f107 030c 	add.w	r3, r7, #12
 8000378:	2122      	movs	r1, #34	; 0x22
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fa90 	bl	80008a0 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 8000380:	463b      	mov	r3, r7
 8000382:	2134      	movs	r1, #52	; 0x34
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fb65 	bl	8000a54 <lsm9ds1_mag_data_rate_set>

  /* Read samples in polling mode (no int) */
  while(1)
  {
	platform_delay(200);
 800038a:	20c8      	movs	r0, #200	; 0xc8
 800038c:	f000 f9d8 	bl	8000740 <platform_delay>

    /* Read device status register */
    lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8000390:	f107 010c 	add.w	r1, r7, #12
 8000394:	463b      	mov	r3, r7
 8000396:	4a90      	ldr	r2, [pc, #576]	; (80005d8 <lsm9ds1_read_data_polling+0x348>)
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fc4c 	bl	8000c36 <lsm9ds1_dev_status_get>

    if ( reg.status_imu.xlda && reg.status_imu.gda )
 800039e:	4b8e      	ldr	r3, [pc, #568]	; (80005d8 <lsm9ds1_read_data_polling+0x348>)
 80003a0:	785b      	ldrb	r3, [r3, #1]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f000 80a8 	beq.w	80004fe <lsm9ds1_read_data_polling+0x26e>
 80003ae:	4b8a      	ldr	r3, [pc, #552]	; (80005d8 <lsm9ds1_read_data_polling+0x348>)
 80003b0:	785b      	ldrb	r3, [r3, #1]
 80003b2:	f003 0302 	and.w	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f000 80a0 	beq.w	80004fe <lsm9ds1_read_data_polling+0x26e>
    {
      /* Read imu data */
      memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80003be:	2206      	movs	r2, #6
 80003c0:	2100      	movs	r1, #0
 80003c2:	4886      	ldr	r0, [pc, #536]	; (80005dc <lsm9ds1_read_data_polling+0x34c>)
 80003c4:	f004 f8ea 	bl	800459c <memset>
      memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80003c8:	2206      	movs	r2, #6
 80003ca:	2100      	movs	r1, #0
 80003cc:	4884      	ldr	r0, [pc, #528]	; (80005e0 <lsm9ds1_read_data_polling+0x350>)
 80003ce:	f004 f8e5 	bl	800459c <memset>

      lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration.u8bit);
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	4981      	ldr	r1, [pc, #516]	; (80005dc <lsm9ds1_read_data_polling+0x34c>)
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fbed 	bl	8000bb8 <lsm9ds1_acceleration_raw_get>
      lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate.u8bit);
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	497f      	ldr	r1, [pc, #508]	; (80005e0 <lsm9ds1_read_data_polling+0x350>)
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fbd6 	bl	8000b96 <lsm9ds1_angular_rate_raw_get>

      acceleration_mg[0] = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration.i16bit[0]);
 80003ea:	4b7c      	ldr	r3, [pc, #496]	; (80005dc <lsm9ds1_read_data_polling+0x34c>)
 80003ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f9e7 	bl	80007c4 <lsm9ds1_from_fs4g_to_mg>
 80003f6:	eef0 7a40 	vmov.f32	s15, s0
 80003fa:	4b7a      	ldr	r3, [pc, #488]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 80003fc:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration.i16bit[1]);
 8000400:	4b76      	ldr	r3, [pc, #472]	; (80005dc <lsm9ds1_read_data_polling+0x34c>)
 8000402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f9dc 	bl	80007c4 <lsm9ds1_from_fs4g_to_mg>
 800040c:	eef0 7a40 	vmov.f32	s15, s0
 8000410:	4b74      	ldr	r3, [pc, #464]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 8000412:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration.i16bit[2]);
 8000416:	4b71      	ldr	r3, [pc, #452]	; (80005dc <lsm9ds1_read_data_polling+0x34c>)
 8000418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f9d1 	bl	80007c4 <lsm9ds1_from_fs4g_to_mg>
 8000422:	eef0 7a40 	vmov.f32	s15, s0
 8000426:	4b6f      	ldr	r3, [pc, #444]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 8000428:	edc3 7a02 	vstr	s15, [r3, #8]

      angular_rate_mdps[0] = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 800042c:	4b6c      	ldr	r3, [pc, #432]	; (80005e0 <lsm9ds1_read_data_polling+0x350>)
 800042e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f9de 	bl	80007f4 <lsm9ds1_from_fs2000dps_to_mdps>
 8000438:	eef0 7a40 	vmov.f32	s15, s0
 800043c:	4b6a      	ldr	r3, [pc, #424]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 800043e:	edc3 7a00 	vstr	s15, [r3]
      angular_rate_mdps[1] = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 8000442:	4b67      	ldr	r3, [pc, #412]	; (80005e0 <lsm9ds1_read_data_polling+0x350>)
 8000444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f9d3 	bl	80007f4 <lsm9ds1_from_fs2000dps_to_mdps>
 800044e:	eef0 7a40 	vmov.f32	s15, s0
 8000452:	4b65      	ldr	r3, [pc, #404]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 8000454:	edc3 7a01 	vstr	s15, [r3, #4]
      angular_rate_mdps[2] = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 8000458:	4b61      	ldr	r3, [pc, #388]	; (80005e0 <lsm9ds1_read_data_polling+0x350>)
 800045a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f9c8 	bl	80007f4 <lsm9ds1_from_fs2000dps_to_mdps>
 8000464:	eef0 7a40 	vmov.f32	s15, s0
 8000468:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 800046a:	edc3 7a02 	vstr	s15, [r3, #8]
//      sprintf((char*)tx_buffer, "IMU - [mg]:%4.2f\t%4.2f\t%4.2f\t[mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
//              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
//              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);

		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
				(uint16_t)acceleration_mg[0], (uint16_t)acceleration_mg[1], (uint16_t)acceleration_mg[2],
 800046e:	4b5d      	ldr	r3, [pc, #372]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 8000470:	edd3 7a00 	vldr	s15, [r3]
 8000474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000478:	ee17 3a90 	vmov	r3, s15
 800047c:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 800047e:	461c      	mov	r4, r3
				(uint16_t)acceleration_mg[0], (uint16_t)acceleration_mg[1], (uint16_t)acceleration_mg[2],
 8000480:	4b58      	ldr	r3, [pc, #352]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 8000482:	edd3 7a01 	vldr	s15, [r3, #4]
 8000486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800048a:	ee17 3a90 	vmov	r3, s15
 800048e:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 8000490:	461d      	mov	r5, r3
				(uint16_t)acceleration_mg[0], (uint16_t)acceleration_mg[1], (uint16_t)acceleration_mg[2],
 8000492:	4b54      	ldr	r3, [pc, #336]	; (80005e4 <lsm9ds1_read_data_polling+0x354>)
 8000494:	edd3 7a02 	vldr	s15, [r3, #8]
 8000498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800049c:	ee17 3a90 	vmov	r3, s15
 80004a0:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 80004a2:	461a      	mov	r2, r3
				(uint16_t)angular_rate_mdps[0], (uint16_t)angular_rate_mdps[1], (uint16_t)angular_rate_mdps[2]);
 80004a4:	4b50      	ldr	r3, [pc, #320]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 80004a6:	edd3 7a00 	vldr	s15, [r3]
 80004aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004ae:	ee17 3a90 	vmov	r3, s15
 80004b2:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 80004b4:	4619      	mov	r1, r3
				(uint16_t)angular_rate_mdps[0], (uint16_t)angular_rate_mdps[1], (uint16_t)angular_rate_mdps[2]);
 80004b6:	4b4c      	ldr	r3, [pc, #304]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 80004b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80004bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004c0:	ee17 3a90 	vmov	r3, s15
 80004c4:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 80004c6:	4618      	mov	r0, r3
				(uint16_t)angular_rate_mdps[0], (uint16_t)angular_rate_mdps[1], (uint16_t)angular_rate_mdps[2]);
 80004c8:	4b47      	ldr	r3, [pc, #284]	; (80005e8 <lsm9ds1_read_data_polling+0x358>)
 80004ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80004ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004d2:	ee17 3a90 	vmov	r3, s15
 80004d6:	b29b      	uxth	r3, r3
		sprintf((char*)tx_buffer, "IMU - [mg]:%hu\t%hu\t%hu\t[mdps]:%hu\t%hu\t%hu\r\n",
 80004d8:	9303      	str	r3, [sp, #12]
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	9101      	str	r1, [sp, #4]
 80004de:	9200      	str	r2, [sp, #0]
 80004e0:	462b      	mov	r3, r5
 80004e2:	4622      	mov	r2, r4
 80004e4:	4941      	ldr	r1, [pc, #260]	; (80005ec <lsm9ds1_read_data_polling+0x35c>)
 80004e6:	4842      	ldr	r0, [pc, #264]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80004e8:	f004 f860 	bl	80045ac <siprintf>

      tx_com(tx_buffer, strlen((char const*)tx_buffer));
 80004ec:	4840      	ldr	r0, [pc, #256]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80004ee:	f7ff fe77 	bl	80001e0 <strlen>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	483d      	ldr	r0, [pc, #244]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80004fa:	f000 f90d 	bl	8000718 <tx_com>
    }

    if ( reg.status_mag.zyxda )
 80004fe:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <lsm9ds1_read_data_polling+0x348>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	f43f af3e 	beq.w	800038a <lsm9ds1_read_data_polling+0xfa>
    {
      /* Read magnetometer data */
      memset(data_raw_magnetic_field.u8bit, 0x00, 3 * sizeof(int16_t));
 800050e:	2206      	movs	r2, #6
 8000510:	2100      	movs	r1, #0
 8000512:	4838      	ldr	r0, [pc, #224]	; (80005f4 <lsm9ds1_read_data_polling+0x364>)
 8000514:	f004 f842 	bl	800459c <memset>

      lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field.u8bit);
 8000518:	463b      	mov	r3, r7
 800051a:	4936      	ldr	r1, [pc, #216]	; (80005f4 <lsm9ds1_read_data_polling+0x364>)
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb5c 	bl	8000bda <lsm9ds1_magnetic_raw_get>

      magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field.i16bit[0]);
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <lsm9ds1_read_data_polling+0x364>)
 8000524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f97b 	bl	8000824 <lsm9ds1_from_fs16gauss_to_mG>
 800052e:	eef0 7a40 	vmov.f32	s15, s0
 8000532:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 8000534:	edc3 7a00 	vstr	s15, [r3]
      magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field.i16bit[1]);
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <lsm9ds1_read_data_polling+0x364>)
 800053a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f970 	bl	8000824 <lsm9ds1_from_fs16gauss_to_mG>
 8000544:	eef0 7a40 	vmov.f32	s15, s0
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 800054a:	edc3 7a01 	vstr	s15, [r3, #4]
      magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field.i16bit[2]);
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <lsm9ds1_read_data_polling+0x364>)
 8000550:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f965 	bl	8000824 <lsm9ds1_from_fs16gauss_to_mG>
 800055a:	eef0 7a40 	vmov.f32	s15, s0
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 8000560:	edc3 7a02 	vstr	s15, [r3, #8]

//      sprintf((char*)tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
//              magnetic_field_mgauss[0], magnetic_field_mgauss[1], magnetic_field_mgauss[2]);

      sprintf((char*)tx_buffer, "MAG - [mG]:%hu\t%hu\t%hu\r\n",
    		  (uint16_t)magnetic_field_mgauss[0], (uint16_t)magnetic_field_mgauss[1], (uint16_t)magnetic_field_mgauss[2]);
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800056e:	ee17 3a90 	vmov	r3, s15
 8000572:	b29b      	uxth	r3, r3
      sprintf((char*)tx_buffer, "MAG - [mG]:%hu\t%hu\t%hu\r\n",
 8000574:	461a      	mov	r2, r3
    		  (uint16_t)magnetic_field_mgauss[0], (uint16_t)magnetic_field_mgauss[1], (uint16_t)magnetic_field_mgauss[2]);
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 8000578:	edd3 7a01 	vldr	s15, [r3, #4]
 800057c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000580:	ee17 3a90 	vmov	r3, s15
 8000584:	b29b      	uxth	r3, r3
      sprintf((char*)tx_buffer, "MAG - [mG]:%hu\t%hu\t%hu\r\n",
 8000586:	4619      	mov	r1, r3
    		  (uint16_t)magnetic_field_mgauss[0], (uint16_t)magnetic_field_mgauss[1], (uint16_t)magnetic_field_mgauss[2]);
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <lsm9ds1_read_data_polling+0x368>)
 800058a:	edd3 7a02 	vldr	s15, [r3, #8]
 800058e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000592:	ee17 3a90 	vmov	r3, s15
 8000596:	b29b      	uxth	r3, r3
      sprintf((char*)tx_buffer, "MAG - [mG]:%hu\t%hu\t%hu\r\n",
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	460b      	mov	r3, r1
 800059c:	4917      	ldr	r1, [pc, #92]	; (80005fc <lsm9ds1_read_data_polling+0x36c>)
 800059e:	4814      	ldr	r0, [pc, #80]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80005a0:	f004 f804 	bl	80045ac <siprintf>

      tx_com(tx_buffer, strlen((char const*)tx_buffer));
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80005a6:	f7ff fe1b 	bl	80001e0 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <lsm9ds1_read_data_polling+0x360>)
 80005b2:	f000 f8b1 	bl	8000718 <tx_com>
	platform_delay(200);
 80005b6:	e6e8      	b.n	800038a <lsm9ds1_read_data_polling+0xfa>
 80005b8:	08000601 	.word	0x08000601
 80005bc:	08000691 	.word	0x08000691
 80005c0:	20000008 	.word	0x20000008
 80005c4:	08000645 	.word	0x08000645
 80005c8:	080006d5 	.word	0x080006d5
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	200000de 	.word	0x200000de
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	2000009c 	.word	0x2000009c
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	200000b4 	.word	0x200000b4
 80005e8:	200000c0 	.word	0x200000c0
 80005ec:	08004dd0 	.word	0x08004dd0
 80005f0:	200000e0 	.word	0x200000e0
 80005f4:	200000ac 	.word	0x200000ac
 80005f8:	200000cc 	.word	0x200000cc
 80005fc:	08004dfc 	.word	0x08004dfc

08000600 <platform_write_imu>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write_imu(void *handle, uint8_t reg, uint8_t *bufp,
                                  uint16_t len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af04      	add	r7, sp, #16
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	607a      	str	r2, [r7, #4]
 800060a:	461a      	mov	r2, r3
 800060c:	460b      	mov	r3, r1
 800060e:	72fb      	strb	r3, [r7, #11]
 8000610:	4613      	mov	r3, r2
 8000612:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t*)handle;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	617b      	str	r3, [r7, #20]
  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	b299      	uxth	r1, r3
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	893b      	ldrh	r3, [r7, #8]
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	f001 fadd 	bl	8001bf4 <HAL_I2C_Mem_Write>
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
  HAL_SPI_Transmit(sensbus->hbus, bufp, len, 1000);
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);
#endif
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <platform_write_mag>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write_mag(void *handle, uint8_t reg, uint8_t *bufp,
                                  uint16_t len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af04      	add	r7, sp, #16
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	461a      	mov	r2, r3
 8000650:	460b      	mov	r3, r1
 8000652:	72fb      	strb	r3, [r7, #11]
 8000654:	4613      	mov	r3, r2
 8000656:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t*)handle;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	617b      	str	r3, [r7, #20]

  reg |= 0x80;
 800065c:	7afb      	ldrb	r3, [r7, #11]
 800065e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000662:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	b299      	uxth	r1, r3
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	b29a      	uxth	r2, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	893b      	ldrh	r3, [r7, #8]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f001 fab7 	bl	8001bf4 <HAL_I2C_Mem_Write>
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
  HAL_SPI_Transmit(sensbus->hbus, bufp, len, 1000);
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);
#endif
  return 0;
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <platform_read_imu>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af04      	add	r7, sp, #16
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	461a      	mov	r2, r3
 800069c:	460b      	mov	r3, r1
 800069e:	72fb      	strb	r3, [r7, #11]
 80006a0:	4613      	mov	r3, r2
 80006a2:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t*)handle;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	b299      	uxth	r1, r3
 80006b2:	7afb      	ldrb	r3, [r7, #11]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	893b      	ldrh	r3, [r7, #8]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	f001 fba9 	bl	8001e1c <HAL_I2C_Mem_Read>
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
  HAL_SPI_Receive(sensbus->hbus, bufp, len, 1000);
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);
#endif
  return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <platform_read_mag>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	4613      	mov	r3, r2
 80006e6:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t*)handle;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	893b      	ldrh	r3, [r7, #8]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	f001 fb87 	bl	8001e1c <HAL_I2C_Mem_Read>
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(sensbus->hbus, &reg, 1, 1000);
  HAL_SPI_Receive(sensbus->hbus, bufp, len, 1000);
  HAL_GPIO_WritePin(sensbus->cs_port, sensbus->cs_pin, GPIO_PIN_SET);
#endif
  return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <tx_com>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <tx_com+0x24>)
 800072e:	f003 fafb 	bl	8003d28 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
  #endif
  #ifdef STEVAL_MKI109V3
  CDC_Transmit_FS(tx_buffer, len);
  #endif
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000520 	.word	0x20000520

08000740 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 ff19 	bl	8001580 <HAL_Delay>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <lsm9ds1_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm9ds1_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	461a      	mov	r2, r3
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
 8000774:	4613      	mov	r3, r2
 8000776:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	685c      	ldr	r4, [r3, #4]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	893b      	ldrh	r3, [r7, #8]
 8000782:	7af9      	ldrb	r1, [r7, #11]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	47a0      	blx	r4
 8000788:	6178      	str	r0, [r7, #20]
  return ret;
 800078a:	697b      	ldr	r3, [r7, #20]
}
 800078c:	4618      	mov	r0, r3
 800078e:	371c      	adds	r7, #28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <lsm9ds1_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm9ds1_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	461a      	mov	r2, r3
 80007a0:	460b      	mov	r3, r1
 80007a2:	72fb      	strb	r3, [r7, #11]
 80007a4:	4613      	mov	r3, r2
 80007a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	893b      	ldrh	r3, [r7, #8]
 80007b2:	7af9      	ldrb	r1, [r7, #11]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	47a0      	blx	r4
 80007b8:	6178      	str	r0, [r7, #20]
  return ret;
 80007ba:	697b      	ldr	r3, [r7, #20]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	371c      	adds	r7, #28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}

080007c4 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb *0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *0.122f);
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80007f0 <lsm9ds1_from_fs4g_to_mg+0x2c>
 80007de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80007e2:	eeb0 0a67 	vmov.f32	s0, s15
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	3df9db23 	.word	0x3df9db23

080007f4 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb *17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *70.0f);
 80007fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000802:	ee07 3a90 	vmov	s15, r3
 8000806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800080a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000820 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	428c0000 	.word	0x428c0000

08000824 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb *0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *0.58f);
 800082e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800083a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000850 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 800083e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000842:	eeb0 0a67 	vmov.f32	s0, s15
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	3f147ae1 	.word	0x3f147ae1

08000854 <lsm9ds1_gy_full_scale_set>:
  * @param  val    Change the values of "fs_g" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_gy_fs_t val)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	2301      	movs	r3, #1
 8000866:	2110      	movs	r1, #16
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff7b 	bl	8000764 <lsm9ds1_read_reg>
 800086e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <lsm9ds1_gy_full_scale_set+0x42>
    ctrl_reg1_g.fs_g = (uint8_t)val;
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	7a3b      	ldrb	r3, [r7, #8]
 8000880:	f362 03c4 	bfi	r3, r2, #3, #2
 8000884:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000886:	f107 0208 	add.w	r2, r7, #8
 800088a:	2301      	movs	r3, #1
 800088c:	2110      	movs	r1, #16
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff80 	bl	8000794 <lsm9ds1_write_reg>
 8000894:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  return ret;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <lsm9ds1_imu_data_rate_set>:
  * @param  val    Change the values of "odr_g" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx, lsm9ds1_imu_odr_t val)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	2301      	movs	r3, #1
 80008b2:	2110      	movs	r1, #16
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff55 	bl	8000764 <lsm9ds1_read_reg>
 80008ba:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <lsm9ds1_imu_data_rate_set+0x42>
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	7c3b      	ldrb	r3, [r7, #16]
 80008cc:	f362 1347 	bfi	r3, r2, #5, #3
 80008d0:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80008d2:	f107 0210 	add.w	r2, r7, #16
 80008d6:	2301      	movs	r3, #1
 80008d8:	2110      	movs	r1, #16
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff5a 	bl	8000794 <lsm9ds1_write_reg>
 80008e0:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  if(ret == 0){
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d107      	bne.n	80008f8 <lsm9ds1_imu_data_rate_set+0x58>
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80008e8:	f107 020c 	add.w	r2, r7, #12
 80008ec:	2301      	movs	r3, #1
 80008ee:	2120      	movs	r1, #32
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff37 	bl	8000764 <lsm9ds1_read_reg>
 80008f6:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  }
  if(ret == 0){
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d110      	bne.n	8000920 <lsm9ds1_imu_data_rate_set+0x80>
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	b2da      	uxtb	r2, r3
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	f362 1347 	bfi	r3, r2, #5, #3
 800090e:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000910:	f107 020c 	add.w	r2, r7, #12
 8000914:	2301      	movs	r3, #1
 8000916:	2120      	movs	r1, #32
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff3b 	bl	8000794 <lsm9ds1_write_reg>
 800091e:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  if(ret == 0){
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d107      	bne.n	8000936 <lsm9ds1_imu_data_rate_set+0x96>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	2301      	movs	r3, #1
 800092c:	2112      	movs	r1, #18
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff18 	bl	8000764 <lsm9ds1_read_reg>
 8000934:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_g, 1);
  }
  if(ret == 0){
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d111      	bne.n	8000960 <lsm9ds1_imu_data_rate_set+0xc0>
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	09db      	lsrs	r3, r3, #7
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	7a3b      	ldrb	r3, [r7, #8]
 800094a:	f362 13c7 	bfi	r3, r2, #7, #1
 800094e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000950:	f107 0208 	add.w	r2, r7, #8
 8000954:	2301      	movs	r3, #1
 8000956:	2112      	movs	r1, #18
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff1b 	bl	8000794 <lsm9ds1_write_reg>
 800095e:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }

  return ret;
 8000960:	697b      	ldr	r3, [r7, #20]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <lsm9ds1_xl_full_scale_set>:
  * @param  val    Change the values of "fs_xl" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_xl_fs_t val)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	460b      	mov	r3, r1
 8000974:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000976:	f107 0208 	add.w	r2, r7, #8
 800097a:	2301      	movs	r3, #1
 800097c:	2120      	movs	r1, #32
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fef0 	bl	8000764 <lsm9ds1_read_reg>
 8000984:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  if(ret == 0){
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10f      	bne.n	80009ac <lsm9ds1_xl_full_scale_set+0x42>
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7a3b      	ldrb	r3, [r7, #8]
 8000996:	f362 03c4 	bfi	r3, r2, #3, #2
 800099a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800099c:	f107 0208 	add.w	r2, r7, #8
 80009a0:	2301      	movs	r3, #1
 80009a2:	2120      	movs	r1, #32
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fef5 	bl	8000794 <lsm9ds1_write_reg>
 80009aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  return ret;
 80009ac:	68fb      	ldr	r3, [r7, #12]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b088      	sub	sp, #32
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 80009c4:	f107 0218 	add.w	r2, r7, #24
 80009c8:	2301      	movs	r3, #1
 80009ca:	2122      	movs	r1, #34	; 0x22
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f7ff fec9 	bl	8000764 <lsm9ds1_read_reg>
 80009d2:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10f      	bne.n	80009fa <lsm9ds1_block_data_update_set+0x44>
    ctrl_reg8.bdu = (uint8_t)val;
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	7e3b      	ldrb	r3, [r7, #24]
 80009e4:	f362 1386 	bfi	r3, r2, #6, #1
 80009e8:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 80009ea:	f107 0218 	add.w	r2, r7, #24
 80009ee:	2301      	movs	r3, #1
 80009f0:	2122      	movs	r1, #34	; 0x22
 80009f2:	68b8      	ldr	r0, [r7, #8]
 80009f4:	f7ff fece 	bl	8000794 <lsm9ds1_write_reg>
 80009f8:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d107      	bne.n	8000a10 <lsm9ds1_block_data_update_set+0x5a>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8000a00:	f107 0214 	add.w	r2, r7, #20
 8000a04:	2301      	movs	r3, #1
 8000a06:	2124      	movs	r1, #36	; 0x24
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff feab 	bl	8000764 <lsm9ds1_read_reg>
 8000a0e:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg5_m, 1);
  }
  if(ret == 0){
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d119      	bne.n	8000a4a <lsm9ds1_block_data_update_set+0x94>
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	7d3b      	ldrb	r3, [r7, #20]
 8000a24:	f362 13c7 	bfi	r3, r2, #7, #1
 8000a28:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	7d3b      	ldrb	r3, [r7, #20]
 8000a34:	f362 1386 	bfi	r3, r2, #6, #1
 8000a38:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8000a3a:	f107 0214 	add.w	r2, r7, #20
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2124      	movs	r1, #36	; 0x24
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fea6 	bl	8000794 <lsm9ds1_write_reg>
 8000a48:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg5_m, 1);
  }

  return ret;
 8000a4a:	69fb      	ldr	r3, [r7, #28]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M, (uint8_t*)&ctrl_reg1_m, 1);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	2301      	movs	r3, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fe7b 	bl	8000764 <lsm9ds1_read_reg>
 8000a6e:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d125      	bne.n	8000ac2 <lsm9ds1_mag_data_rate_set+0x6e>
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	7c3b      	ldrb	r3, [r7, #16]
 8000a82:	f362 0341 	bfi	r3, r2, #1, #1
 8000a86:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	7c3b      	ldrb	r3, [r7, #16]
 8000a92:	f362 0384 	bfi	r3, r2, #2, #3
 8000a96:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	7c3b      	ldrb	r3, [r7, #16]
 8000aa4:	f362 1346 	bfi	r3, r2, #5, #2
 8000aa8:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 8000aaa:	7c3b      	ldrb	r3, [r7, #16]
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8000ab2:	f107 0210 	add.w	r2, r7, #16
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2120      	movs	r1, #32
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe6a 	bl	8000794 <lsm9ds1_write_reg>
 8000ac0:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg1_m, 1);
  }
  if(ret == 0){
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d107      	bne.n	8000ad8 <lsm9ds1_mag_data_rate_set+0x84>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	2301      	movs	r3, #1
 8000ace:	2122      	movs	r1, #34	; 0x22
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fe47 	bl	8000764 <lsm9ds1_read_reg>
 8000ad6:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_m, 1);
  }
  if(ret == 0){
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d111      	bne.n	8000b02 <lsm9ds1_mag_data_rate_set+0xae>
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	099b      	lsrs	r3, r3, #6
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	f362 0301 	bfi	r3, r2, #0, #2
 8000af0:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8000af2:	f107 020c 	add.w	r2, r7, #12
 8000af6:	2301      	movs	r3, #1
 8000af8:	2122      	movs	r1, #34	; 0x22
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fe4a 	bl	8000794 <lsm9ds1_write_reg>
 8000b00:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_m, 1);
  }
  if(ret == 0){
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <lsm9ds1_mag_data_rate_set+0xc4>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M, (uint8_t*)&ctrl_reg4_m, 1);
 8000b08:	f107 0208 	add.w	r2, r7, #8
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2123      	movs	r1, #35	; 0x23
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fe27 	bl	8000764 <lsm9ds1_read_reg>
 8000b16:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d110      	bne.n	8000b40 <lsm9ds1_mag_data_rate_set+0xec>
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	091b      	lsrs	r3, r3, #4
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	7a3b      	ldrb	r3, [r7, #8]
 8000b2a:	f362 0383 	bfi	r3, r2, #2, #2
 8000b2e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8000b30:	f107 0208 	add.w	r2, r7, #8
 8000b34:	2301      	movs	r3, #1
 8000b36:	2123      	movs	r1, #35	; 0x23
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fe2b 	bl	8000794 <lsm9ds1_write_reg>
 8000b3e:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4_m, 1);
  }
  return ret;
 8000b40:	697b      	ldr	r3, [r7, #20]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <lsm9ds1_mag_full_scale_set>:
  * @param  val    Change the values of "fs" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_mag_fs_t val)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M, (uint8_t*)&ctrl_reg2_m, 1);
 8000b56:	f107 0208 	add.w	r2, r7, #8
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2121      	movs	r1, #33	; 0x21
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fe00 	bl	8000764 <lsm9ds1_read_reg>
 8000b64:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10f      	bne.n	8000b8c <lsm9ds1_mag_full_scale_set+0x42>
    ctrl_reg2_m.fs = (uint8_t)val;
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	7a3b      	ldrb	r3, [r7, #8]
 8000b76:	f362 1346 	bfi	r3, r2, #5, #2
 8000b7a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8000b7c:	f107 0208 	add.w	r2, r7, #8
 8000b80:	2301      	movs	r3, #1
 8000b82:	2121      	movs	r1, #33	; 0x21
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fe05 	bl	8000794 <lsm9ds1_write_reg>
 8000b8a:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg2_m, 1);
  }
  return ret;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2118      	movs	r1, #24
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fddc 	bl	8000764 <lsm9ds1_read_reg>
 8000bac:	60f8      	str	r0, [r7, #12]
  return ret;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	2128      	movs	r1, #40	; 0x28
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fdcb 	bl	8000764 <lsm9ds1_read_reg>
 8000bce:	60f8      	str	r0, [r7, #12]
  return ret;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8000be4:	2306      	movs	r3, #6
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	2128      	movs	r1, #40	; 0x28
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fdba 	bl	8000764 <lsm9ds1_read_reg>
 8000bf0:	60f8      	str	r0, [r7, #12]
  return ret;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <lsm9ds1_dev_id_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	68b8      	ldr	r0, [r7, #8]
 8000c10:	f7ff fda8 	bl	8000764 <lsm9ds1_read_reg>
 8000c14:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&(buff->imu), 1);
  if(ret == 0){
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <lsm9ds1_dev_id_get+0x30>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	2301      	movs	r3, #1
 8000c22:	210f      	movs	r1, #15
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff fd9d 	bl	8000764 <lsm9ds1_read_reg>
 8000c2a:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&(buff->mag), 1);
  }
  return ret;
 8000c2c:	697b      	ldr	r3, [r7, #20]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <lsm9ds1_dev_status_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t*)&(val->status_imu), 1);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8000c46:	2301      	movs	r3, #1
 8000c48:	2117      	movs	r1, #23
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f7ff fd8a 	bl	8000764 <lsm9ds1_read_reg>
 8000c50:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d106      	bne.n	8000c66 <lsm9ds1_dev_status_get+0x30>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t*)&(val->status_mag), 1);
 8000c58:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2127      	movs	r1, #39	; 0x27
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff fd80 	bl	8000764 <lsm9ds1_read_reg>
 8000c64:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000c66:	697b      	ldr	r3, [r7, #20]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <lsm9ds1_dev_reset_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 8000c7e:	f107 0214 	add.w	r2, r7, #20
 8000c82:	2301      	movs	r3, #1
 8000c84:	2122      	movs	r1, #34	; 0x22
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fd6c 	bl	8000764 <lsm9ds1_read_reg>
 8000c8c:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10f      	bne.n	8000cb4 <lsm9ds1_dev_reset_set+0x44>
    ctrl_reg8.sw_reset = (uint8_t)val;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	7d3b      	ldrb	r3, [r7, #20]
 8000c9e:	f362 0300 	bfi	r3, r2, #0, #1
 8000ca2:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8000ca4:	f107 0214 	add.w	r2, r7, #20
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2122      	movs	r1, #34	; 0x22
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	f7ff fd71 	bl	8000794 <lsm9ds1_write_reg>
 8000cb2:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg8, 1);
  }
  if(ret == 0){
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d107      	bne.n	8000cca <lsm9ds1_dev_reset_set+0x5a>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8000cba:	f107 0218 	add.w	r2, r7, #24
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2121      	movs	r1, #33	; 0x21
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fd4e 	bl	8000764 <lsm9ds1_read_reg>
 8000cc8:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg2_m, 1);
  }
  if(ret == 0){
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10f      	bne.n	8000cf0 <lsm9ds1_dev_reset_set+0x80>
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	7e3b      	ldrb	r3, [r7, #24]
 8000cda:	f362 0382 	bfi	r3, r2, #2, #1
 8000cde:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8000ce0:	f107 0218 	add.w	r2, r7, #24
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2121      	movs	r1, #33	; 0x21
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fd53 	bl	8000794 <lsm9ds1_write_reg>
 8000cee:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg2_m, 1);
  }

  return ret;
 8000cf0:	69fb      	ldr	r3, [r7, #28]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <lsm9ds1_dev_reset_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b088      	sub	sp, #32
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 8000d06:	f107 0214 	add.w	r2, r7, #20
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2122      	movs	r1, #34	; 0x22
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f7ff fd28 	bl	8000764 <lsm9ds1_read_reg>
 8000d14:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d114      	bne.n	8000d46 <lsm9ds1_dev_reset_get+0x4c>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8000d1c:	f107 0218 	add.w	r2, r7, #24
 8000d20:	2301      	movs	r3, #1
 8000d22:	2121      	movs	r1, #33	; 0x21
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fd1d 	bl	8000764 <lsm9ds1_read_reg>
 8000d2a:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8000d2c:	7e3b      	ldrb	r3, [r7, #24]
 8000d2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7d3b      	ldrb	r3, [r7, #20]
 8000d36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8000d46:	69fb      	ldr	r3, [r7, #28]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 8000d5c:	f107 0208 	add.w	r2, r7, #8
 8000d60:	2301      	movs	r3, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fcfd 	bl	8000764 <lsm9ds1_read_reg>
 8000d6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	7a3b      	ldrb	r3, [r7, #8]
 8000d7c:	f362 0301 	bfi	r3, r2, #0, #2
 8000d80:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8000d82:	f107 0208 	add.w	r2, r7, #8
 8000d86:	2301      	movs	r3, #1
 8000d88:	2110      	movs	r1, #16
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fd02 	bl	8000794 <lsm9ds1_write_reg>
 8000d90:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  return ret;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	2301      	movs	r3, #1
 8000dae:	2111      	movs	r1, #17
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fcd7 	bl	8000764 <lsm9ds1_read_reg>
 8000db6:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&ctrl_reg2_g, 1);
  if(ret == 0){
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10f      	bne.n	8000dde <lsm9ds1_gy_filter_out_path_set+0x42>
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	7c3b      	ldrb	r3, [r7, #16]
 8000dc8:	f362 0301 	bfi	r3, r2, #0, #2
 8000dcc:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8000dce:	f107 0210 	add.w	r2, r7, #16
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2111      	movs	r1, #17
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fcdc 	bl	8000794 <lsm9ds1_write_reg>
 8000ddc:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg2_g, 1);
  }
  if(ret == 0){
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d107      	bne.n	8000df4 <lsm9ds1_gy_filter_out_path_set+0x58>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	2301      	movs	r3, #1
 8000dea:	2112      	movs	r1, #18
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fcb9 	bl	8000764 <lsm9ds1_read_reg>
 8000df2:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_g, 1);
  }
  if(ret == 0){
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d110      	bne.n	8000e1c <lsm9ds1_gy_filter_out_path_set+0x80>
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4 );
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	f362 1386 	bfi	r3, r2, #6, #1
 8000e0a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	2301      	movs	r3, #1
 8000e12:	2112      	movs	r1, #18
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fcbd 	bl	8000794 <lsm9ds1_write_reg>
 8000e1a:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }

  return ret;
 8000e1c:	697b      	ldr	r3, [r7, #20]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G, (uint8_t*)&ctrl_reg3_g, 1);
 8000e32:	f107 0208 	add.w	r2, r7, #8
 8000e36:	2301      	movs	r3, #1
 8000e38:	2112      	movs	r1, #18
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fc92 	bl	8000764 <lsm9ds1_read_reg>
 8000e40:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10f      	bne.n	8000e68 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	7a3b      	ldrb	r3, [r7, #8]
 8000e52:	f362 0303 	bfi	r3, r2, #0, #4
 8000e56:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8000e58:	f107 0208 	add.w	r2, r7, #8
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	2112      	movs	r1, #18
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fc97 	bl	8000794 <lsm9ds1_write_reg>
 8000e66:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }
  return ret;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000e7e:	f107 0208 	add.w	r2, r7, #8
 8000e82:	2301      	movs	r3, #1
 8000e84:	2120      	movs	r1, #32
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fc6c 	bl	8000764 <lsm9ds1_read_reg>
 8000e8c:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  if(ret == 0){
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d118      	bne.n	8000ec6 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	7a3b      	ldrb	r3, [r7, #8]
 8000e9e:	f362 0301 	bfi	r3, r2, #0, #2
 8000ea2:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4 );
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	7a3b      	ldrb	r3, [r7, #8]
 8000eb0:	f362 0382 	bfi	r3, r2, #2, #1
 8000eb4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8000eb6:	f107 0208 	add.w	r2, r7, #8
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fc68 	bl	8000794 <lsm9ds1_write_reg>
 8000ec4:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  return ret;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2121      	movs	r1, #33	; 0x21
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc3d 	bl	8000764 <lsm9ds1_read_reg>
 8000eea:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg7_xl, 1);
  if(ret == 0){
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <lsm9ds1_xl_filter_out_path_set+0x42>
    ctrl_reg7_xl.fds = (uint8_t)val;
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	7a3b      	ldrb	r3, [r7, #8]
 8000efc:	f362 0382 	bfi	r3, r2, #2, #1
 8000f00:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8000f02:	f107 0208 	add.w	r2, r7, #8
 8000f06:	2301      	movs	r3, #1
 8000f08:	2121      	movs	r1, #33	; 0x21
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fc42 	bl	8000794 <lsm9ds1_write_reg>
 8000f10:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg7_xl, 1);
  }
  return ret;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8000f28:	f107 0208 	add.w	r2, r7, #8
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	2121      	movs	r1, #33	; 0x21
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fc17 	bl	8000764 <lsm9ds1_read_reg>
 8000f36:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg7_xl, 1);
  if(ret == 0){
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	7a3b      	ldrb	r3, [r7, #8]
 8000f4a:	f362 13c7 	bfi	r3, r2, #7, #1
 8000f4e:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	7a3b      	ldrb	r3, [r7, #8]
 8000f5a:	f362 1346 	bfi	r3, r2, #5, #2
 8000f5e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8000f60:	f107 0208 	add.w	r2, r7, #8
 8000f64:	2301      	movs	r3, #1
 8000f66:	2121      	movs	r1, #33	; 0x21
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fc13 	bl	8000794 <lsm9ds1_write_reg>
 8000f6e:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg7_xl, 1);
  }
  return ret;
 8000f70:	68fb      	ldr	r3, [r7, #12]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fa99 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f809 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f8d7 	bl	8001138 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f8a:	f000 f865 	bl	8001058 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 f8a3 	bl	80010d8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	lsm9ds1_read_data_polling();
 8000f92:	f7ff f97d 	bl	8000290 <lsm9ds1_read_data_polling>
  {
 8000f96:	e7fc      	b.n	8000f92 <main+0x18>

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a6      	sub	sp, #152	; 0x98
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fa2:	2228      	movs	r2, #40	; 0x28
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 faf8 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2258      	movs	r2, #88	; 0x58
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 faea 	bl	800459c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fade 	bl	80025b8 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001002:	f000 f901 	bl	8001208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2302      	movs	r3, #2
 800100c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f002 f9de 	bl	80033e4 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800102e:	f000 f8eb 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001032:	2322      	movs	r3, #34	; 0x22
 8001034:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fc05 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800104c:	f000 f8dc 	bl	8001208 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3798      	adds	r7, #152	; 0x98
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_I2C1_Init+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_I2C1_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_I2C1_Init+0x74>)
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <MX_I2C1_Init+0x7c>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_I2C1_Init+0x74>)
 8001070:	2201      	movs	r2, #1
 8001072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_I2C1_Init+0x74>)
 8001094:	f000 fd1e 	bl	8001ad4 <HAL_I2C_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800109e:	f000 f8b3 	bl	8001208 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_I2C1_Init+0x74>)
 80010a6:	f001 f9ef 	bl	8002488 <HAL_I2CEx_ConfigAnalogFilter>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010b0:	f000 f8aa 	bl	8001208 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_I2C1_Init+0x74>)
 80010b8:	f001 fa31 	bl	800251e <HAL_I2CEx_ConfigDigitalFilter>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010c2:	f000 f8a1 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200004d4 	.word	0x200004d4
 80010d0:	40005400 	.word	0x40005400
 80010d4:	2000090e 	.word	0x2000090e

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <MX_USART2_UART_Init+0x5c>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_USART2_UART_Init+0x58>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_USART2_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_USART2_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_USART2_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_USART2_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_USART2_UART_Init+0x58>)
 800111c:	f002 fdb6 	bl	8003c8c <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001126:	f000 f86f 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000520 	.word	0x20000520
 8001134:	40004400 	.word	0x40004400

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_GPIO_Init+0xc4>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a24      	ldr	r2, [pc, #144]	; (80011fc <MX_GPIO_Init+0xc4>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_GPIO_Init+0xc4>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_GPIO_Init+0xc4>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_GPIO_Init+0xc4>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_GPIO_Init+0xc4>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 fc75 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_GPIO_Init+0xc8>)
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_GPIO_Init+0xcc>)
 80011d0:	f000 fade 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d4:	2320      	movs	r3, #32
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 facf 	bl	8001790 <HAL_GPIO_Init>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	10210000 	.word	0x10210000
 8001204:	48000800 	.word	0x48000800

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124e:	2007      	movs	r0, #7
 8001250:	f000 fa6a 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_I2C_MspInit+0x7c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d128      	bne.n	80012d4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800129a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	2312      	movs	r3, #18
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ac:	2304      	movs	r3, #4
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_I2C_MspInit+0x84>)
 80012b8:	f000 fa6a 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	61d3      	str	r3, [r2, #28]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_I2C_MspInit+0x80>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_UART_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d128      	bne.n	800135c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_UART_MspInit+0x80>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0x80>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133a:	230c      	movs	r3, #12
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134a:	2307      	movs	r3, #7
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 fa1a 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8be 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f003 f8a6 	bl	8004548 <__errno>
 80013fc:	4602      	mov	r2, r0
 80013fe:	230c      	movs	r3, #12
 8001400:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20010000 	.word	0x20010000
 8001428:	00000400 	.word	0x00000400
 800142c:	200004c8 	.word	0x200004c8
 8001430:	200005a8 	.word	0x200005a8

08001434 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <SystemInit+0x28>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <SystemInit+0x28>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <SystemInit+0x28>)
 800144a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144e:	609a      	str	r2, [r3, #8]
#endif
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001464:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001466:	e003      	b.n	8001470 <LoopCopyDataInit>

08001468 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800146a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800146c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800146e:	3104      	adds	r1, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001474:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001476:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001478:	d3f6      	bcc.n	8001468 <CopyDataInit>
	ldr	r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800147c:	e002      	b.n	8001484 <LoopFillZerobss>

0800147e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800147e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001480:	f842 3b04 	str.w	r3, [r2], #4

08001484 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <LoopForever+0x16>)
	cmp	r2, r3
 8001486:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001488:	d3f9      	bcc.n	800147e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800148a:	f7ff ffd3 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f003 f861 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001492:	f7ff fd72 	bl	8000f7a <main>

08001496 <LoopForever>:

LoopForever:
    b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001498:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800149c:	08004e8c 	.word	0x08004e8c
	ldr	r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014a4:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80014a8:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80014ac:	200005a8 	.word	0x200005a8

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_Init+0x28>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_Init+0x28>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f92f 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fea2 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000

080014e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f939 	bl	8001776 <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 f90f 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000010 	.word	0x20000010
 8001538:	20000018 	.word	0x20000018
 800153c:	20000014 	.word	0x20000014

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000018 	.word	0x20000018
 8001564:	200005a0 	.word	0x200005a0

08001568 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;  
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200005a0 	.word	0x200005a0

08001580 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_Delay+0x40>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000018 	.word	0x20000018

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff47 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5c 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e160      	b.n	8001a62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8152 	beq.w	8001a5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d00b      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017cc:	2b11      	cmp	r3, #17
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0xea>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80ac 	beq.w	8001a5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800191c:	4a59      	ldr	r2, [pc, #356]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001946:	d025      	beq.n	8001994 <HAL_GPIO_Init+0x204>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_GPIO_Init+0x2f8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01f      	beq.n	8001990 <HAL_GPIO_Init+0x200>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x2fc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d019      	beq.n	800198c <HAL_GPIO_Init+0x1fc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_GPIO_Init+0x300>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_Init+0x1f8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_Init+0x1f4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x308>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x1f0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_Init+0x1ec>
 8001978:	2306      	movs	r3, #6
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_Init+0x206>
 800197c:	2307      	movs	r3, #7
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001980:	2305      	movs	r3, #5
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x206>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d8:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae97 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	48001800 	.word	0x48001800
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e081      	b.n	8001bea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fbb0 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d104      	bne.n	8001b6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	ea42 0103 	orr.w	r1, r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	021a      	lsls	r2, r3, #8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69d9      	ldr	r1, [r3, #28]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	f040 80f9 	bne.w	8001e0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_I2C_Mem_Write+0x34>
 8001c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0ed      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Mem_Write+0x4e>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e0e6      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fc8d 	bl	8001568 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2319      	movs	r3, #25
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fac3 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d1      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2221      	movs	r2, #33	; 0x21
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c94:	88f8      	ldrh	r0, [r7, #6]
 8001c96:	893a      	ldrh	r2, [r7, #8]
 8001c98:	8979      	ldrh	r1, [r7, #10]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f9d3 	bl	8002050 <I2C_RequestMemoryWrite>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0a9      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2bff      	cmp	r3, #255	; 0xff
 8001cc4:	d90e      	bls.n	8001ce4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	8979      	ldrh	r1, [r7, #10]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fba5 	bl	800242c <I2C_TransferConfig>
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fb94 	bl	800242c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 faad 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e07b      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d034      	beq.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d130      	bne.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	2200      	movs	r2, #0
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fa3f 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04d      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2bff      	cmp	r3, #255	; 0xff
 8001d7c:	d90e      	bls.n	8001d9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	22ff      	movs	r2, #255	; 0xff
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fb49 	bl	800242c <I2C_TransferConfig>
 8001d9a:	e00f      	b.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	8979      	ldrh	r1, [r7, #10]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fb38 	bl	800242c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d19e      	bne.n	8001d04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa8c 	bl	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01a      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_I2C_Mem_Write+0x224>)
 8001dee:	400b      	ands	r3, r1
 8001df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	813b      	strh	r3, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	f040 80fd 	bne.w	800203e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_I2C_Mem_Read+0x34>
 8001e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0f1      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Mem_Read+0x4e>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e0ea      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e72:	f7ff fb79 	bl	8001568 <HAL_GetTick>
 8001e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f9af 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0d5      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2222      	movs	r2, #34	; 0x22
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ebc:	88f8      	ldrh	r0, [r7, #6]
 8001ebe:	893a      	ldrh	r2, [r7, #8]
 8001ec0:	8979      	ldrh	r1, [r7, #10]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4603      	mov	r3, r0
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f913 	bl	80020f8 <I2C_RequestMemoryRead>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0ad      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2bff      	cmp	r3, #255	; 0xff
 8001eec:	d90e      	bls.n	8001f0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	22ff      	movs	r2, #255	; 0xff
 8001ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	8979      	ldrh	r1, [r7, #10]
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <HAL_I2C_Mem_Read+0x22c>)
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fa91 	bl	800242c <I2C_TransferConfig>
 8001f0a:	e00f      	b.n	8001f2c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_I2C_Mem_Read+0x22c>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa80 	bl	800242c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	2200      	movs	r2, #0
 8001f34:	2104      	movs	r1, #4
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f956 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e07c      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d034      	beq.n	8001fec <HAL_I2C_Mem_Read+0x1d0>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d130      	bne.n	8001fec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	2200      	movs	r2, #0
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f927 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e04d      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d90e      	bls.n	8001fcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	22ff      	movs	r2, #255	; 0xff
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	8979      	ldrh	r1, [r7, #10]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fa31 	bl	800242c <I2C_TransferConfig>
 8001fca:	e00f      	b.n	8001fec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa20 	bl	800242c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d19a      	bne.n	8001f2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f974 	bl	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01a      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_I2C_Mem_Read+0x230>)
 800201e:	400b      	ands	r3, r1
 8002020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	80002400 	.word	0x80002400
 800204c:	fe00e800 	.word	0xfe00e800

08002050 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
 8002062:	460b      	mov	r3, r1
 8002064:	813b      	strh	r3, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	8979      	ldrh	r1, [r7, #10]
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <I2C_RequestMemoryWrite+0xa4>)
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f9d7 	bl	800242c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f8f0 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e02c      	b.n	80020ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002098:	893b      	ldrh	r3, [r7, #8]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
 80020a2:	e015      	b.n	80020d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020a4:	893b      	ldrh	r3, [r7, #8]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f8d6 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e012      	b.n	80020ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f884 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	80002000 	.word	0x80002000

080020f8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	8979      	ldrh	r1, [r7, #10]
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <I2C_RequestMemoryRead+0xa4>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f984 	bl	800242c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f89d 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e02c      	b.n	8002192 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
 8002148:	e015      	b.n	8002176 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800214a:	893b      	ldrh	r3, [r7, #8]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b29b      	uxth	r3, r3
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f883 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e012      	b.n	8002192 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800216c:	893b      	ldrh	r3, [r7, #8]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2200      	movs	r2, #0
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f831 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	80002000 	.word	0x80002000

080021a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d103      	bne.n	80021be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d007      	beq.n	80021dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	619a      	str	r2, [r3, #24]
  }
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f8:	e022      	b.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d01e      	beq.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff f9b1 	bl	8001568 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d113      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e00f      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	429a      	cmp	r2, r3
 800225c:	d0cd      	beq.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002274:	e02c      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f870 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e02a      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d01e      	beq.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff f969 	bl	8001568 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d1cb      	bne.n	8002276 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f4:	e028      	b.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f830 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e026      	b.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7ff f92d 	bl	8001568 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d113      	bne.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f043 0220 	orr.w	r2, r3, #32
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b20      	cmp	r3, #32
 8002354:	d1cf      	bne.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d151      	bne.n	800241e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237a:	e022      	b.n	80023c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d01e      	beq.n	80023c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002384:	f7ff f8f0 	bl	8001568 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	d302      	bcc.n	800239a <I2C_IsAcknowledgeFailed+0x3a>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d113      	bne.n	80023c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0220 	orr.w	r2, r3, #32
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e02e      	b.n	8002420 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d1d5      	bne.n	800237c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2220      	movs	r2, #32
 80023de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff fedd 	bl	80021a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <I2C_IsAcknowledgeFailed+0xc8>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f043 0204 	orr.w	r2, r3, #4
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	4613      	mov	r3, r2
 800243c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	0d5b      	lsrs	r3, r3, #21
 8002448:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <I2C_TransferConfig+0x58>)
 800244e:	430b      	orrs	r3, r1
 8002450:	43db      	mvns	r3, r3
 8002452:	ea02 0103 	and.w	r1, r2, r3
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800245c:	7a7b      	ldrb	r3, [r7, #9]
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	03ff63ff 	.word	0x03ff63ff

08002488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b20      	cmp	r3, #32
 800249c:	d138      	bne.n	8002510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e032      	b.n	8002512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b20      	cmp	r3, #32
 8002532:	d139      	bne.n	80025a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800253e:	2302      	movs	r3, #2
 8002540:	e033      	b.n	80025aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2224      	movs	r2, #36	; 0x24
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025be:	af00      	add	r7, sp, #0
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f000 bf01 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8160 	beq.w	80028a2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025e2:	4bae      	ldr	r3, [pc, #696]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d159      	bne.n	80026ae <HAL_RCC_OscConfig+0xf6>
 80025fa:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d152      	bne.n	80026ae <HAL_RCC_OscConfig+0xf6>
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800261c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0x82>
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0xae>
 800263a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800264e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002652:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002656:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002662:	4b8e      	ldr	r3, [pc, #568]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800266a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800266e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002672:	fa92 f2a2 	rbit	r2, r2
 8002676:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800267a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8102 	beq.w	80028a0 <HAL_RCC_OscConfig+0x2e8>
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80fc 	bne.w	80028a0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f000 be93 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x110>
 80026ba:	4b78      	ldr	r3, [pc, #480]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a77      	ldr	r2, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e030      	b.n	800272a <HAL_RCC_OscConfig+0x172>
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x134>
 80026d2:	4b72      	ldr	r3, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a71      	ldr	r2, [pc, #452]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b6f      	ldr	r3, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6e      	ldr	r2, [pc, #440]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01e      	b.n	800272a <HAL_RCC_OscConfig+0x172>
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x15a>
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80026fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a64      	ldr	r2, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x172>
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a61      	ldr	r2, [pc, #388]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b5f      	ldr	r3, [pc, #380]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5e      	ldr	r2, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d059      	beq.n	80027e8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe ff18 	bl	8001568 <HAL_GetTick>
 8002738:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273e:	f7fe ff13 	bl	8001568 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d902      	bls.n	8002754 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f000 be40 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002768:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x1ce>
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x1fa>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80027ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80027be:	fa92 f2a2 	rbit	r2, r2
 80027c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80027c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f042 0220 	orr.w	r2, r2, #32
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f002 021f 	and.w	r2, r2, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ab      	beq.n	800273e <HAL_RCC_OscConfig+0x186>
 80027e6:	e05c      	b.n	80028a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe febe 	bl	8001568 <HAL_GetTick>
 80027ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f2:	f7fe feb9 	bl	8001568 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d902      	bls.n	8002808 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	f000 bde6 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800281c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x282>
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x2ae>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002852:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002856:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_RCC_OscConfig+0x2e4>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800286e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800287a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ab      	bne.n	80027f2 <HAL_RCC_OscConfig+0x23a>
 800289a:	e002      	b.n	80028a2 <HAL_RCC_OscConfig+0x2ea>
 800289c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8170 	beq.w	8002b92 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b2:	4bd0      	ldr	r3, [pc, #832]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028be:	4bcd      	ldr	r3, [pc, #820]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d16d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3ee>
 80028ca:	4bca      	ldr	r3, [pc, #808]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d6:	d166      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3ee>
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80028ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0x350>
 8002902:	4bbc      	ldr	r3, [pc, #752]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e013      	b.n	8002930 <HAL_RCC_OscConfig+0x378>
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002920:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800292c:	4bb1      	ldr	r3, [pc, #708]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2202      	movs	r2, #2
 8002932:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002936:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002942:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f042 0220 	orr.w	r2, r2, #32
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f002 021f 	and.w	r2, r2, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f202 	lsl.w	r2, r1, r2
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_RCC_OscConfig+0x3ba>
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f000 bd31 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	21f8      	movs	r1, #248	; 0xf8
 8002982:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800298a:	fa91 f1a1 	rbit	r1, r1
 800298e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002992:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002996:	fab1 f181 	clz	r1, r1
 800299a:	b2c9      	uxtb	r1, r1
 800299c:	408b      	lsls	r3, r1
 800299e:	4995      	ldr	r1, [pc, #596]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a4:	e0f5      	b.n	8002b92 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8085 	beq.w	8002abc <HAL_RCC_OscConfig+0x504>
 80029b2:	2301      	movs	r3, #1
 80029b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80029c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	461a      	mov	r2, r3
 80029da:	2301      	movs	r3, #1
 80029dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fdc3 	bl	8001568 <HAL_GetTick>
 80029e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e8:	f7fe fdbe 	bl	8001568 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d902      	bls.n	80029fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f000 bceb 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x476>
 8002a28:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e013      	b.n	8002a56 <HAL_RCC_OscConfig+0x49e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a52:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2202      	movs	r2, #2
 8002a58:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002a68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	f042 0220 	orr.w	r2, r2, #32
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f002 021f 	and.w	r2, r2, #31
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0af      	beq.n	80029e8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	21f8      	movs	r1, #248	; 0xf8
 8002a98:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002aa0:	fa91 f1a1 	rbit	r1, r1
 8002aa4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002aa8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aac:	fab1 f181 	clz	r1, r1
 8002ab0:	b2c9      	uxtb	r1, r1
 8002ab2:	408b      	lsls	r3, r1
 8002ab4:	494f      	ldr	r1, [pc, #316]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
 8002aba:	e06a      	b.n	8002b92 <HAL_RCC_OscConfig+0x5da>
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002ace:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fd3e 	bl	8001568 <HAL_GetTick>
 8002aec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe fd39 	bl	8001568 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f000 bc66 	b.w	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_OscConfig+0x580>
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x5a8>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0x63c>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002b72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1af      	bne.n	8002af2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80da 	beq.w	8002d56 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d069      	beq.n	8002c80 <HAL_RCC_OscConfig+0x6c8>
 8002bac:	2301      	movs	r3, #1
 8002bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002bbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x640>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fcc7 	bl	8001568 <HAL_GetTick>
 8002bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	e00d      	b.n	8002bfc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe fcc2 	bl	8001568 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d905      	bls.n	8002bfc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e3ef      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	10908120 	.word	0x10908120
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4ba4      	ldr	r3, [pc, #656]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c48:	2102      	movs	r1, #2
 8002c4a:	6019      	str	r1, [r3, #0]
 8002c4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f1a3 	rbit	r1, r3
 8002c56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c5a:	6019      	str	r1, [r3, #0]
  return result;
 8002c5c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0b0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x628>
 8002c7e:	e06a      	b.n	8002d56 <HAL_RCC_OscConfig+0x79e>
 8002c80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c96:	601a      	str	r2, [r3, #0]
  return result;
 8002c98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x920>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	2300      	movs	r3, #0
 8002cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fc59 	bl	8001568 <HAL_GetTick>
 8002cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fc54 	bl	8001568 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e381      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002cd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cec:	2202      	movs	r2, #2
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d04:	2202      	movs	r2, #2
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d20:	2102      	movs	r1, #2
 8002d22:	6019      	str	r1, [r3, #0]
 8002d24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f1a3 	rbit	r1, r3
 8002d2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d32:	6019      	str	r1, [r3, #0]
  return result;
 8002d34:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1b2      	bne.n	8002cbc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8157 	beq.w	8003014 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d112      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	61d3      	str	r3, [r2, #28]
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_OscConfig+0x924>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11a      	bne.n	8002de0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x924>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_RCC_OscConfig+0x924>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fbd7 	bl	8001568 <HAL_GetTick>
 8002dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fe fbd2 	bl	8001568 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e2ff      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x924>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x840>
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a39      	ldr	r2, [pc, #228]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	e02f      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a0>
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x864>
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a0>
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x888>
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x8a0>
 8002e40:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a20      	ldr	r2, [pc, #128]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d06a      	beq.n	8002f38 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fb81 	bl	8001568 <HAL_GetTick>
 8002e66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fb7c 	bl	8001568 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e2a7      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002e84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e88:	2202      	movs	r2, #2
 8002e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002eb2:	601a      	str	r2, [r3, #0]
  return result;
 8002eb4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002eb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x928>
 8002ece:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_RCC_OscConfig+0x91c>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	e013      	b.n	8002efc <HAL_RCC_OscConfig+0x944>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	10908120 	.word	0x10908120
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	4bc0      	ldr	r3, [pc, #768]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f00:	2102      	movs	r1, #2
 8002f02:	6011      	str	r1, [r2, #0]
 8002f04:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fa92 f1a2 	rbit	r1, r2
 8002f0e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f12:	6011      	str	r1, [r2, #0]
  return result;
 8002f14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d09a      	beq.n	8002e6c <HAL_RCC_OscConfig+0x8b4>
 8002f36:	e063      	b.n	8003000 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fb16 	bl	8001568 <HAL_GetTick>
 8002f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fb11 	bl	8001568 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e23c      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 8002f5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f76:	2202      	movs	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f88:	601a      	str	r2, [r3, #0]
  return result;
 8002f8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0x9f2>
 8002fa4:	4b95      	ldr	r3, [pc, #596]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	e00d      	b.n	8002fc6 <HAL_RCC_OscConfig+0xa0e>
 8002faa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fae:	2202      	movs	r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b8e      	ldr	r3, [pc, #568]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002fca:	2102      	movs	r1, #2
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fa92 f1a2 	rbit	r1, r2
 8002fd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fdc:	6011      	str	r1, [r2, #0]
  return result;
 8002fde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1a0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003000:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b7c      	ldr	r3, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	4a7b      	ldr	r2, [pc, #492]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 81d9 	beq.w	80033d2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	f000 81a6 	beq.w	800337a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b02      	cmp	r3, #2
 8003036:	f040 811e 	bne.w	8003276 <HAL_RCC_OscConfig+0xcbe>
 800303a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800303e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003058:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fa7a 	bl	8001568 <HAL_GetTick>
 8003074:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e009      	b.n	800308e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fa75 	bl	8001568 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1a2      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 800308e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_OscConfig+0xb10>
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0xb48>
 80030c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003108:	6011      	str	r1, [r2, #0]
 800310a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fa92 f1a2 	rbit	r1, r2
 8003114:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003118:	6011      	str	r1, [r2, #0]
  return result;
 800311a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d19e      	bne.n	800307a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313c:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f023 020f 	bic.w	r2, r3, #15
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	492c      	ldr	r1, [pc, #176]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 800314c:	4313      	orrs	r3, r2
 800314e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a19      	ldr	r1, [r3, #32]
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	430b      	orrs	r3, r1
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003170:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003184:	601a      	str	r2, [r3, #0]
  return result;
 8003186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800318a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003196:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fe f9e1 	bl	8001568 <HAL_GetTick>
 80031a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031aa:	e009      	b.n	80031c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f9dc 	bl	8001568 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e109      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 80031c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031d8:	601a      	str	r2, [r3, #0]
  return result;
 80031da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0xc48>
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <HAL_RCC_OscConfig+0xc44>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	e01e      	b.n	8003238 <HAL_RCC_OscConfig+0xc80>
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800321e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_OscConfig+0xe28>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800323c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fa92 f1a2 	rbit	r1, r2
 800324c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003250:	6011      	str	r1, [r2, #0]
  return result;
 8003252:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d09b      	beq.n	80031ac <HAL_RCC_OscConfig+0xbf4>
 8003274:	e0ad      	b.n	80033d2 <HAL_RCC_OscConfig+0xe1a>
 8003276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800327a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800328e:	601a      	str	r2, [r3, #0]
  return result;
 8003290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003294:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	461a      	mov	r2, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe f95c 	bl	8001568 <HAL_GetTick>
 80032b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b4:	e009      	b.n	80032ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe f957 	bl	8001568 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e084      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
 80032ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e2:	601a      	str	r2, [r3, #0]
  return result;
 80032e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_OscConfig+0xd4c>
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_OscConfig+0xe28>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e01b      	b.n	800333c <HAL_RCC_OscConfig+0xd84>
 8003304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 0320 	add.w	r3, r7, #32
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f107 031c 	add.w	r3, r7, #28
 8003322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f107 0318 	add.w	r3, r7, #24
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_RCC_OscConfig+0xe28>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f107 0214 	add.w	r2, r7, #20
 8003340:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	f107 0214 	add.w	r2, r7, #20
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fa92 f1a2 	rbit	r1, r2
 8003350:	f107 0210 	add.w	r2, r7, #16
 8003354:	6011      	str	r1, [r2, #0]
  return result;
 8003356:	f107 0210 	add.w	r2, r7, #16
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d19e      	bne.n	80032b6 <HAL_RCC_OscConfig+0xcfe>
 8003378:	e02b      	b.n	80033d2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e025      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0xe28>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_RCC_OscConfig+0xe28>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003398:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800339c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d111      	bne.n	80033ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80033ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d108      	bne.n	80033ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80033bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b09e      	sub	sp, #120	; 0x78
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e162      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b90      	ldr	r3, [pc, #576]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b8d      	ldr	r3, [pc, #564]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	498b      	ldr	r1, [pc, #556]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e14a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	497f      	ldr	r1, [pc, #508]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80dc 	beq.w	8003610 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d13c      	bne.n	80034da <HAL_RCC_ClockConfig+0xf6>
 8003460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800346e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_RCC_ClockConfig+0xa6>
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e00f      	b.n	80034aa <HAL_RCC_ClockConfig+0xc6>
 800348a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	667b      	str	r3, [r7, #100]	; 0x64
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80034b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0220 	orr.w	r2, r2, #32
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d17b      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0f3      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d13c      	bne.n	800355c <HAL_RCC_ClockConfig+0x178>
 80034e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_ClockConfig+0x128>
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e00f      	b.n	800352c <HAL_RCC_ClockConfig+0x148>
 800350c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	647b      	str	r3, [r7, #68]	; 0x44
 800351a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
 8003520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003530:	63ba      	str	r2, [r7, #56]	; 0x38
 8003532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003534:	fa92 f2a2 	rbit	r2, r2
 8003538:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800353a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d13a      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b2      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
 800355c:	2302      	movs	r3, #2
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_RCC_ClockConfig+0x1a0>
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e00d      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1bc>
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	2302      	movs	r3, #2
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2202      	movs	r2, #2
 80035a2:	61ba      	str	r2, [r7, #24]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	fa92 f2a2 	rbit	r2, r2
 80035aa:	617a      	str	r2, [r7, #20]
  return result;
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	fab2 f282 	clz	r2, r2
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f042 0220 	orr.w	r2, r2, #32
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e079      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	491a      	ldr	r1, [pc, #104]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fd ffc2 	bl	8001568 <HAL_GetTick>
 80035e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd ffbe 	bl	8001568 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e061      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d214      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4906      	ldr	r1, [pc, #24]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e040      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
 8003640:	40022000 	.word	0x40022000
 8003644:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	491a      	ldr	r1, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4912      	ldr	r1, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003686:	f000 f829 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800368a:	4601      	mov	r1, r0
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	22f0      	movs	r2, #240	; 0xf0
 8003696:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	fa92 f2a2 	rbit	r2, r2
 800369e:	60fa      	str	r2, [r7, #12]
  return result;
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	fab2 f282 	clz	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	40d3      	lsrs	r3, r2
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x2ec>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	fa21 f303 	lsr.w	r3, r1, r3
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_ClockConfig+0x2f0>)
 80036b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_ClockConfig+0x2f4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd ff10 	bl	80014e0 <HAL_InitTick>
  
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3778      	adds	r7, #120	; 0x78
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08004e18 	.word	0x08004e18
 80036d4:	20000010 	.word	0x20000010
 80036d8:	20000014 	.word	0x20000014

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b08b      	sub	sp, #44	; 0x2c
 80036e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x30>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x36>
 800370a:	e03f      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800370e:	623b      	str	r3, [r7, #32]
      break;
 8003710:	e03f      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003718:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800371c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	607a      	str	r2, [r7, #4]
  return result;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	40d3      	lsrs	r3, r2
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	220f      	movs	r2, #15
 8003740:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	60fa      	str	r2, [r7, #12]
  return result;
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	40d3      	lsrs	r3, r2
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	e007      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fbb2 f2f3 	udiv	r2, r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	623b      	str	r3, [r7, #32]
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6a3b      	ldr	r3, [r7, #32]
}
 8003794:	4618      	mov	r0, r3
 8003796:	372c      	adds	r7, #44	; 0x2c
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	08004e30 	.word	0x08004e30
 80037ac:	08004e40 	.word	0x08004e40

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000010 	.word	0x20000010

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037ce:	f7ff ffef 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d2:	4601      	mov	r1, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	fa92 f2a2 	rbit	r2, r2
 80037e8:	603a      	str	r2, [r7, #0]
  return result;
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	fab2 f282 	clz	r2, r2
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	40d3      	lsrs	r3, r2
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	08004e28 	.word	0x08004e28

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003812:	f7ff ffcd 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	fa92 f2a2 	rbit	r2, r2
 800382c:	603a      	str	r2, [r7, #0]
  return result;
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	40d3      	lsrs	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_RCC_GetPCLK2Freq+0x40>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	08004e28 	.word	0x08004e28

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b092      	sub	sp, #72	; 0x48
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80d7 	beq.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003874:	4b4e      	ldr	r3, [pc, #312]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	61d3      	str	r3, [r2, #28]
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fd fe57 	bl	8001568 <HAL_GetTick>
 80038ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fd fe53 	bl	8001568 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1d6      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8084 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d07c      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	2301      	movs	r3, #1
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	461a      	mov	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394e:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04b      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fe03 	bl	8001568 <HAL_GetTick>
 8003962:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fdff 	bl	8001568 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e180      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	61fb      	str	r3, [r7, #28]
  return result;
 8003994:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d108      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039aa:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	e00d      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40007000 	.word	0x40007000
 80039b8:	10908100 	.word	0x10908100
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	4ba0      	ldr	r3, [pc, #640]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2202      	movs	r2, #2
 80039ce:	613a      	str	r2, [r7, #16]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	60fa      	str	r2, [r7, #12]
  return result;
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fab2 f282 	clz	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0b7      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039f6:	4b95      	ldr	r3, [pc, #596]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4992      	ldr	r1, [pc, #584]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a8d      	ldr	r2, [pc, #564]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a28:	4b88      	ldr	r3, [pc, #544]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f023 0203 	bic.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4985      	ldr	r1, [pc, #532]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a46:	4b81      	ldr	r3, [pc, #516]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	497e      	ldr	r1, [pc, #504]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a64:	4b79      	ldr	r3, [pc, #484]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	4976      	ldr	r1, [pc, #472]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f023 0210 	bic.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	496f      	ldr	r1, [pc, #444]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	4967      	ldr	r1, [pc, #412]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f023 0220 	bic.w	r2, r3, #32
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4960      	ldr	r1, [pc, #384]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003adc:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	4958      	ldr	r1, [pc, #352]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4951      	ldr	r1, [pc, #324]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b18:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4949      	ldr	r1, [pc, #292]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b36:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4942      	ldr	r1, [pc, #264]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b54:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	493a      	ldr	r1, [pc, #232]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4933      	ldr	r1, [pc, #204]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b90:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	492b      	ldr	r1, [pc, #172]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bae:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4924      	ldr	r1, [pc, #144]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	491c      	ldr	r1, [pc, #112]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	4915      	ldr	r1, [pc, #84]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	490d      	ldr	r1, [pc, #52]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	4906      	ldr	r1, [pc, #24]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	e002      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3748      	adds	r7, #72	; 0x48
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e040      	b.n	8003d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd fb1a 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8c0 	bl	8003e50 <UART_SetConfig>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e022      	b.n	8003d20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 face 	bl	8004284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fb55 	bl	80043c8 <UART_CheckIdleState>
 8003d1e:	4603      	mov	r3, r0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	f040 8081 	bne.w	8003e44 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_Transmit+0x26>
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e079      	b.n	8003e46 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Transmit+0x38>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e072      	b.n	8003e46 <HAL_UART_Transmit+0x11e>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2221      	movs	r2, #33	; 0x21
 8003d72:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fbf8 	bl	8001568 <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d108      	bne.n	8003da6 <HAL_UART_Transmit+0x7e>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e003      	b.n	8003dae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dae:	e02d      	b.n	8003e0c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fb49 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e03d      	b.n	8003e46 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3302      	adds	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e008      	b.n	8003dfa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	b292      	uxth	r2, r2
 8003df2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1cb      	bne.n	8003db0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2140      	movs	r1, #64	; 0x40
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fb15 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e009      	b.n	8003e46 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4bac      	ldr	r3, [pc, #688]	; (8004130 <UART_SetConfig+0x2e0>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6939      	ldr	r1, [r7, #16]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a9a      	ldr	r2, [pc, #616]	; (8004134 <UART_SetConfig+0x2e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d121      	bne.n	8003f14 <UART_SetConfig+0xc4>
 8003ed0:	4b99      	ldr	r3, [pc, #612]	; (8004138 <UART_SetConfig+0x2e8>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0xbc>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x94>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f01 	.word	0x08003f01
 8003eec:	08003f07 	.word	0x08003f07
 8003ef0:	08003efb 	.word	0x08003efb
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0b2      	b.n	8004060 <UART_SetConfig+0x210>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0af      	b.n	8004060 <UART_SetConfig+0x210>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0ac      	b.n	8004060 <UART_SetConfig+0x210>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0a9      	b.n	8004060 <UART_SetConfig+0x210>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	bf00      	nop
 8003f12:	e0a5      	b.n	8004060 <UART_SetConfig+0x210>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a88      	ldr	r2, [pc, #544]	; (800413c <UART_SetConfig+0x2ec>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d123      	bne.n	8003f66 <UART_SetConfig+0x116>
 8003f1e:	4b86      	ldr	r3, [pc, #536]	; (8004138 <UART_SetConfig+0x2e8>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d012      	beq.n	8003f52 <UART_SetConfig+0x102>
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d802      	bhi.n	8003f38 <UART_SetConfig+0xe8>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <UART_SetConfig+0xf6>
 8003f36:	e012      	b.n	8003f5e <UART_SetConfig+0x10e>
 8003f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3c:	d00c      	beq.n	8003f58 <UART_SetConfig+0x108>
 8003f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f42:	d003      	beq.n	8003f4c <UART_SetConfig+0xfc>
 8003f44:	e00b      	b.n	8003f5e <UART_SetConfig+0x10e>
 8003f46:	2300      	movs	r3, #0
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e089      	b.n	8004060 <UART_SetConfig+0x210>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e086      	b.n	8004060 <UART_SetConfig+0x210>
 8003f52:	2304      	movs	r3, #4
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e083      	b.n	8004060 <UART_SetConfig+0x210>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e080      	b.n	8004060 <UART_SetConfig+0x210>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	bf00      	nop
 8003f64:	e07c      	b.n	8004060 <UART_SetConfig+0x210>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a75      	ldr	r2, [pc, #468]	; (8004140 <UART_SetConfig+0x2f0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d123      	bne.n	8003fb8 <UART_SetConfig+0x168>
 8003f70:	4b71      	ldr	r3, [pc, #452]	; (8004138 <UART_SetConfig+0x2e8>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7c:	d012      	beq.n	8003fa4 <UART_SetConfig+0x154>
 8003f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f82:	d802      	bhi.n	8003f8a <UART_SetConfig+0x13a>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <UART_SetConfig+0x148>
 8003f88:	e012      	b.n	8003fb0 <UART_SetConfig+0x160>
 8003f8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f8e:	d00c      	beq.n	8003faa <UART_SetConfig+0x15a>
 8003f90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f94:	d003      	beq.n	8003f9e <UART_SetConfig+0x14e>
 8003f96:	e00b      	b.n	8003fb0 <UART_SetConfig+0x160>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e060      	b.n	8004060 <UART_SetConfig+0x210>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	77fb      	strb	r3, [r7, #31]
 8003fa2:	e05d      	b.n	8004060 <UART_SetConfig+0x210>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e05a      	b.n	8004060 <UART_SetConfig+0x210>
 8003faa:	2308      	movs	r3, #8
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e057      	b.n	8004060 <UART_SetConfig+0x210>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	bf00      	nop
 8003fb6:	e053      	b.n	8004060 <UART_SetConfig+0x210>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a61      	ldr	r2, [pc, #388]	; (8004144 <UART_SetConfig+0x2f4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d123      	bne.n	800400a <UART_SetConfig+0x1ba>
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <UART_SetConfig+0x2e8>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d012      	beq.n	8003ff6 <UART_SetConfig+0x1a6>
 8003fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd4:	d802      	bhi.n	8003fdc <UART_SetConfig+0x18c>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <UART_SetConfig+0x19a>
 8003fda:	e012      	b.n	8004002 <UART_SetConfig+0x1b2>
 8003fdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe0:	d00c      	beq.n	8003ffc <UART_SetConfig+0x1ac>
 8003fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe6:	d003      	beq.n	8003ff0 <UART_SetConfig+0x1a0>
 8003fe8:	e00b      	b.n	8004002 <UART_SetConfig+0x1b2>
 8003fea:	2300      	movs	r3, #0
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e037      	b.n	8004060 <UART_SetConfig+0x210>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e034      	b.n	8004060 <UART_SetConfig+0x210>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e031      	b.n	8004060 <UART_SetConfig+0x210>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e02e      	b.n	8004060 <UART_SetConfig+0x210>
 8004002:	2310      	movs	r3, #16
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	bf00      	nop
 8004008:	e02a      	b.n	8004060 <UART_SetConfig+0x210>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4e      	ldr	r2, [pc, #312]	; (8004148 <UART_SetConfig+0x2f8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d123      	bne.n	800405c <UART_SetConfig+0x20c>
 8004014:	4b48      	ldr	r3, [pc, #288]	; (8004138 <UART_SetConfig+0x2e8>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d012      	beq.n	8004048 <UART_SetConfig+0x1f8>
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d802      	bhi.n	800402e <UART_SetConfig+0x1de>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <UART_SetConfig+0x1ec>
 800402c:	e012      	b.n	8004054 <UART_SetConfig+0x204>
 800402e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004032:	d00c      	beq.n	800404e <UART_SetConfig+0x1fe>
 8004034:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004038:	d003      	beq.n	8004042 <UART_SetConfig+0x1f2>
 800403a:	e00b      	b.n	8004054 <UART_SetConfig+0x204>
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e00e      	b.n	8004060 <UART_SetConfig+0x210>
 8004042:	2302      	movs	r3, #2
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e00b      	b.n	8004060 <UART_SetConfig+0x210>
 8004048:	2304      	movs	r3, #4
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e008      	b.n	8004060 <UART_SetConfig+0x210>
 800404e:	2308      	movs	r3, #8
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e005      	b.n	8004060 <UART_SetConfig+0x210>
 8004054:	2310      	movs	r3, #16
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	bf00      	nop
 800405a:	e001      	b.n	8004060 <UART_SetConfig+0x210>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004068:	f040 8090 	bne.w	800418c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800406c:	7ffb      	ldrb	r3, [r7, #31]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d86c      	bhi.n	800414c <UART_SetConfig+0x2fc>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x228>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040dd 	.word	0x080040dd
 8004084:	0800414d 	.word	0x0800414d
 8004088:	080040f9 	.word	0x080040f9
 800408c:	0800414d 	.word	0x0800414d
 8004090:	0800414d 	.word	0x0800414d
 8004094:	0800414d 	.word	0x0800414d
 8004098:	08004119 	.word	0x08004119
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7ff fb94 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	005a      	lsls	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	61bb      	str	r3, [r7, #24]
        break;
 80040ba:	e04a      	b.n	8004152 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7ff fba6 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80040c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	005a      	lsls	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	61bb      	str	r3, [r7, #24]
        break;
 80040da:	e03a      	b.n	8004152 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80040e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6852      	ldr	r2, [r2, #4]
 80040ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	61bb      	str	r3, [r7, #24]
        break;
 80040f6:	e02c      	b.n	8004152 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f8:	f7ff faf0 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 80040fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	005a      	lsls	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	61bb      	str	r3, [r7, #24]
        break;
 8004116:	e01c      	b.n	8004152 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	61bb      	str	r3, [r7, #24]
        break;
 800412e:	e010      	b.n	8004152 <UART_SetConfig+0x302>
 8004130:	efff69f3 	.word	0xefff69f3
 8004134:	40013800 	.word	0x40013800
 8004138:	40021000 	.word	0x40021000
 800413c:	40004400 	.word	0x40004400
 8004140:	40004800 	.word	0x40004800
 8004144:	40004c00 	.word	0x40004c00
 8004148:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
        break;
 8004150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d916      	bls.n	8004186 <UART_SetConfig+0x336>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415e:	d212      	bcs.n	8004186 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f023 030f 	bic.w	r3, r3, #15
 8004168:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	b29a      	uxth	r2, r3
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	4313      	orrs	r3, r2
 800417a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	897a      	ldrh	r2, [r7, #10]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	e072      	b.n	800426c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
 800418a:	e06f      	b.n	800426c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	2b08      	cmp	r3, #8
 8004190:	d85b      	bhi.n	800424a <UART_SetConfig+0x3fa>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x348>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	0800424b 	.word	0x0800424b
 80041a8:	08004215 	.word	0x08004215
 80041ac:	0800424b 	.word	0x0800424b
 80041b0:	0800424b 	.word	0x0800424b
 80041b4:	0800424b 	.word	0x0800424b
 80041b8:	08004233 	.word	0x08004233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7ff fb04 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80041c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	085a      	lsrs	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	441a      	add	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e03a      	b.n	8004250 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041da:	f7ff fb17 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80041de:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	085a      	lsrs	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	61bb      	str	r3, [r7, #24]
        break;
 80041f6:	e02b      	b.n	8004250 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004202:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6852      	ldr	r2, [r2, #4]
 800420a:	fbb3 f3f2 	udiv	r3, r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	61bb      	str	r3, [r7, #24]
        break;
 8004212:	e01d      	b.n	8004250 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004214:	f7ff fa62 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8004218:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085a      	lsrs	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	b29b      	uxth	r3, r3
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e00e      	b.n	8004250 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	b29b      	uxth	r3, r3
 8004246:	61bb      	str	r3, [r7, #24]
        break;
 8004248:	e002      	b.n	8004250 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
        break;
 800424e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d908      	bls.n	8004268 <UART_SetConfig+0x418>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d204      	bcs.n	8004268 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e001      	b.n	800426c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop

08004284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01a      	beq.n	800439a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004382:	d10a      	bne.n	800439a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043d6:	f7fd f8c7 	bl	8001568 <HAL_GetTick>
 80043da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d10e      	bne.n	8004408 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f82a 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e020      	b.n	800444a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d10e      	bne.n	8004434 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f814 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e00a      	b.n	800444a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	e05d      	b.n	8004520 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d059      	beq.n	8004520 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7fd f87c 	bl	8001568 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <UART_WaitOnFlagUntilTimeout+0x30>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11b      	bne.n	80044ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004490:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e042      	b.n	8004540 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d02b      	beq.n	8004520 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d6:	d123      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e00f      	b.n	8004540 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	429a      	cmp	r2, r3
 800453c:	d092      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <__errno>:
 8004548:	4b01      	ldr	r3, [pc, #4]	; (8004550 <__errno+0x8>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000001c 	.word	0x2000001c

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4e0d      	ldr	r6, [pc, #52]	; (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	; (8004590 <__libc_init_array+0x3c>)
 800455a:	1ba4      	subs	r4, r4, r6
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2500      	movs	r5, #0
 8004560:	42a5      	cmp	r5, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4e0b      	ldr	r6, [pc, #44]	; (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	; (8004598 <__libc_init_array+0x44>)
 8004568:	f000 fc26 	bl	8004db8 <_init>
 800456c:	1ba4      	subs	r4, r4, r6
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2500      	movs	r5, #0
 8004572:	42a5      	cmp	r5, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800457c:	4798      	blx	r3
 800457e:	3501      	adds	r5, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004586:	4798      	blx	r3
 8004588:	3501      	adds	r5, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	08004e84 	.word	0x08004e84
 8004590:	08004e84 	.word	0x08004e84
 8004594:	08004e84 	.word	0x08004e84
 8004598:	08004e88 	.word	0x08004e88

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <siprintf>:
 80045ac:	b40e      	push	{r1, r2, r3}
 80045ae:	b500      	push	{lr}
 80045b0:	b09c      	sub	sp, #112	; 0x70
 80045b2:	ab1d      	add	r3, sp, #116	; 0x74
 80045b4:	9002      	str	r0, [sp, #8]
 80045b6:	9006      	str	r0, [sp, #24]
 80045b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045bc:	4809      	ldr	r0, [pc, #36]	; (80045e4 <siprintf+0x38>)
 80045be:	9107      	str	r1, [sp, #28]
 80045c0:	9104      	str	r1, [sp, #16]
 80045c2:	4909      	ldr	r1, [pc, #36]	; (80045e8 <siprintf+0x3c>)
 80045c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c8:	9105      	str	r1, [sp, #20]
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	a902      	add	r1, sp, #8
 80045d0:	f000 f866 	bl	80046a0 <_svfiprintf_r>
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	b01c      	add	sp, #112	; 0x70
 80045dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e0:	b003      	add	sp, #12
 80045e2:	4770      	bx	lr
 80045e4:	2000001c 	.word	0x2000001c
 80045e8:	ffff0208 	.word	0xffff0208

080045ec <__ssputs_r>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	688e      	ldr	r6, [r1, #8]
 80045f2:	429e      	cmp	r6, r3
 80045f4:	4682      	mov	sl, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	4690      	mov	r8, r2
 80045fa:	4699      	mov	r9, r3
 80045fc:	d837      	bhi.n	800466e <__ssputs_r+0x82>
 80045fe:	898a      	ldrh	r2, [r1, #12]
 8004600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004604:	d031      	beq.n	800466a <__ssputs_r+0x7e>
 8004606:	6825      	ldr	r5, [r4, #0]
 8004608:	6909      	ldr	r1, [r1, #16]
 800460a:	1a6f      	subs	r7, r5, r1
 800460c:	6965      	ldr	r5, [r4, #20]
 800460e:	2302      	movs	r3, #2
 8004610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004614:	fb95 f5f3 	sdiv	r5, r5, r3
 8004618:	f109 0301 	add.w	r3, r9, #1
 800461c:	443b      	add	r3, r7
 800461e:	429d      	cmp	r5, r3
 8004620:	bf38      	it	cc
 8004622:	461d      	movcc	r5, r3
 8004624:	0553      	lsls	r3, r2, #21
 8004626:	d530      	bpl.n	800468a <__ssputs_r+0x9e>
 8004628:	4629      	mov	r1, r5
 800462a:	f000 fb2b 	bl	8004c84 <_malloc_r>
 800462e:	4606      	mov	r6, r0
 8004630:	b950      	cbnz	r0, 8004648 <__ssputs_r+0x5c>
 8004632:	230c      	movs	r3, #12
 8004634:	f8ca 3000 	str.w	r3, [sl]
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	463a      	mov	r2, r7
 800464a:	6921      	ldr	r1, [r4, #16]
 800464c:	f000 faa8 	bl	8004ba0 <memcpy>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	6126      	str	r6, [r4, #16]
 800465e:	6165      	str	r5, [r4, #20]
 8004660:	443e      	add	r6, r7
 8004662:	1bed      	subs	r5, r5, r7
 8004664:	6026      	str	r6, [r4, #0]
 8004666:	60a5      	str	r5, [r4, #8]
 8004668:	464e      	mov	r6, r9
 800466a:	454e      	cmp	r6, r9
 800466c:	d900      	bls.n	8004670 <__ssputs_r+0x84>
 800466e:	464e      	mov	r6, r9
 8004670:	4632      	mov	r2, r6
 8004672:	4641      	mov	r1, r8
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	f000 fa9e 	bl	8004bb6 <memmove>
 800467a:	68a3      	ldr	r3, [r4, #8]
 800467c:	1b9b      	subs	r3, r3, r6
 800467e:	60a3      	str	r3, [r4, #8]
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	441e      	add	r6, r3
 8004684:	6026      	str	r6, [r4, #0]
 8004686:	2000      	movs	r0, #0
 8004688:	e7dc      	b.n	8004644 <__ssputs_r+0x58>
 800468a:	462a      	mov	r2, r5
 800468c:	f000 fb54 	bl	8004d38 <_realloc_r>
 8004690:	4606      	mov	r6, r0
 8004692:	2800      	cmp	r0, #0
 8004694:	d1e2      	bne.n	800465c <__ssputs_r+0x70>
 8004696:	6921      	ldr	r1, [r4, #16]
 8004698:	4650      	mov	r0, sl
 800469a:	f000 faa5 	bl	8004be8 <_free_r>
 800469e:	e7c8      	b.n	8004632 <__ssputs_r+0x46>

080046a0 <_svfiprintf_r>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	461d      	mov	r5, r3
 80046a6:	898b      	ldrh	r3, [r1, #12]
 80046a8:	061f      	lsls	r7, r3, #24
 80046aa:	b09d      	sub	sp, #116	; 0x74
 80046ac:	4680      	mov	r8, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	4616      	mov	r6, r2
 80046b2:	d50f      	bpl.n	80046d4 <_svfiprintf_r+0x34>
 80046b4:	690b      	ldr	r3, [r1, #16]
 80046b6:	b96b      	cbnz	r3, 80046d4 <_svfiprintf_r+0x34>
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	f000 fae3 	bl	8004c84 <_malloc_r>
 80046be:	6020      	str	r0, [r4, #0]
 80046c0:	6120      	str	r0, [r4, #16]
 80046c2:	b928      	cbnz	r0, 80046d0 <_svfiprintf_r+0x30>
 80046c4:	230c      	movs	r3, #12
 80046c6:	f8c8 3000 	str.w	r3, [r8]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	e0c8      	b.n	8004862 <_svfiprintf_r+0x1c2>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	6163      	str	r3, [r4, #20]
 80046d4:	2300      	movs	r3, #0
 80046d6:	9309      	str	r3, [sp, #36]	; 0x24
 80046d8:	2320      	movs	r3, #32
 80046da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046de:	2330      	movs	r3, #48	; 0x30
 80046e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046e4:	9503      	str	r5, [sp, #12]
 80046e6:	f04f 0b01 	mov.w	fp, #1
 80046ea:	4637      	mov	r7, r6
 80046ec:	463d      	mov	r5, r7
 80046ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046f2:	b10b      	cbz	r3, 80046f8 <_svfiprintf_r+0x58>
 80046f4:	2b25      	cmp	r3, #37	; 0x25
 80046f6:	d13e      	bne.n	8004776 <_svfiprintf_r+0xd6>
 80046f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80046fc:	d00b      	beq.n	8004716 <_svfiprintf_r+0x76>
 80046fe:	4653      	mov	r3, sl
 8004700:	4632      	mov	r2, r6
 8004702:	4621      	mov	r1, r4
 8004704:	4640      	mov	r0, r8
 8004706:	f7ff ff71 	bl	80045ec <__ssputs_r>
 800470a:	3001      	adds	r0, #1
 800470c:	f000 80a4 	beq.w	8004858 <_svfiprintf_r+0x1b8>
 8004710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004712:	4453      	add	r3, sl
 8004714:	9309      	str	r3, [sp, #36]	; 0x24
 8004716:	783b      	ldrb	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 809d 	beq.w	8004858 <_svfiprintf_r+0x1b8>
 800471e:	2300      	movs	r3, #0
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	9307      	str	r3, [sp, #28]
 800472c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004730:	931a      	str	r3, [sp, #104]	; 0x68
 8004732:	462f      	mov	r7, r5
 8004734:	2205      	movs	r2, #5
 8004736:	f817 1b01 	ldrb.w	r1, [r7], #1
 800473a:	4850      	ldr	r0, [pc, #320]	; (800487c <_svfiprintf_r+0x1dc>)
 800473c:	f7fb fd58 	bl	80001f0 <memchr>
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	b9d0      	cbnz	r0, 800477a <_svfiprintf_r+0xda>
 8004744:	06d9      	lsls	r1, r3, #27
 8004746:	bf44      	itt	mi
 8004748:	2220      	movmi	r2, #32
 800474a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800474e:	071a      	lsls	r2, r3, #28
 8004750:	bf44      	itt	mi
 8004752:	222b      	movmi	r2, #43	; 0x2b
 8004754:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004758:	782a      	ldrb	r2, [r5, #0]
 800475a:	2a2a      	cmp	r2, #42	; 0x2a
 800475c:	d015      	beq.n	800478a <_svfiprintf_r+0xea>
 800475e:	9a07      	ldr	r2, [sp, #28]
 8004760:	462f      	mov	r7, r5
 8004762:	2000      	movs	r0, #0
 8004764:	250a      	movs	r5, #10
 8004766:	4639      	mov	r1, r7
 8004768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800476c:	3b30      	subs	r3, #48	; 0x30
 800476e:	2b09      	cmp	r3, #9
 8004770:	d94d      	bls.n	800480e <_svfiprintf_r+0x16e>
 8004772:	b1b8      	cbz	r0, 80047a4 <_svfiprintf_r+0x104>
 8004774:	e00f      	b.n	8004796 <_svfiprintf_r+0xf6>
 8004776:	462f      	mov	r7, r5
 8004778:	e7b8      	b.n	80046ec <_svfiprintf_r+0x4c>
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <_svfiprintf_r+0x1dc>)
 800477c:	1a80      	subs	r0, r0, r2
 800477e:	fa0b f000 	lsl.w	r0, fp, r0
 8004782:	4318      	orrs	r0, r3
 8004784:	9004      	str	r0, [sp, #16]
 8004786:	463d      	mov	r5, r7
 8004788:	e7d3      	b.n	8004732 <_svfiprintf_r+0x92>
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	1d11      	adds	r1, r2, #4
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	2a00      	cmp	r2, #0
 8004794:	db01      	blt.n	800479a <_svfiprintf_r+0xfa>
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	e004      	b.n	80047a4 <_svfiprintf_r+0x104>
 800479a:	4252      	negs	r2, r2
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	9207      	str	r2, [sp, #28]
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	783b      	ldrb	r3, [r7, #0]
 80047a6:	2b2e      	cmp	r3, #46	; 0x2e
 80047a8:	d10c      	bne.n	80047c4 <_svfiprintf_r+0x124>
 80047aa:	787b      	ldrb	r3, [r7, #1]
 80047ac:	2b2a      	cmp	r3, #42	; 0x2a
 80047ae:	d133      	bne.n	8004818 <_svfiprintf_r+0x178>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	9203      	str	r2, [sp, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfb8      	it	lt
 80047bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80047c0:	3702      	adds	r7, #2
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	4d2e      	ldr	r5, [pc, #184]	; (8004880 <_svfiprintf_r+0x1e0>)
 80047c6:	7839      	ldrb	r1, [r7, #0]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4628      	mov	r0, r5
 80047cc:	f7fb fd10 	bl	80001f0 <memchr>
 80047d0:	b138      	cbz	r0, 80047e2 <_svfiprintf_r+0x142>
 80047d2:	2340      	movs	r3, #64	; 0x40
 80047d4:	1b40      	subs	r0, r0, r5
 80047d6:	fa03 f000 	lsl.w	r0, r3, r0
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	4303      	orrs	r3, r0
 80047de:	3701      	adds	r7, #1
 80047e0:	9304      	str	r3, [sp, #16]
 80047e2:	7839      	ldrb	r1, [r7, #0]
 80047e4:	4827      	ldr	r0, [pc, #156]	; (8004884 <_svfiprintf_r+0x1e4>)
 80047e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ea:	2206      	movs	r2, #6
 80047ec:	1c7e      	adds	r6, r7, #1
 80047ee:	f7fb fcff 	bl	80001f0 <memchr>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d038      	beq.n	8004868 <_svfiprintf_r+0x1c8>
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <_svfiprintf_r+0x1e8>)
 80047f8:	bb13      	cbnz	r3, 8004840 <_svfiprintf_r+0x1a0>
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	3307      	adds	r3, #7
 80047fe:	f023 0307 	bic.w	r3, r3, #7
 8004802:	3308      	adds	r3, #8
 8004804:	9303      	str	r3, [sp, #12]
 8004806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004808:	444b      	add	r3, r9
 800480a:	9309      	str	r3, [sp, #36]	; 0x24
 800480c:	e76d      	b.n	80046ea <_svfiprintf_r+0x4a>
 800480e:	fb05 3202 	mla	r2, r5, r2, r3
 8004812:	2001      	movs	r0, #1
 8004814:	460f      	mov	r7, r1
 8004816:	e7a6      	b.n	8004766 <_svfiprintf_r+0xc6>
 8004818:	2300      	movs	r3, #0
 800481a:	3701      	adds	r7, #1
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	4619      	mov	r1, r3
 8004820:	250a      	movs	r5, #10
 8004822:	4638      	mov	r0, r7
 8004824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004828:	3a30      	subs	r2, #48	; 0x30
 800482a:	2a09      	cmp	r2, #9
 800482c:	d903      	bls.n	8004836 <_svfiprintf_r+0x196>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0c8      	beq.n	80047c4 <_svfiprintf_r+0x124>
 8004832:	9105      	str	r1, [sp, #20]
 8004834:	e7c6      	b.n	80047c4 <_svfiprintf_r+0x124>
 8004836:	fb05 2101 	mla	r1, r5, r1, r2
 800483a:	2301      	movs	r3, #1
 800483c:	4607      	mov	r7, r0
 800483e:	e7f0      	b.n	8004822 <_svfiprintf_r+0x182>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4622      	mov	r2, r4
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <_svfiprintf_r+0x1ec>)
 8004848:	a904      	add	r1, sp, #16
 800484a:	4640      	mov	r0, r8
 800484c:	f3af 8000 	nop.w
 8004850:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004854:	4681      	mov	r9, r0
 8004856:	d1d6      	bne.n	8004806 <_svfiprintf_r+0x166>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	065b      	lsls	r3, r3, #25
 800485c:	f53f af35 	bmi.w	80046ca <_svfiprintf_r+0x2a>
 8004860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004862:	b01d      	add	sp, #116	; 0x74
 8004864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004868:	ab03      	add	r3, sp, #12
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4622      	mov	r2, r4
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <_svfiprintf_r+0x1ec>)
 8004870:	a904      	add	r1, sp, #16
 8004872:	4640      	mov	r0, r8
 8004874:	f000 f882 	bl	800497c <_printf_i>
 8004878:	e7ea      	b.n	8004850 <_svfiprintf_r+0x1b0>
 800487a:	bf00      	nop
 800487c:	08004e50 	.word	0x08004e50
 8004880:	08004e56 	.word	0x08004e56
 8004884:	08004e5a 	.word	0x08004e5a
 8004888:	00000000 	.word	0x00000000
 800488c:	080045ed 	.word	0x080045ed

08004890 <_printf_common>:
 8004890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	4691      	mov	r9, r2
 8004896:	461f      	mov	r7, r3
 8004898:	688a      	ldr	r2, [r1, #8]
 800489a:	690b      	ldr	r3, [r1, #16]
 800489c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bfb8      	it	lt
 80048a4:	4613      	movlt	r3, r2
 80048a6:	f8c9 3000 	str.w	r3, [r9]
 80048aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ae:	4606      	mov	r6, r0
 80048b0:	460c      	mov	r4, r1
 80048b2:	b112      	cbz	r2, 80048ba <_printf_common+0x2a>
 80048b4:	3301      	adds	r3, #1
 80048b6:	f8c9 3000 	str.w	r3, [r9]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	0699      	lsls	r1, r3, #26
 80048be:	bf42      	ittt	mi
 80048c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048c4:	3302      	addmi	r3, #2
 80048c6:	f8c9 3000 	strmi.w	r3, [r9]
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	f015 0506 	ands.w	r5, r5, #6
 80048d0:	d107      	bne.n	80048e2 <_printf_common+0x52>
 80048d2:	f104 0a19 	add.w	sl, r4, #25
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	f8d9 2000 	ldr.w	r2, [r9]
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	42ab      	cmp	r3, r5
 80048e0:	dc28      	bgt.n	8004934 <_printf_common+0xa4>
 80048e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	3300      	adds	r3, #0
 80048ea:	bf18      	it	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	0692      	lsls	r2, r2, #26
 80048f0:	d42d      	bmi.n	800494e <_printf_common+0xbe>
 80048f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f6:	4639      	mov	r1, r7
 80048f8:	4630      	mov	r0, r6
 80048fa:	47c0      	blx	r8
 80048fc:	3001      	adds	r0, #1
 80048fe:	d020      	beq.n	8004942 <_printf_common+0xb2>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	68e5      	ldr	r5, [r4, #12]
 8004904:	f8d9 2000 	ldr.w	r2, [r9]
 8004908:	f003 0306 	and.w	r3, r3, #6
 800490c:	2b04      	cmp	r3, #4
 800490e:	bf08      	it	eq
 8004910:	1aad      	subeq	r5, r5, r2
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	6922      	ldr	r2, [r4, #16]
 8004916:	bf0c      	ite	eq
 8004918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800491c:	2500      	movne	r5, #0
 800491e:	4293      	cmp	r3, r2
 8004920:	bfc4      	itt	gt
 8004922:	1a9b      	subgt	r3, r3, r2
 8004924:	18ed      	addgt	r5, r5, r3
 8004926:	f04f 0900 	mov.w	r9, #0
 800492a:	341a      	adds	r4, #26
 800492c:	454d      	cmp	r5, r9
 800492e:	d11a      	bne.n	8004966 <_printf_common+0xd6>
 8004930:	2000      	movs	r0, #0
 8004932:	e008      	b.n	8004946 <_printf_common+0xb6>
 8004934:	2301      	movs	r3, #1
 8004936:	4652      	mov	r2, sl
 8004938:	4639      	mov	r1, r7
 800493a:	4630      	mov	r0, r6
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d103      	bne.n	800494a <_printf_common+0xba>
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494a:	3501      	adds	r5, #1
 800494c:	e7c3      	b.n	80048d6 <_printf_common+0x46>
 800494e:	18e1      	adds	r1, r4, r3
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	2030      	movs	r0, #48	; 0x30
 8004954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004958:	4422      	add	r2, r4
 800495a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800495e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004962:	3302      	adds	r3, #2
 8004964:	e7c5      	b.n	80048f2 <_printf_common+0x62>
 8004966:	2301      	movs	r3, #1
 8004968:	4622      	mov	r2, r4
 800496a:	4639      	mov	r1, r7
 800496c:	4630      	mov	r0, r6
 800496e:	47c0      	blx	r8
 8004970:	3001      	adds	r0, #1
 8004972:	d0e6      	beq.n	8004942 <_printf_common+0xb2>
 8004974:	f109 0901 	add.w	r9, r9, #1
 8004978:	e7d8      	b.n	800492c <_printf_common+0x9c>
	...

0800497c <_printf_i>:
 800497c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004984:	460c      	mov	r4, r1
 8004986:	7e09      	ldrb	r1, [r1, #24]
 8004988:	b085      	sub	sp, #20
 800498a:	296e      	cmp	r1, #110	; 0x6e
 800498c:	4617      	mov	r7, r2
 800498e:	4606      	mov	r6, r0
 8004990:	4698      	mov	r8, r3
 8004992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004994:	f000 80b3 	beq.w	8004afe <_printf_i+0x182>
 8004998:	d822      	bhi.n	80049e0 <_printf_i+0x64>
 800499a:	2963      	cmp	r1, #99	; 0x63
 800499c:	d036      	beq.n	8004a0c <_printf_i+0x90>
 800499e:	d80a      	bhi.n	80049b6 <_printf_i+0x3a>
 80049a0:	2900      	cmp	r1, #0
 80049a2:	f000 80b9 	beq.w	8004b18 <_printf_i+0x19c>
 80049a6:	2958      	cmp	r1, #88	; 0x58
 80049a8:	f000 8083 	beq.w	8004ab2 <_printf_i+0x136>
 80049ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049b4:	e032      	b.n	8004a1c <_printf_i+0xa0>
 80049b6:	2964      	cmp	r1, #100	; 0x64
 80049b8:	d001      	beq.n	80049be <_printf_i+0x42>
 80049ba:	2969      	cmp	r1, #105	; 0x69
 80049bc:	d1f6      	bne.n	80049ac <_printf_i+0x30>
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	0605      	lsls	r5, r0, #24
 80049c4:	f103 0104 	add.w	r1, r3, #4
 80049c8:	d52a      	bpl.n	8004a20 <_printf_i+0xa4>
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da03      	bge.n	80049da <_printf_i+0x5e>
 80049d2:	222d      	movs	r2, #45	; 0x2d
 80049d4:	425b      	negs	r3, r3
 80049d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049da:	486f      	ldr	r0, [pc, #444]	; (8004b98 <_printf_i+0x21c>)
 80049dc:	220a      	movs	r2, #10
 80049de:	e039      	b.n	8004a54 <_printf_i+0xd8>
 80049e0:	2973      	cmp	r1, #115	; 0x73
 80049e2:	f000 809d 	beq.w	8004b20 <_printf_i+0x1a4>
 80049e6:	d808      	bhi.n	80049fa <_printf_i+0x7e>
 80049e8:	296f      	cmp	r1, #111	; 0x6f
 80049ea:	d020      	beq.n	8004a2e <_printf_i+0xb2>
 80049ec:	2970      	cmp	r1, #112	; 0x70
 80049ee:	d1dd      	bne.n	80049ac <_printf_i+0x30>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	f043 0320 	orr.w	r3, r3, #32
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	e003      	b.n	8004a02 <_printf_i+0x86>
 80049fa:	2975      	cmp	r1, #117	; 0x75
 80049fc:	d017      	beq.n	8004a2e <_printf_i+0xb2>
 80049fe:	2978      	cmp	r1, #120	; 0x78
 8004a00:	d1d4      	bne.n	80049ac <_printf_i+0x30>
 8004a02:	2378      	movs	r3, #120	; 0x78
 8004a04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a08:	4864      	ldr	r0, [pc, #400]	; (8004b9c <_printf_i+0x220>)
 8004a0a:	e055      	b.n	8004ab8 <_printf_i+0x13c>
 8004a0c:	6813      	ldr	r3, [r2, #0]
 8004a0e:	1d19      	adds	r1, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6011      	str	r1, [r2, #0]
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e08c      	b.n	8004b3a <_printf_i+0x1be>
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6011      	str	r1, [r2, #0]
 8004a24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a28:	bf18      	it	ne
 8004a2a:	b21b      	sxthne	r3, r3
 8004a2c:	e7cf      	b.n	80049ce <_printf_i+0x52>
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	6825      	ldr	r5, [r4, #0]
 8004a32:	1d18      	adds	r0, r3, #4
 8004a34:	6010      	str	r0, [r2, #0]
 8004a36:	0628      	lsls	r0, r5, #24
 8004a38:	d501      	bpl.n	8004a3e <_printf_i+0xc2>
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	e002      	b.n	8004a44 <_printf_i+0xc8>
 8004a3e:	0668      	lsls	r0, r5, #25
 8004a40:	d5fb      	bpl.n	8004a3a <_printf_i+0xbe>
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	4854      	ldr	r0, [pc, #336]	; (8004b98 <_printf_i+0x21c>)
 8004a46:	296f      	cmp	r1, #111	; 0x6f
 8004a48:	bf14      	ite	ne
 8004a4a:	220a      	movne	r2, #10
 8004a4c:	2208      	moveq	r2, #8
 8004a4e:	2100      	movs	r1, #0
 8004a50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a54:	6865      	ldr	r5, [r4, #4]
 8004a56:	60a5      	str	r5, [r4, #8]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	f2c0 8095 	blt.w	8004b88 <_printf_i+0x20c>
 8004a5e:	6821      	ldr	r1, [r4, #0]
 8004a60:	f021 0104 	bic.w	r1, r1, #4
 8004a64:	6021      	str	r1, [r4, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d13d      	bne.n	8004ae6 <_printf_i+0x16a>
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	f040 808e 	bne.w	8004b8c <_printf_i+0x210>
 8004a70:	4665      	mov	r5, ip
 8004a72:	2a08      	cmp	r2, #8
 8004a74:	d10b      	bne.n	8004a8e <_printf_i+0x112>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	07db      	lsls	r3, r3, #31
 8004a7a:	d508      	bpl.n	8004a8e <_printf_i+0x112>
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	bfde      	ittt	le
 8004a84:	2330      	movle	r3, #48	; 0x30
 8004a86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a8e:	ebac 0305 	sub.w	r3, ip, r5
 8004a92:	6123      	str	r3, [r4, #16]
 8004a94:	f8cd 8000 	str.w	r8, [sp]
 8004a98:	463b      	mov	r3, r7
 8004a9a:	aa03      	add	r2, sp, #12
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff fef6 	bl	8004890 <_printf_common>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d14d      	bne.n	8004b44 <_printf_i+0x1c8>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	b005      	add	sp, #20
 8004aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ab2:	4839      	ldr	r0, [pc, #228]	; (8004b98 <_printf_i+0x21c>)
 8004ab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ab8:	6813      	ldr	r3, [r2, #0]
 8004aba:	6821      	ldr	r1, [r4, #0]
 8004abc:	1d1d      	adds	r5, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6015      	str	r5, [r2, #0]
 8004ac2:	060a      	lsls	r2, r1, #24
 8004ac4:	d50b      	bpl.n	8004ade <_printf_i+0x162>
 8004ac6:	07ca      	lsls	r2, r1, #31
 8004ac8:	bf44      	itt	mi
 8004aca:	f041 0120 	orrmi.w	r1, r1, #32
 8004ace:	6021      	strmi	r1, [r4, #0]
 8004ad0:	b91b      	cbnz	r3, 8004ada <_printf_i+0x15e>
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	f022 0220 	bic.w	r2, r2, #32
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	e7b7      	b.n	8004a4e <_printf_i+0xd2>
 8004ade:	064d      	lsls	r5, r1, #25
 8004ae0:	bf48      	it	mi
 8004ae2:	b29b      	uxthmi	r3, r3
 8004ae4:	e7ef      	b.n	8004ac6 <_printf_i+0x14a>
 8004ae6:	4665      	mov	r5, ip
 8004ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aec:	fb02 3311 	mls	r3, r2, r1, r3
 8004af0:	5cc3      	ldrb	r3, [r0, r3]
 8004af2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004af6:	460b      	mov	r3, r1
 8004af8:	2900      	cmp	r1, #0
 8004afa:	d1f5      	bne.n	8004ae8 <_printf_i+0x16c>
 8004afc:	e7b9      	b.n	8004a72 <_printf_i+0xf6>
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	6961      	ldr	r1, [r4, #20]
 8004b04:	1d18      	adds	r0, r3, #4
 8004b06:	6010      	str	r0, [r2, #0]
 8004b08:	0628      	lsls	r0, r5, #24
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	d501      	bpl.n	8004b12 <_printf_i+0x196>
 8004b0e:	6019      	str	r1, [r3, #0]
 8004b10:	e002      	b.n	8004b18 <_printf_i+0x19c>
 8004b12:	066a      	lsls	r2, r5, #25
 8004b14:	d5fb      	bpl.n	8004b0e <_printf_i+0x192>
 8004b16:	8019      	strh	r1, [r3, #0]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	4665      	mov	r5, ip
 8004b1e:	e7b9      	b.n	8004a94 <_printf_i+0x118>
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	1d19      	adds	r1, r3, #4
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	681d      	ldr	r5, [r3, #0]
 8004b28:	6862      	ldr	r2, [r4, #4]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f7fb fb5f 	bl	80001f0 <memchr>
 8004b32:	b108      	cbz	r0, 8004b38 <_printf_i+0x1bc>
 8004b34:	1b40      	subs	r0, r0, r5
 8004b36:	6060      	str	r0, [r4, #4]
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b42:	e7a7      	b.n	8004a94 <_printf_i+0x118>
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	462a      	mov	r2, r5
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d0aa      	beq.n	8004aa8 <_printf_i+0x12c>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	079b      	lsls	r3, r3, #30
 8004b56:	d413      	bmi.n	8004b80 <_printf_i+0x204>
 8004b58:	68e0      	ldr	r0, [r4, #12]
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	4298      	cmp	r0, r3
 8004b5e:	bfb8      	it	lt
 8004b60:	4618      	movlt	r0, r3
 8004b62:	e7a3      	b.n	8004aac <_printf_i+0x130>
 8004b64:	2301      	movs	r3, #1
 8004b66:	464a      	mov	r2, r9
 8004b68:	4639      	mov	r1, r7
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d09a      	beq.n	8004aa8 <_printf_i+0x12c>
 8004b72:	3501      	adds	r5, #1
 8004b74:	68e3      	ldr	r3, [r4, #12]
 8004b76:	9a03      	ldr	r2, [sp, #12]
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	42ab      	cmp	r3, r5
 8004b7c:	dcf2      	bgt.n	8004b64 <_printf_i+0x1e8>
 8004b7e:	e7eb      	b.n	8004b58 <_printf_i+0x1dc>
 8004b80:	2500      	movs	r5, #0
 8004b82:	f104 0919 	add.w	r9, r4, #25
 8004b86:	e7f5      	b.n	8004b74 <_printf_i+0x1f8>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ac      	bne.n	8004ae6 <_printf_i+0x16a>
 8004b8c:	7803      	ldrb	r3, [r0, #0]
 8004b8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b96:	e76c      	b.n	8004a72 <_printf_i+0xf6>
 8004b98:	08004e61 	.word	0x08004e61
 8004b9c:	08004e72 	.word	0x08004e72

08004ba0 <memcpy>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	1e43      	subs	r3, r0, #1
 8004ba4:	440a      	add	r2, r1
 8004ba6:	4291      	cmp	r1, r2
 8004ba8:	d100      	bne.n	8004bac <memcpy+0xc>
 8004baa:	bd10      	pop	{r4, pc}
 8004bac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb4:	e7f7      	b.n	8004ba6 <memcpy+0x6>

08004bb6 <memmove>:
 8004bb6:	4288      	cmp	r0, r1
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	eb01 0302 	add.w	r3, r1, r2
 8004bbe:	d807      	bhi.n	8004bd0 <memmove+0x1a>
 8004bc0:	1e42      	subs	r2, r0, #1
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d00a      	beq.n	8004bdc <memmove+0x26>
 8004bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bce:	e7f8      	b.n	8004bc2 <memmove+0xc>
 8004bd0:	4283      	cmp	r3, r0
 8004bd2:	d9f5      	bls.n	8004bc0 <memmove+0xa>
 8004bd4:	1881      	adds	r1, r0, r2
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	42d3      	cmn	r3, r2
 8004bda:	d100      	bne.n	8004bde <memmove+0x28>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004be2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004be6:	e7f7      	b.n	8004bd8 <memmove+0x22>

08004be8 <_free_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4605      	mov	r5, r0
 8004bec:	2900      	cmp	r1, #0
 8004bee:	d045      	beq.n	8004c7c <_free_r+0x94>
 8004bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bf4:	1f0c      	subs	r4, r1, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bfb8      	it	lt
 8004bfa:	18e4      	addlt	r4, r4, r3
 8004bfc:	f000 f8d2 	bl	8004da4 <__malloc_lock>
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <_free_r+0x98>)
 8004c02:	6813      	ldr	r3, [r2, #0]
 8004c04:	4610      	mov	r0, r2
 8004c06:	b933      	cbnz	r3, 8004c16 <_free_r+0x2e>
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	6014      	str	r4, [r2, #0]
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c12:	f000 b8c8 	b.w	8004da6 <__malloc_unlock>
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	d90c      	bls.n	8004c34 <_free_r+0x4c>
 8004c1a:	6821      	ldr	r1, [r4, #0]
 8004c1c:	1862      	adds	r2, r4, r1
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bf04      	itt	eq
 8004c22:	681a      	ldreq	r2, [r3, #0]
 8004c24:	685b      	ldreq	r3, [r3, #4]
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	bf04      	itt	eq
 8004c2a:	1852      	addeq	r2, r2, r1
 8004c2c:	6022      	streq	r2, [r4, #0]
 8004c2e:	6004      	str	r4, [r0, #0]
 8004c30:	e7ec      	b.n	8004c0c <_free_r+0x24>
 8004c32:	4613      	mov	r3, r2
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	b10a      	cbz	r2, 8004c3c <_free_r+0x54>
 8004c38:	42a2      	cmp	r2, r4
 8004c3a:	d9fa      	bls.n	8004c32 <_free_r+0x4a>
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	1858      	adds	r0, r3, r1
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d10b      	bne.n	8004c5c <_free_r+0x74>
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	4401      	add	r1, r0
 8004c48:	1858      	adds	r0, r3, r1
 8004c4a:	4282      	cmp	r2, r0
 8004c4c:	6019      	str	r1, [r3, #0]
 8004c4e:	d1dd      	bne.n	8004c0c <_free_r+0x24>
 8004c50:	6810      	ldr	r0, [r2, #0]
 8004c52:	6852      	ldr	r2, [r2, #4]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	4401      	add	r1, r0
 8004c58:	6019      	str	r1, [r3, #0]
 8004c5a:	e7d7      	b.n	8004c0c <_free_r+0x24>
 8004c5c:	d902      	bls.n	8004c64 <_free_r+0x7c>
 8004c5e:	230c      	movs	r3, #12
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	e7d3      	b.n	8004c0c <_free_r+0x24>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	1821      	adds	r1, r4, r0
 8004c68:	428a      	cmp	r2, r1
 8004c6a:	bf04      	itt	eq
 8004c6c:	6811      	ldreq	r1, [r2, #0]
 8004c6e:	6852      	ldreq	r2, [r2, #4]
 8004c70:	6062      	str	r2, [r4, #4]
 8004c72:	bf04      	itt	eq
 8004c74:	1809      	addeq	r1, r1, r0
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	605c      	str	r4, [r3, #4]
 8004c7a:	e7c7      	b.n	8004c0c <_free_r+0x24>
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	bf00      	nop
 8004c80:	200004cc 	.word	0x200004cc

08004c84 <_malloc_r>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	1ccd      	adds	r5, r1, #3
 8004c88:	f025 0503 	bic.w	r5, r5, #3
 8004c8c:	3508      	adds	r5, #8
 8004c8e:	2d0c      	cmp	r5, #12
 8004c90:	bf38      	it	cc
 8004c92:	250c      	movcc	r5, #12
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	4606      	mov	r6, r0
 8004c98:	db01      	blt.n	8004c9e <_malloc_r+0x1a>
 8004c9a:	42a9      	cmp	r1, r5
 8004c9c:	d903      	bls.n	8004ca6 <_malloc_r+0x22>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	6033      	str	r3, [r6, #0]
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	f000 f87d 	bl	8004da4 <__malloc_lock>
 8004caa:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <_malloc_r+0xac>)
 8004cac:	6814      	ldr	r4, [r2, #0]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	b991      	cbnz	r1, 8004cd8 <_malloc_r+0x54>
 8004cb2:	4c20      	ldr	r4, [pc, #128]	; (8004d34 <_malloc_r+0xb0>)
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	b91b      	cbnz	r3, 8004cc0 <_malloc_r+0x3c>
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f863 	bl	8004d84 <_sbrk_r>
 8004cbe:	6020      	str	r0, [r4, #0]
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 f85e 	bl	8004d84 <_sbrk_r>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d124      	bne.n	8004d16 <_malloc_r+0x92>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	6033      	str	r3, [r6, #0]
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 f868 	bl	8004da6 <__malloc_unlock>
 8004cd6:	e7e4      	b.n	8004ca2 <_malloc_r+0x1e>
 8004cd8:	680b      	ldr	r3, [r1, #0]
 8004cda:	1b5b      	subs	r3, r3, r5
 8004cdc:	d418      	bmi.n	8004d10 <_malloc_r+0x8c>
 8004cde:	2b0b      	cmp	r3, #11
 8004ce0:	d90f      	bls.n	8004d02 <_malloc_r+0x7e>
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	50cd      	str	r5, [r1, r3]
 8004ce6:	18cc      	adds	r4, r1, r3
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f85c 	bl	8004da6 <__malloc_unlock>
 8004cee:	f104 000b 	add.w	r0, r4, #11
 8004cf2:	1d23      	adds	r3, r4, #4
 8004cf4:	f020 0007 	bic.w	r0, r0, #7
 8004cf8:	1ac3      	subs	r3, r0, r3
 8004cfa:	d0d3      	beq.n	8004ca4 <_malloc_r+0x20>
 8004cfc:	425a      	negs	r2, r3
 8004cfe:	50e2      	str	r2, [r4, r3]
 8004d00:	e7d0      	b.n	8004ca4 <_malloc_r+0x20>
 8004d02:	428c      	cmp	r4, r1
 8004d04:	684b      	ldr	r3, [r1, #4]
 8004d06:	bf16      	itet	ne
 8004d08:	6063      	strne	r3, [r4, #4]
 8004d0a:	6013      	streq	r3, [r2, #0]
 8004d0c:	460c      	movne	r4, r1
 8004d0e:	e7eb      	b.n	8004ce8 <_malloc_r+0x64>
 8004d10:	460c      	mov	r4, r1
 8004d12:	6849      	ldr	r1, [r1, #4]
 8004d14:	e7cc      	b.n	8004cb0 <_malloc_r+0x2c>
 8004d16:	1cc4      	adds	r4, r0, #3
 8004d18:	f024 0403 	bic.w	r4, r4, #3
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d005      	beq.n	8004d2c <_malloc_r+0xa8>
 8004d20:	1a21      	subs	r1, r4, r0
 8004d22:	4630      	mov	r0, r6
 8004d24:	f000 f82e 	bl	8004d84 <_sbrk_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0cf      	beq.n	8004ccc <_malloc_r+0x48>
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	e7db      	b.n	8004ce8 <_malloc_r+0x64>
 8004d30:	200004cc 	.word	0x200004cc
 8004d34:	200004d0 	.word	0x200004d0

08004d38 <_realloc_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	460e      	mov	r6, r1
 8004d40:	b921      	cbnz	r1, 8004d4c <_realloc_r+0x14>
 8004d42:	4611      	mov	r1, r2
 8004d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d48:	f7ff bf9c 	b.w	8004c84 <_malloc_r>
 8004d4c:	b922      	cbnz	r2, 8004d58 <_realloc_r+0x20>
 8004d4e:	f7ff ff4b 	bl	8004be8 <_free_r>
 8004d52:	4625      	mov	r5, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d58:	f000 f826 	bl	8004da8 <_malloc_usable_size_r>
 8004d5c:	42a0      	cmp	r0, r4
 8004d5e:	d20f      	bcs.n	8004d80 <_realloc_r+0x48>
 8004d60:	4621      	mov	r1, r4
 8004d62:	4638      	mov	r0, r7
 8004d64:	f7ff ff8e 	bl	8004c84 <_malloc_r>
 8004d68:	4605      	mov	r5, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0f2      	beq.n	8004d54 <_realloc_r+0x1c>
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4622      	mov	r2, r4
 8004d72:	f7ff ff15 	bl	8004ba0 <memcpy>
 8004d76:	4631      	mov	r1, r6
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff ff35 	bl	8004be8 <_free_r>
 8004d7e:	e7e9      	b.n	8004d54 <_realloc_r+0x1c>
 8004d80:	4635      	mov	r5, r6
 8004d82:	e7e7      	b.n	8004d54 <_realloc_r+0x1c>

08004d84 <_sbrk_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4c06      	ldr	r4, [pc, #24]	; (8004da0 <_sbrk_r+0x1c>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	f7fc fb1a 	bl	80013c8 <_sbrk>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_sbrk_r+0x1a>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_sbrk_r+0x1a>
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	200005a4 	.word	0x200005a4

08004da4 <__malloc_lock>:
 8004da4:	4770      	bx	lr

08004da6 <__malloc_unlock>:
 8004da6:	4770      	bx	lr

08004da8 <_malloc_usable_size_r>:
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f18      	subs	r0, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbc      	itt	lt
 8004db2:	580b      	ldrlt	r3, [r1, r0]
 8004db4:	18c0      	addlt	r0, r0, r3
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
